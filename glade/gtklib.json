[
{
"name" : "gtk.AboutDialog",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/AboutDialog.d",
"members" : [
{
"name" : "AboutDialog",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkAboutDialog offers a simple way to display information about\n a program like its logo, name, copyright, website and license. It is\n also possible to give credits to the authors, documenters, translators\n and artists who have worked on the program. An about dialog is typically\n opened when the user selects the About option from\n the Help menu. All parts of the dialog are optional.\n About dialog often contain links and email addresses. GtkAboutDialog\n supports this by offering global hooks, which are called when the user\n clicks on a link or email address, see gtk_about_dialog_set_email_hook()\n and gtk_about_dialog_set_url_hook(). Email addresses in the\n authors, documenters and artists properties are recognized by looking for\n <user@host>, URLs are\n recognized by looking for http:\/\/url, with\n url extending to the next space, tab or line break.\n Since 2.18 GtkAboutDialog provides default website and email hooks that\n use gtk_show_uri().\n If you want provide your own hooks overriding the default ones, it is\n important to do so before setting the website and email URL properties,\n like this:\n $(DDOC_COMMENT example)\n To disable the default hooks, you can pass NULL as the hook func. Then,\n the GtkAboutDialog widget will not display the website or the\n email addresses as clickable.\n To make constructing a GtkAboutDialog as convenient as possible, you can\n use the function gtk_show_about_dialog() which constructs and shows a dialog\n and keeps it around so that it can be shown again.\n Note that GTK+ sets a default title of _(\"About %s\")\n on the dialog window (where %s is replaced by the name of the\n application, but in order to ensure proper translation of the title,\n applications should set the title property explicitly when constructing\n a GtkAboutDialog, as shown in the following example:\n $(DDOC_COMMENT example)\n Note that prior to GTK+ 2.12, the \"program-name\" property\n was called \"name\". This was changed to avoid the conflict with the\n \"name\" property.\n \n",
"line" : 116,
"base" : "Dialog",
"members" : [
{
"name" : "gtkAboutDialog",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkAboutDialog*",
"comment" : " the main Gtk struct \n",
"line" : 120}
,
{
"name" : "getAboutDialogStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkAboutDialog*()",
"line" : 123}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 130}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "AboutDialog(GtkAboutDialog* gtkAboutDialog)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 138}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 156}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 164}
,
{
"name" : "onActivateLinkListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(string, AboutDialog)[]",
"line" : 166}
,
{
"name" : "addOnActivateLink",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(string, AboutDialog) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The signal which gets emitted to activate a URI.\n Applications may connect to it to override the default behaviour,\n which is to call gtk_show_uri().\n TRUE if the link has been activated\n Since 2.24\n See Also\n GTK_STOCK_ABOUT\n\t \n",
"line" : 176}
,
{
"name" : "callBackActivateLink",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkAboutDialog* labelStruct, char* uri, AboutDialog aboutDialog)",
"line" : 191}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "AboutDialog()",
"comment" : "\n Creates a new GtkAboutDialog.\n Since 2.6\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 210}
,
{
"name" : "getName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Warning\n gtk_about_dialog_get_name has been deprecated since version 2.12 and should not be used in newly-written code. Use gtk_about_dialog_get_program_name() instead.\n Returns the program name displayed in the about dialog.\n Since 2.6\n Returns: The program name. The string is owned by the about dialog and must not be modified.\n\t \n",
"line" : 228}
,
{
"name" : "setName",
"kind" : "function",
"protection" : "public",
"type" : "void(string name)",
"comment" : "\n Warning\n gtk_about_dialog_set_name has been deprecated since version 2.12 and should not be used in newly-written code. Use gtk_about_dialog_set_program_name() instead.\n Sets the name to display in the about dialog.\n If this is not set, it defaults to g_get_application_name().\n Since 2.6\n Params:\n name = the program name. [allow-none]\n\t \n",
"line" : 243}
,
{
"name" : "getProgramName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns the program name displayed in the about dialog.\n Since 2.12\n Returns: The program name. The string is owned by the about dialog and must not be modified.\n\t \n",
"line" : 254}
,
{
"name" : "setProgramName",
"kind" : "function",
"protection" : "public",
"type" : "void(string name)",
"comment" : "\n Sets the name to display in the about dialog.\n If this is not set, it defaults to g_get_application_name().\n Since 2.12\n Params:\n name = the program name\n\t \n",
"line" : 267}
,
{
"name" : "getVersion",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns the version string.\n Since 2.6\n Returns: The version string. The string is owned by the about dialog and must not be modified.\n\t \n",
"line" : 278}
,
{
"name" : "setVersion",
"kind" : "function",
"protection" : "public",
"type" : "void(string versio)",
"comment" : "\n Sets the version string to display in the about dialog.\n Since 2.6\n\t \n",
"line" : 288}
,
{
"name" : "getCopyright",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns the copyright string.\n Since 2.6\n Returns: The copyright string. The string is owned by the about dialog and must not be modified.\n\t \n",
"line" : 299}
,
{
"name" : "setCopyright",
"kind" : "function",
"protection" : "public",
"type" : "void(string copyright)",
"comment" : "\n Sets the copyright string to display in the about dialog.\n This should be a short string of one or two lines.\n Since 2.6\n Params:\n copyright = (allow-none) the copyright string\n\t \n",
"line" : 312}
,
{
"name" : "getComments",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns the comments string.\n Since 2.6\n Returns: The comments. The string is owned by the about dialog and must not be modified.\n\t \n",
"line" : 323}
,
{
"name" : "setComments",
"kind" : "function",
"protection" : "public",
"type" : "void(string comments)",
"comment" : "\n Sets the comments string to display in the about dialog.\n This should be a short string of one or two lines.\n Since 2.6\n Params:\n comments = a comments string. [allow-none]\n\t \n",
"line" : 336}
,
{
"name" : "getLicense",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns the license information.\n Since 2.6\n Returns: The license information. The string is owned by the about dialog and must not be modified.\n\t \n",
"line" : 347}
,
{
"name" : "setLicense",
"kind" : "function",
"protection" : "public",
"type" : "void(string license)",
"comment" : "\n Sets the license information to be displayed in the secondary\n license dialog. If license is NULL, the license button is\n hidden.\n Since 2.6\n Params:\n license = the license information or NULL. [allow-none]\n\t \n",
"line" : 361}
,
{
"name" : "getWrapLicense",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the license text in about is\n automatically wrapped.\n Since 2.8\n Returns: TRUE if the license text is wrapped\n\t \n",
"line" : 373}
,
{
"name" : "setWrapLicense",
"kind" : "function",
"protection" : "public",
"type" : "void(int wrapLicense)",
"comment" : "\n Sets whether the license text in about is\n automatically wrapped.\n Since 2.8\n Params:\n wrapLicense = whether to wrap the license\n\t \n",
"line" : 386}
,
{
"name" : "getWebsite",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns the website URL.\n Since 2.6\n Returns: The website URL. The string is owned by the about dialog and must not be modified.\n\t \n",
"line" : 397}
,
{
"name" : "setWebsite",
"kind" : "function",
"protection" : "public",
"type" : "void(string website)",
"comment" : "\n Sets the URL to use for the website link.\n Note that that the hook functions need to be set up\n before calling this function.\n Since 2.6\n Params:\n website = a URL string starting with \"http:\/\/\". [allow-none]\n\t \n",
"line" : 411}
,
{
"name" : "getWebsiteLabel",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns the label used for the website link.\n Since 2.6\n Returns: The label used for the website link. The string is owned by the about dialog and must not be modified.\n\t \n",
"line" : 422}
,
{
"name" : "setWebsiteLabel",
"kind" : "function",
"protection" : "public",
"type" : "void(string websiteLabel)",
"comment" : "\n Sets the label to be used for the website link.\n It defaults to the website URL.\n Since 2.6\n Params:\n websiteLabel = the label used for the website link\n\t \n",
"line" : 435}
,
{
"name" : "getAuthors",
"kind" : "function",
"protection" : "public",
"type" : "string[]()",
"comment" : "\n Returns the string which are displayed in the authors tab\n of the secondary credits dialog.\n Since 2.6\n Returns: A NULL-terminated string array containing the authors. The array is owned by the about dialog and must not be modified. [array zero-terminated=1][transfer none]\n\t \n",
"line" : 447}
,
{
"name" : "setAuthors",
"kind" : "function",
"protection" : "public",
"type" : "void(string[] authors)",
"comment" : "\n Sets the strings which are displayed in the authors tab\n of the secondary credits dialog.\n Since 2.6\n Params:\n authors = a NULL-terminated array of strings\n\t \n",
"line" : 460}
,
{
"name" : "getArtists",
"kind" : "function",
"protection" : "public",
"type" : "string[]()",
"comment" : "\n Returns the string which are displayed in the artists tab\n of the secondary credits dialog.\n Since 2.6\n Returns: A NULL-terminated string array containing the artists. The array is owned by the about dialog and must not be modified. [array zero-terminated=1][transfer none]\n\t \n",
"line" : 472}
,
{
"name" : "setArtists",
"kind" : "function",
"protection" : "public",
"type" : "void(string[] artists)",
"comment" : "\n Sets the strings which are displayed in the artists tab\n of the secondary credits dialog.\n Since 2.6\n Params:\n artists = a NULL-terminated array of strings\n\t \n",
"line" : 485}
,
{
"name" : "getDocumenters",
"kind" : "function",
"protection" : "public",
"type" : "string[]()",
"comment" : "\n Returns the string which are displayed in the documenters\n tab of the secondary credits dialog.\n Since 2.6\n Returns: A NULL-terminated string array containing the documenters. The array is owned by the about dialog and must not be modified. [array zero-terminated=1][transfer none]\n\t \n",
"line" : 497}
,
{
"name" : "setDocumenters",
"kind" : "function",
"protection" : "public",
"type" : "void(string[] documenters)",
"comment" : "\n Sets the strings which are displayed in the documenters tab\n of the secondary credits dialog.\n Since 2.6\n Params:\n documenters = a NULL-terminated array of strings\n\t \n",
"line" : 510}
,
{
"name" : "getTranslatorCredits",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns the translator credits string which is displayed\n in the translators tab of the secondary credits dialog.\n Since 2.6\n Returns: The translator credits string. The string is owned by the about dialog and must not be modified.\n\t \n",
"line" : 522}
,
{
"name" : "setTranslatorCredits",
"kind" : "function",
"protection" : "public",
"type" : "void(string translatorCredits)",
"comment" : "\n Sets the translator credits string which is displayed in\n the translators tab of the secondary credits dialog.\n The intended use for this string is to display the translator\n of the language which is currently used in the user interface.\n Using gettext(), a simple way to achieve that is to mark the\n Since 2.6\n Params:\n translatorCredits = the translator credits. [allow-none]\n\t \n",
"line" : 538}
,
{
"name" : "getLogo",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf()",
"comment" : "\n Returns the pixbuf displayed as logo in the about dialog.\n Since 2.6\n Returns: the pixbuf displayed as logo. The pixbuf is owned by the about dialog. If you want to keep a reference to it, you have to call g_object_ref() on it. [transfer none]\n\t \n",
"line" : 549}
,
{
"name" : "setLogo",
"kind" : "function",
"protection" : "public",
"type" : "void(Pixbuf logo)",
"comment" : "\n Sets the pixbuf to be displayed as logo in the about dialog.\n If it is NULL, the default window icon set with\n gtk_window_set_default_icon() will be used.\n Since 2.6\n Params:\n logo = a GdkPixbuf, or NULL. [allow-none]\n\t \n",
"line" : 568}
,
{
"name" : "getLogoIconName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns the icon name displayed as logo in the about dialog.\n Since 2.6\n Returns: the icon name displayed as logo. The string is owned by the dialog. If you want to keep a reference to it, you have to call g_strdup() on it.\n\t \n",
"line" : 579}
,
{
"name" : "setLogoIconName",
"kind" : "function",
"protection" : "public",
"type" : "void(string iconName)",
"comment" : "\n Sets the pixbuf to be displayed as logo in the about dialog.\n If it is NULL, the default window icon set with\n gtk_window_set_default_icon() will be used.\n Since 2.6\n Params:\n iconName = an icon name, or NULL. [allow-none]\n\t \n",
"line" : 593}
,
{
"name" : "setEmailHook",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void function(GtkAboutDialog*, char*, void*)(extern (C) void function(GtkAboutDialog*, char*, void*) func, void* data, extern (C) void function(void* cbData) destroy)",
"comment" : "\n Warning\n gtk_about_dialog_set_email_hook has been deprecated since version 2.24 and should not be used in newly-written code. Use the \"activate-link\" signal\n Installs a global function to be called whenever the user activates an\n email link in an about dialog.\n Since 2.18 there exists a default function which uses gtk_show_uri(). To\n deactivate it, you can pass NULL for func.\n Since 2.6\n Params:\n func = a function to call when an email link is activated.\n data = data to pass to func\n destroy = GDestroyNotify for data\n Returns: the previous email hook.\n\t \n",
"line" : 613}
,
{
"name" : "setUrlHook",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void function(GtkAboutDialog*, char*, void*)(extern (C) void function(GtkAboutDialog*, char*, void*) func, void* data, extern (C) void function(void* cbData) destroy)",
"comment" : "\n Warning\n gtk_about_dialog_set_url_hook has been deprecated since version 2.24 and should not be used in newly-written code. Use the \"activate-link\" signal\n Installs a global function to be called whenever the user activates a\n URL link in an about dialog.\n Since 2.18 there exists a default function which uses gtk_show_uri(). To\n deactivate it, you can pass NULL for func.\n Since 2.6\n Params:\n func = a function to call when a URL link is activated.\n data = data to pass to func\n destroy = GDestroyNotify for data\n Returns: the previous URL hook.\n\t \n",
"line" : 633}
]
}
]
}
,
{
"name" : "gtk.AccelGroup",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/AccelGroup.d",
"members" : [
{
"name" : "AccelGroup",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkAccelGroup represents a group of keyboard accelerators,\n typically attached to a toplevel GtkWindow (with\n gtk_window_add_accel_group()). Usually you won't need to create a\n GtkAccelGroup directly; instead, when using GtkItemFactory, GTK+\n automatically sets up the accelerators for your menus in the item\n factory's GtkAccelGroup.\n Note that accelerators are different from\n mnemonics. Accelerators are shortcuts for\n activating a menu item; they appear alongside the menu item they're a\n shortcut for. For example \"Ctrl+Q\" might appear alongside the \"Quit\"\n menu item. Mnemonics are shortcuts for GUI elements such as text\n entries or buttons; they appear as underlined characters. See\n gtk_label_new_with_mnemonic(). Menu items can have both accelerators\n and mnemonics, of course.\n \n",
"line" : 99,
"base" : "ObjectG",
"members" : [
{
"name" : "gtkAccelGroup",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkAccelGroup*",
"comment" : " the main Gtk struct \n",
"line" : 103}
,
{
"name" : "getAccelGroupStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkAccelGroup*()",
"line" : 106}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 113}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "AccelGroup(GtkAccelGroup* gtkAccelGroup)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 121}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 139}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 147}
,
{
"name" : "onAccelActivateListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(ObjectG, uint, GdkModifierType, AccelGroup)[]",
"line" : 149}
,
{
"name" : "addOnAccelActivate",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(ObjectG, uint, GdkModifierType, AccelGroup) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The accel-activate signal is an implementation detail of\n GtkAccelGroup and not meant to be used by applications.\n TRUE if the accelerator was activated\n\t \n",
"line" : 155}
,
{
"name" : "callBackAccelActivate",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkAccelGroup* accelGroupStruct, GObject* acceleratable, uint keyval, GdkModifierType modifier, AccelGroup accelGroup)",
"line" : 170}
,
{
"name" : "onAccelChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(uint, GdkModifierType, Closure, AccelGroup)[]",
"line" : 183}
,
{
"name" : "addOnAccelChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(uint, GdkModifierType, Closure, AccelGroup) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The accel-changed signal is emitted when a GtkAccelGroupEntry\n is added to or removed from the accel group.\n Widgets like GtkAccelLabel which display an associated\n accelerator should connect to this signal, and rebuild\n their visual representation if the accel_closure is theirs.\n See Also\n gtk_window_add_accel_group(), gtk_accel_map_change_entry(),\n gtk_item_factory_new(), gtk_label_new_with_mnemonic()\n\t \n",
"line" : 194}
,
{
"name" : "callBackAccelChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkAccelGroup* accelGroupStruct, uint keyval, GdkModifierType modifier, GClosure* accelClosure, AccelGroup accelGroup)",
"line" : 209}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "AccelGroup()",
"comment" : "\n Creates a new GtkAccelGroup.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 222}
,
{
"name" : "connect",
"kind" : "function",
"protection" : "public",
"type" : "void(uint accelKey, GdkModifierType accelMods, GtkAccelFlags accelFlags, Closure closure)",
"comment" : "\n Installs an accelerator in this group. When accel_group is being activated\n in response to a call to gtk_accel_groups_activate(), closure will be\n invoked if the accel_key and accel_mods from gtk_accel_groups_activate()\n match those of this connection.\n The signature used for the closure is that of GtkAccelGroupActivate.\n Note that, due to implementation details, a single closure can only be\n connected to one accelerator group.\n Params:\n accelKey = key value of the accelerator\n accelMods = modifier combination of the accelerator\n accelFlags = a flag mask to configure this accelerator\n closure = closure to be executed upon accelerator activation\n\t \n",
"line" : 247}
,
{
"name" : "connectByPath",
"kind" : "function",
"protection" : "public",
"type" : "void(string accelPath, Closure closure)",
"comment" : "\n Installs an accelerator in this group, using an accelerator path to look\n up the appropriate key and modifiers (see gtk_accel_map_add_entry()).\n When accel_group is being activated in response to a call to\n gtk_accel_groups_activate(), closure will be invoked if the accel_key and\n accel_mods from gtk_accel_groups_activate() match the key and modifiers\n for the path.\n The signature used for the closure is that of GtkAccelGroupActivate.\n Note that accel_path string will be stored in a GQuark. Therefore, if you\n pass a static string, you can save some memory by interning it first with\n g_intern_static_string().\n Params:\n accelPath = path used for determining key and modifiers.\n closure = closure to be executed upon accelerator activation\n\t \n",
"line" : 268}
,
{
"name" : "disconnect",
"kind" : "function",
"protection" : "public",
"type" : "int(Closure closure)",
"comment" : "\n Removes an accelerator previously installed through\n gtk_accel_group_connect().\n Since 2.20 closure can be NULL.\n Params:\n closure = the closure to remove from this accelerator group, or NULL\n to remove all closures. [allow-none]\n Returns: TRUE if the closure was found and got disconnected\n\t \n",
"line" : 283}
,
{
"name" : "disconnectKey",
"kind" : "function",
"protection" : "public",
"type" : "int(uint accelKey, GdkModifierType accelMods)",
"comment" : "\n Removes an accelerator previously installed through\n gtk_accel_group_connect().\n Params:\n accelKey = key value of the accelerator\n accelMods = modifier combination of the accelerator\n Returns: TRUE if there was an accelerator which could be removed, FALSE otherwise\n\t \n",
"line" : 297}
,
{
"name" : "query",
"kind" : "function",
"protection" : "public",
"type" : "void[](uint accelKey, GdkModifierType accelMods)",
"comment" : "\n Queries an accelerator group for all entries matching accel_key and\n accel_mods.\n Params:\n accelKey = key value of the accelerator\n accelMods = modifier combination of the accelerator\n Returns: an array of n_entries GtkAccelGroupEntry elements, or NULL. The array is owned by GTK+ and must not be freed. [allow-none]\n\t \n",
"line" : 311}
,
{
"name" : "activate",
"kind" : "function",
"protection" : "public",
"type" : "int(uint accelQuark, ObjectG acceleratable, uint accelKey, GdkModifierType accelMods)",
"comment" : "\n Finds the first accelerator in accel_group\n that matches accel_key and accel_mods, and\n activates it.\n Params:\n accelQuark = the quark for the accelerator name\n acceleratable = the GObject, usually a GtkWindow, on which\n to activate the accelerator.\n accelKey = accelerator keyval from a key event\n accelMods = keyboard state mask from a key event\n Returns: TRUE if an accelerator was activated and handled this keypress\n\t \n",
"line" : 331}
,
{
"name" : "lock",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Locks the given accelerator group.\n Locking an acelerator group prevents the accelerators contained\n within it to be changed during runtime. Refer to\n gtk_accel_map_change_entry() about runtime accelerator changes.\n If called more than once, accel_group remains locked until\n gtk_accel_group_unlock() has been called an equivalent number\n of times.\n\t \n",
"line" : 346}
,
{
"name" : "unlock",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Undoes the last call to gtk_accel_group_lock() on this accel_group.\n\t \n",
"line" : 355}
,
{
"name" : "getIsLocked",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Locks are added and removed using gtk_accel_group_lock() and\n gtk_accel_group_unlock().\n Since 2.14\n Returns: TRUE if there are 1 or more locks on the accel_group, FALSE otherwise.\n\t \n",
"line" : 367}
,
{
"name" : "fromAccelClosure",
"kind" : "function",
"protection" : "public",
"type" : "AccelGroup(Closure closure)",
"comment" : "\n Finds the GtkAccelGroup to which closure is connected;\n see gtk_accel_group_connect().\n Params:\n closure = a GClosure\n Returns: the GtkAccelGroup to which closure is connected, or NULL. [transfer none]\n\t \n",
"line" : 380}
,
{
"name" : "getModifierMask",
"kind" : "function",
"protection" : "public",
"type" : "GdkModifierType()",
"comment" : "\n Gets a GdkModifierType representing the mask for this\n accel_group. For example, GDK_CONTROL_MASK, GDK_SHIFT_MASK, etc.\n Since 2.14\n Returns: the modifier mask for this accel group.\n\t \n",
"line" : 397}
,
{
"name" : "accelGroupsActivate",
"kind" : "function",
"protection" : "public",
"type" : "int(ObjectG object, uint accelKey, GdkModifierType accelMods)",
"comment" : "\n Finds the first accelerator in any GtkAccelGroup attached\n to object that matches accel_key and accel_mods, and\n activates that accelerator.\n Params:\n object = the GObject, usually a GtkWindow, on which\n to activate the accelerator.\n accelKey = accelerator keyval from a key event\n accelMods = keyboard state mask from a key event\n Returns: TRUE if an accelerator was activated and handled this keypress\n\t \n",
"line" : 414}
,
{
"name" : "accelGroupsFromObject",
"kind" : "function",
"protection" : "public",
"type" : "ListSG(ObjectG object)",
"comment" : "\n Gets a list of all accel groups which are attached to object.\n Params:\n object = a GObject, usually a GtkWindow\n Returns: a list of all accel groups which are attached to object. [element-type GtkAccelGroup][transfer none]\n\t \n",
"line" : 426}
,
{
"name" : "find",
"kind" : "function",
"protection" : "public",
"type" : "GtkAccelKey*(extern (C) int function(GtkAccelKey*, GClosure*, void*) findFunc, void* data)",
"comment" : "\n Finds the first entry in an accelerator group for which\n find_func returns TRUE and returns its GtkAccelKey.\n Params:\n findFunc = a function to filter the entries of accel_group with\n data = data to pass to find_func\n Returns: the key of the first entry passing find_func. The key is owned by GTK+ and must not be freed. [transfer none]\n\t \n",
"line" : 445}
,
{
"name" : "acceleratorValid",
"kind" : "function",
"protection" : "public",
"type" : "int(uint keyval, GdkModifierType modifiers)",
"comment" : "\n Determines whether a given keyval and modifier mask constitute\n a valid keyboard accelerator. For example, the GDK_a keyval\n plus GDK_CONTROL_MASK is valid - this is a \"Ctrl+a\" accelerator.\n But, you can't, for instance, use the GDK_Control_L keyval\n as an accelerator.\n Params:\n keyval = a GDK keyval\n modifiers = modifier mask\n Returns: TRUE if the accelerator is valid\n\t \n",
"line" : 462}
,
{
"name" : "acceleratorParse",
"kind" : "function",
"protection" : "public",
"type" : "void(string accelerator, out uint acceleratorKey, out GdkModifierType acceleratorMods)",
"comment" : "\n Parses a string representing an accelerator. The\n format looks like \"<Control>a\" or \"<Shift><Alt>F1\" or\n \"<Release>z\" (the last one is for key release).\n The parser is fairly liberal and allows lower or upper case,\n and also abbreviations such as \"<Ctl>\" and \"<Ctrl>\".\n Key names are parsed using gdk_keyval_from_name(). For character keys the\n name is not the symbol, but the lowercase name, e.g. one would use\n \"<Ctrl>minus\" instead of \"<Ctrl>-\".\n If the parse fails, accelerator_key and accelerator_mods will\n be set to 0 (zero).\n Params:\n accelerator = string representing an accelerator\n acceleratorKey = return location for accelerator keyval. [out][allow-none]\n acceleratorMods = return location for accelerator modifier mask. [out][allow-none]\n\t \n",
"line" : 484}
,
{
"name" : "acceleratorName",
"kind" : "function",
"protection" : "public",
"type" : "string(uint acceleratorKey, GdkModifierType acceleratorMods)",
"comment" : "\n Converts an accelerator keyval and modifier mask\n into a string parseable by gtk_accelerator_parse().\n For example, if you pass in GDK_q and GDK_CONTROL_MASK,\n this function returns \"<Control>q\".\n If you need to display accelerators in the user interface,\n see gtk_accelerator_get_label().\n Params:\n acceleratorKey = accelerator keyval\n acceleratorMods = accelerator modifier mask\n Returns: a newly-allocated accelerator name\n\t \n",
"line" : 502}
,
{
"name" : "acceleratorGetLabel",
"kind" : "function",
"protection" : "public",
"type" : "string(uint acceleratorKey, GdkModifierType acceleratorMods)",
"comment" : "\n Converts an accelerator keyval and modifier mask into a string\n which can be used to represent the accelerator to the user.\n Since 2.6\n Params:\n acceleratorKey = accelerator keyval\n acceleratorMods = accelerator modifier mask\n Returns: a newly-allocated string representing the accelerator.\n\t \n",
"line" : 517}
,
{
"name" : "acceleratorSetDefaultModMask",
"kind" : "function",
"protection" : "public",
"type" : "void(GdkModifierType defaultModMask)",
"comment" : "\n Sets the modifiers that will be considered significant for keyboard\n accelerators. The default mod mask is GDK_CONTROL_MASK |\n GDK_SHIFT_MASK | GDK_MOD1_MASK | GDK_SUPER_MASK |\n GDK_HYPER_MASK | GDK_META_MASK, that is, Control, Shift, Alt,\n Super, Hyper and Meta. Other modifiers will by default be ignored\n by GtkAccelGroup.\n You must include at least the three modifiers Control, Shift\n and Alt in any value you pass to this function.\n The default mod mask should be changed on application startup,\n before using any accelerator groups.\n Params:\n defaultModMask = accelerator modifier mask\n\t \n",
"line" : 537}
,
{
"name" : "acceleratorGetDefaultModMask",
"kind" : "function",
"protection" : "public",
"type" : "uint()",
"comment" : "\n Gets the value set by gtk_accelerator_set_default_mod_mask().\n Returns: the default accelerator modifier mask\n\t \n",
"line" : 547}
]
}
]
}
,
{
"name" : "gtk.AccelLabel",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/AccelLabel.d",
"members" : [
{
"name" : "AccelLabel",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkAccelLabel widget is a subclass of GtkLabel that also displays an\n accelerator key on the right of the label text, e.g. 'Ctl+S'.\n It is commonly used in menus to show the keyboard short-cuts for commands.\n The accelerator key to display is not set explicitly.\n Instead, the GtkAccelLabel displays the accelerators which have been added to\n a particular widget. This widget is set by calling\n gtk_accel_label_set_accel_widget().\n For example, a GtkMenuItem widget may have an accelerator added to emit the\n \"activate\" signal when the 'Ctl+S' key combination is pressed.\n A GtkAccelLabel is created and added to the GtkMenuItem, and\n gtk_accel_label_set_accel_widget() is called with the GtkMenuItem as the\n second argument. The GtkAccelLabel will now display 'Ctl+S' after its label.\n Note that creating a GtkMenuItem with gtk_menu_item_new_with_label() (or\n one of the similar functions for GtkCheckMenuItem and GtkRadioMenuItem)\n automatically adds a GtkAccelLabel to the GtkMenuItem and calls\n gtk_accel_label_set_accel_widget() to set it up for you.\n A GtkAccelLabel will only display accelerators which have GTK_ACCEL_VISIBLE\n set (see GtkAccelFlags).\n A GtkAccelLabel can display multiple accelerators and even signal names,\n though it is almost always used to display just one accelerator key.\n $(DDOC_COMMENT example)\n \n",
"line" : 104,
"base" : "Label",
"members" : [
{
"name" : "gtkAccelLabel",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkAccelLabel*",
"comment" : " the main Gtk struct \n",
"line" : 108}
,
{
"name" : "getAccelLabelStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkAccelLabel*()",
"line" : 111}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 118}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "AccelLabel(GtkAccelLabel* gtkAccelLabel)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 126}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 144}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "AccelLabel(string string)",
"comment" : "\n\t \n\n Creates a new GtkAccelLabel.\n Params:\n string = the label string. Must be non-NULL.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 159}
,
{
"name" : "setAccelClosure",
"kind" : "function",
"protection" : "public",
"type" : "void(Closure accelClosure)",
"comment" : "\n Sets the closure to be monitored by this accelerator label. The closure\n must be connected to an accelerator group; see gtk_accel_group_connect().\n Params:\n accelClosure = the closure to monitor for accelerator changes.\n\t \n",
"line" : 176}
,
{
"name" : "getAccelWidget",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Fetches the widget monitored by this accelerator label. See\n gtk_accel_label_set_accel_widget().\n Returns: the object monitored by the accelerator label, or NULL. [transfer none]\n\t \n",
"line" : 187}
,
{
"name" : "setAccelWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget accelWidget)",
"comment" : "\n Sets the widget to be monitored by this accelerator label.\n Params:\n accelWidget = the widget to be monitored.\n\t \n",
"line" : 203}
,
{
"name" : "getAccelWidth",
"kind" : "function",
"protection" : "public",
"type" : "uint()",
"comment" : "\n Returns the width needed to display the accelerator key(s).\n This is used by menus to align all of the GtkMenuItem widgets, and shouldn't\n be needed by applications.\n Returns: the width needed to display the accelerator key(s).\n\t \n",
"line" : 215}
,
{
"name" : "refetch",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Recreates the string representing the accelerator keys.\n This should not be needed since the string is automatically updated whenever\n accelerators are added or removed from the associated widget.\n Returns: always returns FALSE.\n\t \n",
"line" : 227}
]
}
]
}
,
{
"name" : "gtk.AccelMap",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/AccelMap.d",
"members" : [
{
"name" : "AccelMap",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n \n",
"line" : 79,
"base" : "ObjectG",
"members" : [
{
"name" : "gtkAccelMap",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkAccelMap*",
"comment" : " the main Gtk struct \n",
"line" : 83}
,
{
"name" : "getAccelMapStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkAccelMap*()",
"line" : 86}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 93}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "AccelMap(GtkAccelMap* gtkAccelMap)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 101}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 119}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 127}
,
{
"name" : "onChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(string, uint, GdkModifierType, AccelMap)[]",
"line" : 129}
,
{
"name" : "addOnChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(string, uint, GdkModifierType, AccelMap) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Notifies of a change in the global accelerator map.\n The path is also used as the detail for the signal,\n so it is possible to connect to\n changed::accel_path.\n Since 2.4\n\t \n",
"line" : 137}
,
{
"name" : "callBackChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkAccelMap* objectStruct, char* accelPath, uint accelKey, GdkModifierType accelMods, AccelMap accelMap)",
"line" : 152}
,
{
"name" : "addEntry",
"kind" : "function",
"protection" : "public",
"type" : "void(string accelPath, uint accelKey, GdkModifierType accelMods)",
"comment" : "\n Registers a new accelerator with the global accelerator map.\n This function should only be called once per accel_path\n with the canonical accel_key and accel_mods for this path.\n To change the accelerator during runtime programatically, use\n gtk_accel_map_change_entry().\n The accelerator path must consist of \"<WINDOWTYPE>\/Category1\/Category2\/...\/Action\",\n where <WINDOWTYPE> should be a unique application-specific identifier, that\n corresponds to the kind of window the accelerator is being used in, e.g. \"Gimp-Image\",\n \"Abiword-Document\" or \"Gnumeric-Settings\".\n The Category1\/...\/Action portion is most appropriately chosen by the action the\n accelerator triggers, i.e. for accelerators on menu items, choose the item's menu path,\n e.g. \"File\/Save As\", \"Image\/View\/Zoom\" or \"Edit\/Select All\".\n Params:\n accelPath = valid accelerator path\n accelKey = the accelerator key\n accelMods = the accelerator modifiers\n\t \n",
"line" : 179}
,
{
"name" : "lookupEntry",
"kind" : "function",
"protection" : "public",
"type" : "int(string accelPath, out GtkAccelKey key)",
"comment" : "\n Looks up the accelerator entry for accel_path and fills in key.\n Params:\n accelPath = a valid accelerator path\n key = the accelerator key to be filled in (optional)\n Returns: TRUE if accel_path is known, FALSE otherwise\n\t \n",
"line" : 192}
,
{
"name" : "changeEntry",
"kind" : "function",
"protection" : "public",
"type" : "int(string accelPath, uint accelKey, GdkModifierType accelMods, int replace)",
"comment" : "\n Changes the accel_key and accel_mods currently associated with accel_path.\n Due to conflicts with other accelerators, a change may not always be possible,\n replace indicates whether other accelerators may be deleted to resolve such\n conflicts. A change will only occur if all conflicts could be resolved (which\n might not be the case if conflicting accelerators are locked). Successful\n changes are indicated by a TRUE return value.\n Note that accel_path string will be stored in a GQuark. Therefore, if you\n pass a static string, you can save some memory by interning it first with\n g_intern_static_string().\n Params:\n accelPath = a valid accelerator path\n accelKey = the new accelerator key\n accelMods = the new accelerator modifiers\n replace = TRUE if other accelerators may be deleted upon conflicts\n Returns: TRUE if the accelerator could be changed, FALSE otherwise\n\t \n",
"line" : 215}
,
{
"name" : "load",
"kind" : "function",
"protection" : "public",
"type" : "void(string fileName)",
"comment" : "\n Parses a file previously saved with gtk_accel_map_save() for\n accelerator specifications, and propagates them accordingly.\n Params:\n fileName = a file containing accelerator specifications,\n  in the GLib file name encoding\n\t \n",
"line" : 228}
,
{
"name" : "save",
"kind" : "function",
"protection" : "public",
"type" : "void(string fileName)",
"comment" : "\n Saves current accelerator specifications (accelerator path, key\n and modifiers) to file_name.\n The file is written in a format suitable to be read back in by\n gtk_accel_map_load().\n Params:\n fileName = the name of the file to contain accelerator specifications,\n  in the GLib file name encoding\n\t \n",
"line" : 243}
,
{
"name" : "foreac",
"kind" : "function",
"protection" : "public",
"type" : "void(void* data, extern (C) void function(void*, char*, uint, GdkModifierType, int) foreachFunc)",
"comment" : "\n Loops over the entries in the accelerator map whose accel path\n doesn't match any of the filters added with gtk_accel_map_add_filter(),\n and execute foreach_func on each. The signature of foreach_func is\n that of GtkAccelMapForeach, the changed parameter indicates whether\n this accelerator was changed during runtime (thus, would need\n saving during an accelerator map dump).\n Params:\n data = data to be passed into foreach_func\n foreachFunc = function to be executed for each accel map entry which\n  is not filtered out\n\t \n",
"line" : 261}
,
{
"name" : "loadFd",
"kind" : "function",
"protection" : "public",
"type" : "void(int fd)",
"comment" : "\n Filedescriptor variant of gtk_accel_map_load().\n Note that the file descriptor will not be closed by this function.\n Params:\n fd = a valid readable file descriptor\n\t \n",
"line" : 273}
,
{
"name" : "saveFd",
"kind" : "function",
"protection" : "public",
"type" : "void(int fd)",
"comment" : "\n Filedescriptor variant of gtk_accel_map_save().\n Note that the file descriptor will not be closed by this function.\n Params:\n fd = a valid writable file descriptor\n\t \n",
"line" : 285}
,
{
"name" : "loadScanner",
"kind" : "function",
"protection" : "public",
"type" : "void(ScannerG scanner)",
"comment" : "\n GScanner variant of gtk_accel_map_load().\n Params:\n scanner = a GScanner which has already been provided with an input file\n\t \n",
"line" : 296}
,
{
"name" : "addFilter",
"kind" : "function",
"protection" : "public",
"type" : "void(string filterPattern)",
"comment" : "\n Adds a filter to the global list of accel path filters.\n Accel map entries whose accel path matches one of the filters\n are skipped by gtk_accel_map_foreach().\n This function is intended for GTK+ modules that create their own\n menus, but don't want them to be saved into the applications accelerator\n map dump.\n Params:\n filterPattern = a pattern (see GPatternSpec)\n\t \n",
"line" : 312}
,
{
"name" : "foreachUnfiltered",
"kind" : "function",
"protection" : "public",
"type" : "void(void* data, extern (C) void function(void*, char*, uint, GdkModifierType, int) foreachFunc)",
"comment" : "\n Loops over all entries in the accelerator map, and execute\n foreach_func on each. The signature of foreach_func is that of\n GtkAccelMapForeach, the changed parameter indicates whether\n this accelerator was changed during runtime (thus, would need\n saving during an accelerator map dump).\n Params:\n data = data to be passed into foreach_func\n foreachFunc = function to be executed for each accel map entry\n\t \n",
"line" : 328}
,
{
"name" : "get",
"kind" : "function",
"protection" : "public",
"type" : "AccelMap()",
"comment" : "\n Gets the singleton global GtkAccelMap object. This object\n is useful only for notification of changes to the accelerator\n map via the ::changed signal; it isn't a parameter to the\n other accelerator map functions.\n Since 2.4\n Returns: the global GtkAccelMap object\n\t \n",
"line" : 342}
,
{
"name" : "lockPath",
"kind" : "function",
"protection" : "public",
"type" : "void(string accelPath)",
"comment" : "\n Locks the given accelerator path. If the accelerator map doesn't yet contain\n an entry for accel_path, a new one is created.\n Locking an accelerator path prevents its accelerator from being changed\n during runtime. A locked accelerator path can be unlocked by\n gtk_accel_map_unlock_path(). Refer to gtk_accel_map_change_entry()\n for information about runtime accelerator changes.\n If called more than once, accel_path remains locked until\n gtk_accel_map_unlock_path() has been called an equivalent number\n of times.\n Note that locking of individual accelerator paths is independent from\n locking the GtkAccelGroup containing them. For runtime accelerator\n changes to be possible both the accelerator path and its GtkAccelGroup\n have to be unlocked.\n Since 2.4\n Params:\n accelPath = a valid accelerator path\n\t \n",
"line" : 371}
,
{
"name" : "unlockPath",
"kind" : "function",
"protection" : "public",
"type" : "void(string accelPath)",
"comment" : "\n Undoes the last call to gtk_accel_map_lock_path() on this accel_path.\n Refer to gtk_accel_map_lock_path() for information about accelerator path locking.\n Since 2.4\n Signal Details\n The \"changed\" signal\n void user_function (GtkAccelMap *object,\n  gchar *accel_path,\n  guint accel_key,\n  GdkModifierType accel_mods,\n  gpointer user_data) : Run Last \/ Has Details\n Notifies of a change in the global accelerator map.\n The path is also used as the detail for the signal,\n so it is possible to connect to\n changed::accel_path.\n Since 2.4\n Params:\n accelPath = a valid accelerator path\n accelPath = the path of the accelerator that changed\n\t \n",
"line" : 397}
]
}
]
}
,
{
"name" : "gtk.Accessible",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Accessible.d",
"members" : [
{
"name" : "Accessible",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n \n",
"line" : 72,
"base" : "ObjectAtk",
"members" : [
{
"name" : "gtkAccessible",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkAccessible*",
"comment" : " the main Gtk struct \n",
"line" : 76}
,
{
"name" : "getAccessibleStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkAccessible*()",
"line" : 79}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 86}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Accessible(GtkAccessible* gtkAccessible)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 94}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 112}
,
{
"name" : "connectWidgetDestroyed",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n\t \n\n This function specifies the callback function to be called when the widget\n corresponding to a GtkAccessible is destroyed.\n\t \n",
"line" : 125}
,
{
"name" : "getWidget",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Gets the GtkWidget corresponding to the GtkAccessible. The returned widget\n does not have a reference added, so you do not need to unref it.\n Since 2.22\n Returns: pointer to the GtkWidget corresponding to the GtkAccessible, or NULL. [transfer none]\n\t \n",
"line" : 137}
,
{
"name" : "setWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget)",
"comment" : "\n Sets the GtkWidget corresponding to the GtkAccessible.\n Since 2.22\n Params:\n widget = a GtkWidget\n\t \n",
"line" : 154}
]
}
]
}
,
{
"name" : "gtk.Action",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Action.d",
"members" : [
{
"name" : "Action",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n Actions represent operations that the user can be perform, along with\n some information how it should be presented in the interface. Each action\n provides methods to create icons, menu items and toolbar items\n representing itself.\n As well as the callback that is called when the action gets activated,\n the following also gets associated with the action:\n a name (not translated, for path lookup)\n a label (translated, for display)\n an accelerator\n whether label indicates a stock id\n a tooltip (optional, translated)\n a toolbar label (optional, shorter than label)\n The action will also have some state information:\n visible (shown\/hidden)\n sensitive (enabled\/disabled)\n Apart from regular actions, there are toggle\n actions, which can be toggled between two states and radio actions, of which only one in a group\n can be in the \"active\" state. Other actions can be implemented as GtkAction\n subclasses.\n Each action can have one or more proxy menu item, toolbar button or\n other proxy widgets. Proxies mirror the state of the action (text\n label, tooltip, icon, visible, sensitive, etc), and should change when\n the action's state changes. When the proxy is activated, it should\n activate its action.\n \n",
"line" : 133,
"base" : "ObjectG",
"interfaces" : [
"BuildableIF"],
"members" : [
{
"name" : "gtkAction",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkAction*",
"comment" : " the main Gtk struct \n",
"line" : 137}
,
{
"name" : "getActionStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkAction*()",
"line" : 140}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 147}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Action(GtkAction* gtkAction)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 155}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 173}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Action(string name, string label, string tooltip, StockID stockId)",
"comment" : "\n Creates a new GtkAction object. To add the action to a\n GtkActionGroup and set the accelerator for the action,\n call gtk_action_group_add_action_with_accel().\n See the section called UI Definitions for information on allowed action\n names.\n Since 2.4\n Params:\n name =  A unique name for the action\n label =  the label displayed in menu items and on buttons, or NULL\n tooltip =  a tooltip for the action, or NULL\n stockId =  the stock icon to display in widgets representing the\n  action.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 197}
,
{
"name" : "getStockId",
"kind" : "function",
"protection" : "public",
"type" : "StockID()",
"comment" : "\n Gets the stock id of action.\n Since 2.16\n Returns: the stock id\n\t \n",
"line" : 207}
,
{
"name" : "setStockId",
"kind" : "function",
"protection" : "public",
"type" : "void(StockID stockId)",
"comment" : "\n Sets the stock id on action\n Since 2.16\n Params:\n stockId =  the stock id\n\t \n",
"line" : 227}
,
{
"name" : "createIcon",
"kind" : "function",
"protection" : "public",
"type" : "Image(GtkIconSize iconSize)",
"comment" : "\n This function is intended for use by action implementations to\n create icons displayed in the proxy widgets.\n Since 2.4\n Params:\n iconSize = the size of the icon that should be created. [type int]\n Returns: a widget that displays the icon for this action.\n\t \n",
"line" : 241}
,
{
"name" : "createMenuItem",
"kind" : "function",
"protection" : "public",
"type" : "MenuItem()",
"comment" : "\n Creates a menu item widget that proxies for the given action.\n Since 2.4\n Returns: a menu item connected to the action.\n\t \n",
"line" : 257}
,
{
"name" : "createToolItem",
"kind" : "function",
"protection" : "public",
"type" : "ToolItem()",
"comment" : "\n Creates a toolbar item widget that proxies for the given action.\n Since 2.4\n Returns: a toolbar item connected to the action.\n\t \n",
"line" : 273}
,
{
"name" : "createMenu",
"kind" : "function",
"protection" : "public",
"type" : "Menu()",
"comment" : "\n If action provides a GtkMenu widget as a submenu for the menu\n item or the toolbar item it creates, this function returns an\n instance of that menu.\n Since 2.12\n Returns: the menu item provided by the action, or NULL.\n\t \n",
"line" : 291}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 304}
,
{
"name" : "onActivateListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Action)[]",
"line" : 306}
,
{
"name" : "addOnActivate",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Action) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The \"activate\" signal is emitted when the action is activated.\n Since 2.4\n See Also\n GtkActionGroup, GtkUIManager\n\t \n",
"line" : 313}
,
{
"name" : "callBackActivate",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkAction* actionStruct, Action action)",
"line" : 328}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Action(string name, string label, string tooltip, string stockId)",
"comment" : "\n Creates a new GtkAction object. To add the action to a\n GtkActionGroup and set the accelerator for the action,\n call gtk_action_group_add_action_with_accel().\n See the section called “UI Definitions” for information on allowed action\n names.\n Since 2.4\n Params:\n name = A unique name for the action\n label = the label displayed in menu items and on buttons, or NULL. [allow-none]\n tooltip = a tooltip for the action, or NULL. [allow-none]\n stockId = the stock icon to display in widgets representing the\n action, or NULL\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 352}
,
{
"name" : "getName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns the name of the action.\n Since 2.4\n Returns: the name of the action. The string belongs to GTK+ and should not be freed.\n\t \n",
"line" : 368}
,
{
"name" : "isSensitive",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the action is effectively sensitive.\n Since 2.4\n Returns: TRUE if the action and its associated action group are both sensitive.\n\t \n",
"line" : 379}
,
{
"name" : "getSensitive",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the action itself is sensitive. Note that this doesn't\n necessarily mean effective sensitivity. See gtk_action_is_sensitive()\n for that.\n Since 2.4\n Returns: TRUE if the action itself is sensitive.\n\t \n",
"line" : 392}
,
{
"name" : "setSensitive",
"kind" : "function",
"protection" : "public",
"type" : "void(int sensitive)",
"comment" : "\n Sets the ::sensitive property of the action to sensitive. Note that\n this doesn't necessarily mean effective sensitivity. See\n gtk_action_is_sensitive()\n for that.\n Since 2.6\n Params:\n sensitive = TRUE to make the action sensitive\n\t \n",
"line" : 407}
,
{
"name" : "isVisible",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the action is effectively visible.\n Since 2.4\n Returns: TRUE if the action and its associated action group are both visible.\n\t \n",
"line" : 418}
,
{
"name" : "getVisible",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the action itself is visible. Note that this doesn't\n necessarily mean effective visibility. See gtk_action_is_sensitive()\n for that.\n Since 2.4\n Returns: TRUE if the action itself is visible.\n\t \n",
"line" : 431}
,
{
"name" : "setVisible",
"kind" : "function",
"protection" : "public",
"type" : "void(int visible)",
"comment" : "\n Sets the ::visible property of the action to visible. Note that\n this doesn't necessarily mean effective visibility. See\n gtk_action_is_visible()\n for that.\n Since 2.6\n Params:\n visible = TRUE to make the action visible\n\t \n",
"line" : 446}
,
{
"name" : "activate",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Emits the \"activate\" signal on the specified action, if it isn't\n insensitive. This gets called by the proxy widgets when they get\n activated.\n It can also be used to manually activate an action.\n Since 2.4\n\t \n",
"line" : 459}
,
{
"name" : "connectProxy",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget proxy)",
"comment" : "\n Warning\n gtk_action_connect_proxy has been deprecated since version 2.16 and should not be used in newly-written code. Use gtk_activatable_set_related_action() instead.\n Connects a widget to an action object as a proxy. Synchronises\n various properties of the action with the widget (such as label\n text, icon, tooltip, etc), and attaches a callback so that the\n action gets activated when the proxy widget does.\n If the widget is already connected to an action, it is disconnected\n first.\n Since 2.4\n Params:\n proxy = the proxy widget\n\t \n",
"line" : 478}
,
{
"name" : "disconnectProxy",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget proxy)",
"comment" : "\n Warning\n gtk_action_disconnect_proxy has been deprecated since version 2.16 and should not be used in newly-written code. Use gtk_activatable_set_related_action() instead.\n Disconnects a proxy widget from an action.\n Does not destroy the widget, however.\n Since 2.4\n Params:\n proxy = the proxy widget\n\t \n",
"line" : 493}
,
{
"name" : "getProxies",
"kind" : "function",
"protection" : "public",
"type" : "ListSG()",
"comment" : "\n Returns the proxy widgets for an action.\n See also gtk_widget_get_action().\n Since 2.4\n Returns: a GSList of proxy widgets. The list is owned by GTK+ and must not be modified. [element-type GtkWidget][transfer none]\n\t \n",
"line" : 505}
,
{
"name" : "connectAccelerator",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Installs the accelerator for action if action has an\n accel path and group. See gtk_action_set_accel_path() and\n gtk_action_set_accel_group()\n Since multiple proxies may independently trigger the installation\n of the accelerator, the action counts the number of times this\n function has been called and doesn't remove the accelerator until\n gtk_action_disconnect_accelerator() has been called as many times.\n Since 2.4\n\t \n",
"line" : 526}
,
{
"name" : "disconnectAccelerator",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Undoes the effect of one call to gtk_action_connect_accelerator().\n Since 2.4\n\t \n",
"line" : 536}
,
{
"name" : "blockActivate",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Disable activation signals from the action\n This is needed when updating the state of your proxy\n GtkActivatable widget could result in calling gtk_action_activate(),\n this is a convenience function to avoid recursing in those\n cases (updating toggle state for instance).\n Since 2.16\n\t \n",
"line" : 550}
,
{
"name" : "unblockActivate",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Reenable activation signals from the action\n Since 2.16\n\t \n",
"line" : 560}
,
{
"name" : "blockActivateFrom",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget proxy)",
"comment" : "\n Warning\n gtk_action_block_activate_from has been deprecated since version 2.16 and should not be used in newly-written code. activatables are now responsible for activating the\n action directly so this doesnt apply anymore.\n Disables calls to the gtk_action_activate()\n function by signals on the given proxy widget. This is used to\n break notification loops for things like check or radio actions.\n This function is intended for use by action implementations.\n Since 2.4\n Params:\n proxy = a proxy widget\n\t \n",
"line" : 578}
,
{
"name" : "unblockActivateFrom",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget proxy)",
"comment" : "\n Warning\n gtk_action_unblock_activate_from has been deprecated since version 2.16 and should not be used in newly-written code. activatables are now responsible for activating the\n action directly so this doesnt apply anymore.\n Re-enables calls to the gtk_action_activate()\n function by signals on the given proxy widget. This undoes the\n blocking done by gtk_action_block_activate_from().\n This function is intended for use by action implementations.\n Since 2.4\n Params:\n proxy = a proxy widget\n\t \n",
"line" : 596}
,
{
"name" : "getAlwaysShowImage",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether action's menu item proxies will ignore the\n \"gtk-menu-images\" setting and always show their image,\n if available.\n Since 2.20\n Returns: TRUE if the menu item proxies will always show their image\n\t \n",
"line" : 609}
,
{
"name" : "setAlwaysShowImage",
"kind" : "function",
"protection" : "public",
"type" : "void(int alwaysShow)",
"comment" : "\n Sets whether action's menu item proxies will ignore the\n \"gtk-menu-images\" setting and always show their image, if available.\n Use this if the menu item would be useless or hard to use\n without their image.\n Since 2.20\n Params:\n alwaysShow = TRUE if menuitem proxies should always show their image\n\t \n",
"line" : 624}
,
{
"name" : "getAccelPath",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns the accel path for this action.\n Since 2.6\n Returns: the accel path for this action, or NULL if none is set. The returned string is owned by GTK+ and must not be freed or modified.\n\t \n",
"line" : 635}
,
{
"name" : "setAccelPath",
"kind" : "function",
"protection" : "public",
"type" : "void(string accelPath)",
"comment" : "\n Sets the accel path for this action. All proxy widgets associated\n with the action will have this accel path, so that their\n accelerators are consistent.\n Note that accel_path string will be stored in a GQuark. Therefore, if you\n pass a static string, you can save some memory by interning it first with\n g_intern_static_string().\n Since 2.4\n Params:\n accelPath = the accelerator path\n\t \n",
"line" : 652}
,
{
"name" : "getAccelClosure",
"kind" : "function",
"protection" : "public",
"type" : "Closure()",
"comment" : "\n Returns the accel closure for this action.\n Since 2.8\n Returns: the accel closure for this action. The returned closure is owned by GTK+ and must not be unreffed or modified. [transfer none]\n\t \n",
"line" : 663}
,
{
"name" : "setAccelGroup",
"kind" : "function",
"protection" : "public",
"type" : "void(AccelGroup accelGroup)",
"comment" : "\n Sets the GtkAccelGroup in which the accelerator for this action\n will be installed.\n Since 2.4\n Params:\n accelGroup = a GtkAccelGroup or NULL. [allow-none]\n\t \n",
"line" : 681}
,
{
"name" : "setLabel",
"kind" : "function",
"protection" : "public",
"type" : "void(string label)",
"comment" : "\n Sets the label of action.\n Since 2.16\n Params:\n label = the label text to set\n\t \n",
"line" : 693}
,
{
"name" : "getLabel",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the label text of action.\n Since 2.16\n Returns: the label text\n\t \n",
"line" : 704}
,
{
"name" : "setShortLabel",
"kind" : "function",
"protection" : "public",
"type" : "void(string shortLabel)",
"comment" : "\n Sets a shorter label text on action.\n Since 2.16\n Params:\n shortLabel = the label text to set\n\t \n",
"line" : 716}
,
{
"name" : "getShortLabel",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the short label text of action.\n Since 2.16\n Returns: the short label text.\n\t \n",
"line" : 727}
,
{
"name" : "setTooltip",
"kind" : "function",
"protection" : "public",
"type" : "void(string tooltip)",
"comment" : "\n Sets the tooltip text on action\n Since 2.16\n Params:\n tooltip = the tooltip text\n\t \n",
"line" : 739}
,
{
"name" : "getTooltip",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the tooltip text of action.\n Since 2.16\n Returns: the tooltip text\n\t \n",
"line" : 750}
,
{
"name" : "setGicon",
"kind" : "function",
"protection" : "public",
"type" : "void(IconIF icon)",
"comment" : "\n Sets the icon of action.\n Since 2.16\n Params:\n icon = the GIcon to set\n\t \n",
"line" : 762}
,
{
"name" : "getGicon",
"kind" : "function",
"protection" : "public",
"type" : "IconIF()",
"comment" : "\n Gets the gicon of action.\n Since 2.16\n Returns: The action's GIcon if one is set. [transfer none]\n\t \n",
"line" : 773}
,
{
"name" : "setIconName",
"kind" : "function",
"protection" : "public",
"type" : "void(string iconName)",
"comment" : "\n Sets the icon name on action\n Since 2.16\n Params:\n iconName = the icon name to set\n\t \n",
"line" : 790}
,
{
"name" : "getIconName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the icon name of action.\n Since 2.16\n Returns: the icon name\n\t \n",
"line" : 801}
,
{
"name" : "setVisibleHorizontal",
"kind" : "function",
"protection" : "public",
"type" : "void(int visibleHorizontal)",
"comment" : "\n Sets whether action is visible when horizontal\n Since 2.16\n Params:\n visibleHorizontal = whether the action is visible horizontally\n\t \n",
"line" : 813}
,
{
"name" : "getVisibleHorizontal",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Checks whether action is visible when horizontal\n Since 2.16\n Returns: whether action is visible when horizontal\n\t \n",
"line" : 824}
,
{
"name" : "setVisibleVertical",
"kind" : "function",
"protection" : "public",
"type" : "void(int visibleVertical)",
"comment" : "\n Sets whether action is visible when vertical\n Since 2.16\n Params:\n visibleVertical = whether the action is visible vertically\n\t \n",
"line" : 836}
,
{
"name" : "getVisibleVertical",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Checks whether action is visible when horizontal\n Since 2.16\n Returns: whether action is visible when horizontal\n\t \n",
"line" : 847}
,
{
"name" : "setIsImportant",
"kind" : "function",
"protection" : "public",
"type" : "void(int isImportant)",
"comment" : "\n Sets whether the action is important, this attribute is used\n primarily by toolbar items to decide whether to show a label\n or not.\n Since 2.16\n Params:\n isImportant = TRUE to make the action important\n\t \n",
"line" : 861}
,
{
"name" : "getIsImportant",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Checks whether action is important or not\n Since 2.16\n Returns: whether action is important\n\t \n",
"line" : 872}
]
}
]
}
,
{
"name" : "gtk.ActionGroup",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/ActionGroup.d",
"members" : [
{
"name" : "ActionGroup",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n Actions are organised into groups. An action group is essentially a\n map from names to GtkAction objects.\n All actions that would make sense to use in a particular context\n should be in a single group. Multiple action groups may be used for a\n particular user interface. In fact, it is expected that most nontrivial\n applications will make use of multiple groups. For example, in an application\n that can edit multiple documents, one group holding global actions\n (e.g. quit, about, new), and one group per document holding actions that\n act on that document (eg. save, cut\/copy\/paste, etc). Each window's menus\n would be constructed from a combination of two action groups.\n Accelerators are handled by the GTK+ accelerator map. All actions are assigned an\n accelerator path (which normally has the form\n <Actions>\/group-name\/action-name)\n and a shortcut is associated with this accelerator path. All menuitems and\n toolitems take on this accelerator path. The GTK+ accelerator map code makes\n sure that the correct shortcut is displayed next to the menu item.\n GtkActionGroup as GtkBuildable\n The GtkActionGroup implementation of the GtkBuildable interface accepts\n GtkAction objects as <child> elements in UI definitions.\n Note that it is probably more common to define actions and action groups\n in the code, since they are directly related to what the code can do.\n The GtkActionGroup implementation of the GtkBuildable interface supports a\n custom <accelerator> element, which has attributes named key and\n modifiers and allows to specify accelerators. This is similar to the\n <accelerator> element of GtkWidget, the main difference is that\n it doesn't allow you to specify a signal.\n $(DDOC_COMMENT example)\n \n",
"line" : 114,
"base" : "ObjectG",
"interfaces" : [
"BuildableIF"],
"members" : [
{
"name" : "gtkActionGroup",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkActionGroup*",
"comment" : " the main Gtk struct \n",
"line" : 118}
,
{
"name" : "getActionGroupStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkActionGroup*()",
"line" : 121}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 128}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ActionGroup(GtkActionGroup* gtkActionGroup)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 136}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 154}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 165}
,
{
"name" : "onConnectProxyListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Action, Widget, ActionGroup)[]",
"line" : 167}
,
{
"name" : "addOnConnectProxy",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Action, Widget, ActionGroup) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::connect-proxy signal is emitted after connecting a proxy to\n an action in the group. Note that the proxy may have been connected\n to a different action before.\n This is intended for simple customizations for which a custom action\n class would be too clumsy, e.g. showing tooltips for menuitems in the\n statusbar.\n GtkUIManager proxies the signal and provides global notification\n just before any action is connected to a proxy, which is probably more\n convenient to use.\n Since 2.4\n\t \n",
"line" : 180}
,
{
"name" : "callBackConnectProxy",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkActionGroup* actionGroupStruct, GtkAction* action, GtkWidget* proxy, ActionGroup actionGroup)",
"line" : 195}
,
{
"name" : "onDisconnectProxyListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Action, Widget, ActionGroup)[]",
"line" : 203}
,
{
"name" : "addOnDisconnectProxy",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Action, Widget, ActionGroup) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::disconnect-proxy signal is emitted after disconnecting a proxy\n from an action in the group.\n GtkUIManager proxies the signal and provides global notification\n just before any action is connected to a proxy, which is probably more\n convenient to use.\n Since 2.4\n\t \n",
"line" : 212}
,
{
"name" : "callBackDisconnectProxy",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkActionGroup* actionGroupStruct, GtkAction* action, GtkWidget* proxy, ActionGroup actionGroup)",
"line" : 227}
,
{
"name" : "onPostActivateListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Action, ActionGroup)[]",
"line" : 235}
,
{
"name" : "addOnPostActivate",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Action, ActionGroup) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::post-activate signal is emitted just after the action in the\n action_group is activated\n This is intended for GtkUIManager to proxy the signal and provide global\n notification just after any action is activated.\n Since 2.4\n\t \n",
"line" : 243}
,
{
"name" : "callBackPostActivate",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkActionGroup* actionGroupStruct, GtkAction* action, ActionGroup actionGroup)",
"line" : 258}
,
{
"name" : "onPreActivateListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Action, ActionGroup)[]",
"line" : 266}
,
{
"name" : "addOnPreActivate",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Action, ActionGroup) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::pre-activate signal is emitted just before the action in the\n action_group is activated\n This is intended for GtkUIManager to proxy the signal and provide global\n notification just before any action is activated.\n Since 2.4\n\t \n",
"line" : 274}
,
{
"name" : "callBackPreActivate",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkActionGroup* actionGroupStruct, GtkAction* action, ActionGroup actionGroup)",
"line" : 289}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ActionGroup(string name)",
"comment" : "\n Creates a new GtkActionGroup object. The name of the action group\n is used when associating keybindings\n with the actions.\n Since 2.4\n Params:\n name = the name of the action group.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 307}
,
{
"name" : "getName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the name of the action group.\n Since 2.4\n Returns: the name of the action group.\n\t \n",
"line" : 323}
,
{
"name" : "getSensitive",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns TRUE if the group is sensitive. The constituent actions\n can only be logically sensitive (see gtk_action_is_sensitive()) if\n they are sensitive (see gtk_action_get_sensitive()) and their group\n is sensitive.\n Since 2.4\n Returns: TRUE if the group is sensitive.\n\t \n",
"line" : 337}
,
{
"name" : "setSensitive",
"kind" : "function",
"protection" : "public",
"type" : "void(int sensitive)",
"comment" : "\n Changes the sensitivity of action_group\n Since 2.4\n Params:\n sensitive = new sensitivity\n\t \n",
"line" : 349}
,
{
"name" : "getVisible",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns TRUE if the group is visible. The constituent actions\n can only be logically visible (see gtk_action_is_visible()) if\n they are visible (see gtk_action_get_visible()) and their group\n is visible.\n Since 2.4\n Returns: TRUE if the group is visible.\n\t \n",
"line" : 363}
,
{
"name" : "setVisible",
"kind" : "function",
"protection" : "public",
"type" : "void(int visible)",
"comment" : "\n Changes the visible of action_group.\n Since 2.4\n Params:\n visible = new visiblity\n\t \n",
"line" : 375}
,
{
"name" : "getAction",
"kind" : "function",
"protection" : "public",
"type" : "Action(string actionName)",
"comment" : "\n Looks up an action in the action group by name.\n Since 2.4\n Params:\n actionName = the name of the action\n Returns: the action, or NULL if no action by that name exists. [transfer none]\n\t \n",
"line" : 388}
,
{
"name" : "listActions",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Lists the actions in the action group.\n Since 2.4\n Returns: an allocated list of the action objects in the action group. [element-type GtkAction][transfer container]\n\t \n",
"line" : 404}
,
{
"name" : "addAction",
"kind" : "function",
"protection" : "public",
"type" : "void(Action action)",
"comment" : "\n Adds an action object to the action group. Note that this function\n does not set up the accel path of the action, which can lead to problems\n if a user tries to modify the accelerator of a menuitem associated with\n the action. Therefore you must either set the accel path yourself with\n gtk_action_set_accel_path(), or use\n gtk_action_group_add_action_with_accel (..., NULL).\n Since 2.4\n Params:\n action = an action\n\t \n",
"line" : 426}
,
{
"name" : "addActionWithAccel",
"kind" : "function",
"protection" : "public",
"type" : "void(Action action, string accelerator)",
"comment" : "\n Adds an action object to the action group and sets up the accelerator.\n If accelerator is NULL, attempts to use the accelerator associated\n with the stock_id of the action.\n Accel paths are set to\n <Actions>\/group-name\/action-name.\n Since 2.4\n Params:\n action = the action to add\n accelerator = the accelerator for the action, in\n the format understood by gtk_accelerator_parse(), or \"\" for no accelerator, or\n NULL to use the stock accelerator. [allow-none]\n\t \n",
"line" : 445}
,
{
"name" : "removeAction",
"kind" : "function",
"protection" : "public",
"type" : "void(Action action)",
"comment" : "\n Removes an action object from the action group.\n Since 2.4\n Params:\n action = an action\n\t \n",
"line" : 457}
,
{
"name" : "addActions",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkActionEntry[] entries, void* userData)",
"comment" : "\n This is a convenience function to create a number of actions and add them\n to the action group.\n The \"activate\" signals of the actions are connected to the callbacks and\n their accel paths are set to\n <Actions>\/group-name\/action-name.\n Since 2.4\n Params:\n entries = an array of action descriptions\n userData = data to pass to the action callbacks\n\t \n",
"line" : 474}
,
{
"name" : "addActionsFull",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkActionEntry[] entries, void* userData, extern (C) void function(void* cbData) destroy)",
"comment" : "\n This variant of gtk_action_group_add_actions() adds a GDestroyNotify\n callback for user_data.\n Since 2.4\n Params:\n entries = an array of action descriptions\n userData = data to pass to the action callbacks\n destroy = destroy notification callback for user_data\n\t \n",
"line" : 489}
,
{
"name" : "addToggleActions",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkToggleActionEntry[] entries, void* userData)",
"comment" : "\n This is a convenience function to create a number of toggle actions and add them\n to the action group.\n The \"activate\" signals of the actions are connected to the callbacks and\n their accel paths are set to\n <Actions>\/group-name\/action-name.\n Since 2.4\n Params:\n entries = an array of toggle action descriptions\n userData = data to pass to the action callbacks\n\t \n",
"line" : 506}
,
{
"name" : "addToggleActionsFull",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkToggleActionEntry[] entries, void* userData, extern (C) void function(void* cbData) destroy)",
"comment" : "\n This variant of gtk_action_group_add_toggle_actions() adds a\n GDestroyNotify callback for user_data.\n Since 2.4\n Params:\n entries = an array of toggle action descriptions\n userData = data to pass to the action callbacks\n destroy = destroy notification callback for user_data\n\t \n",
"line" : 521}
,
{
"name" : "addRadioActions",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkRadioActionEntry[] entries, int value, extern (C) void function() onChange, void* userData)",
"comment" : "\n This is a convenience routine to create a group of radio actions and\n add them to the action group.\n The \"changed\" signal of the first radio action is connected to the\n on_change callback and the accel paths of the actions are set to\n <Actions>\/group-name\/action-name.\n Since 2.4\n Params:\n entries = an array of radio action descriptions\n value = the value of the action to activate initially, or -1 if\n no action should be activated\n onChange = the callback to connect to the changed signal\n userData = data to pass to the action callbacks\n\t \n",
"line" : 541}
,
{
"name" : "addRadioActionsFull",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkRadioActionEntry[] entries, int value, extern (C) void function() onChange, void* userData, extern (C) void function(void* cbData) destroy)",
"comment" : "\n This variant of gtk_action_group_add_radio_actions() adds a\n GDestroyNotify callback for user_data.\n Since 2.4\n Params:\n entries = an array of radio action descriptions\n value = the value of the action to activate initially, or -1 if\n no action should be activated\n onChange = the callback to connect to the changed signal\n userData = data to pass to the action callbacks\n destroy = destroy notification callback for user_data\n\t \n",
"line" : 559}
,
{
"name" : "setTranslateFunc",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) char* function(char*, void*) func, void* data, extern (C) void function(void* cbData) notify)",
"comment" : "\n Sets a function to be used for translating the label and tooltip of\n GtkActionGroupEntrys added by gtk_action_group_add_actions().\n If you're using gettext(), it is enough to set the translation domain\n with gtk_action_group_set_translation_domain().\n Since 2.4\n Params:\n func = a GtkTranslateFunc\n data = data to be passed to func and notify\n notify = a GDestroyNotify function to be called when action_group is\n destroyed and when the translation function is changed again\n\t \n",
"line" : 577}
,
{
"name" : "setTranslationDomain",
"kind" : "function",
"protection" : "public",
"type" : "void(string domain)",
"comment" : "\n Sets the translation domain and uses g_dgettext() for translating the\n label and tooltip of GtkActionEntrys added by\n gtk_action_group_add_actions().\n If you're not using gettext() for localization, see\n gtk_action_group_set_translate_func().\n Since 2.4\n Params:\n domain = the translation domain to use for g_dgettext() calls\n\t \n",
"line" : 593}
,
{
"name" : "translateString",
"kind" : "function",
"protection" : "public",
"type" : "string(string string)",
"comment" : "\n Translates a string using the specified translate_func(). This\n is mainly intended for language bindings.\n Since 2.6\n Params:\n string = a string\n Returns: the translation of string\n\t \n",
"line" : 607}
]
}
]
}
,
{
"name" : "gtk.ActivatableIF",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/ActivatableIF.d",
"members" : [
{
"name" : "ActivatableIF",
"kind" : "interface",
"protection" : "public",
"comment" : "\n Description\n Activatable widgets can be connected to a GtkAction and reflects\n the state of its action. A GtkActivatable can also provide feedback\n through its action, as they are responsible for activating their\n related actions.\n Implementing GtkActivatable\n When extending a class that is already GtkActivatable; it is only\n necessary to implement the GtkActivatable->sync_action_properties()\n and GtkActivatable->update() methods and chain up to the parent\n implementation, however when introducing\n a new GtkActivatable class; the \"related-action\" and\n \"use-action-appearance\" properties need to be handled by\n the implementor. Handling these properties is mostly a matter of installing\n the action pointer and boolean flag on your instance, and calling\n gtk_activatable_do_set_related_action() and\n gtk_activatable_sync_action_properties() at the appropriate times.\n $(DDOC_COMMENT example)\n \n",
"line" : 87,
"members" : [
{
"name" : "getActivatableTStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkActivatable*()",
"line" : 90}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 93}
,
{
"name" : "doSetRelatedAction",
"kind" : "function",
"protection" : "public",
"type" : "void(Action action)",
"comment" : "\n\t \n\n This is a utility function for GtkActivatable implementors.\n When implementing GtkActivatable you must call this when\n handling changes of the \"related-action\", and\n you must also use this to break references in GObject->dispose().\n This function adds a reference to the currently set related\n action for you, it also makes sure the GtkActivatable->update()\n method is called when the related GtkAction properties change\n and registers to the action's proxy list.\n Note\n Be careful to call this before setting the local\n copy of the GtkAction property, since this function uses\n gtk_activatable_get_action() to retrieve the previous action\n Since 2.16\n Params:\n action = the GtkAction to set\n\t \n",
"line" : 116}
,
{
"name" : "getRelatedAction",
"kind" : "function",
"protection" : "public",
"type" : "Action()",
"comment" : "\n Gets the related GtkAction for activatable.\n Since 2.16\n Returns: the related GtkAction if one is set. [transfer none]\n\t \n",
"line" : 123}
,
{
"name" : "getUseActionAppearance",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets whether this activatable should reset its layout\n and appearance when setting the related action or when\n the action changes appearance.\n Since 2.16\n Returns: whether activatable uses its actions appearance.\n\t \n",
"line" : 132}
,
{
"name" : "syncActionProperties",
"kind" : "function",
"protection" : "public",
"type" : "void(Action action)",
"comment" : "\n This is called to update the activatable completely, this is called\n internally when the \"related-action\" property is set\n or unset and by the implementing class when\n \"use-action-appearance\" changes.\n Since 2.16\n Params:\n action = the related GtkAction or NULL. [allow-none]\n\t \n",
"line" : 143}
,
{
"name" : "setRelatedAction",
"kind" : "function",
"protection" : "public",
"type" : "void(Action action)",
"comment" : "\n Sets the related action on the activatable object.\n Note\n GtkActivatable implementors need to handle the \"related-action\"\n property and call gtk_activatable_do_set_related_action() when it changes.\n Since 2.16\n Params:\n action = the GtkAction to set\n\t \n",
"line" : 154}
,
{
"name" : "setUseActionAppearance",
"kind" : "function",
"protection" : "public",
"type" : "void(int useAppearance)",
"comment" : "\n Sets whether this activatable should reset its layout and appearance\n when setting the related action or when the action changes appearance\n Note\n GtkActivatable implementors need to handle the\n \"use-action-appearance\" property and call\n gtk_activatable_sync_action_properties() to update activatable\n if needed.\n Since 2.16\n Params:\n useAppearance = whether to use the actions appearance\n\t \n",
"line" : 168}
]
}
]
}
,
{
"name" : "gtk.ActivatableT",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/ActivatableT.d",
"members" : [
{
"name" : "ActivatableT(TStruct)",
"kind" : "template",
"protection" : "public",
"comment" : "\n Description\n Activatable widgets can be connected to a GtkAction and reflects\n the state of its action. A GtkActivatable can also provide feedback\n through its action, as they are responsible for activating their\n related actions.\n Implementing GtkActivatable\n When extending a class that is already GtkActivatable; it is only\n necessary to implement the GtkActivatable->sync_action_properties()\n and GtkActivatable->update() methods and chain up to the parent\n implementation, however when introducing\n a new GtkActivatable class; the \"related-action\" and\n \"use-action-appearance\" properties need to be handled by\n the implementor. Handling these properties is mostly a matter of installing\n the action pointer and boolean flag on your instance, and calling\n gtk_activatable_do_set_related_action() and\n gtk_activatable_sync_action_properties() at the appropriate times.\n $(DDOC_COMMENT example)\n \n",
"line" : 87,
"members" : [
{
"name" : "gtkActivatable",
"kind" : "variable",
"type" : "GtkActivatable*",
"comment" : " the main Gtk struct \n",
"line" : 91}
,
{
"name" : "getActivatableTStruct",
"kind" : "function",
"type" : "GtkActivatable*()",
"line" : 94}
,
{
"name" : "doSetRelatedAction",
"kind" : "function",
"type" : "void(Action action)",
"comment" : "\n\t \n\n This is a utility function for GtkActivatable implementors.\n When implementing GtkActivatable you must call this when\n handling changes of the \"related-action\", and\n you must also use this to break references in GObject->dispose().\n This function adds a reference to the currently set related\n action for you, it also makes sure the GtkActivatable->update()\n method is called when the related GtkAction properties change\n and registers to the action's proxy list.\n Note\n Be careful to call this before setting the local\n copy of the GtkAction property, since this function uses\n gtk_activatable_get_action() to retrieve the previous action\n Since 2.16\n Params:\n action = the GtkAction to set\n\t \n",
"line" : 120}
,
{
"name" : "getRelatedAction",
"kind" : "function",
"type" : "Action()",
"comment" : "\n Gets the related GtkAction for activatable.\n Since 2.16\n Returns: the related GtkAction if one is set. [transfer none]\n\t \n",
"line" : 131}
,
{
"name" : "getUseActionAppearance",
"kind" : "function",
"type" : "int()",
"comment" : "\n Gets whether this activatable should reset its layout\n and appearance when setting the related action or when\n the action changes appearance.\n Since 2.16\n Returns: whether activatable uses its actions appearance.\n\t \n",
"line" : 149}
,
{
"name" : "syncActionProperties",
"kind" : "function",
"type" : "void(Action action)",
"comment" : "\n This is called to update the activatable completely, this is called\n internally when the \"related-action\" property is set\n or unset and by the implementing class when\n \"use-action-appearance\" changes.\n Since 2.16\n Params:\n action = the related GtkAction or NULL. [allow-none]\n\t \n",
"line" : 164}
,
{
"name" : "setRelatedAction",
"kind" : "function",
"type" : "void(Action action)",
"comment" : "\n Sets the related action on the activatable object.\n Note\n GtkActivatable implementors need to handle the \"related-action\"\n property and call gtk_activatable_do_set_related_action() when it changes.\n Since 2.16\n Params:\n action = the GtkAction to set\n\t \n",
"line" : 179}
,
{
"name" : "setUseActionAppearance",
"kind" : "function",
"type" : "void(int useAppearance)",
"comment" : "\n Sets whether this activatable should reset its layout and appearance\n when setting the related action or when the action changes appearance\n Note\n GtkActivatable implementors need to handle the\n \"use-action-appearance\" property and call\n gtk_activatable_sync_action_properties() to update activatable\n if needed.\n Since 2.16\n Params:\n useAppearance = whether to use the actions appearance\n\t \n",
"line" : 197}
]
}
]
}
,
{
"name" : "gtk.Adjustment",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Adjustment.d",
"members" : [
{
"name" : "Adjustment",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkAdjustment object represents a value which has an associated lower\n and upper bound, together with step and page increments, and a page size.\n It is used within several GTK+ widgets, including\n GtkSpinButton, GtkViewport, and GtkRange (which is a base class for\n GtkHScrollbar, GtkVScrollbar, GtkHScale, and GtkVScale).\n The GtkAdjustment object does not update the value itself. Instead\n it is left up to the owner of the GtkAdjustment to control the value.\n The owner of the GtkAdjustment typically calls the\n gtk_adjustment_value_changed() and gtk_adjustment_changed() functions\n after changing the value and its bounds. This results in the emission of the\n \"value_changed\" or \"changed\" signal respectively.\n \n",
"line" : 85,
"base" : "ObjectGtk",
"members" : [
{
"name" : "gtkAdjustment",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkAdjustment*",
"comment" : " the main Gtk struct \n",
"line" : 89}
,
{
"name" : "getAdjustmentStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkAdjustment*()",
"line" : 92}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 99}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Adjustment(GtkAdjustment* gtkAdjustment)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 107}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 125}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 133}
,
{
"name" : "onChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Adjustment)[]",
"line" : 135}
,
{
"name" : "addOnChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Adjustment) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when one or more of the GtkAdjustment fields have been changed,\n other than the value field.\n\t \n",
"line" : 140}
,
{
"name" : "callBackChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkAdjustment* adjustmentStruct, Adjustment adjustment)",
"line" : 155}
,
{
"name" : "onValueChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Adjustment)[]",
"line" : 163}
,
{
"name" : "addOnValueChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Adjustment) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when the GtkAdjustment value field has been changed.\n\t \n",
"line" : 167}
,
{
"name" : "callBackValueChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkAdjustment* adjustmentStruct, Adjustment adjustment)",
"line" : 182}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Adjustment(double value, double lower, double upper, double stepIncrement, double pageIncrement, double pageSize)",
"comment" : "\n Creates a new GtkAdjustment.\n Params:\n value = the initial value.\n lower = the minimum value.\n upper = the maximum value.\n stepIncrement = the step increment.\n pageIncrement = the page increment.\n pageSize = the page size.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 202}
,
{
"name" : "getValue",
"kind" : "function",
"protection" : "public",
"type" : "double()",
"comment" : "\n Gets the current value of the adjustment. See\n gtk_adjustment_set_value().\n Returns: The current value of the adjustment.\n\t \n",
"line" : 218}
,
{
"name" : "setValue",
"kind" : "function",
"protection" : "public",
"type" : "void(double value)",
"comment" : "\n Sets the GtkAdjustment value. The value is clamped to lie between\n adjustment->lower and\n adjustment->upper.\n Note that for adjustments which are used in a GtkScrollbar, the effective\n range of allowed values goes from adjustment->lower to\n adjustment->upper - adjustment->page_size.\n Params:\n value = the new value.\n\t \n",
"line" : 234}
,
{
"name" : "clampPage",
"kind" : "function",
"protection" : "public",
"type" : "void(double lower, double upper)",
"comment" : "\n Updates the GtkAdjustment value to ensure that the range between lower\n and upper is in the current page (i.e. between value and value +\n page_size).\n If the range is larger than the page size, then only the start of it will\n be in the current page.\n A \"changed\" signal will be emitted if the value is changed.\n Params:\n lower = the lower value.\n upper = the upper value.\n\t \n",
"line" : 251}
,
{
"name" : "changed",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Emits a \"changed\" signal from the GtkAdjustment.\n This is typically called by the owner of the GtkAdjustment after it has\n changed any of the GtkAdjustment fields other than the value.\n\t \n",
"line" : 262}
,
{
"name" : "valueChanged",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Emits a \"value_changed\" signal from the GtkAdjustment.\n This is typically called by the owner of the GtkAdjustment after it has\n changed the GtkAdjustment value field.\n\t \n",
"line" : 273}
,
{
"name" : "configure",
"kind" : "function",
"protection" : "public",
"type" : "void(double value, double lower, double upper, double stepIncrement, double pageIncrement, double pageSize)",
"comment" : "\n Sets all properties of the adjustment at once.\n Use this function to avoid multiple emissions of the \"changed\"\n signal. See gtk_adjustment_set_lower() for an alternative way\n of compressing multiple emissions of \"changed\" into one.\n Since 2.14\n Params:\n value = the new value\n lower = the new minimum value\n upper = the new maximum value\n stepIncrement = the new step increment\n pageIncrement = the new page increment\n pageSize = the new page size\n\t \n",
"line" : 293}
,
{
"name" : "getLower",
"kind" : "function",
"protection" : "public",
"type" : "double()",
"comment" : "\n Retrieves the minimum value of the adjustment.\n Since 2.14\n Returns: The current minimum value of the adjustment.\n\t \n",
"line" : 304}
,
{
"name" : "getPageIncrement",
"kind" : "function",
"protection" : "public",
"type" : "double()",
"comment" : "\n Retrieves the page increment of the adjustment.\n Since 2.14\n Returns: The current page increment of the adjustment.\n\t \n",
"line" : 315}
,
{
"name" : "getPageSize",
"kind" : "function",
"protection" : "public",
"type" : "double()",
"comment" : "\n Retrieves the page size of the adjustment.\n Since 2.14\n Returns: The current page size of the adjustment.\n\t \n",
"line" : 326}
,
{
"name" : "getStepIncrement",
"kind" : "function",
"protection" : "public",
"type" : "double()",
"comment" : "\n Retrieves the step increment of the adjustment.\n Since 2.14\n Returns: The current step increment of the adjustment.\n\t \n",
"line" : 337}
,
{
"name" : "getUpper",
"kind" : "function",
"protection" : "public",
"type" : "double()",
"comment" : "\n Retrieves the maximum value of the adjustment.\n Since 2.14\n Returns: The current maximum value of the adjustment.\n\t \n",
"line" : 348}
,
{
"name" : "setLower",
"kind" : "function",
"protection" : "public",
"type" : "void(double lower)",
"comment" : "\n Sets the minimum value of the adjustment.\n When setting multiple adjustment properties via their individual\n setters, multiple \"changed\" signals will be emitted. However, since\n the emission of the \"changed\" signal is tied to the emission of the\n \"GObject::notify\" signals of the changed properties, it's possible\n to compress the \"changed\" signals into one by calling\n g_object_freeze_notify() and g_object_thaw_notify() around the\n calls to the individual setters.\n Alternatively, using a single g_object_set() for all the properties\n to change, or using gtk_adjustment_configure() has the same effect\n of compressing \"changed\" emissions.\n Since 2.14\n Params:\n lower = the new minimum value\n\t \n",
"line" : 370}
,
{
"name" : "setPageIncrement",
"kind" : "function",
"protection" : "public",
"type" : "void(double pageIncrement)",
"comment" : "\n Sets the page increment of the adjustment.\n See gtk_adjustment_set_lower() about how to compress multiple\n emissions of the \"changed\" signal when setting multiple adjustment\n properties.\n Since 2.14\n Params:\n pageIncrement = the new page increment\n\t \n",
"line" : 385}
,
{
"name" : "setPageSize",
"kind" : "function",
"protection" : "public",
"type" : "void(double pageSize)",
"comment" : "\n Sets the page size of the adjustment.\n See gtk_adjustment_set_lower() about how to compress multiple\n emissions of the \"changed\" signal when setting multiple adjustment\n properties.\n Since 2.14\n Params:\n pageSize = the new page size\n\t \n",
"line" : 400}
,
{
"name" : "setStepIncrement",
"kind" : "function",
"protection" : "public",
"type" : "void(double stepIncrement)",
"comment" : "\n Sets the step increment of the adjustment.\n See gtk_adjustment_set_lower() about how to compress multiple\n emissions of the \"changed\" signal when setting multiple adjustment\n properties.\n Since 2.14\n Params:\n stepIncrement = the new step increment\n\t \n",
"line" : 415}
,
{
"name" : "setUpper",
"kind" : "function",
"protection" : "public",
"type" : "void(double upper)",
"comment" : "\n Sets the maximum value of the adjustment.\n Note that values will be restricted by\n upper - page-size if the page-size\n property is nonzero.\n See gtk_adjustment_set_lower() about how to compress multiple\n emissions of the \"changed\" signal when setting multiple adjustment\n properties.\n Since 2.14\n Params:\n upper = the new maximum value\n\t \n",
"line" : 433}
]
}
]
}
,
{
"name" : "gtk.Alignment",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Alignment.d",
"members" : [
{
"name" : "Alignment",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkAlignment widget controls the alignment and size of its child widget.\n It has four settings: xscale, yscale, xalign, and yalign.\n The scale settings are used to specify how much the child widget should\n expand to fill the space allocated to the GtkAlignment.\n The values can range from 0 (meaning the child doesn't expand at all) to\n 1 (meaning the child expands to fill all of the available space).\n The align settings are used to place the child widget within the available\n area. The values range from 0 (top or left) to 1 (bottom or right).\n Of course, if the scale settings are both set to 1, the alignment settings\n have no effect.\n \n",
"line" : 81,
"base" : "Bin",
"members" : [
{
"name" : "gtkAlignment",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkAlignment*",
"comment" : " the main Gtk struct \n",
"line" : 85}
,
{
"name" : "getAlignmentStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkAlignment*()",
"line" : 88}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 95}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Alignment(GtkAlignment* gtkAlignment)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 103}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 121}
,
{
"name" : "center",
"kind" : "function",
"protection" : "public",
"type" : "Alignment(Widget widget)",
"comment" : " \n",
"line" : 128}
,
{
"name" : "north",
"kind" : "function",
"protection" : "public",
"type" : "Alignment(Widget widget)",
"comment" : " \n",
"line" : 136}
,
{
"name" : "south",
"kind" : "function",
"protection" : "public",
"type" : "Alignment(Widget widget)",
"comment" : " \n",
"line" : 144}
,
{
"name" : "east",
"kind" : "function",
"protection" : "public",
"type" : "Alignment(Widget widget)",
"comment" : " \n",
"line" : 152}
,
{
"name" : "west",
"kind" : "function",
"protection" : "public",
"type" : "Alignment(Widget widget)",
"comment" : " \n",
"line" : 160}
,
{
"name" : "northWest",
"kind" : "function",
"protection" : "public",
"type" : "Alignment(Widget widget)",
"comment" : " \n",
"line" : 168}
,
{
"name" : "southWest",
"kind" : "function",
"protection" : "public",
"type" : "Alignment(Widget widget)",
"comment" : " \n",
"line" : 176}
,
{
"name" : "northEast",
"kind" : "function",
"protection" : "public",
"type" : "Alignment(Widget widget)",
"comment" : " \n",
"line" : 184}
,
{
"name" : "southEast",
"kind" : "function",
"protection" : "public",
"type" : "Alignment(Widget widget)",
"comment" : " \n",
"line" : 192}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Alignment(float xalign, float yalign, float xscale, float yscale)",
"comment" : "\n\t \n\n Creates a new GtkAlignment.\n Params:\n xalign = the horizontal alignment of the child widget, from 0 (left) to 1\n (right).\n yalign = the vertical alignment of the child widget, from 0 (top) to 1\n (bottom).\n xscale = the amount that the child widget expands horizontally to fill up\n unused space, from 0 to 1.\n A value of 0 indicates that the child widget should never expand.\n A value of 1 indicates that the child widget will expand to fill all of the\n space allocated for the GtkAlignment.\n yscale = the amount that the child widget expands vertically to fill up\n unused space, from 0 to 1. The values are similar to xscale.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 218}
,
{
"name" : "set",
"kind" : "function",
"protection" : "public",
"type" : "void(float xalign, float yalign, float xscale, float yscale)",
"comment" : "\n Sets the GtkAlignment values.\n Params:\n xalign = the horizontal alignment of the child widget, from 0 (left) to 1\n (right).\n yalign = the vertical alignment of the child widget, from 0 (top) to 1\n (bottom).\n xscale = the amount that the child widget expands horizontally to fill up\n unused space, from 0 to 1.\n A value of 0 indicates that the child widget should never expand.\n A value of 1 indicates that the child widget will expand to fill all of the\n space allocated for the GtkAlignment.\n yscale = the amount that the child widget expands vertically to fill up\n unused space, from 0 to 1. The values are similar to xscale.\n\t \n",
"line" : 244}
,
{
"name" : "getPadding",
"kind" : "function",
"protection" : "public",
"type" : "void(out uint paddingTop, out uint paddingBottom, out uint paddingLeft, out uint paddingRight)",
"comment" : "\n Gets the padding on the different sides of the widget.\n See gtk_alignment_set_padding().\n Since 2.4\n Params:\n paddingTop = location to store the padding for\n the top of the widget, or NULL. [out][allow-none]\n paddingBottom = location to store the padding\n for the bottom of the widget, or NULL. [out][allow-none]\n paddingLeft = location to store the padding\n for the left of the widget, or NULL. [out][allow-none]\n paddingRight = location to store the padding\n for the right of the widget, or NULL. [out][allow-none]\n\t \n",
"line" : 264}
,
{
"name" : "setPadding",
"kind" : "function",
"protection" : "public",
"type" : "void(uint paddingTop, uint paddingBottom, uint paddingLeft, uint paddingRight)",
"comment" : "\n Sets the padding on the different sides of the widget.\n The padding adds blank space to the sides of the widget. For instance,\n this can be used to indent the child widget towards the right by adding\n padding on the left.\n Since 2.4\n Params:\n paddingTop = the padding at the top of the widget\n paddingBottom = the padding at the bottom of the widget\n paddingLeft = the padding at the left of the widget\n paddingRight = the padding at the right of the widget.\n\t \n",
"line" : 282}
]
}
]
}
,
{
"name" : "gtk.Arrow",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Arrow.d",
"members" : [
{
"name" : "Arrow",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkArrow should be used to draw simple arrows that need to point in\n one of the four cardinal directions (up, down, left, or right). The\n style of the arrow can be one of shadow in, shadow out, etched in, or\n etched out. Note that these directions and style types may be\n ammended in versions of GTK+ to come.\n GtkArrow will fill any space alloted to it, but since it is inherited\n from GtkMisc, it can be padded and\/or aligned, to fill exactly the\n space the programmer desires.\n Arrows are created with a call to gtk_arrow_new(). The direction or\n style of an arrow can be changed after creation by using gtk_arrow_set().\n \n",
"line" : 79,
"base" : "Misc",
"members" : [
{
"name" : "gtkArrow",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkArrow*",
"comment" : " the main Gtk struct \n",
"line" : 83}
,
{
"name" : "getArrowStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkArrow*()",
"line" : 86}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 93}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Arrow(GtkArrow* gtkArrow)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 101}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 119}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Arrow(GtkArrowType arrowType, GtkShadowType shadowType)",
"comment" : "\n\t \n\n Creates a new GtkArrow widget.\n Params:\n arrowType = a valid GtkArrowType.\n shadowType = a valid GtkShadowType.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 135}
,
{
"name" : "set",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkArrowType arrowType, GtkShadowType shadowType)",
"comment" : "\n Sets the direction and style of the GtkArrow, arrow.\n Params:\n arrow = a widget of type GtkArrow.\n arrowType = a valid GtkArrowType.\n shadowType = a valid GtkShadowType.\n\t \n",
"line" : 153}
]
}
]
}
,
{
"name" : "gtk.AspectFrame",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/AspectFrame.d",
"members" : [
{
"name" : "AspectFrame",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkAspectFrame is useful when you want\n pack a widget so that it can resize but always retains\n the same aspect ratio. For instance, one might be\n drawing a small preview of a larger image. GtkAspectFrame\n derives from GtkFrame, so it can draw a label and\n a frame around the child. The frame will be\n \"shrink-wrapped\" to the size of the child.\n \n",
"line" : 78,
"base" : "Frame",
"members" : [
{
"name" : "gtkAspectFrame",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkAspectFrame*",
"comment" : " the main Gtk struct \n",
"line" : 82}
,
{
"name" : "getAspectFrameStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkAspectFrame*()",
"line" : 85}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 92}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "AspectFrame(GtkAspectFrame* gtkAspectFrame)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 100}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 118}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "AspectFrame(string label, float xalign, float yalign, float ratio, int obeyChild)",
"comment" : "\n\t \n\n Create a new GtkAspectFrame.\n Params:\n label = Label text.\n xalign = Horizontal alignment of the child within the allocation of\n the GtkAspectFrame. This ranges from 0.0 (left aligned)\n to 1.0 (right aligned)\n yalign = Vertical alignment of the child within the allocation of\n the GtkAspectFrame. This ranges from 0.0 (left aligned)\n to 1.0 (right aligned)\n ratio = The desired aspect ratio.\n obeyChild = If TRUE, ratio is ignored, and the aspect\n ratio is taken from the requistion of the child.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 142}
,
{
"name" : "set",
"kind" : "function",
"protection" : "public",
"type" : "void(float xalign, float yalign, float ratio, int obeyChild)",
"comment" : "\n Set parameters for an existing GtkAspectFrame.\n Params:\n xalign = Horizontal alignment of the child within the allocation of\n the GtkAspectFrame. This ranges from 0.0 (left aligned)\n to 1.0 (right aligned)\n yalign = Vertical alignment of the child within the allocation of\n the GtkAspectFrame. This ranges from 0.0 (left aligned)\n to 1.0 (right aligned)\n ratio = The desired aspect ratio.\n obeyChild = If TRUE, ratio is ignored, and the aspect\n ratio is taken from the requistion of the child.\n\t \n",
"line" : 166}
]
}
]
}
,
{
"name" : "gtk.Assistant",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Assistant.d",
"members" : [
{
"name" : "Assistant",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkAssistant is a widget used to represent a generally complex\n operation splitted in several steps, guiding the user through its pages\n and controlling the page flow to collect the necessary data.\n GtkAssistant as GtkBuildable\n The GtkAssistant implementation of the GtkBuildable interface exposes the\n action_area as internal children with the name \"action_area\".\n To add pages to an assistant in GtkBuilder, simply add it as a\n <child> to the GtkAssistant object, and set its child properties\n as necessary.\n \n",
"line" : 88,
"base" : "Window",
"members" : [
{
"name" : "gtkAssistant",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkAssistant*",
"comment" : " the main Gtk struct \n",
"line" : 92}
,
{
"name" : "getAssistantStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkAssistant*()",
"line" : 95}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 102}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Assistant(GtkAssistant* gtkAssistant)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 110}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 128}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 136}
,
{
"name" : "onApplyListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Assistant)[]",
"line" : 138}
,
{
"name" : "addOnApply",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Assistant) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::apply signal is emitted when the apply button is clicked. The default\n behavior of the GtkAssistant is to switch to the page after the current\n page, unless the current page is the last one.\n A handler for the ::apply signal should carry out the actions for which\n the wizard has collected data. If the action takes a long time to complete,\n you might consider putting a page of type GTK_ASSISTANT_PAGE_PROGRESS\n after the confirmation page and handle this operation within the\n \"prepare\" signal of the progress page.\n Since 2.10\n\t \n",
"line" : 150}
,
{
"name" : "callBackApply",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkAssistant* assistantStruct, Assistant assistant)",
"line" : 165}
,
{
"name" : "onCancelListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Assistant)[]",
"line" : 173}
,
{
"name" : "addOnCancel",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Assistant) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::cancel signal is emitted when then the cancel button is clicked.\n Since 2.10\n\t \n",
"line" : 178}
,
{
"name" : "callBackCancel",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkAssistant* assistantStruct, Assistant assistant)",
"line" : 193}
,
{
"name" : "onCloseListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Assistant)[]",
"line" : 201}
,
{
"name" : "addOnClose",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Assistant) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::close signal is emitted either when the close button of\n a summary page is clicked, or when the apply button in the last\n page in the flow (of type GTK_ASSISTANT_PAGE_CONFIRM) is clicked.\n Since 2.10\n\t \n",
"line" : 208}
,
{
"name" : "callBackClose",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkAssistant* assistantStruct, Assistant assistant)",
"line" : 223}
,
{
"name" : "onPrepareListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Widget, Assistant)[]",
"line" : 231}
,
{
"name" : "addOnPrepare",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Widget, Assistant) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::prepare signal is emitted when a new page is set as the assistant's\n current page, before making the new page visible. A handler for this signal\n can do any preparation which are necessary before showing page.\n Since 2.10\n\t \n",
"line" : 238}
,
{
"name" : "callBackPrepare",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkAssistant* assistantStruct, GtkWidget* page, Assistant assistant)",
"line" : 253}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Assistant()",
"comment" : "\n Creates a new GtkAssistant.\n Since 2.10\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 267}
,
{
"name" : "getCurrentPage",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the page number of the current page\n Since 2.10\n Returns: The index (starting from 0) of the current page in the assistant, if the assistant has no pages, -1 will be returned\n\t \n",
"line" : 283}
,
{
"name" : "setCurrentPage",
"kind" : "function",
"protection" : "public",
"type" : "void(int pageNum)",
"comment" : "\n Switches the page to page_num. Note that this will only be necessary\n in custom buttons, as the assistant flow can be set with\n gtk_assistant_set_forward_page_func().\n Since 2.10\n Params:\n pageNum = index of the page to switch to, starting from 0.\n If negative, the last page will be used. If greater\n than the number of pages in the assistant, nothing\n will be done.\n\t \n",
"line" : 300}
,
{
"name" : "getNPages",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the number of pages in the assistant\n Since 2.10\n Returns: The number of pages in the assistant.\n\t \n",
"line" : 311}
,
{
"name" : "getNthPage",
"kind" : "function",
"protection" : "public",
"type" : "Widget(int pageNum)",
"comment" : "\n Returns the child widget contained in page number page_num.\n Since 2.10\n Params:\n pageNum = The index of a page in the assistant, or -1 to get the last page;\n Returns: The child widget, or NULL if page_num is out of bounds. [transfer none]\n\t \n",
"line" : 324}
,
{
"name" : "prependPage",
"kind" : "function",
"protection" : "public",
"type" : "int(Widget page)",
"comment" : "\n Prepends a page to the assistant.\n Since 2.10\n Params:\n page = a GtkWidget\n Returns: the index (starting at 0) of the inserted page\n\t \n",
"line" : 342}
,
{
"name" : "appendPage",
"kind" : "function",
"protection" : "public",
"type" : "int(Widget page)",
"comment" : "\n Appends a page to the assistant.\n Since 2.10\n Params:\n page = a GtkWidget\n Returns: the index (starting at 0) of the inserted page\n\t \n",
"line" : 355}
,
{
"name" : "insertPage",
"kind" : "function",
"protection" : "public",
"type" : "int(Widget page, int position)",
"comment" : "\n Inserts a page in the assistant at a given position.\n Since 2.10\n Params:\n page = a GtkWidget\n position = the index (starting at 0) at which to insert the page,\n or -1 to append the page to the assistant\n Returns: the index (starting from 0) of the inserted page\n\t \n",
"line" : 370}
,
{
"name" : "setForwardPageFunc",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) int function(int, void*) pageFunc, void* data, extern (C) void function(void* cbData) destroy)",
"comment" : "\n Sets the page forwarding function to be page_func, this function will\n be used to determine what will be the next page when the user presses\n the forward button. Setting page_func to NULL will make the assistant\n to use the default forward function, which just goes to the next visible\n page.\n Since 2.10\n Params:\n pageFunc = the GtkAssistantPageFunc, or NULL to use the default one. [allow-none]\n data = user data for page_func\n destroy = destroy notifier for data\n\t \n",
"line" : 388}
,
{
"name" : "setPageType",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget page, GtkAssistantPageType type)",
"comment" : "\n Sets the page type for page. The page type determines the page\n behavior in the assistant.\n Since 2.10\n Params:\n page = a page of assistant\n type = the new type for page\n\t \n",
"line" : 402}
,
{
"name" : "getPageType",
"kind" : "function",
"protection" : "public",
"type" : "GtkAssistantPageType(Widget page)",
"comment" : "\n Gets the page type of page.\n Since 2.10\n Params:\n page = a page of assistant\n Returns: the page type of page.\n\t \n",
"line" : 415}
,
{
"name" : "setPageTitle",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget page, string title)",
"comment" : "\n Sets a title for page. The title is displayed in the header\n area of the assistant when page is the current page.\n Since 2.10\n Params:\n page = a page of assistant\n title = the new title for page\n\t \n",
"line" : 429}
,
{
"name" : "getPageTitle",
"kind" : "function",
"protection" : "public",
"type" : "string(Widget page)",
"comment" : "\n Gets the title for page.\n Since 2.10\n Params:\n page = a page of assistant\n Returns: the title for page.\n\t \n",
"line" : 442}
,
{
"name" : "setPageHeaderImage",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget page, Pixbuf pixbuf)",
"comment" : "\n Sets a header image for page. This image is displayed in the header\n area of the assistant when page is the current page.\n Since 2.10\n Params:\n page = a page of assistant\n pixbuf = the new header image page. [allow-none]\n\t \n",
"line" : 456}
,
{
"name" : "getPageHeaderImage",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf(Widget page)",
"comment" : "\n Gets the header image for page.\n Since 2.10\n Params:\n page = a page of assistant\n Returns: the header image for page, or NULL if there's no header image for the page. [transfer none]\n\t \n",
"line" : 469}
,
{
"name" : "setPageSideImage",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget page, Pixbuf pixbuf)",
"comment" : "\n Sets a header image for page. This image is displayed in the side\n area of the assistant when page is the current page.\n Since 2.10\n Params:\n page = a page of assistant\n pixbuf = the new header image page. [allow-none]\n\t \n",
"line" : 488}
,
{
"name" : "getPageSideImage",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf(Widget page)",
"comment" : "\n Gets the header image for page.\n Since 2.10\n Params:\n page = a page of assistant\n Returns: the side image for page, or NULL if there's no side image for the page. [transfer none]\n\t \n",
"line" : 501}
,
{
"name" : "setPageComplete",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget page, int complete)",
"comment" : "\n Sets whether page contents are complete. This will make\n assistant update the buttons state to be able to continue the task.\n Since 2.10\n Params:\n page = a page of assistant\n complete = the completeness status of the page\n\t \n",
"line" : 520}
,
{
"name" : "getPageComplete",
"kind" : "function",
"protection" : "public",
"type" : "int(Widget page)",
"comment" : "\n Gets whether page is complete.\n Since 2.10\n Params:\n page = a page of assistant\n Returns: TRUE if page is complete.\n\t \n",
"line" : 533}
,
{
"name" : "addActionWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child)",
"comment" : "\n Adds a widget to the action area of a GtkAssistant.\n Since 2.10\n Params:\n child = a GtkWidget\n\t \n",
"line" : 545}
,
{
"name" : "removeActionWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child)",
"comment" : "\n Removes a widget from the action area of a GtkAssistant.\n Since 2.10\n Params:\n child = a GtkWidget\n\t \n",
"line" : 557}
,
{
"name" : "updateButtonsState",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Forces assistant to recompute the buttons state.\n GTK+ automatically takes care of this in most situations,\n e.g. when the user goes to a different page, or when the\n visibility or completeness of a page changes.\n One situation where it can be necessary to call this\n function is when changing a value on the current page\n affects the future page flow of the assistant.\n Since 2.10\n\t \n",
"line" : 573}
,
{
"name" : "commit",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Erases the visited page history so the back button is not\n shown on the current page, and removes the cancel button\n from subsequent pages.\n Use this when the information provided up to the current\n page is hereafter deemed permanent and cannot be modified\n or undone. For example, showing a progress page to track\n a long-running, unreversible operation after the user has\n clicked apply on a confirmation page.\n Since 2.22\n Child Property Details\n The \"complete\" child property\n  \"complete\" gboolean : Read \/ Write\n Setting the \"complete\" child property to TRUE marks a page as complete\n (i.e.: all the required fields are filled out). GTK+ uses this information\n to control the sensitivity of the navigation buttons.\n Default value: FALSE\n Since 2.10\n\t \n",
"line" : 598}
]
}
]
}
,
{
"name" : "gtk.Bin",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Bin.d",
"members" : [
{
"name" : "Bin",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkBin widget is a container with just one child.\n It is not very useful itself, but it is useful for deriving subclasses,\n since it provides common code needed for handling a single child widget.\n Many GTK+ widgets are subclasses of GtkBin, including GtkWindow,\n GtkButton, GtkFrame, GtkHandleBox or GtkScrolledWindow.\n \n",
"line" : 77,
"base" : "Container",
"members" : [
{
"name" : "gtkBin",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkBin*",
"comment" : " the main Gtk struct \n",
"line" : 81}
,
{
"name" : "getBinStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkBin*()",
"line" : 84}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 91}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Bin(GtkBin* gtkBin)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 99}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 117}
,
{
"name" : "getChild",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n\t \n\n Gets the child of the GtkBin, or NULL if the bin contains\n no child widget. The returned widget does not have a reference\n added, so you do not need to unref it.\n Returns: pointer to child of the GtkBin. [transfer none]\n\t \n",
"line" : 132}
]
}
]
}
,
{
"name" : "gtk.BindingSet",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/BindingSet.d",
"members" : [
{
"name" : "BindingSet",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkBinding provides a mechanism for configuring GTK+ key bindings through\n RC files. This eases key binding adjustments for application developers as\n well as users and provides GTK+ users or administrators with high key\n binding configurability which requires no application or toolkit side changes.\n Installing a key binding\n A resource file binding consists of a 'binding' definition and a match\n statement to apply the binding to specific widget types. Details on the\n matching mechanism are described under\n Pathnames and patterns.\n Inside the binding definition, key combinations are bound to specific signal\n emissions on the target widget. Key combinations are strings consisting of\n an optional GdkModifierType name and\n key names such as those defined\n in <gdk\/gdkkeysyms.h> or returned from\n gdk_keyval_name(), they have to be parsable by gtk_accelerator_parse().\n Specifications of signal emissions consist of a string identifying the signal\n name, and a list of signal specific arguments in parenthesis.\n For example for binding Control and the left or right cursor keys of a\n GtkEntry widget to the \"move-cursor\" signal, so movement occurs\n in 3 letter steps, the following binding can be used:\n $(DDOC_COMMENT example)\n GTK+ already defines a number of useful bindings for the widgets it provides.\n Because custom bindings set up in RC files take precedence over the default\n bindings shipped with GTK+, overriding existing bindings as demonstrated in\n Installing a key binding\n works as expected. The same mechanism can not be used to \"unbind\" existing\n bindings, however.\n $(DDOC_COMMENT example)\n The above example will not have the desired effect of causing\n \"<Control>Right\" and \"<Control>Left\" key presses to be ignored\n by GTK+. Instead, it just causes any existing bindings from the bindings\n set \"MoveCursor3\" to be deleted, so when \"<Control>Right\" or\n \"<Control>Left\" are pressed, no binding for these keys is found in\n binding set \"MoveCursor3\". GTK+ will thus continue to search for matching\n key bindings, and will eventually lookup and find the default GTK+ bindings\n for entries which implement word movement. To keep GTK+ from activating its\n default bindings, the \"unbind\" keyword can be used like this:\n $(DDOC_COMMENT example)\n Now, GTK+ will find a match when looking up \"<Control>Right\" and\n \"<Control>Left\" key presses before it resorts to its default\n bindings, and the match instructs it to abort (\"unbind\") the search, so\n the key presses are not consumed by this widget. As usual, further processing\n of the key presses, e.g. by an entry's parent widget, is now possible.\n The \"unbind\" functionality has been introduced in GTK+ 2.12.\n \n",
"line" : 128,
"base" : "Object",
"members" : [
{
"name" : "gtkBindingSet",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkBindingSet*",
"comment" : " the main Gtk struct \n",
"line" : 131}
,
{
"name" : "getBindingSetStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkBindingSet*()",
"line" : 134}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 141}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "BindingSet(GtkBindingSet* gtkBindingSet)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 149}
,
{
"name" : "bindingEntryAddSignall",
"kind" : "function",
"protection" : "public",
"type" : "void(uint keyval, GdkModifierType modifiers, string signalName, ListSG bindingArgs)",
"comment" : "\n\t \n\n Override or install a new key binding for keyval with modifiers on\n binding_set.\n Params:\n keyval = key value\n modifiers = key modifier\n signalName = signal name to be bound\n bindingArgs = list of GtkBindingArg signal arguments. [transfer none][element-type GtkBindingArg]\n\t \n",
"line" : 171}
,
{
"name" : "bindingEntryClear",
"kind" : "function",
"protection" : "public",
"type" : "void(uint keyval, GdkModifierType modifiers)",
"comment" : "\n Warning\n gtk_binding_entry_clear has been deprecated since version 2.12 and should not be used in newly-written code. Use gtk_binding_entry_remove() instead.\n Clears a binding entry.\n Params:\n keyval = key value of binding to clear\n modifiers = key modifier of binding to clear\n\t \n",
"line" : 185}
,
{
"name" : "bindingParseBinding",
"kind" : "function",
"protection" : "public",
"type" : "uint(ScannerG scanner)",
"comment" : "\n Warning\n gtk_binding_parse_binding has been deprecated since version 2.12 and should not be used in newly-written code. There should be no need to call this function outside GTK+.\n Parse a binding entry from a gtkrc file.\n Params:\n scanner = GtkRC scanner\n Returns: expected token upon errors, G_TOKEN_NONE on success.\n\t \n",
"line" : 199}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "BindingSet(string setName)",
"comment" : "\n GTK+ maintains a global list of binding sets. Each binding set has\n a unique name which needs to be specified upon creation.\n Params:\n setName = unique name of this binding set\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 212}
,
{
"name" : "byClass",
"kind" : "function",
"protection" : "public",
"type" : "BindingSet(void* objectClass)",
"comment" : "\n This function returns the binding set named after the type name of\n the passed in class structure. New binding sets are created on\n demand by this function.\n Params:\n objectClass = a valid GtkObject class\n Returns: the binding set corresponding to object_class\n\t \n",
"line" : 231}
,
{
"name" : "find",
"kind" : "function",
"protection" : "public",
"type" : "BindingSet(string setName)",
"comment" : "\n Find a binding set by its globally unique name. The set_name can\n either be a name used for gtk_binding_set_new() or the type name of\n a class used in gtk_binding_set_by_class().\n Params:\n setName = unique binding set name\n Returns: NULL or the specified binding set. [transfer none]\n\t \n",
"line" : 250}
,
{
"name" : "activate",
"kind" : "function",
"protection" : "public",
"type" : "int(ObjectGtk object, uint keyval, GdkModifierType modifiers)",
"comment" : "\n Find a key binding matching keyval and modifiers and activate the\n binding on object.\n Params:\n object = object to activate when binding found\n keyval = key value of the binding\n modifiers = key modifier of the binding\n Returns: TRUE if a binding was found and activated\n\t \n",
"line" : 270}
,
{
"name" : "activateEvent",
"kind" : "function",
"protection" : "public",
"type" : "int(ObjectGtk object, GdkEventKey* event)",
"comment" : "\n Looks up key bindings for object to find one matching\n event, and if one was found, activate it.\n Since 2.4\n Params:\n object = a GtkObject (generally must be a widget)\n event = a GdkEventKey\n Returns: TRUE if a matching key binding was found\n\t \n",
"line" : 285}
,
{
"name" : "activate",
"kind" : "function",
"protection" : "public",
"type" : "int(uint keyval, GdkModifierType modifiers, ObjectGtk object)",
"comment" : "\n Find a key binding matching keyval and modifiers within\n binding_set and activate the binding on object.\n Params:\n keyval = key value of the binding\n modifiers = key modifier of the binding\n object = object to activate when binding found\n Returns: TRUE if a binding was found and activated\n\t \n",
"line" : 300}
,
{
"name" : "bindingEntrySkip",
"kind" : "function",
"protection" : "public",
"type" : "void(uint keyval, GdkModifierType modifiers)",
"comment" : "\n Install a binding on binding_set which causes key lookups\n to be aborted, to prevent bindings from lower priority sets\n to be activated.\n Since 2.12\n Params:\n keyval = key value of binding to skip\n modifiers = key modifier of binding to skip\n\t \n",
"line" : 315}
,
{
"name" : "bindingEntryRemove",
"kind" : "function",
"protection" : "public",
"type" : "void(uint keyval, GdkModifierType modifiers)",
"comment" : "\n Remove a binding previously installed via\n gtk_binding_entry_add_signal() on binding_set.\n Params:\n keyval = key value of binding to remove\n modifiers = key modifier of binding to remove\n\t \n",
"line" : 328}
,
{
"name" : "addPath",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkPathType pathType, string pathPattern, GtkPathPriorityType priority)",
"comment" : "\n This function is used internally by the GtkRC parsing mechanism to\n assign match patterns to GtkBindingSet structures.\n Params:\n pathType = path type the pattern applies to\n pathPattern = the actual match pattern\n priority = binding priority\n\t \n",
"line" : 342}
]
}
]
}
,
{
"name" : "gtk.Border",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Border.d",
"members" : [
{
"name" : "Border",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n \n",
"line" : 71,
"base" : "Object",
"members" : [
{
"name" : "gtkBorder",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkBorder*",
"comment" : " the main Gtk struct \n",
"line" : 74}
,
{
"name" : "getBorderStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkBorder*()",
"line" : 77}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 84}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Border(GtkBorder* gtkBorder)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 92}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 104}
,
{
"name" : "onRealizeListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Border)[]",
"line" : 106}
,
{
"name" : "addOnRealize",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Border) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when the style has been initialized for a particular\n colormap and depth. Connecting to this signal is probably seldom\n useful since most of the time applications and widgets only\n deal with styles that have been already realized.\n Since 2.4\n\t \n",
"line" : 114}
,
{
"name" : "callBackRealize",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkStyle* styleStruct, Border border)",
"line" : 129}
,
{
"name" : "onUnrealizeListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Border)[]",
"line" : 137}
,
{
"name" : "addOnUnrealize",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Border) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when the aspects of the style specific to a particular colormap\n and depth are being cleaned up. A connection to this signal can be useful\n if a widget wants to cache objects like a GdkGC as object data on GtkStyle.\n This signal provides a convenient place to free such cached objects.\n Since 2.4\n\t \n",
"line" : 145}
,
{
"name" : "callBackUnrealize",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkStyle* styleStruct, Border border)",
"line" : 160}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Border()",
"comment" : "\n Allocates a new GtkBorder structure and initializes its elements to zero.\n Since 2.14\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 174}
,
{
"name" : "copy",
"kind" : "function",
"protection" : "public",
"type" : "Border()",
"comment" : "\n Copies a GtkBorder structure.\n Returns: a copy of border_.\n\t \n",
"line" : 189}
,
{
"name" : "free",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Frees a GtkBorder structure.\n\t \n",
"line" : 203}
]
}
]
}
,
{
"name" : "gtk.Box",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Box.d",
"members" : [
{
"name" : "Box",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkBox is an abstract widget which encapsulates functionality for a\n particular kind of container, one that organizes a variable number of\n widgets into a rectangular area. GtkBox has a number of derived\n classes, e.g. GtkHBox and GtkVBox.\n The rectangular area of a GtkBox is organized into either a single row\n or a single column of child widgets depending upon whether the box is\n of type GtkHBox or GtkVBox, respectively. Thus, all children of a\n GtkBox are allocated one dimension in common, which is the height of a\n row, or the width of a column.\n GtkBox uses a notion of packing. Packing refers to\n adding widgets with reference to a particular position in a\n GtkContainer. For a GtkBox, there are two reference positions: the\n start and the end of the box.\n For a GtkVBox, the start is defined as the top of the box and the end is\n defined as the bottom. For a GtkHBox the start is defined as the\n left side and the end is defined as the right side.\n Use repeated calls to gtk_box_pack_start() to pack widgets into a\n GtkBox from start to end. Use gtk_box_pack_end() to add widgets from\n end to start. You may intersperse these calls and add widgets from\n both ends of the same GtkBox.\n Use gtk_box_pack_start_defaults() or gtk_box_pack_end_defaults()\n to pack widgets into a GtkBox if you do not need to specify the\n \"expand\", \"fill\", or \"padding\" child properties\n for the child to be added.\n Because GtkBox is a GtkContainer, you may also use\n gtk_container_add() to insert widgets into the box, and they will be\n packed as if with gtk_box_pack_start_defaults(). Use\n gtk_container_remove() to remove widgets from the GtkBox.\n Use gtk_box_set_homogeneous() to specify whether or not all children\n of the GtkBox are forced to get the same amount of space.\n Use gtk_box_set_spacing() to determine how much space will be\n minimally placed between all children in the GtkBox.\n Use gtk_box_reorder_child() to move a GtkBox child to a different\n place in the box.\n Use gtk_box_set_child_packing() to reset the \"expand\",\n \"fill\" and \"padding\" child properties.\n Use gtk_box_query_child_packing() to query these fields.\n \n",
"line" : 114,
"base" : "Container",
"interfaces" : [
"OrientableIF"],
"members" : [
{
"name" : "gtkBox",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkBox*",
"comment" : " the main Gtk struct \n",
"line" : 118}
,
{
"name" : "getBoxStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkBox*()",
"line" : 121}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 128}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Box(GtkBox* gtkBox)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 136}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 154}
,
{
"name" : "packStart",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, int expand, int fill, uint padding)",
"comment" : "\n\t \n\n Adds child to box, packed with reference to the start of box.\n The child is packed after any other child packed with reference\n to the start of box.\n Params:\n child = the GtkWidget to be added to box\n expand = TRUE if the new child is to be given extra space allocated to\n box. The extra space will be divided evenly between all children of\n box that use this option\n fill = TRUE if space given to child by the expand option is\n actually allocated to child, rather than just padding it. This\n parameter has no effect if expand is set to FALSE. A child is\n always allocated the full height of a GtkHBox and the full width\n of a GtkVBox. This option affects the other dimension\n padding = extra space in pixels to put between this child and its\n neighbors, over and above the global amount specified by\n \"spacing\" property. If child is a widget at one of the\n reference ends of box, then padding pixels are also put between\n child and the reference edge of box\n\t \n",
"line" : 186}
,
{
"name" : "packEnd",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, int expand, int fill, uint padding)",
"comment" : "\n Adds child to box, packed with reference to the end of box.\n The child is packed after (away from end of) any other child\n packed with reference to the end of box.\n Params:\n child = the GtkWidget to be added to box\n expand = TRUE if the new child is to be given extra space allocated\n to box. The extra space will be divided evenly between all children\n of box that use this option\n fill = TRUE if space given to child by the expand option is\n actually allocated to child, rather than just padding it. This\n parameter has no effect if expand is set to FALSE. A child is\n always allocated the full height of a GtkHBox and the full width\n of a GtkVBox. This option affects the other dimension\n padding = extra space in pixels to put between this child and its\n neighbors, over and above the global amount specified by\n \"spacing\" property. If child is a widget at one of the\n reference ends of box, then padding pixels are also put between\n child and the reference edge of box\n\t \n",
"line" : 212}
,
{
"name" : "packStartDefaults",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget)",
"comment" : "\n Warning\n gtk_box_pack_start_defaults has been deprecated since version 2.14 and should not be used in newly-written code. Use gtk_box_pack_start()\n Adds widget to box, packed with reference to the start of box.\n The child is packed after any other child packed with reference\n to the start of box.\n Parameters for how to pack the child widget, \"expand\",\n \"fill\" and \"padding\", are given their default\n values, TRUE, TRUE, and 0, respectively.\n Params:\n widget = the GtkWidget to be added to box\n\t \n",
"line" : 230}
,
{
"name" : "packEndDefaults",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget)",
"comment" : "\n Warning\n gtk_box_pack_end_defaults has been deprecated since version 2.14 and should not be used in newly-written code. Use gtk_box_pack_end()\n Adds widget to box, packed with reference to the end of box.\n The child is packed after any other child packed with reference\n to the start of box.\n Parameters for how to pack the child widget, \"expand\",\n \"fill\" and \"padding\", are given their default\n values, TRUE, TRUE, and 0, respectively.\n Params:\n widget = the GtkWidget to be added to box\n\t \n",
"line" : 248}
,
{
"name" : "getHomogeneous",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the box is homogeneous (all children are the\n same size). See gtk_box_set_homogeneous().\n Returns: TRUE if the box is homogeneous.\n\t \n",
"line" : 259}
,
{
"name" : "setHomogeneous",
"kind" : "function",
"protection" : "public",
"type" : "void(int homogeneous)",
"comment" : "\n Sets the \"homogeneous\" property of box, controlling\n whether or not all children of box are given equal space\n in the box.\n Params:\n homogeneous = a boolean value, TRUE to create equal allotments,\n FALSE for variable allotments\n\t \n",
"line" : 273}
,
{
"name" : "getSpacing",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value set by gtk_box_set_spacing().\n Returns: spacing between children\n\t \n",
"line" : 283}
,
{
"name" : "setSpacing",
"kind" : "function",
"protection" : "public",
"type" : "void(int spacing)",
"comment" : "\n Sets the \"spacing\" property of box, which is the\n number of pixels to place between children of box.\n Params:\n spacing = the number of pixels to put between children\n\t \n",
"line" : 295}
,
{
"name" : "reorderChild",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, int position)",
"comment" : "\n Moves child to a new position in the list of box children.\n The list is the children field of\n GtkBox, and contains both widgets packed GTK_PACK_START\n as well as widgets packed GTK_PACK_END, in the order that these\n widgets were added to box.\n A widget's position in the box children list determines where\n the widget is packed into box. A child widget at some position\n in the list will be packed just after all other widgets of the\n same packing type that appear earlier in the list.\n Params:\n child = the GtkWidget to move\n position = the new position for child in the list of children\n of box, starting from 0. If negative, indicates the end of\n the list\n\t \n",
"line" : 317}
,
{
"name" : "queryChildPacking",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, out int expand, out int fill, out uint padding, out GtkPackType packType)",
"comment" : "\n Obtains information about how child is packed into box.\n Params:\n child = the GtkWidget of the child to query\n expand = pointer to return location for \"expand\" child property\n fill = pointer to return location for \"fill\" child property\n padding = pointer to return location for \"padding\" child property\n packType = pointer to return location for \"pack-type\" child property\n\t \n",
"line" : 332}
,
{
"name" : "setChildPacking",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, int expand, int fill, uint padding, GtkPackType packType)",
"comment" : "\n Sets the way child is packed into box.\n Params:\n child = the GtkWidget of the child to set\n expand = the new value of the \"expand\" child property\n fill = the new value of the \"fill\" child property\n padding = the new value of the \"padding\" child property\n packType = the new value of the \"pack-type\" child property\n\t \n",
"line" : 347}
]
}
]
}
,
{
"name" : "gtk.BuildableIF",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/BuildableIF.d",
"members" : [
{
"name" : "BuildableIF",
"kind" : "interface",
"protection" : "public",
"comment" : "\n Description\n In order to allow construction from a GtkBuilder\n UI description, an object class must implement the\n GtkBuildable interface. The interface includes methods for setting\n names and properties of objects, parsing custom tags, constructing\n child objects.\n The GtkBuildable interface is implemented by all widgets and\n many of the non-widget objects that are provided by GTK+. The\n main user of this interface is GtkBuilder, there should be\n very little need for applications to call any\n gtk_buildable_... functions.\n \n",
"line" : 92,
"members" : [
{
"name" : "getBuildableTStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkBuildable*()",
"line" : 95}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 98}
,
{
"name" : "buildableSetName",
"kind" : "function",
"protection" : "public",
"type" : "void(string name)",
"comment" : "\n\t \n\n Sets the name of the buildable object.\n Since 2.12\n Params:\n buildable = a GtkBuildable\n name = name to set\n\t \n",
"line" : 111}
,
{
"name" : "buildableGetName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the name of the buildable object.\n GtkBuilder sets the name based on the the\n GtkBuilder UI definition\n used to construct the buildable.\n Since 2.12\n Params:\n buildable = a GtkBuildable\n Returns: the name set with gtk_buildable_set_name()\n\t \n",
"line" : 123}
,
{
"name" : "addChild",
"kind" : "function",
"protection" : "public",
"type" : "void(Builder builder, ObjectG child, string type)",
"comment" : "\n Adds a child to buildable. type is an optional string\n describing how the child should be added.\n Since 2.12\n Params:\n builder = a GtkBuilder\n child = child to add\n type = kind of child or NULL. [allow-none]\n\t \n",
"line" : 134}
,
{
"name" : "setBuildableProperty",
"kind" : "function",
"protection" : "public",
"type" : "void(Builder builder, string name, Value value)",
"comment" : "\n Sets the property name name to value on the buildable object.\n Since 2.12\n Params:\n builder = a GtkBuilder\n name = name of property\n value = value of property\n\t \n",
"line" : 144}
,
{
"name" : "constructChild",
"kind" : "function",
"protection" : "public",
"type" : "ObjectG(Builder builder, string name)",
"comment" : "\n Constructs a child of buildable with the name name.\n GtkBuilder calls this function if a \"constructor\" has been\n specified in the UI definition.\n Since 2.12\n Params:\n builder = GtkBuilder used to construct this object\n name = name of child to construct\n Returns: the constructed child. [transfer full]\n\t \n",
"line" : 156}
,
{
"name" : "customTagStart",
"kind" : "function",
"protection" : "public",
"type" : "int(Builder builder, ObjectG child, string tagname, GMarkupParser* parser, void** data)",
"comment" : "\n This is called for each unknown element under <child>.\n Since 2.12\n Params:\n builder = a GtkBuilder used to construct this object\n child = child object or NULL for non-child tags. [allow-none]\n tagname = name of tag\n parser = a GMarkupParser structure to fill in. [out]\n data = return location for user data that will be passed in\n to parser functions. [out]\n Returns: TRUE if a object has a custom implementation, FALSE if it doesn't.\n\t \n",
"line" : 170}
,
{
"name" : "customTagEnd",
"kind" : "function",
"protection" : "public",
"type" : "void(Builder builder, ObjectG child, string tagname, void** data)",
"comment" : "\n This is called at the end of each custom element handled by\n the buildable.\n Since 2.12\n Params:\n builder = GtkBuilder used to construct this object\n child = child object or NULL for non-child tags. [allow-none]\n tagname = name of tag\n data = user data that will be passed in to parser functions. [type gpointer]\n\t \n",
"line" : 182}
,
{
"name" : "customFinished",
"kind" : "function",
"protection" : "public",
"type" : "void(Builder builder, ObjectG child, string tagname, void* data)",
"comment" : "\n This is similar to gtk_buildable_parser_finished() but is\n called once for each custom tag handled by the buildable.\n Since 2.12\n Params:\n builder = a GtkBuilder\n child = child object or NULL for non-child tags. [allow-none]\n tagname = the name of the tag\n data = user data created in custom_tag_start\n\t \n",
"line" : 194}
,
{
"name" : "parserFinished",
"kind" : "function",
"protection" : "public",
"type" : "void(Builder builder)",
"comment" : "\n Called when the builder finishes the parsing of a\n GtkBuilder UI definition.\n Note that this will be called once for each time\n gtk_builder_add_from_file() or gtk_builder_add_from_string()\n is called on a builder.\n Since 2.12\n Params:\n builder = a GtkBuilder\n\t \n",
"line" : 206}
,
{
"name" : "getInternalChild",
"kind" : "function",
"protection" : "public",
"type" : "ObjectG(Builder builder, string childname)",
"comment" : "\n Get the internal child called childname of the buildable object.\n Since 2.12\n Params:\n builder = a GtkBuilder\n childname = name of child\n Returns: the internal child of the buildable object. [transfer none]\n\t \n",
"line" : 216}
]
}
]
}
,
{
"name" : "gtk.BuildableT",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/BuildableT.d",
"members" : [
{
"name" : "BuildableT(TStruct)",
"kind" : "template",
"protection" : "public",
"comment" : "\n Description\n In order to allow construction from a GtkBuilder\n UI description, an object class must implement the\n GtkBuildable interface. The interface includes methods for setting\n names and properties of objects, parsing custom tags, constructing\n child objects.\n The GtkBuildable interface is implemented by all widgets and\n many of the non-widget objects that are provided by GTK+. The\n main user of this interface is GtkBuilder, there should be\n very little need for applications to call any\n gtk_buildable_... functions.\n \n",
"line" : 92,
"members" : [
{
"name" : "gtkBuildable",
"kind" : "variable",
"type" : "GtkBuildable*",
"comment" : " the main Gtk struct \n",
"line" : 96}
,
{
"name" : "getBuildableTStruct",
"kind" : "function",
"type" : "GtkBuildable*()",
"line" : 99}
,
{
"name" : "buildableSetName",
"kind" : "function",
"type" : "void(string name)",
"comment" : "\n\t \n\n Sets the name of the buildable object.\n Since 2.12\n Params:\n buildable = a GtkBuildable\n name = name to set\n\t \n",
"line" : 115}
,
{
"name" : "buildableGetName",
"kind" : "function",
"type" : "string()",
"comment" : "\n Gets the name of the buildable object.\n GtkBuilder sets the name based on the the\n GtkBuilder UI definition\n used to construct the buildable.\n Since 2.12\n Params:\n buildable = a GtkBuildable\n Returns: the name set with gtk_buildable_set_name()\n\t \n",
"line" : 131}
,
{
"name" : "addChild",
"kind" : "function",
"type" : "void(Builder builder, ObjectG child, string type)",
"comment" : "\n Adds a child to buildable. type is an optional string\n describing how the child should be added.\n Since 2.12\n Params:\n builder = a GtkBuilder\n child = child to add\n type = kind of child or NULL. [allow-none]\n\t \n",
"line" : 146}
,
{
"name" : "setBuildableProperty",
"kind" : "function",
"type" : "void(Builder builder, string name, Value value)",
"comment" : "\n Sets the property name name to value on the buildable object.\n Since 2.12\n Params:\n builder = a GtkBuilder\n name = name of property\n value = value of property\n\t \n",
"line" : 160}
,
{
"name" : "constructChild",
"kind" : "function",
"type" : "ObjectG(Builder builder, string name)",
"comment" : "\n Constructs a child of buildable with the name name.\n GtkBuilder calls this function if a \"constructor\" has been\n specified in the UI definition.\n Since 2.12\n Params:\n builder = GtkBuilder used to construct this object\n name = name of child to construct\n Returns: the constructed child. [transfer full]\n\t \n",
"line" : 176}
,
{
"name" : "customTagStart",
"kind" : "function",
"type" : "int(Builder builder, ObjectG child, string tagname, GMarkupParser* parser, void** data)",
"comment" : "\n This is called for each unknown element under <child>.\n Since 2.12\n Params:\n builder = a GtkBuilder used to construct this object\n child = child object or NULL for non-child tags. [allow-none]\n tagname = name of tag\n parser = a GMarkupParser structure to fill in. [out]\n data = return location for user data that will be passed in\n to parser functions. [out]\n Returns: TRUE if a object has a custom implementation, FALSE if it doesn't.\n\t \n",
"line" : 199}
,
{
"name" : "customTagEnd",
"kind" : "function",
"type" : "void(Builder builder, ObjectG child, string tagname, void** data)",
"comment" : "\n This is called at the end of each custom element handled by\n the buildable.\n Since 2.12\n Params:\n builder = GtkBuilder used to construct this object\n child = child object or NULL for non-child tags. [allow-none]\n tagname = name of tag\n data = user data that will be passed in to parser functions. [type gpointer]\n\t \n",
"line" : 215}
,
{
"name" : "customFinished",
"kind" : "function",
"type" : "void(Builder builder, ObjectG child, string tagname, void* data)",
"comment" : "\n This is similar to gtk_buildable_parser_finished() but is\n called once for each custom tag handled by the buildable.\n Since 2.12\n Params:\n builder = a GtkBuilder\n child = child object or NULL for non-child tags. [allow-none]\n tagname = the name of the tag\n data = user data created in custom_tag_start\n\t \n",
"line" : 231}
,
{
"name" : "parserFinished",
"kind" : "function",
"type" : "void(Builder builder)",
"comment" : "\n Called when the builder finishes the parsing of a\n GtkBuilder UI definition.\n Note that this will be called once for each time\n gtk_builder_add_from_file() or gtk_builder_add_from_string()\n is called on a builder.\n Since 2.12\n Params:\n builder = a GtkBuilder\n\t \n",
"line" : 247}
,
{
"name" : "getInternalChild",
"kind" : "function",
"type" : "ObjectG(Builder builder, string childname)",
"comment" : "\n Get the internal child called childname of the buildable object.\n Since 2.12\n Params:\n builder = a GtkBuilder\n childname = name of child\n Returns: the internal child of the buildable object. [transfer none]\n\t \n",
"line" : 261}
]
}
]
}
,
{
"name" : "gtk.Builder",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Builder.d",
"members" : [
{
"name" : "Builder",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkBuilder is an auxiliary object that reads textual descriptions\n of a user interface and instantiates the described objects. To pass a\n description to a GtkBuilder, call gtk_builder_add_from_file() or\n gtk_builder_add_from_string(). These functions can be called multiple\n times; the builder merges the content of all descriptions.\n A GtkBuilder holds a reference to all objects that it has constructed\n and drops these references when it is finalized. This finalization can\n cause the destruction of non-widget objects or widgets which are not\n contained in a toplevel window. For toplevel windows constructed by a\n builder, it is the responsibility of the user to call gtk_widget_destroy()\n to get rid of them and all the widgets they contain.\n The functions gtk_builder_get_object() and gtk_builder_get_objects()\n can be used to access the widgets in the interface by the names assigned\n to them inside the UI description. Toplevel windows returned by these\n functions will stay around until the user explicitly destroys them\n with gtk_widget_destroy(). Other widgets will either be part of a\n larger hierarchy constructed by the builder (in which case you should\n not have to worry about their lifecycle), or without a parent, in which\n case they have to be added to some container to make use of them.\n Non-widget objects need to be reffed with g_object_ref() to keep them\n beyond the lifespan of the builder.\n The function gtk_builder_connect_signals() and variants thereof can be\n used to connect handlers to the named signals in the description.\n GtkBuilder UI Definitions\n GtkBuilder parses textual descriptions of user interfaces which\n are specified in an XML format which can be roughly described\n by the DTD below. We refer to these descriptions as\n GtkBuilder UI definitions or just\n UI definitions if the context is clear.\n Do not confuse GtkBuilder UI Definitions with\n GtkUIManager UI Definitions,\n which are more limited in scope.\n <!ELEMENT interface (requires|object)* >\n <!ELEMENT object (property|signal|child|ANY)* >\n <!ELEMENT property PCDATA >\n <!ELEMENT signal EMPTY >\n <!ELEMENT requires EMPTY >\n <!ELEMENT child (object|ANY*) >\n <!ATTLIST interface domain \t #IMPLIED >\n <!ATTLIST object id \t #REQUIRED\n  class \t #REQUIRED\n  type-func \t #IMPLIED\n  constructor \t #IMPLIED >\n <!ATTLIST requires lib \t #REQUIRED\n  version \t #REQUIRED >\n <!ATTLIST property name \t #REQUIRED\n  translatable \t #IMPLIED\n  comments #IMPLIED\n  context #IMPLIED >\n <!ATTLIST signal name \t #REQUIRED\n  handler \t #REQUIRED\n  after \t #IMPLIED\n  swapped \t #IMPLIED\n  object \t #IMPLIED\n  last_modification_time #IMPLIED >\n <!ATTLIST child type \t #IMPLIED\n  internal-child \t #IMPLIED >\n The toplevel element is <interface>.\n It optionally takes a \"domain\" attribute, which will make\n the builder look for translated strings using dgettext() in the\n domain specified. This can also be done by calling\n gtk_builder_set_translation_domain() on the builder.\n Objects are described by <object> elements, which can\n contain <property> elements to set properties, <signal>\n elements which connect signals to handlers, and <child>\n elements, which describe child objects (most often widgets\n inside a container, but also e.g. actions in an action group,\n or columns in a tree model). A <child> element contains\n an <object> element which describes the child object.\n The target toolkit version(s) are described by <requires>\n elements, the \"lib\" attribute specifies the widget library in\n question (currently the only supported value is \"gtk+\") and the \"version\"\n attribute specifies the target version in the form \"<major>.<minor>\".\n The builder will error out if the version requirements are not met.\n Typically, the specific kind of object represented by an\n <object> element is specified by the \"class\" attribute.\n If the type has not been loaded yet, GTK+ tries to find the\n _get_type() from the class name by applying\n heuristics. This works in most cases, but if necessary, it is\n possible to specify the name of the _get_type()\n explictly with the \"type-func\" attribute. As a special case,\n GtkBuilder allows to use an object that has been constructed\n by a GtkUIManager in another part of the UI definition by\n specifying the id of the GtkUIManager in the \"constructor\"\n attribute and the name of the object in the \"id\" attribute.\n Objects must be given a name with the \"id\" attribute, which\n allows the application to retrieve them from the builder with\n gtk_builder_get_object(). An id is also necessary to use the\n object as property value in other parts of the UI definition.\n Note\n Prior to 2.20, GtkBuilder was setting the \"name\"\n property of constructed widgets to the \"id\" attribute. In GTK+\n 2.20 or newer, you have to use gtk_buildable_get_name() instead\n of gtk_widget_get_name() to obtain the \"id\", or set the \"name\"\n property in your UI definition.\n Setting properties of objects is pretty straightforward with\n the <property> element: the \"name\" attribute specifies\n the name of the property, and the content of the element\n specifies the value. If the \"translatable\" attribute is\n set to a true value, GTK+ uses gettext() (or dgettext() if\n the builder has a translation domain set) to find a translation\n for the value. This happens before the value is parsed, so\n it can be used for properties of any type, but it is probably\n most useful for string properties. It is also possible to\n specify a context to disambiguate short strings, and comments\n which may help the translators.\n GtkBuilder can parse textual representations for the most\n common property types: characters, strings, integers, floating-point\n numbers, booleans (strings like \"TRUE\", \"t\", \"yes\", \"y\", \"1\" are\n interpreted as TRUE, strings like \"FALSE, \"f\", \"no\", \"n\", \"0\" are\n interpreted as FALSE), enumerations (can be specified by their\n name, nick or integer value), flags (can be specified by their name,\n nick, integer value, optionally combined with \"|\", e.g.\n \"GTK_VISIBLE|GTK_REALIZED\") and colors (in a format understood by\n gdk_color_parse()). Objects can be referred to by their name.\n Pixbufs can be specified as a filename of an image file to load.\n In general, GtkBuilder allows forward references to objects —\n an object doesn't have to constructed before it can be referred to.\n The exception to this rule is that an object has to be constructed\n before it can be used as the value of a construct-only property.\n Signal handlers are set up with the <signal> element.\n The \"name\" attribute specifies the name of the signal, and the\n \"handler\" attribute specifies the function to connect to the signal.\n By default, GTK+ tries to find the handler using g_module_symbol(),\n but this can be changed by passing a custom GtkBuilderConnectFunc\n to gtk_builder_connect_signals_full(). The remaining attributes,\n \"after\", \"swapped\" and \"object\", have the same meaning as the\n corresponding parameters of the g_signal_connect_object() or\n g_signal_connect_data() functions. A \"last_modification_time\" attribute\n is also allowed, but it does not have a meaning to the builder.\n Sometimes it is necessary to refer to widgets which have implicitly\n been constructed by GTK+ as part of a composite widget, to set\n properties on them or to add further children (e.g. the vbox\n of a GtkDialog). This can be achieved by setting the \"internal-child\"\n propery of the <child> element to a true value. Note that\n GtkBuilder still requires an <object> element for the internal\n child, even if it has already been constructed.\n A number of widgets have different places where a child can be\n added (e.g. tabs vs. page content in notebooks). This can be reflected\n in a UI definition by specifying the \"type\" attribute on a <child>\n The possible values for the \"type\" attribute are described in\n the sections describing the widget-specific portions of UI definitions.\n $(DDOC_COMMENT example)\n Beyond this general structure, several object classes define\n their own XML DTD fragments for filling in the ANY placeholders\n in the DTD above. Note that a custom element in a <child>\n element gets parsed by the custom tag handler of the parent\n object, while a custom element in an <object> element\n gets parsed by the custom tag handler of the object.\n These XML fragments are explained in the documentation of the\n respective objects, see\n GtkWidget,\n GtkLabel,\n GtkWindow,\n GtkContainer,\n GtkDialog,\n GtkCellLayout,\n GtkColorSelectionDialog,\n GtkFontSelectionDialog,\n GtkComboBoxEntry,\n GtkExpander,\n GtkFrame,\n GtkListStore,\n GtkTreeStore,\n GtkNotebook,\n GtkSizeGroup,\n GtkTreeView,\n GtkUIManager,\n GtkActionGroup.\n GtkMenuItem,\n GtkAssistant,\n GtkScale.\n \n",
"line" : 280,
"base" : "ObjectG",
"members" : [
{
"name" : "gtkBuilder",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkBuilder*",
"comment" : " the main Gtk struct \n",
"line" : 284}
,
{
"name" : "getBuilderStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkBuilder*()",
"line" : 287}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 294}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Builder(GtkBuilder* gtkBuilder)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 302}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 320}
,
{
"name" : "GtkBuilderClass",
"kind" : "struct",
"protection" : "private",
"line" : 327,
"members" : [
{
"name" : "parentClass",
"kind" : "variable",
"protection" : "public",
"type" : "GObjectClass",
"line" : 328}
,
{
"name" : "get_type_from_name",
"kind" : "variable",
"protection" : "public",
"type" : "extern (C) GType function(GtkBuilder* builder, char* typeName)",
"line" : 329}
,
{
"name" : "_gtk_reserved1",
"kind" : "variable",
"protection" : "public",
"type" : "extern (C) void function()",
"line" : 332}
,
{
"name" : "_gtk_reserved2",
"kind" : "variable",
"protection" : "public",
"type" : "extern (C) void function()",
"line" : 333}
,
{
"name" : "_gtk_reserved3",
"kind" : "variable",
"protection" : "public",
"type" : "extern (C) void function()",
"line" : 334}
,
{
"name" : "_gtk_reserved4",
"kind" : "variable",
"protection" : "public",
"type" : "extern (C) void function()",
"line" : 335}
,
{
"name" : "_gtk_reserved5",
"kind" : "variable",
"protection" : "public",
"type" : "extern (C) void function()",
"line" : 336}
,
{
"name" : "_gtk_reserved6",
"kind" : "variable",
"protection" : "public",
"type" : "extern (C) void function()",
"line" : 337}
,
{
"name" : "_gtk_reserved7",
"kind" : "variable",
"protection" : "public",
"type" : "extern (C) void function()",
"line" : 338}
,
{
"name" : "_gtk_reserved8",
"kind" : "variable",
"protection" : "public",
"type" : "extern (C) void function()",
"line" : 339}
]
}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Builder()",
"comment" : "\n Creates a new builder object.\n Since 2.12\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 347}
,
{
"name" : "gtk_builder_real_get_type_from_name_override",
"kind" : "function",
"protection" : "private",
"type" : "extern (C) GType(GtkBuilder* builder, char* name)",
"comment" : "\n This function is a modification of _gtk_builder_resolve_type_lazily from \"gtk\/gtkbuilder.c\".\n It is needed because it assumes we are linking at compile time to the gtk libs.\n specifically the NULL in g_module_open( NULL, 0 );\n It replaces the default function pointer \"get_type_from_name\" in GtkBuilderClass.\n\t \n",
"line" : 367}
,
{
"name" : "getObject",
"kind" : "function",
"protection" : "public",
"type" : "ObjectG(string name)",
"comment" : "\n Gets the object named name. Note that this function does not\n increment the reference count of the returned object.\n Since 2.12\n Params:\n name = name of object to get\n Returns: the object named name or NULL if it could not be found in the object tree.. transfer none.\n\t \n",
"line" : 430}
,
{
"name" : "getObjects",
"kind" : "function",
"protection" : "public",
"type" : "ObjectG[]()",
"comment" : "\n Gets all objects that have been constructed by builder.\n Since 2.12\n Returns: an array containing all the objects constructed by the GtkBuilder instance.\n\t \n",
"line" : 441}
,
{
"name" : "newFromObject",
"kind" : "function",
"protection" : "public",
"type" : "ObjectG(GObject* cobj)",
"comment" : "\n This function creates an D object corresponding to the Struct pointer passed in.\n\t \n",
"line" : 462}
,
{
"name" : "convertClassName",
"kind" : "function",
"protection" : "private",
"type" : "string(string gName)",
"comment" : "\n Turn the name of a C Type in to the name of the corresponding D type.\n Note: If the prefix of the type is \"G\" this always usses \"gobject\" as\n     the prefix, extra care should be taken for types from GIO.\n\t \n",
"line" : 514}
,
{
"name" : "startsWith",
"kind" : "function",
"protection" : "private",
"type" : "bool(string str, string prefix)",
"line" : 555}
,
{
"name" : "addFromFile",
"kind" : "function",
"protection" : "public",
"type" : "uint(string filename)",
"comment" : "\n\t \n\n Parses a file containing a GtkBuilder\n UI definition and merges it with the current contents of builder.\n Upon errors 0 will be returned and error will be assigned a\n GError from the GTK_BUILDER_ERROR, G_MARKUP_ERROR or G_FILE_ERROR\n domain.\n Since 2.12\n Params:\n filename = the name of the file to parse\n Returns: A positive value on success, 0 if an error occurred\n Throws: GException on failure.\n\t \n",
"line" : 604}
,
{
"name" : "addFromString",
"kind" : "function",
"protection" : "public",
"type" : "uint(string buffer, ulong length)",
"comment" : "\n Parses a string containing a GtkBuilder\n UI definition and merges it with the current contents of builder.\n Upon errors 0 will be returned and error will be assigned a\n GError from the GTK_BUILDER_ERROR or G_MARKUP_ERROR domain.\n Since 2.12\n Params:\n buffer = the string to parse\n length = the length of buffer (may be -1 if buffer is nul-terminated)\n Returns: A positive value on success, 0 if an error occurred\n Throws: GException on failure.\n\t \n",
"line" : 631}
,
{
"name" : "addObjectsFromFile",
"kind" : "function",
"protection" : "public",
"type" : "uint(string filename, string[] objectIds)",
"comment" : "\n Parses a file containing a GtkBuilder\n UI definition building only the requested objects and merges\n them with the current contents of builder.\n Upon errors 0 will be returned and error will be assigned a\n GError from the GTK_BUILDER_ERROR, G_MARKUP_ERROR or G_FILE_ERROR\n domain.\n Note\n If you are adding an object that depends on an object that is not\n its child (for instance a GtkTreeView that depends on its\n GtkTreeModel), you have to explicitely list all of them in object_ids.\n Since 2.14\n Params:\n filename = the name of the file to parse\n objectIds = nul-terminated array of objects to build\n Returns: A positive value on success, 0 if an error occurred\n Throws: GException on failure.\n\t \n",
"line" : 664}
,
{
"name" : "addObjectsFromString",
"kind" : "function",
"protection" : "public",
"type" : "uint(string buffer, ulong length, string[] objectIds)",
"comment" : "\n Parses a string containing a GtkBuilder\n UI definition building only the requested objects and merges\n them with the current contents of builder.\n Upon errors 0 will be returned and error will be assigned a\n GError from the GTK_BUILDER_ERROR or G_MARKUP_ERROR domain.\n Note\n If you are adding an object that depends on an object that is not\n its child (for instance a GtkTreeView that depends on its\n GtkTreeModel), you have to explicitely list all of them in object_ids.\n Since 2.14\n Params:\n buffer = the string to parse\n length = the length of buffer (may be -1 if buffer is nul-terminated)\n objectIds = nul-terminated array of objects to build\n Returns: A positive value on success, 0 if an error occurred\n Throws: GException on failure.\n\t \n",
"line" : 697}
,
{
"name" : "connectSignals",
"kind" : "function",
"protection" : "public",
"type" : "void(void* userData)",
"comment" : "\n This method is a simpler variation of gtk_builder_connect_signals_full().\n It uses GModule's introspective features (by opening the module NULL)\n to look at the application's symbol table. From here it tries to match\n the signal handler names given in the interface description with\n symbols in the application and connects the signals.\n Note that this function will not work correctly if GModule is not\n supported on the platform.\n When compiling applications for Windows, you must declare signal callbacks\n with G_MODULE_EXPORT, or they will not be put in the symbol table.\n On Linux and Unices, this is not necessary; applications should instead\n be compiled with the -Wl,--export-dynamic CFLAGS, and linked against\n gmodule-export-2.0.\n Since 2.12\n Params:\n userData = a pointer to a structure sent in as user data to all signals\n\t \n",
"line" : 729}
,
{
"name" : "connectSignalsFull",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) void function(GtkBuilder*, GObject*, char*, char*, GObject*, GConnectFlags, void*) func, void* userData)",
"comment" : "\n This function can be thought of the interpreted language binding\n version of gtk_builder_connect_signals(), except that it does not\n require GModule to function correctly.\n Since 2.12\n Params:\n func = the function used to connect the signals. [scope call]\n userData = arbitrary data that will be passed to the connection function\n\t \n",
"line" : 744}
,
{
"name" : "setTranslationDomain",
"kind" : "function",
"protection" : "public",
"type" : "void(string domain)",
"comment" : "\n Sets the translation domain of builder.\n See \"translation-domain\".\n Since 2.12\n Params:\n domain = the translation domain or NULL. [allow-none]\n\t \n",
"line" : 757}
,
{
"name" : "getTranslationDomain",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the translation domain of builder.\n Since 2.12\n Returns: the translation domain. This string is owned by the builder object and must not be modified or freed.\n\t \n",
"line" : 768}
,
{
"name" : "getTypeFromName",
"kind" : "function",
"protection" : "public",
"type" : "GType(string typeName)",
"comment" : "\n Looks up a type by name, using the virtual function that\n GtkBuilder has for that purpose. This is mainly used when\n implementing the GtkBuildable interface on a type.\n Since 2.12\n Params:\n typeName = type name to lookup\n Returns: the GType found for type_name or G_TYPE_INVALID if no type was found\n\t \n",
"line" : 783}
,
{
"name" : "valueFromString",
"kind" : "function",
"protection" : "public",
"type" : "int(ParamSpec pspec, string string, Value value)",
"comment" : "\n This function demarshals a value from a string. This function\n calls g_value_init() on the value argument, so it need not be\n initialised beforehand.\n This function can handle char, uchar, boolean, int, uint, long,\n ulong, enum, flags, float, double, string, GdkColor and\n GtkAdjustment type values. Support for GtkWidget type values is\n still to come.\n Upon errors FALSE will be returned and error will be assigned a\n GError from the GTK_BUILDER_ERROR domain.\n Since 2.12\n Params:\n pspec = the GParamSpec for the property\n string = the string representation of the value\n value = the GValue to store the result in. [out]\n Returns: TRUE on success\n Throws: GException on failure.\n\t \n",
"line" : 807}
,
{
"name" : "valueFromStringType",
"kind" : "function",
"protection" : "public",
"type" : "int(GType type, string string, Value value)",
"comment" : "\n Like gtk_builder_value_from_string(), this function demarshals\n a value from a string, but takes a GType instead of GParamSpec.\n This function calls g_value_init() on the value argument, so it\n need not be initialised beforehand.\n Upon errors FALSE will be returned and error will be assigned a\n GError from the GTK_BUILDER_ERROR domain.\n Since 2.12\n Params:\n type = the GType of the value\n string = the string representation of the value\n value = the GValue to store the result in. [out]\n Returns: TRUE on success\n Throws: GException on failure.\n\t \n",
"line" : 837}
]
}
]
}
,
{
"name" : "gtk.ButtonBox",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/ButtonBox.d",
"members" : [
{
"name" : "ButtonBox",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The primary purpose of this class is to keep track of the various properties\n of GtkHButtonBox and GtkVButtonBox widgets.\n gtk_button_box_get_child_size() retrieves the minimum width and height\n for widgets in a given button box.\n The internal padding of buttons can be retrieved and changed per button box using\n gtk_button_box_get_child_ipadding() and gtk_button_box_set_child_ipadding()\n respectively.\n gtk_button_box_get_spacing() and gtk_button_box_set_spacing() retrieve and\n change default number of pixels between buttons, respectively.\n gtk_button_box_get_layout() and gtk_button_box_set_layout() retrieve and alter the method\n used to spread the buttons in a button box across the container, respectively.\n The main purpose of GtkButtonBox is to make sure the children have all the same size.\n Therefore it ignores the homogeneous property which it inherited from GtkBox, and always\n behaves as if homogeneous was TRUE.\n \n",
"line" : 92,
"base" : "Box",
"members" : [
{
"name" : "gtkButtonBox",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkButtonBox*",
"comment" : " the main Gtk struct \n",
"line" : 96}
,
{
"name" : "getButtonBoxStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkButtonBox*()",
"line" : 99}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 106}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ButtonBox(GtkButtonBox* gtkButtonBox)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 114}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 132}
,
{
"name" : "createActionBox",
"kind" : "function",
"protection" : "public",
"type" : "ButtonBox(void delegate(Button) onClicked, StockID[] stocks, string[] actions, bool vertical = false)",
"comment" : " \n",
"line" : 139}
,
{
"name" : "createOkBox",
"kind" : "function",
"protection" : "public",
"type" : "ButtonBox(void delegate(Button) onClicked)",
"comment" : " \n",
"line" : 168}
,
{
"name" : "createOkCancelBox",
"kind" : "function",
"protection" : "public",
"type" : "ButtonBox(void delegate(Button) onClicked)",
"comment" : " \n",
"line" : 177}
,
{
"name" : "getLayout",
"kind" : "function",
"protection" : "public",
"type" : "GtkButtonBoxStyle()",
"comment" : "\n\t \n\n Retrieves the method being used to arrange the buttons in a button box.\n Returns: the method used to layout buttons in widget.\n\t \n",
"line" : 193}
,
{
"name" : "getChildSize",
"kind" : "function",
"protection" : "public",
"type" : "void(out int minWidth, out int minHeight)",
"comment" : "\n Warning\n gtk_button_box_get_child_size is deprecated and should not be used in newly-written code. Use the style properties\n \"child-min-width\/-height\" instead.\n Retrieves the current width and height of all child widgets in a button box.\n min_width and min_height are filled with those values, respectively.\n Params:\n minWidth = the width of the buttons contained by widget.\n minHeight = the height of the buttons contained by widget.\n\t \n",
"line" : 209}
,
{
"name" : "getChildIpadding",
"kind" : "function",
"protection" : "public",
"type" : "void(out int ipadX, out int ipadY)",
"comment" : "\n Warning\n gtk_button_box_get_child_ipadding is deprecated and should not be used in newly-written code. Use the style properties\n  \"child-internal-pad-x\"\n  and\n  \"child-internal-pad-y\"\n  instead.\n Gets the default number of pixels that pad the buttons in a given button box.\n Params:\n ipadX = the horizontal padding used by buttons in widget.\n ipadY = the vertical padding used by buttons in widget.\n\t \n",
"line" : 227}
,
{
"name" : "getChildSecondary",
"kind" : "function",
"protection" : "public",
"type" : "int(Widget child)",
"comment" : "\n Returns whether child should appear in a secondary group of children.\n Since 2.4\n Params:\n child = a child of widget\n Returns: whether child should appear in a secondary group of children.\n\t \n",
"line" : 240}
,
{
"name" : "setLayout",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkButtonBoxStyle layoutStyle)",
"comment" : "\n Changes the way buttons are arranged in their container.\n Params:\n layoutStyle = the new layout style.\n\t \n",
"line" : 251}
,
{
"name" : "setChildSize",
"kind" : "function",
"protection" : "public",
"type" : "void(int minWidth, int minHeight)",
"comment" : "\n Warning\n gtk_button_box_set_child_size is deprecated and should not be used in newly-written code. This is not supported anymore and can only be set through the theme\n Params:\n minWidth = a default width for buttons in widget\n minHeight = a default height for buttons in widget\n\t \n",
"line" : 264}
,
{
"name" : "setChildIpadding",
"kind" : "function",
"protection" : "public",
"type" : "void(int ipadX, int ipadY)",
"comment" : "\n Warning\n gtk_button_box_set_child_ipadding is deprecated and should not be used in newly-written code. Use the style properties\n \"child-internal-pad-x\/-y\" instead.\n Changes the amount of internal padding used by all buttons in a given button\n box.\n Params:\n ipadX = the horizontal padding that should be used by each button in widget.\n ipadY = the vertical padding that should be used by each button in widget.\n\t \n",
"line" : 280}
,
{
"name" : "setChildSecondary",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, int isSecondary)",
"comment" : "\n Sets whether child should appear in a secondary group of children.\n A typical use of a secondary child is the help button in a dialog.\n This group appears after the other children if the style\n is GTK_BUTTONBOX_START, GTK_BUTTONBOX_SPREAD or\n GTK_BUTTONBOX_EDGE, and before the other children if the style\n is GTK_BUTTONBOX_END. For horizontal button boxes, the definition\n of before\/after depends on direction of the widget (see\n gtk_widget_set_direction()). If the style is GTK_BUTTONBOX_START\n or GTK_BUTTONBOX_END, then the secondary children are aligned at\n the other end of the button box from the main children. For the\n other styles, they appear immediately next to the main children.\n Params:\n child = a child of widget\n isSecondary = if TRUE, the child appears in a secondary group of the\n button box.\n\t \n",
"line" : 303}
]
}
]
}
,
{
"name" : "gtk.Button",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Button.d",
"members" : [
{
"name" : "Button",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkButton widget is generally used to attach a function to that\n is called when the button is pressed. The various signals and how to use\n them are outlined below.\n The GtkButton widget can hold any valid child widget. That is it can\n hold most any other standard GtkWidget. The most commonly used child is\n the GtkLabel.\n \n",
"line" : 95,
"base" : "Bin",
"interfaces" : [
"ActivatableIF"],
"members" : [
{
"name" : "gtkButton",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkButton*",
"comment" : " the main Gtk struct \n",
"line" : 99}
,
{
"name" : "getButtonStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkButton*()",
"line" : 102}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 109}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Button(GtkButton* gtkButton)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 117}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 135}
,
{
"name" : "currentIconSize",
"kind" : "variable",
"protection" : "private",
"type" : "GtkIconSize",
"line" : 141}
,
{
"name" : "action",
"kind" : "variable",
"protection" : "private",
"type" : "string",
"comment" : " An arbitrary string to be used by the application \n",
"line" : 144}
,
{
"name" : "setIconSize",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkIconSize iconSize)",
"comment" : " \n",
"line" : 150}
,
{
"name" : "getIconSize",
"kind" : "function",
"protection" : "public",
"type" : "GtkIconSize()",
"comment" : " \n",
"line" : 156}
,
{
"name" : "setActionName",
"kind" : "function",
"protection" : "public",
"type" : "void(string action)",
"comment" : " \n",
"line" : 162}
,
{
"name" : "getActionName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : " \n",
"line" : 168}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Button(string label, bool mnemonic = true)",
"comment" : "\n Creates a new GtkButton containing a label.\n If characters in label are preceded by an underscore, they are underlined.\n If you need a literal underscore character in a label, use '__' (two\n underscores). The first underlined character represents a keyboard\n accelerator called a mnemonic.\n Pressing Alt and that key activates the button.\n Params:\n  label = The text of the button, with an underscore in front of the\n  mnemonic character\n  mnemonic = true if the button has an mnemnonic\n Returns:\n  a new GtkButton\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 188}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Button(StockID stockID, bool hideLabel = false)",
"comment" : "\n Creates a new GtkButton containing the image and text from a stock item.\n Some stock ids have preprocessor macros like GTK_STOCK_OK and\n GTK_STOCK_APPLY.\n If stock_id is unknown, then it will be treated as a mnemonic\n label (as for gtk_button_new_with_mnemonic()).\n Params:\n  StockID = the name of the stock item\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 221}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Button(StockID stockID, void delegate(Button) dlg, bool hideLabel = false)",
"comment" : " \n",
"line" : 245}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Button(string label, void delegate(Button) dlg, bool mnemonic = true)",
"comment" : " \n",
"line" : 252}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Button(string label, void delegate(Button) dlg, string action)",
"comment" : " \n",
"line" : 259}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 269}
,
{
"name" : "onActivateListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Button)[]",
"line" : 271}
,
{
"name" : "addOnActivate",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Button) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::activate signal on GtkButton is an action signal and\n emitting it causes the button to animate press then release.\n Applications should never connect to this signal, but use the\n \"clicked\" signal.\n\t \n",
"line" : 278}
,
{
"name" : "callBackActivate",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkButton* widgetStruct, Button button)",
"line" : 293}
,
{
"name" : "onClickedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Button)[]",
"line" : 301}
,
{
"name" : "addOnClicked",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Button) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when the button has been activated (pressed and released).\n\t \n",
"line" : 305}
,
{
"name" : "callBackClicked",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkButton* buttonStruct, Button button)",
"line" : 320}
,
{
"name" : "onEnterListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Button)[]",
"line" : 328}
,
{
"name" : "addOnEnter",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Button) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Warning\n GtkButton::enter has been deprecated since version 2.8 and should not be used in newly-written code. Use the \"enter-notify-event\" signal.\n Emitted when the pointer enters the button.\n\t \n",
"line" : 334}
,
{
"name" : "callBackEnter",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkButton* buttonStruct, Button button)",
"line" : 349}
,
{
"name" : "onLeaveListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Button)[]",
"line" : 357}
,
{
"name" : "addOnLeave",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Button) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Warning\n GtkButton::leave has been deprecated since version 2.8 and should not be used in newly-written code. Use the \"leave-notify-event\" signal.\n Emitted when the pointer leaves the button.\n\t \n",
"line" : 363}
,
{
"name" : "callBackLeave",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkButton* buttonStruct, Button button)",
"line" : 378}
,
{
"name" : "onPressedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Button)[]",
"line" : 386}
,
{
"name" : "addOnPressed",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Button) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Warning\n GtkButton::pressed has been deprecated since version 2.8 and should not be used in newly-written code. Use the \"button-press-event\" signal.\n Emitted when the button is pressed.\n\t \n",
"line" : 392}
,
{
"name" : "callBackPressed",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkButton* buttonStruct, Button button)",
"line" : 407}
,
{
"name" : "onReleasedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Button)[]",
"line" : 415}
,
{
"name" : "addOnReleased",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Button) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Warning\n GtkButton::released has been deprecated since version 2.8 and should not be used in newly-written code. Use the \"button-release-event\" signal.\n Emitted when the button is released.\n\t \n",
"line" : 421}
,
{
"name" : "callBackReleased",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkButton* buttonStruct, Button button)",
"line" : 436}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Button()",
"comment" : "\n Creates a new GtkButton widget. To add a child widget to the button,\n use gtk_container_add().\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 450}
,
{
"name" : "pressed",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_button_pressed has been deprecated since version 2.20 and should not be used in newly-written code. Use the \"button-press-event\" signal.\n Emits a \"pressed\" signal to the given GtkButton.\n\t \n",
"line" : 466}
,
{
"name" : "released",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_button_released has been deprecated since version 2.20 and should not be used in newly-written code. Use the \"button-release-event\" signal.\n Emits a \"released\" signal to the given GtkButton.\n\t \n",
"line" : 477}
,
{
"name" : "clicked",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Emits a \"clicked\" signal to the given GtkButton.\n\t \n",
"line" : 486}
,
{
"name" : "enter",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_button_enter has been deprecated since version 2.20 and should not be used in newly-written code. Use the \"enter-notify-event\" signal.\n Emits a \"enter\" signal to the given GtkButton.\n\t \n",
"line" : 497}
,
{
"name" : "leave",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_button_leave has been deprecated since version 2.20 and should not be used in newly-written code. Use the \"leave-notify-event\" signal.\n Emits a \"leave\" signal to the given GtkButton.\n\t \n",
"line" : 508}
,
{
"name" : "setRelief",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkReliefStyle newstyle)",
"comment" : "\n Sets the relief style of the edges of the given GtkButton widget.\n Three styles exist, GTK_RELIEF_NORMAL, GTK_RELIEF_HALF, GTK_RELIEF_NONE.\n The default style is, as one can guess, GTK_RELIEF_NORMAL.\n Params:\n newstyle = The GtkReliefStyle as described above.\n\t \n",
"line" : 521}
,
{
"name" : "getRelief",
"kind" : "function",
"protection" : "public",
"type" : "GtkReliefStyle()",
"comment" : "\n Returns the current relief style of the given GtkButton.\n Returns: The current GtkReliefStyle\n\t \n",
"line" : 531}
,
{
"name" : "getLabel",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Fetches the text from the label of the button, as set by\n gtk_button_set_label(). If the label text has not\n been set the return value will be NULL. This will be the\n case if you create an empty button with gtk_button_new() to\n use as a container.\n Returns: The text of the label widget. This string is owned by the widget and must not be modified or freed.\n\t \n",
"line" : 545}
,
{
"name" : "setLabel",
"kind" : "function",
"protection" : "public",
"type" : "void(string label)",
"comment" : "\n Sets the text of the label of the button to str. This text is\n also used to select the stock item if gtk_button_set_use_stock()\n is used.\n This will also clear any previously set labels.\n Params:\n label = a string\n\t \n",
"line" : 559}
,
{
"name" : "getUseStock",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the button label is a stock item.\n Returns: TRUE if the button label is used to select a stock item instead of being used directly as the label text.\n\t \n",
"line" : 569}
,
{
"name" : "setUseStock",
"kind" : "function",
"protection" : "public",
"type" : "void(int useStock)",
"comment" : "\n If TRUE, the label set on the button is used as a\n stock id to select the stock item for the button.\n Params:\n useStock = TRUE if the button should use a stock item\n\t \n",
"line" : 581}
,
{
"name" : "getUseUnderline",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether an embedded underline in the button label indicates a\n mnemonic. See gtk_button_set_use_underline().\n Returns: TRUE if an embedded underline in the button label indicates the mnemonic accelerator keys.\n\t \n",
"line" : 592}
,
{
"name" : "setUseUnderline",
"kind" : "function",
"protection" : "public",
"type" : "void(int useUnderline)",
"comment" : "\n If true, an underline in the text of the button label indicates\n the next character should be used for the mnemonic accelerator key.\n Params:\n useUnderline = TRUE if underlines in the text indicate mnemonics\n\t \n",
"line" : 604}
,
{
"name" : "setFocusOnClick",
"kind" : "function",
"protection" : "public",
"type" : "void(int focusOnClick)",
"comment" : "\n Sets whether the button will grab focus when it is clicked with the mouse.\n Making mouse clicks not grab focus is useful in places like toolbars where\n you don't want the keyboard focus removed from the main area of the\n application.\n Since 2.4\n Params:\n focusOnClick = whether the button grabs focus when clicked with the mouse\n\t \n",
"line" : 619}
,
{
"name" : "getFocusOnClick",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the button grabs focus when it is clicked with the mouse.\n See gtk_button_set_focus_on_click().\n Since 2.4\n Returns: TRUE if the button grabs focus when it is clicked with the mouse.\n\t \n",
"line" : 631}
,
{
"name" : "setAlignment",
"kind" : "function",
"protection" : "public",
"type" : "void(float xalign, float yalign)",
"comment" : "\n Sets the alignment of the child. This property has no effect unless\n the child is a GtkMisc or a GtkAligment.\n Since 2.4\n Params:\n xalign = the horizontal position of the child, 0.0 is left aligned,\n 1.0 is right aligned\n yalign = the vertical position of the child, 0.0 is top aligned,\n 1.0 is bottom aligned\n\t \n",
"line" : 647}
,
{
"name" : "getAlignment",
"kind" : "function",
"protection" : "public",
"type" : "void(out float xalign, out float yalign)",
"comment" : "\n Gets the alignment of the child in the button.\n Since 2.4\n Params:\n xalign = return location for horizontal alignment. [out]\n yalign = return location for vertical alignment. [out]\n\t \n",
"line" : 660}
,
{
"name" : "setImage",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget image)",
"comment" : "\n Set the image of button to the given widget. Note that\n it depends on the \"gtk-button-images\" setting whether the\n image will be displayed or not, you don't have to call\n gtk_widget_show() on image yourself.\n Since 2.6\n Params:\n image = a widget to set as the image for the button\n\t \n",
"line" : 675}
,
{
"name" : "getImage",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Gets the widget that is currenty set as the image of button.\n This may have been explicitly set by gtk_button_set_image()\n or constructed by gtk_button_new_from_stock().\n Since 2.6\n Returns: a GtkWidget or NULL in case there is no image. [transfer none]\n\t \n",
"line" : 688}
,
{
"name" : "setImagePosition",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkPositionType position)",
"comment" : "\n Sets the position of the image relative to the text\n inside the button.\n Since 2.10\n Params:\n position = the position\n\t \n",
"line" : 706}
,
{
"name" : "getImagePosition",
"kind" : "function",
"protection" : "public",
"type" : "GtkPositionType()",
"comment" : "\n Gets the position of the image relative to the text\n inside the button.\n Since 2.10\n Returns: the position\n\t \n",
"line" : 718}
,
{
"name" : "getEventWindow",
"kind" : "function",
"protection" : "public",
"type" : "Window()",
"comment" : "\n Returns the button's event window if it is realized, NULL otherwise.\n This function should be rarely needed.\n Since 2.22\n Returns: button's event window. [transfer none]\n\t \n",
"line" : 730}
]
}
]
}
,
{
"name" : "gtk.Calendar",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Calendar.d",
"members" : [
{
"name" : "Calendar",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkCalendar is a widget that displays a calendar, one month at a time.\n It can be created with gtk_calendar_new().\n The month and year currently displayed can be altered with\n gtk_calendar_select_month(). The exact day can be selected from the displayed\n month using gtk_calendar_select_day().\n To place a visual marker on a particular day, use gtk_calendar_mark_day()\n and to remove the marker, gtk_calendar_unmark_day().\n Alternative, all marks can be cleared with gtk_calendar_clear_marks().\n The way in which the calendar itself is displayed can be altered using\n gtk_calendar_set_display_options().\n The selected date can be retrieved from a GtkCalendar using\n gtk_calendar_get_date().\n \n",
"line" : 83,
"base" : "Widget",
"members" : [
{
"name" : "gtkCalendar",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkCalendar*",
"comment" : " the main Gtk struct \n",
"line" : 87}
,
{
"name" : "getCalendarStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkCalendar*()",
"line" : 90}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 97}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Calendar(GtkCalendar* gtkCalendar)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 105}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 123}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 131}
,
{
"name" : "onDaySelectedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Calendar)[]",
"line" : 133}
,
{
"name" : "addOnDaySelected",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Calendar) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when the user selects a day.\n\t \n",
"line" : 137}
,
{
"name" : "callBackDaySelected",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkCalendar* calendarStruct, Calendar calendar)",
"line" : 152}
,
{
"name" : "onDaySelectedDoubleClickListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Calendar)[]",
"line" : 160}
,
{
"name" : "addOnDaySelectedDoubleClick",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Calendar) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 163}
,
{
"name" : "callBackDaySelectedDoubleClick",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkCalendar* calendarStruct, Calendar calendar)",
"line" : 178}
,
{
"name" : "onMonthChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Calendar)[]",
"line" : 186}
,
{
"name" : "addOnMonthChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Calendar) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when the user clicks a button to change the selected month on a\n calendar.\n Emitted when the user clicks a button to change the selected month on a\n calendar.\n\t \n",
"line" : 193}
,
{
"name" : "callBackMonthChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkCalendar* calendarStruct, Calendar calendar)",
"line" : 208}
,
{
"name" : "onNextMonthListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Calendar)[]",
"line" : 216}
,
{
"name" : "addOnNextMonth",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Calendar) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 219}
,
{
"name" : "callBackNextMonth",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkCalendar* calendarStruct, Calendar calendar)",
"line" : 234}
,
{
"name" : "onNextYearListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Calendar)[]",
"line" : 242}
,
{
"name" : "addOnNextYear",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Calendar) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 245}
,
{
"name" : "callBackNextYear",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkCalendar* calendarStruct, Calendar calendar)",
"line" : 260}
,
{
"name" : "onPrevMonthListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Calendar)[]",
"line" : 268}
,
{
"name" : "addOnPrevMonth",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Calendar) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 271}
,
{
"name" : "callBackPrevMonth",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkCalendar* calendarStruct, Calendar calendar)",
"line" : 286}
,
{
"name" : "onPrevYearListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Calendar)[]",
"line" : 294}
,
{
"name" : "addOnPrevYear",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Calendar) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 297}
,
{
"name" : "callBackPrevYear",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkCalendar* calendarStruct, Calendar calendar)",
"line" : 312}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Calendar()",
"comment" : "\n Creates a new calendar, with the current date being selected.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 325}
,
{
"name" : "selectMonth",
"kind" : "function",
"protection" : "public",
"type" : "int(uint month, uint year)",
"comment" : "\n Shifts the calendar to a different month.\n Note that this function always returns TRUE, and you should\n ignore the return value. In GTK+ 3, this function will not\n return a value.\n Params:\n month = a month number between 0 and 11.\n year = the year the month is in.\n Returns: TRUE, always\n\t \n",
"line" : 346}
,
{
"name" : "selectDay",
"kind" : "function",
"protection" : "public",
"type" : "void(uint day)",
"comment" : "\n Selects a day from the current month.\n Params:\n day = the day number between 1 and 31, or 0 to unselect\n the currently selected day.\n\t \n",
"line" : 358}
,
{
"name" : "markDay",
"kind" : "function",
"protection" : "public",
"type" : "int(uint day)",
"comment" : "\n Places a visual marker on a particular day.\n Note that this function always returns TRUE, and you should\n ignore the return value. In GTK+ 3, this function will not\n return a value.\n Params:\n day = the day number to mark between 1 and 31.\n Returns: TRUE, always\n\t \n",
"line" : 373}
,
{
"name" : "unmarkDay",
"kind" : "function",
"protection" : "public",
"type" : "int(uint day)",
"comment" : "\n Removes the visual marker from a particular day.\n Note that this function always returns TRUE, and you should\n ignore the return value. In GTK+ 3, this function will not\n return a value.\n Params:\n day = the day number to unmark between 1 and 31.\n Returns: TRUE, always\n\t \n",
"line" : 388}
,
{
"name" : "clearMarks",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Remove all visual markers.\n\t \n",
"line" : 397}
,
{
"name" : "getDisplayOptions",
"kind" : "function",
"protection" : "public",
"type" : "GtkCalendarDisplayOptions()",
"comment" : "\n Returns the current display options of calendar.\n Since 2.4\n Returns: the display options.\n\t \n",
"line" : 408}
,
{
"name" : "setDisplayOptions",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkCalendarDisplayOptions flags)",
"comment" : "\n Sets display options (whether to display the heading and the month\n headings).\n Since 2.4\n Params:\n flags = the display options to set\n\t \n",
"line" : 421}
,
{
"name" : "getDate",
"kind" : "function",
"protection" : "public",
"type" : "void(out uint year, out uint month, out uint day)",
"comment" : "\n Obtains the selected date from a GtkCalendar.\n Params:\n year = location to store the year as a decimal\n number (e.g. 2011), or NULL. [out][allow-none]\n month = location to store the month number\n (between 0 and 11), or NULL. [out][allow-none]\n day = location to store the day number (between\n 1 and 31), or NULL. [out][allow-none]\n\t \n",
"line" : 437}
,
{
"name" : "setDetailFunc",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) char* function(GtkCalendar*, uint, uint, uint, void*) func, void* data, extern (C) void function(void* cbData) destroy)",
"comment" : "\n Installs a function which provides Pango markup with detail information\n for each day. Examples for such details are holidays or appointments. That\n information is shown below each day when \"show-details\" is set.\n A tooltip containing with full detail information is provided, if the entire\n text should not fit into the details area, or if \"show-details\"\n is not set.\n The size of the details area can be restricted by setting the\n \"detail-width-chars\" and \"detail-height-rows\"\n properties.\n Since 2.14\n Params:\n func = a function providing details for each day.\n data = data to pass to func invokations.\n destroy = a function for releasing data.\n\t \n",
"line" : 459}
,
{
"name" : "getDetailWidthChars",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Queries the width of detail cells, in characters.\n See \"detail-width-chars\".\n Since 2.14\n Returns: The width of detail cells, in characters.\n\t \n",
"line" : 471}
,
{
"name" : "setDetailWidthChars",
"kind" : "function",
"protection" : "public",
"type" : "void(int chars)",
"comment" : "\n Updates the width of detail cells.\n See \"detail-width-chars\".\n Since 2.14\n Params:\n chars = detail width in characters.\n\t \n",
"line" : 484}
,
{
"name" : "getDetailHeightRows",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Queries the height of detail cells, in rows.\n See \"detail-width-chars\".\n Since 2.14\n Returns: The height of detail cells, in rows.\n\t \n",
"line" : 496}
,
{
"name" : "setDetailHeightRows",
"kind" : "function",
"protection" : "public",
"type" : "void(int rows)",
"comment" : "\n Updates the height of detail cells.\n See \"detail-height-rows\".\n Since 2.14\n Params:\n rows = detail height in rows.\n\t \n",
"line" : 509}
,
{
"name" : "displayOptions",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkCalendarDisplayOptions flags)",
"comment" : "\n Warning\n gtk_calendar_display_options has been deprecated since version 2.4 and should not be used in newly-written code. Use gtk_calendar_set_display_options() instead\n Sets display options (whether to display the heading and the month headings).\n Params:\n flags = the display options to set.\n\t \n",
"line" : 522}
,
{
"name" : "freeze",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_calendar_freeze has been deprecated since version 2.8 and should not be used in newly-written code.\n Does nothing. Previously locked the display of the calendar until\n it was thawed with gtk_calendar_thaw().\n\t \n",
"line" : 534}
,
{
"name" : "thaw",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_calendar_thaw has been deprecated since version 2.8 and should not be used in newly-written code.\n Does nothing. Previously defrosted a calendar; all the changes made\n since the last gtk_calendar_freeze() were displayed.\n\t \n",
"line" : 546}
]
}
]
}
,
{
"name" : "gtk.CellEditable",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/CellEditable.d",
"members" : [
{
"name" : "CellEditable",
"kind" : "class",
"protection" : "public",
"comment" : "\n \n",
"line" : 72,
"base" : "ObjectG",
"interfaces" : [
"CellEditableIF"],
"members" : [
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 79}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CellEditable(GtkCellEditable* gtkCellEditable)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 87}
]
}
]
}
,
{
"name" : "gtk.CellEditableIF",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/CellEditableIF.d",
"members" : [
{
"name" : "CellEditableIF",
"kind" : "interface",
"protection" : "public",
"comment" : "\n Description\n The GtkCellEditable interface must be implemented for widgets\n to be usable when editing the contents of a GtkTreeView cell.\n \n",
"line" : 76,
"members" : [
{
"name" : "getCellEditableTStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkCellEditable*()",
"line" : 79}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 82}
,
{
"name" : "onEditingDoneListeners",
"kind" : "function",
"protection" : "public",
"type" : "void delegate(CellEditableIF)[]()",
"comment" : "\n\t \n",
"line" : 88}
,
{
"name" : "addOnEditingDone",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(CellEditableIF) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is a sign for the cell renderer to update its\n value from the cell_editable.\n Implementations of GtkCellEditable are responsible for\n emitting this signal when they are done editing, e.g.\n GtkEntry is emitting it when the user presses Enter.\n gtk_cell_editable_editing_done() is a convenience method\n for emitting GtkCellEditable::editing-done.\n\t \n",
"line" : 98}
,
{
"name" : "onRemoveWidgetListeners",
"kind" : "function",
"protection" : "public",
"type" : "void delegate(CellEditableIF)[]()",
"line" : 99}
,
{
"name" : "addOnRemoveWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(CellEditableIF) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is meant to indicate that the cell is finished\n editing, and the widget may now be destroyed.\n Implementations of GtkCellEditable are responsible for\n emitting this signal when they are done editing. It must\n be emitted after the \"editing-done\" signal,\n to give the cell renderer a chance to update the cell's value\n before the widget is removed.\n gtk_cell_editable_remove_widget() is a convenience method\n for emitting GtkCellEditable::remove-widget.\n\t \n",
"line" : 111}
,
{
"name" : "startEditing",
"kind" : "function",
"protection" : "public",
"type" : "void(Event event)",
"comment" : "\n Begins editing on a cell_editable. event is the GdkEvent that began\n the editing process. It may be NULL, in the instance that editing was\n initiated through programatic means.\n Params:\n event = A GdkEvent, or NULL. [allow-none]\n\t \n",
"line" : 120}
,
{
"name" : "editingDone",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Emits the \"editing-done\" signal.\n\t \n",
"line" : 125}
,
{
"name" : "removeWidget",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Emits the \"remove-widget\" signal.\n\t \n",
"line" : 130}
]
}
]
}
,
{
"name" : "gtk.CellEditableT",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/CellEditableT.d",
"members" : [
{
"name" : "CellEditableT(TStruct)",
"kind" : "template",
"protection" : "public",
"comment" : "\n Description\n The GtkCellEditable interface must be implemented for widgets\n to be usable when editing the contents of a GtkTreeView cell.\n \n",
"line" : 76,
"members" : [
{
"name" : "gtkCellEditable",
"kind" : "variable",
"type" : "GtkCellEditable*",
"comment" : " the main Gtk struct \n",
"line" : 80}
,
{
"name" : "getCellEditableTStruct",
"kind" : "function",
"type" : "GtkCellEditable*()",
"line" : 83}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 91}
,
{
"name" : "_onEditingDoneListeners",
"kind" : "variable",
"type" : "void delegate(CellEditableIF)[]",
"line" : 93}
,
{
"name" : "onEditingDoneListeners",
"kind" : "function",
"type" : "void delegate(CellEditableIF)[]()",
"line" : 94}
,
{
"name" : "addOnEditingDone",
"kind" : "function",
"type" : "void(void delegate(CellEditableIF) dlg, ConnectFlags connectFlags = cast(ConnectFlags)0)",
"comment" : "\n This signal is a sign for the cell renderer to update its\n value from the cell_editable.\n Implementations of GtkCellEditable are responsible for\n emitting this signal when they are done editing, e.g.\n GtkEntry is emitting it when the user presses Enter.\n gtk_cell_editable_editing_done() is a convenience method\n for emitting GtkCellEditable::editing-done.\n\t \n",
"line" : 107}
,
{
"name" : "callBackEditingDone",
"kind" : "function",
"type" : "extern (C) void(GtkCellEditable* cellEditableStruct, CellEditableIF cellEditableIF)",
"line" : 122}
,
{
"name" : "_onRemoveWidgetListeners",
"kind" : "variable",
"type" : "void delegate(CellEditableIF)[]",
"line" : 130}
,
{
"name" : "onRemoveWidgetListeners",
"kind" : "function",
"type" : "void delegate(CellEditableIF)[]()",
"line" : 131}
,
{
"name" : "addOnRemoveWidget",
"kind" : "function",
"type" : "void(void delegate(CellEditableIF) dlg, ConnectFlags connectFlags = cast(ConnectFlags)0)",
"comment" : "\n This signal is meant to indicate that the cell is finished\n editing, and the widget may now be destroyed.\n Implementations of GtkCellEditable are responsible for\n emitting this signal when they are done editing. It must\n be emitted after the \"editing-done\" signal,\n to give the cell renderer a chance to update the cell's value\n before the widget is removed.\n gtk_cell_editable_remove_widget() is a convenience method\n for emitting GtkCellEditable::remove-widget.\n\t \n",
"line" : 146}
,
{
"name" : "callBackRemoveWidget",
"kind" : "function",
"type" : "extern (C) void(GtkCellEditable* cellEditableStruct, CellEditableIF cellEditableIF)",
"line" : 161}
,
{
"name" : "startEditing",
"kind" : "function",
"type" : "void(Event event)",
"comment" : "\n Begins editing on a cell_editable. event is the GdkEvent that began\n the editing process. It may be NULL, in the instance that editing was\n initiated through programatic means.\n Params:\n event = A GdkEvent, or NULL. [allow-none]\n\t \n",
"line" : 177}
,
{
"name" : "editingDone",
"kind" : "function",
"type" : "void()",
"comment" : "\n Emits the \"editing-done\" signal.\n\t \n",
"line" : 186}
,
{
"name" : "removeWidget",
"kind" : "function",
"type" : "void()",
"comment" : "\n Emits the \"remove-widget\" signal.\n\t \n",
"line" : 195}
]
}
]
}
,
{
"name" : "gtk.CellLayoutIF",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/CellLayoutIF.d",
"members" : [
{
"name" : "CellLayoutIF",
"kind" : "interface",
"protection" : "public",
"comment" : "\n Description\n GtkCellLayout is an interface to be implemented by all objects which\n want to provide a GtkTreeViewColumn-like API for packing cells, setting\n attributes and data funcs.\n One of the notable features provided by implementations of GtkCellLayout\n are attributes. Attributes let you set the properties\n in flexible ways. They can just be set to constant values like regular\n properties. But they can also be mapped to a column of the underlying\n tree model with gtk_cell_layout_set_attributes(), which means that the value\n of the attribute can change from cell to cell as they are rendered by the\n cell renderer. Finally, it is possible to specify a function with\n gtk_cell_layout_set_cell_data_func() that is called to determine the value\n of the attribute for each cell that is rendered.\n GtkCellLayouts as GtkBuildable\n Implementations of GtkCellLayout which also implement the GtkBuildable\n interface (GtkCellView, GtkIconView, GtkComboBox, GtkComboBoxEntry,\n GtkEntryCompletion, GtkTreeViewColumn) accept GtkCellRenderer objects\n as <child> elements in UI definitions. They support a custom\n <attributes> element for their children, which can contain\n multiple <attribute> elements. Each <attribute> element has\n a name attribute which specifies a property of the cell renderer; the\n content of the element is the attribute value.\n $(DDOC_COMMENT example)\n \n",
"line" : 99,
"members" : [
{
"name" : "getCellLayoutTStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkCellLayout*()",
"line" : 102}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 105}
,
{
"name" : "packStart",
"kind" : "function",
"protection" : "public",
"type" : "void(CellRenderer cell, int expand)",
"comment" : "\n\t \n\n Packs the cell into the beginning of cell_layout. If expand is FALSE,\n then the cell is allocated no more space than it needs. Any unused space\n is divided evenly between cells for which expand is TRUE.\n Note that reusing the same cell renderer is not supported.\n Since 2.4\n Params:\n cell = A GtkCellRenderer.\n expand = TRUE if cell is to be given extra space allocated to cell_layout.\n\t \n",
"line" : 121}
,
{
"name" : "packEnd",
"kind" : "function",
"protection" : "public",
"type" : "void(CellRenderer cell, int expand)",
"comment" : "\n Adds the cell to the end of cell_layout. If expand is FALSE, then the\n cell is allocated no more space than it needs. Any unused space is\n divided evenly between cells for which expand is TRUE.\n Note that reusing the same cell renderer is not supported.\n Since 2.4\n Params:\n cell = A GtkCellRenderer.\n expand = TRUE if cell is to be given extra space allocated to cell_layout.\n\t \n",
"line" : 133}
,
{
"name" : "getCells",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Returns the cell renderers which have been added to cell_layout.\n Since 2.12\n Returns: a list of cell renderers. The list, but not the renderers has been newly allocated and should be freed with g_list_free() when no longer needed. [element-type GtkCellRenderer][transfer container]\n\t \n",
"line" : 140}
,
{
"name" : "reorder",
"kind" : "function",
"protection" : "public",
"type" : "void(CellRenderer cell, int position)",
"comment" : "\n Re-inserts cell at position. Note that cell has already to be packed\n into cell_layout for this to function properly.\n Since 2.4\n Params:\n cell = A GtkCellRenderer to reorder.\n position = New position to insert cell at.\n\t \n",
"line" : 150}
,
{
"name" : "clear",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Unsets all the mappings on all renderers on cell_layout and\n removes all renderers from cell_layout.\n Since 2.4\n\t \n",
"line" : 157}
,
{
"name" : "addAttribute",
"kind" : "function",
"protection" : "public",
"type" : "void(CellRenderer cell, string attribute, int column)",
"comment" : "\n Adds an attribute mapping to the list in cell_layout. The column is the\n column of the model to get a value from, and the attribute is the\n parameter on cell to be set from the value. So for example if column 2\n of the model contains strings, you could have the \"text\" attribute of a\n GtkCellRendererText get its values from column 2.\n Since 2.4\n Params:\n cell = A GtkCellRenderer.\n attribute = An attribute on the renderer.\n column = The column position on the model to get the attribute from.\n\t \n",
"line" : 171}
,
{
"name" : "setCellDataFunc",
"kind" : "function",
"protection" : "public",
"type" : "void(CellRenderer cell, extern (C) void function(GtkCellLayout*, GtkCellRenderer*, GtkTreeModel*, GtkTreeIter*, void*) func, void* funcData, extern (C) void function(void* cbData) destroy)",
"comment" : "\n Sets the GtkCellLayoutDataFunc to use for cell_layout. This function\n is used instead of the standard attributes mapping for setting the\n column value, and should set the value of cell_layout's cell renderer(s)\n as appropriate. func may be NULL to remove and older one.\n Since 2.4\n Params:\n cell = A GtkCellRenderer.\n func = The GtkCellLayoutDataFunc to use.\n funcData = The user data for func.\n destroy = The destroy notification for func_data.\n\t \n",
"line" : 185}
,
{
"name" : "clearAttributes",
"kind" : "function",
"protection" : "public",
"type" : "void(CellRenderer cell)",
"comment" : "\n Clears all existing attributes previously set with\n gtk_cell_layout_set_attributes().\n Since 2.4\n Params:\n cell = A GtkCellRenderer to clear the attribute mapping on.\n\t \n",
"line" : 194}
]
}
]
}
,
{
"name" : "gtk.CellLayoutT",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/CellLayoutT.d",
"members" : [
{
"name" : "CellLayoutT(TStruct)",
"kind" : "template",
"protection" : "public",
"comment" : "\n Description\n GtkCellLayout is an interface to be implemented by all objects which\n want to provide a GtkTreeViewColumn-like API for packing cells, setting\n attributes and data funcs.\n One of the notable features provided by implementations of GtkCellLayout\n are attributes. Attributes let you set the properties\n in flexible ways. They can just be set to constant values like regular\n properties. But they can also be mapped to a column of the underlying\n tree model with gtk_cell_layout_set_attributes(), which means that the value\n of the attribute can change from cell to cell as they are rendered by the\n cell renderer. Finally, it is possible to specify a function with\n gtk_cell_layout_set_cell_data_func() that is called to determine the value\n of the attribute for each cell that is rendered.\n GtkCellLayouts as GtkBuildable\n Implementations of GtkCellLayout which also implement the GtkBuildable\n interface (GtkCellView, GtkIconView, GtkComboBox, GtkComboBoxEntry,\n GtkEntryCompletion, GtkTreeViewColumn) accept GtkCellRenderer objects\n as <child> elements in UI definitions. They support a custom\n <attributes> element for their children, which can contain\n multiple <attribute> elements. Each <attribute> element has\n a name attribute which specifies a property of the cell renderer; the\n content of the element is the attribute value.\n $(DDOC_COMMENT example)\n \n",
"line" : 99,
"members" : [
{
"name" : "gtkCellLayout",
"kind" : "variable",
"type" : "GtkCellLayout*",
"comment" : " the main Gtk struct \n",
"line" : 103}
,
{
"name" : "getCellLayoutTStruct",
"kind" : "function",
"type" : "GtkCellLayout*()",
"line" : 106}
,
{
"name" : "packStart",
"kind" : "function",
"type" : "void(CellRenderer cell, int expand)",
"comment" : "\n\t \n\n Packs the cell into the beginning of cell_layout. If expand is FALSE,\n then the cell is allocated no more space than it needs. Any unused space\n is divided evenly between cells for which expand is TRUE.\n Note that reusing the same cell renderer is not supported.\n Since 2.4\n Params:\n cell = A GtkCellRenderer.\n expand = TRUE if cell is to be given extra space allocated to cell_layout.\n\t \n",
"line" : 125}
,
{
"name" : "packEnd",
"kind" : "function",
"type" : "void(CellRenderer cell, int expand)",
"comment" : "\n Adds the cell to the end of cell_layout. If expand is FALSE, then the\n cell is allocated no more space than it needs. Any unused space is\n divided evenly between cells for which expand is TRUE.\n Note that reusing the same cell renderer is not supported.\n Since 2.4\n Params:\n cell = A GtkCellRenderer.\n expand = TRUE if cell is to be given extra space allocated to cell_layout.\n\t \n",
"line" : 141}
,
{
"name" : "getCells",
"kind" : "function",
"type" : "ListG()",
"comment" : "\n Returns the cell renderers which have been added to cell_layout.\n Since 2.12\n Returns: a list of cell renderers. The list, but not the renderers has been newly allocated and should be freed with g_list_free() when no longer needed. [element-type GtkCellRenderer][transfer container]\n\t \n",
"line" : 152}
,
{
"name" : "reorder",
"kind" : "function",
"type" : "void(CellRenderer cell, int position)",
"comment" : "\n Re-inserts cell at position. Note that cell has already to be packed\n into cell_layout for this to function properly.\n Since 2.4\n Params:\n cell = A GtkCellRenderer to reorder.\n position = New position to insert cell at.\n\t \n",
"line" : 171}
,
{
"name" : "clear",
"kind" : "function",
"type" : "void()",
"comment" : "\n Unsets all the mappings on all renderers on cell_layout and\n removes all renderers from cell_layout.\n Since 2.4\n\t \n",
"line" : 182}
,
{
"name" : "addAttribute",
"kind" : "function",
"type" : "void(CellRenderer cell, string attribute, int column)",
"comment" : "\n Adds an attribute mapping to the list in cell_layout. The column is the\n column of the model to get a value from, and the attribute is the\n parameter on cell to be set from the value. So for example if column 2\n of the model contains strings, you could have the \"text\" attribute of a\n GtkCellRendererText get its values from column 2.\n Since 2.4\n Params:\n cell = A GtkCellRenderer.\n attribute = An attribute on the renderer.\n column = The column position on the model to get the attribute from.\n\t \n",
"line" : 200}
,
{
"name" : "setCellDataFunc",
"kind" : "function",
"type" : "void(CellRenderer cell, GtkCellLayoutDataFunc func, void* funcData, GDestroyNotify destroy)",
"comment" : "\n Sets the GtkCellLayoutDataFunc to use for cell_layout. This function\n is used instead of the standard attributes mapping for setting the\n column value, and should set the value of cell_layout's cell renderer(s)\n as appropriate. func may be NULL to remove and older one.\n Since 2.4\n Params:\n cell = A GtkCellRenderer.\n func = The GtkCellLayoutDataFunc to use.\n funcData = The user data for func.\n destroy = The destroy notification for func_data.\n\t \n",
"line" : 218}
,
{
"name" : "clearAttributes",
"kind" : "function",
"type" : "void(CellRenderer cell)",
"comment" : "\n Clears all existing attributes previously set with\n gtk_cell_layout_set_attributes().\n Since 2.4\n Params:\n cell = A GtkCellRenderer to clear the attribute mapping on.\n\t \n",
"line" : 231}
]
}
]
}
,
{
"name" : "gtk.CellRendererAccel",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/CellRendererAccel.d",
"members" : [
{
"name" : "CellRendererAccel",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkCellRendererAccel displays a keyboard accelerator (i.e. a\n key combination like <Control>-a). If the cell renderer is editable, the\n accelerator can be changed by simply typing the new combination.\n The GtkCellRendererAccel cell renderer was added in GTK+ 2.10.\n \n",
"line" : 80,
"base" : "CellRendererText",
"members" : [
{
"name" : "gtkCellRendererAccel",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkCellRendererAccel*",
"comment" : " the main Gtk struct \n",
"line" : 84}
,
{
"name" : "getCellRendererAccelStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkCellRendererAccel*()",
"line" : 87}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 94}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CellRendererAccel(GtkCellRendererAccel* gtkCellRendererAccel)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 102}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 120}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 128}
,
{
"name" : "onAccelClearedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(string, CellRendererAccel)[]",
"line" : 130}
,
{
"name" : "addOnAccelCleared",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(string, CellRendererAccel) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Gets emitted when the user has removed the accelerator.\n Since 2.10\n\t \n",
"line" : 135}
,
{
"name" : "callBackAccelCleared",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkCellRendererAccel* accelStruct, char* pathString, CellRendererAccel cellRendererAccel)",
"line" : 150}
,
{
"name" : "onAccelEditedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(string, uint, GdkModifierType, uint, CellRendererAccel)[]",
"line" : 158}
,
{
"name" : "addOnAccelEdited",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(string, uint, GdkModifierType, uint, CellRendererAccel) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Gets emitted when the user has selected a new accelerator.\n Since 2.10\n\t \n",
"line" : 163}
,
{
"name" : "callBackAccelEdited",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkCellRendererAccel* accelStruct, char* pathString, uint accelKey, GdkModifierType accelMods, uint hardwareKeycode, CellRendererAccel cellRendererAccel)",
"line" : 178}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CellRendererAccel()",
"comment" : "\n Creates a new GtkCellRendererAccel.\n Since 2.10\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 192}
]
}
]
}
,
{
"name" : "gtk.CellRendererCombo",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/CellRendererCombo.d",
"members" : [
{
"name" : "CellRendererCombo",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkCellRendererCombo renders text in a cell like GtkCellRendererText from\n which it is derived. But while GtkCellRendererText offers a simple entry to\n edit the text, GtkCellRendererCombo offers a GtkComboBox or GtkComboBoxEntry\n widget to edit the text. The values to display in the combo box are taken from\n the tree model specified in the\n model property.\n The combo cell renderer takes care of adding a text cell renderer to the combo\n box and sets it to display the column specified by its\n text-column\n property. Further properties of the comnbo box can be set in a handler for the\n editing-started signal.\n The GtkCellRendererCombo cell renderer was added in GTK+ 2.6.\n \n",
"line" : 91,
"base" : "CellRendererText",
"members" : [
{
"name" : "gtkCellRendererCombo",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkCellRendererCombo*",
"comment" : " the main Gtk struct \n",
"line" : 95}
,
{
"name" : "getCellRendererComboStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkCellRendererCombo*()",
"line" : 98}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 105}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CellRendererCombo(GtkCellRendererCombo* gtkCellRendererCombo)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 113}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 131}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 139}
,
{
"name" : "onChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(string, TreeIter, CellRendererCombo)[]",
"line" : 141}
,
{
"name" : "addOnChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(string, TreeIter, CellRendererCombo) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted each time after the user selected an item in\n the combo box, either by using the mouse or the arrow keys. Contrary\n to GtkComboBox, GtkCellRendererCombo::changed is not emitted for\n changes made to a selected item in the entry. The argument new_iter\n corresponds to the newly selected item in the combo box and it is relative\n to the GtkTreeModel set via the model property on GtkCellRendererCombo.\n Note that as soon as you change the model displayed in the tree view,\n the tree view will immediately cease the editing operating. This\n means that you most probably want to refrain from changing the model\n until the combo cell renderer emits the edited or editing_canceled signal.\n Since 2.14\n\t \n",
"line" : 155}
,
{
"name" : "callBackChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkCellRendererCombo* comboStruct, char* pathString, GtkTreeIter* newIter, CellRendererCombo cellRendererCombo)",
"line" : 170}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CellRendererCombo()",
"comment" : "\n Creates a new GtkCellRendererCombo.\n Adjust how text is drawn using object properties.\n Object properties can be set globally (with g_object_set()).\n Also, with GtkTreeViewColumn, you can bind a property to a value\n in a GtkTreeModel. For example, you can bind the \"text\" property\n on the cell renderer to a string value in the model, thus rendering\n a different string in each row of the GtkTreeView.\n Since 2.6\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 190}
]
}
]
}
,
{
"name" : "gtk.CellRenderer",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/CellRenderer.d",
"members" : [
{
"name" : "CellRenderer",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkCellRenderer is a base class of a set of objects used for\n rendering a cell to a GdkDrawable. These objects are used primarily by\n the GtkTreeView widget, though they aren't tied to them in any\n specific way. It is worth noting that GtkCellRenderer is not a\n GtkWidget and cannot be treated as such.\n The primary use of a GtkCellRenderer is for drawing a certain graphical\n elements on a GdkDrawable. Typically, one cell renderer is used to\n draw many cells on the screen. To this extent, it isn't expected that a\n CellRenderer keep any permanent state around. Instead, any state is set\n just prior to use using GObjects property system. Then, the\n cell is measured using gtk_cell_renderer_get_size(). Finally, the cell\n is rendered in the correct location using gtk_cell_renderer_render().\n There are a number of rules that must be followed when writing a new\n GtkCellRenderer. First and formost, it's important that a certain set\n of properties will always yield a cell renderer of the same size,\n barring a GtkStyle change. The GtkCellRenderer also has a number of\n generic properties that are expected to be honored by all children.\n Beyond merely rendering a cell, cell renderers can optionally\n provide active user interface elements. A cell renderer can be\n activatable like GtkCellRendererToggle,\n which toggles when it gets activated by a mouse click, or it can be\n editable like GtkCellRendererText, which\n allows the user to edit the text using a GtkEntry.\n To make a cell renderer activatable or editable, you have to\n implement the activate or start_editing virtual functions,\n respectively.\n \n",
"line" : 116,
"base" : "ObjectGtk",
"members" : [
{
"name" : "gtkCellRenderer",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkCellRenderer*",
"comment" : " the main Gtk struct \n",
"line" : 120}
,
{
"name" : "getCellRendererStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkCellRenderer*()",
"line" : 123}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 130}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CellRenderer(GtkCellRenderer* gtkCellRenderer)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 138}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 156}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 164}
,
{
"name" : "onEditingCanceledListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(CellRenderer)[]",
"line" : 166}
,
{
"name" : "addOnEditingCanceled",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(CellRenderer) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal gets emitted when the user cancels the process of editing a\n cell. For example, an editable cell renderer could be written to cancel\n editing when the user presses Escape.\n See also: gtk_cell_renderer_stop_editing().\n Since 2.4\n\t \n",
"line" : 174}
,
{
"name" : "callBackEditingCanceled",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkCellRenderer* rendererStruct, CellRenderer cellRenderer)",
"line" : 189}
,
{
"name" : "onEditingStartedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(CellEditableIF, string, CellRenderer)[]",
"line" : 197}
,
{
"name" : "addOnEditingStarted",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(CellEditableIF, string, CellRenderer) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal gets emitted when a cell starts to be edited.\n The intended use of this signal is to do special setup\n on editable, e.g. adding a GtkEntryCompletion or setting\n up additional columns in a GtkComboBox.\n Note that GTK+ doesn't guarantee that cell renderers will\n continue to use the same kind of widget for editing in future\n releases, therefore you should check the type of editable\n $(DDOC_COMMENT example)\n Since 2.6\n See Also\n GtkCellRendererText,GtkCellRendererPixbuf,GtkCellRendererToggle\n\t \n",
"line" : 211}
,
{
"name" : "callBackEditingStarted",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkCellRenderer* rendererStruct, GtkCellEditable* editable, char* path, CellRenderer cellRenderer)",
"line" : 226}
,
{
"name" : "getSize",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, Rectangle cellArea, out int xOffset, out int yOffset, out int width, out int height)",
"comment" : "\n Obtains the width and height needed to render the cell. Used by view\n widgets to determine the appropriate size for the cell_area passed to\n gtk_cell_renderer_render(). If cell_area is not NULL, fills in the\n x and y offsets (if set) of the cell relative to this location.\n Please note that the values set in width and height, as well as those\n in x_offset and y_offset are inclusive of the xpad and ypad properties.\n Params:\n cell = a GtkCellRenderer\n widget = the widget the renderer is rendering to\n cellArea = The area a cell will be allocated, or NULL. [allow-none]\n xOffset = location to return x offset of cell relative to cell_area, or NULL. [out][allow-none]\n yOffset = location to return y offset of cell relative to cell_area, or NULL. [out][allow-none]\n width = location to return width needed to render a cell, or NULL. [out][allow-none]\n height = location to return height needed to render a cell, or NULL. [out][allow-none]\n\t \n",
"line" : 251}
,
{
"name" : "render",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, Widget widget, Rectangle backgroundArea, Rectangle cellArea, Rectangle exposeArea, GtkCellRendererState flags)",
"comment" : "\n Invokes the virtual render function of the GtkCellRenderer. The three\n passed-in rectangles are areas of window. Most renderers will draw within\n cell_area; the xalign, yalign, xpad, and ypad fields of the GtkCellRenderer\n should be honored with respect to cell_area. background_area includes the\n blank space around the cell, and also the area containing the tree expander;\n so the background_area rectangles for all cells tile to cover the entire\n window. expose_area is a clip rectangle.\n Params:\n cell = a GtkCellRenderer\n window = a GdkDrawable to draw to\n widget = the widget owning window\n backgroundArea = entire cell area (including tree expanders and maybe\n padding on the sides)\n cellArea = area normally rendered by a cell renderer\n exposeArea = area that actually needs updating\n flags = flags that affect rendering\n\t \n",
"line" : 275}
,
{
"name" : "activate",
"kind" : "function",
"protection" : "public",
"type" : "int(Event event, Widget widget, string path, Rectangle backgroundArea, Rectangle cellArea, GtkCellRendererState flags)",
"comment" : "\n Passes an activate event to the cell renderer for possible processing.\n Some cell renderers may use events; for example, GtkCellRendererToggle\n toggles when it gets a mouse click.\n Params:\n cell = a GtkCellRenderer\n event = a GdkEvent\n widget = widget that received the event\n path = widget-dependent string representation of the event location;\n e.g. for GtkTreeView, a string representation of GtkTreePath\n backgroundArea = background area as passed to gtk_cell_renderer_render()\n cellArea = cell area as passed to gtk_cell_renderer_render()\n flags = render flags\n Returns: TRUE if the event was consumed\/handled\n\t \n",
"line" : 296}
,
{
"name" : "startEditing",
"kind" : "function",
"protection" : "public",
"type" : "CellEditableIF(Event event, Widget widget, string path, Rectangle backgroundArea, Rectangle cellArea, GtkCellRendererState flags)",
"comment" : "\n Passes an activate event to the cell renderer for possible processing.\n Params:\n cell = a GtkCellRenderer\n event = a GdkEvent\n widget = widget that received the event\n path = widget-dependent string representation of the event location;\n e.g. for GtkTreeView, a string representation of GtkTreePath\n backgroundArea = background area as passed to gtk_cell_renderer_render()\n cellArea = cell area as passed to gtk_cell_renderer_render()\n flags = render flags\n Returns: A new GtkCellEditable, or NULL. [transfer none]\n\t \n",
"line" : 315}
,
{
"name" : "editingCanceled",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_cell_renderer_editing_canceled has been deprecated since version 2.6 and should not be used in newly-written code. Use gtk_cell_renderer_stop_editing() instead\n Causes the cell renderer to emit the \"editing-canceled\"\n signal.\n This function is for use only by implementations of cell renderers that\n need to notify the client program that an editing process was canceled\n and the changes were not committed.\n Since 2.4\n\t \n",
"line" : 336}
,
{
"name" : "stopEditing",
"kind" : "function",
"protection" : "public",
"type" : "void(int canceled)",
"comment" : "\n Informs the cell renderer that the editing is stopped.\n If canceled is TRUE, the cell renderer will emit the\n \"editing-canceled\" signal.\n This function should be called by cell renderer implementations\n in response to the \"editing-done\" signal of\n GtkCellEditable.\n Since 2.6\n Params:\n canceled = TRUE if the editing has been canceled\n\t \n",
"line" : 353}
,
{
"name" : "getFixedSize",
"kind" : "function",
"protection" : "public",
"type" : "void(out int width, out int height)",
"comment" : "\n Fills in width and height with the appropriate size of cell.\n Params:\n width = location to fill in with the fixed width of the cell, or NULL. [out][allow-none]\n height = location to fill in with the fixed height of the cell, or NULL. [out][allow-none]\n\t \n",
"line" : 365}
,
{
"name" : "setFixedSize",
"kind" : "function",
"protection" : "public",
"type" : "void(int width, int height)",
"comment" : "\n Sets the renderer size to be explicit, independent of the properties set.\n Params:\n width = the width of the cell renderer, or -1\n height = the height of the cell renderer, or -1\n\t \n",
"line" : 377}
,
{
"name" : "getVisible",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the cell renderer's visibility.\n Since 2.18\n Returns: TRUE if the cell renderer is visible\n\t \n",
"line" : 388}
,
{
"name" : "setVisible",
"kind" : "function",
"protection" : "public",
"type" : "void(int visible)",
"comment" : "\n Sets the cell renderer's visibility.\n Since 2.18\n Params:\n visible = the visibility of the cell\n\t \n",
"line" : 400}
,
{
"name" : "getSensitive",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the cell renderer's sensitivity.\n Since 2.18\n Returns: TRUE if the cell renderer is sensitive\n\t \n",
"line" : 411}
,
{
"name" : "setSensitive",
"kind" : "function",
"protection" : "public",
"type" : "void(int sensitive)",
"comment" : "\n Sets the cell renderer's sensitivity.\n Since 2.18\n Params:\n sensitive = the sensitivity of the cell\n\t \n",
"line" : 423}
,
{
"name" : "getAlignment",
"kind" : "function",
"protection" : "public",
"type" : "void(out float xalign, out float yalign)",
"comment" : "\n Fills in xalign and yalign with the appropriate values of cell.\n Since 2.18\n Params:\n xalign = location to fill in with the x alignment of the cell, or NULL. [out][allow-none]\n yalign = location to fill in with the y alignment of the cell, or NULL. [out][allow-none]\n\t \n",
"line" : 436}
,
{
"name" : "setAlignment",
"kind" : "function",
"protection" : "public",
"type" : "void(float xalign, float yalign)",
"comment" : "\n Sets the renderer's alignment within its available space.\n Since 2.18\n Params:\n xalign = the x alignment of the cell renderer\n yalign = the y alignment of the cell renderer\n\t \n",
"line" : 449}
,
{
"name" : "getPadding",
"kind" : "function",
"protection" : "public",
"type" : "void(out int xpad, out int ypad)",
"comment" : "\n Fills in xpad and ypad with the appropriate values of cell.\n Since 2.18\n Params:\n xpad = location to fill in with the x padding of the cell, or NULL. [out][allow-none]\n ypad = location to fill in with the y padding of the cell, or NULL. [out][allow-none]\n\t \n",
"line" : 462}
,
{
"name" : "setPadding",
"kind" : "function",
"protection" : "public",
"type" : "void(int xpad, int ypad)",
"comment" : "\n Sets the renderer's padding.\n Since 2.18\n Params:\n xpad = the x padding of the cell renderer\n ypad = the y padding of the cell renderer\n\t \n",
"line" : 475}
]
}
]
}
,
{
"name" : "gtk.CellRendererPixbuf",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/CellRendererPixbuf.d",
"members" : [
{
"name" : "CellRendererPixbuf",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkCellRendererPixbuf can be used to render an image in a cell. It allows to render\n either a given GdkPixbuf (set via the\n pixbuf property) or a stock icon\n (set via the stock-id property).\n To support the tree view, GtkCellRendererPixbuf also supports rendering two alternative\n pixbufs, when the is-expander property\n is TRUE. If the is-expanded property\n is TRUE and the\n pixbuf-expander-open\n property is set to a pixbuf, it renders that pixbuf, if the\n is-expanded property is FALSE and\n the\n pixbuf-expander-closed\n property is set to a pixbuf, it renders that one.\n \n",
"line" : 86,
"base" : "CellRenderer",
"members" : [
{
"name" : "gtkCellRendererPixbuf",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkCellRendererPixbuf*",
"comment" : " the main Gtk struct \n",
"line" : 90}
,
{
"name" : "getCellRendererPixbufStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkCellRendererPixbuf*()",
"line" : 93}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 100}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CellRendererPixbuf(GtkCellRendererPixbuf* gtkCellRendererPixbuf)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 108}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 126}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CellRendererPixbuf()",
"comment" : "\n\t \n\n Creates a new GtkCellRendererPixbuf. Adjust rendering\n parameters using object properties. Object properties can be set\n globally (with g_object_set()). Also, with GtkTreeViewColumn, you\n can bind a property to a value in a GtkTreeModel. For example, you\n can bind the \"pixbuf\" property on the cell renderer to a pixbuf value\n in the model, thus rendering a different image in each row of the\n GtkTreeView.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 145}
]
}
]
}
,
{
"name" : "gtk.CellRendererProgress",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/CellRendererProgress.d",
"members" : [
{
"name" : "CellRendererProgress",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkCellRendererProgress renders a numeric value as a progress par in a cell.\n Additionally, it can display a text on top of the progress bar.\n The GtkCellRendererProgress cell renderer was added in GTK+ 2.6.\n \n",
"line" : 75,
"base" : "CellRenderer",
"members" : [
{
"name" : "gtkCellRendererProgress",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkCellRendererProgress*",
"comment" : " the main Gtk struct \n",
"line" : 79}
,
{
"name" : "getCellRendererProgressStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkCellRendererProgress*()",
"line" : 82}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 89}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CellRendererProgress(GtkCellRendererProgress* gtkCellRendererProgress)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 97}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 115}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CellRendererProgress()",
"comment" : "\n\t \n\n Creates a new GtkCellRendererProgress.\n Since 2.6\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 129}
]
}
]
}
,
{
"name" : "gtk.CellRendererSpin",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/CellRendererSpin.d",
"members" : [
{
"name" : "CellRendererSpin",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkCellRendererSpin renders text in a cell like GtkCellRendererText from\n which it is derived. But while GtkCellRendererText offers a simple entry to\n edit the text, GtkCellRendererSpin offers a GtkSpinButton widget. Of course,\n that means that the text has to be parseable as a floating point number.\n The range of the spinbutton is taken from the adjustment property of the\n cell renderer, which can be set explicitly or mapped to a column in the\n tree model, like all properties of cell renders. GtkCellRendererSpin\n also has properties for the climb rate and the number of digits to\n display. Other GtkSpinButton properties can be set in a handler for the\n start-editing signal.\n The GtkCellRendererSpin cell renderer was added in GTK+ 2.10.\n \n",
"line" : 83,
"base" : "CellRendererText",
"members" : [
{
"name" : "gtkCellRendererSpin",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkCellRendererSpin*",
"comment" : " the main Gtk struct \n",
"line" : 87}
,
{
"name" : "getCellRendererSpinStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkCellRendererSpin*()",
"line" : 90}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 97}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CellRendererSpin(GtkCellRendererSpin* gtkCellRendererSpin)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 105}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 123}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CellRendererSpin()",
"comment" : "\n\t \n\n Creates a new GtkCellRendererSpin.\n Since 2.10\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 137}
]
}
]
}
,
{
"name" : "gtk.CellRendererSpinner",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/CellRendererSpinner.d",
"members" : [
{
"name" : "CellRendererSpinner",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkCellRendererSpinner renders a spinning animation in a cell, very\n similar to GtkSpinner. It can often be used as an alternative\n to a GtkCellRendererProgress for displaying indefinite activity,\n instead of actual progress.\n To start the animation in a cell, set the \"active\"\n property to TRUE and increment the \"pulse\" property\n at regular intervals. The usual way to set the cell renderer properties\n for each cell is to bind them to columns in your tree model using e.g.\n gtk_tree_view_column_add_attribute().\n \n",
"line" : 77,
"base" : "CellRenderer",
"members" : [
{
"name" : "gtkCellRendererSpinner",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkCellRendererSpinner*",
"comment" : " the main Gtk struct \n",
"line" : 81}
,
{
"name" : "getCellRendererSpinnerStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkCellRendererSpinner*()",
"line" : 84}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 91}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CellRendererSpinner(GtkCellRendererSpinner* gtkCellRendererSpinner)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 99}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 117}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CellRendererSpinner()",
"comment" : "\n\t \n\n Returns a new cell renderer which will show a spinner to indicate\n activity.\n Since 2.20\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 132}
]
}
]
}
,
{
"name" : "gtk.CellRendererText",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/CellRendererText.d",
"members" : [
{
"name" : "CellRendererText",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkCellRendererText renders a given text in its cell, using the font, color and\n style information provided by its properties. The text will be ellipsized if it is\n too long and the ellipsize\n property allows it.\n If the mode is GTK_CELL_RENDERER_MODE_EDITABLE,\n the GtkCellRendererText allows to edit its text using an entry.\n \n",
"line" : 82,
"base" : "CellRenderer",
"members" : [
{
"name" : "gtkCellRendererText",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkCellRendererText*",
"comment" : " the main Gtk struct \n",
"line" : 86}
,
{
"name" : "getCellRendererTextStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkCellRendererText*()",
"line" : 89}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 96}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CellRendererText(GtkCellRendererText* gtkCellRendererText)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 104}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 122}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 130}
,
{
"name" : "onEditedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(string, string, CellRendererText)[]",
"line" : 132}
,
{
"name" : "addOnEdited",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(string, string, CellRendererText) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted after renderer has been edited.\n It is the responsibility of the application to update the model\n and store new_text at the position indicated by path.\n\t \n",
"line" : 138}
,
{
"name" : "callBackEdited",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkCellRendererText* rendererStruct, char* path, char* newText, CellRendererText cellRendererText)",
"line" : 153}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CellRendererText()",
"comment" : "\n Creates a new GtkCellRendererText. Adjust how text is drawn using\n object properties. Object properties can be\n set globally (with g_object_set()). Also, with GtkTreeViewColumn,\n you can bind a property to a value in a GtkTreeModel. For example,\n you can bind the \"text\" property on the cell renderer to a string\n value in the model, thus rendering a different string in each row\n of the GtkTreeView\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 172}
,
{
"name" : "setFixedHeightFromFont",
"kind" : "function",
"protection" : "public",
"type" : "void(int numberOfRows)",
"comment" : "\n Sets the height of a renderer to explicitly be determined by the \"font\" and\n \"y_pad\" property set on it. Further changes in these properties do not\n affect the height, so they must be accompanied by a subsequent call to this\n function. Using this function is unflexible, and should really only be used\n if calculating the size of a cell is too slow (ie, a massive number of cells\n displayed). If number_of_rows is -1, then the fixed height is unset, and\n the height is determined by the properties again.\n Params:\n numberOfRows = Number of rows of text each cell renderer is allocated, or -1\n\t \n",
"line" : 194}
]
}
]
}
,
{
"name" : "gtk.CellRendererToggle",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/CellRendererToggle.d",
"members" : [
{
"name" : "CellRendererToggle",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkCellRendererToggle renders a toggle button in a cell. The\n button is drawn as a radio- or checkbutton, depending on the\n radio\n property. When activated, it emits the toggled signal.\n \n",
"line" : 80,
"base" : "CellRenderer",
"members" : [
{
"name" : "gtkCellRendererToggle",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkCellRendererToggle*",
"comment" : " the main Gtk struct \n",
"line" : 84}
,
{
"name" : "getCellRendererToggleStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkCellRendererToggle*()",
"line" : 87}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 94}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CellRendererToggle(GtkCellRendererToggle* gtkCellRendererToggle)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 102}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 120}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 128}
,
{
"name" : "onToggledListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(string, CellRendererToggle)[]",
"line" : 130}
,
{
"name" : "addOnToggled",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(string, CellRendererToggle) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::toggled signal is emitted when the cell is toggled.\n\t \n",
"line" : 134}
,
{
"name" : "callBackToggled",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkCellRendererToggle* cellRendererStruct, char* path, CellRendererToggle cellRendererToggle)",
"line" : 149}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CellRendererToggle()",
"comment" : "\n Creates a new GtkCellRendererToggle. Adjust rendering\n parameters using object properties. Object properties can be set\n globally (with g_object_set()). Also, with GtkTreeViewColumn, you\n can bind a property to a value in a GtkTreeModel. For example, you\n can bind the \"active\" property on the cell renderer to a boolean value\n in the model, thus causing the check button to reflect the state of\n the model.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 168}
,
{
"name" : "getRadio",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether we're rendering radio toggles rather than checkboxes.\n Returns: TRUE if we're rendering radio toggles rather than checkboxes\n\t \n",
"line" : 183}
,
{
"name" : "setRadio",
"kind" : "function",
"protection" : "public",
"type" : "void(int radio)",
"comment" : "\n If radio is TRUE, the cell renderer renders a radio toggle\n (i.e. a toggle in a group of mutually-exclusive toggles).\n If FALSE, it renders a check toggle (a standalone boolean option).\n This can be set globally for the cell renderer, or changed just\n before rendering each cell in the model (for GtkTreeView, you set\n up a per-row setting using GtkTreeViewColumn to associate model\n columns with cell renderer properties).\n Params:\n radio = TRUE to make the toggle look like a radio button\n\t \n",
"line" : 200}
,
{
"name" : "getActive",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the cell renderer is active. See\n gtk_cell_renderer_toggle_set_active().\n Returns: TRUE if the cell renderer is active.\n\t \n",
"line" : 211}
,
{
"name" : "setActive",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n Activates or deactivates a cell renderer.\n Params:\n setting = the value to set.\n\t \n",
"line" : 222}
,
{
"name" : "getActivatable",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the cell renderer is activatable. See\n gtk_cell_renderer_toggle_set_activatable().\n Since 2.18\n Returns: TRUE if the cell renderer is activatable.\n\t \n",
"line" : 234}
,
{
"name" : "setActivatable",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n Makes the cell renderer activatable.\n Since 2.18\n Params:\n setting = the value to set.\n\t \n",
"line" : 246}
]
}
]
}
,
{
"name" : "gtk.CellView",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/CellView.d",
"members" : [
{
"name" : "CellView",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkCellView displays a single row of a GtkTreeModel, using\n cell renderers just like GtkTreeView. GtkCellView doesn't support\n some of the more complex features of GtkTreeView, like cell editing\n and drag and drop.\n \n",
"line" : 99,
"base" : "Widget",
"interfaces" : [
"CellLayoutIF"],
"members" : [
{
"name" : "gtkCellView",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkCellView*",
"comment" : " the main Gtk struct \n",
"line" : 103}
,
{
"name" : "getCellViewStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkCellView*()",
"line" : 106}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 113}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CellView(GtkCellView* gtkCellView)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 121}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 139}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CellView(string text, bool markup = true)",
"comment" : "\n Creates a new GtkCellView widget, adds a GtkCellRendererText\n to it, and makes its show text.\n If markup is true the text can be marked up with the Pango text\n markup language.\n Since 2.6\n Params:\n  text = the text to display in the cell view\n Returns:\n  A newly created GtkCellView widget.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 160}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CellView()",
"comment" : "\n\t \n\n Creates a new GtkCellView widget.\n Since 2.6\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 191}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CellView(Pixbuf pixbuf)",
"comment" : "\n Creates a new GtkCellView widget, adds a GtkCellRendererPixbuf\n to it, and makes its show pixbuf.\n Since 2.6\n Params:\n pixbuf = the image to display in the cell view\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 210}
,
{
"name" : "setModel",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeModelIF model)",
"comment" : "\n Sets the model for cell_view. If cell_view already has a model\n set, it will remove it before setting the new model. If model is\n NULL, then it will unset the old model.\n Since 2.6\n Params:\n model = a GtkTreeModel. [allow-none]\n\t \n",
"line" : 229}
,
{
"name" : "getModel",
"kind" : "function",
"protection" : "public",
"type" : "TreeModelIF()",
"comment" : "\n Returns the model for cell_view. If no model is used NULL is\n returned.\n Since 2.16\n Returns: a GtkTreeModel used or NULL. [transfer none]\n\t \n",
"line" : 241}
,
{
"name" : "setDisplayedRow",
"kind" : "function",
"protection" : "public",
"type" : "void(TreePath path)",
"comment" : "\n Sets the row of the model that is currently displayed\n by the GtkCellView. If the path is unset, then the\n contents of the cellview \"stick\" at their last value;\n this is not normally a desired result, but may be\n a needed intermediate state if say, the model for\n the GtkCellView becomes temporarily empty.\n Since 2.6\n Params:\n path = a GtkTreePath or NULL to unset. [allow-none]\n\t \n",
"line" : 263}
,
{
"name" : "getDisplayedRow",
"kind" : "function",
"protection" : "public",
"type" : "TreePath()",
"comment" : "\n Returns a GtkTreePath referring to the currently\n displayed row. If no row is currently displayed,\n NULL is returned.\n Since 2.6\n Returns: the currently displayed row or NULL\n\t \n",
"line" : 276}
,
{
"name" : "getSizeOfRow",
"kind" : "function",
"protection" : "public",
"type" : "int(TreePath path, out GtkRequisition requisition)",
"comment" : "\n Sets requisition to the size needed by cell_view to display\n the model row pointed to by path.\n Since 2.6\n Params:\n path = a GtkTreePath\n requisition = return location for the size. [out]\n Returns: TRUE\n\t \n",
"line" : 296}
,
{
"name" : "setBackgroundColor",
"kind" : "function",
"protection" : "public",
"type" : "void(Color color)",
"comment" : "\n Sets the background color of view.\n Since 2.6\n Params:\n color = the new background color\n\t \n",
"line" : 308}
,
{
"name" : "getCellRenderers",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Warning\n gtk_cell_view_get_cell_renderers has been deprecated since version 2.18 and should not be used in newly-written code. use gtk_cell_layout_get_cells() instead.\n Returns the cell renderers which have been added to cell_view.\n Since 2.6\n Returns: a list of cell renderers. The list, but not the renderers has been newly allocated and should be freed with g_list_free() when no longer needed.\n\t \n",
"line" : 321}
]
}
]
}
,
{
"name" : "gtk.CheckButton",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/CheckButton.d",
"members" : [
{
"name" : "CheckButton",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkCheckButton places a discrete GtkToggleButton next to a widget, (usually a GtkLabel). See the section on GtkToggleButton widgets for more information about toggle\/check buttons.\n The important signal ('toggled') is also inherited from GtkToggleButton.\n \n",
"line" : 77,
"base" : "ToggleButton",
"members" : [
{
"name" : "gtkCheckButton",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkCheckButton*",
"comment" : " the main Gtk struct \n",
"line" : 81}
,
{
"name" : "getCheckButtonStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkCheckButton*()",
"line" : 84}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 91}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CheckButton(GtkCheckButton* gtkCheckButton)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 99}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 117}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CheckButton(string label, bool mnemonic = true)",
"comment" : "\n Creates a new GtkCheckButton with a GtkLabel to the right of it.\n If mnemonic is true the label\n will be created using gtk_label_new_with_mnemonic(), so underscores\n in label indicate the mnemonic for the check button.\n Params:\n  label = The text of the button, with an underscore in front of the\n  mnemonic character\n  mnemonic = true if the button has an mnemnonic\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 134}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CheckButton(string label, void delegate(CheckButton) onClicked, bool mnemonic = true)",
"comment" : " \n",
"line" : 158}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CheckButton()",
"comment" : "\n\t \n\n Creates a new GtkCheckButton.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 172}
]
}
]
}
,
{
"name" : "gtk.CheckMenuItem",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/CheckMenuItem.d",
"members" : [
{
"name" : "CheckMenuItem",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkCheckMenuItem is a menu item that maintains the state of a boolean\n value in addition to a GtkMenuItem's usual role in activating application\n code.\n A check box indicating the state of the boolean value is displayed\n at the left side of the GtkMenuItem. Activating the GtkMenuItem\n toggles the value.\n \n",
"line" : 81,
"base" : "MenuItem",
"members" : [
{
"name" : "gtkCheckMenuItem",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkCheckMenuItem*",
"comment" : " the main Gtk struct \n",
"line" : 85}
,
{
"name" : "getCheckMenuItemStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkCheckMenuItem*()",
"line" : 88}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 95}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CheckMenuItem(GtkCheckMenuItem* gtkCheckMenuItem)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 103}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 121}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CheckMenuItem(string label, bool mnemonic = true)",
"comment" : "\n Creates a new GtkCheckMenuItem with a label.\n Params:\n  label = the string to use for the label.\n  mnemonic = if true the label\n  will be created using gtk_label_new_with_mnemonic(), so underscores\n  in label indicate the mnemonic for the menu item.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 136}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 161}
,
{
"name" : "onToggledListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(CheckMenuItem)[]",
"line" : 163}
,
{
"name" : "addOnToggled",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(CheckMenuItem) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted when the state of the check box is changed.\n A signal handler can examine the active\n field of the GtkCheckMenuItem struct to discover the new state.\n\t \n",
"line" : 169}
,
{
"name" : "callBackToggled",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkCheckMenuItem* checkmenuitemStruct, CheckMenuItem checkMenuItem)",
"line" : 184}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "CheckMenuItem()",
"comment" : "\n Creates a new GtkCheckMenuItem.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 197}
,
{
"name" : "getActive",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the check menu item is active. See\n gtk_check_menu_item_set_active().\n Returns: TRUE if the menu item is checked.\n\t \n",
"line" : 213}
,
{
"name" : "setActive",
"kind" : "function",
"protection" : "public",
"type" : "void(int isActive)",
"comment" : "\n Sets the active state of the menu item's check box.\n Params:\n isActive = boolean value indicating whether the check box is active.\n\t \n",
"line" : 224}
,
{
"name" : "setShowToggle",
"kind" : "function",
"protection" : "public",
"type" : "void(int always)",
"comment" : "\n Warning\n gtk_check_menu_item_set_show_toggle is deprecated and should not be used in newly-written code.\n Controls whether the check box is shown at all times.\n Normally the check box is shown only when it is active or while the\n menu item is selected.\n Params:\n always = boolean value indicating whether to always show the check box.\n\t \n",
"line" : 239}
,
{
"name" : "toggled",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Emits the GtkCheckMenuItem::toggled signal.\n\t \n",
"line" : 248}
,
{
"name" : "getInconsistent",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Retrieves the value set by gtk_check_menu_item_set_inconsistent().\n Returns: TRUE if inconsistent\n\t \n",
"line" : 258}
,
{
"name" : "setInconsistent",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n If the user has selected a range of elements (such as some text or\n spreadsheet cells) that are affected by a boolean setting, and the\n current values in that range are inconsistent, you may want to\n display the check in an \"in between\" state. This function turns on\n \"in between\" display. Normally you would turn off the inconsistent\n state again if the user explicitly selects a setting. This has to be\n done manually, gtk_check_menu_item_set_inconsistent() only affects\n visual appearance, it doesn't affect the semantics of the widget.\n Params:\n setting = TRUE to display an \"inconsistent\" third state check\n\t \n",
"line" : 276}
,
{
"name" : "setDrawAsRadio",
"kind" : "function",
"protection" : "public",
"type" : "void(int drawAsRadio)",
"comment" : "\n Sets whether check_menu_item is drawn like a GtkRadioMenuItem\n Since 2.4\n Params:\n drawAsRadio = whether check_menu_item is drawn like a GtkRadioMenuItem\n\t \n",
"line" : 288}
,
{
"name" : "getDrawAsRadio",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether check_menu_item looks like a GtkRadioMenuItem\n Since 2.4\n Returns: Whether check_menu_item looks like a GtkRadioMenuItem\n\t \n",
"line" : 299}
]
}
]
}
,
{
"name" : "gtk.Clipboard",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Clipboard.d",
"members" : [
{
"name" : "Clipboard",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n  The GtkClipboard object represents a clipboard of data shared\n  between different processes or between different widgets in\n  the same process. Each clipboard is identified by a name encoded as a\n  GdkAtom. (Conversion to and from strings can be done with\n  gdk_atom_intern() and gdk_atom_name().) The default clipboard\n  corresponds to the \"CLIPBOARD\" atom; another commonly used clipboard\n  is the \"PRIMARY\" clipboard, which, in X, traditionally contains\n  the currently selected text.\n  To support having a number of different formats on the clipboard\n  at the same time, the clipboard mechanism allows providing\n  callbacks instead of the actual data. When you set the contents\n  of the clipboard, you can either supply the data directly (via\n  functions like gtk_clipboard_set_text()), or you can supply a\n  callback to be called at a later time when the data is needed (via\n  gtk_clipboard_set_with_data() or gtk_clipboard_set_with_owner().)\n  Providing a callback also avoids having to make copies of the data\n  when it is not needed.\n  gtk_clipboard_set_with_data() and gtk_clipboard_set_with_owner()\n  are quite similar; the choice between the two depends mostly on\n  which is more convenient in a particular situation.\n  The former is most useful when you want to have a blob of data\n  with callbacks to convert it into the various data types that you\n  advertise. When the clear_func you provided is called, you\n  simply free the data blob. The latter is more useful when the\n  contents of clipboard reflect the internal state of a GObject\n  (As an example, for the PRIMARY clipboard, when an entry widget\n  provides the clipboard's contents the contents are simply the\n  text within the selected region.) If the contents change, the\n  entry widget can call gtk_clipboard_set_with_owner() to update\n  the timestamp for clipboard ownership, without having to worry\n  about clear_func being called.\n  Requesting the data from the clipboard is essentially\n  asynchronous. If the contents of the clipboard are provided within\n  the same process, then a direct function call will be made to\n  retrieve the data, but if they are provided by another process,\n  then the data needs to be retrieved from the other process, which\n  may take some time. To avoid blocking the user interface, the call\n  to request the selection, gtk_clipboard_request_contents() takes a\n  callback that will be called when the contents are received (or\n  when the request fails.) If you don't want to deal with providing\n  a separate callback, you can also use gtk_clipboard_wait_for_contents().\n  What this does is run the GLib main loop recursively waiting for\n  the contents. This can simplify the code flow, but you still have\n  to be aware that other callbacks in your program can be called\n  while this recursive mainloop is running.\n  Along with the functions to get the clipboard contents as an\n  arbitrary data chunk, there are also functions to retrieve\n  it as text, gtk_clipboard_request_text() and\n  gtk_clipboard_wait_for_text(). These functions take care of\n  determining which formats are advertised by the clipboard\n  provider, asking for the clipboard in the best available format\n  and converting the results into the UTF-8 encoding. (The standard\n  form for representing strings in GTK+.)\n \n",
"line" : 139,
"base" : "ObjectG",
"members" : [
{
"name" : "gtkClipboard",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkClipboard*",
"comment" : " the main Gtk struct \n",
"line" : 143}
,
{
"name" : "getClipboardStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkClipboard*()",
"line" : 146}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 153}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Clipboard(GtkClipboard* gtkClipboard)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 161}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 179}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 187}
,
{
"name" : "onOwnerChangeListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GdkEvent*, Clipboard)[]",
"line" : 189}
,
{
"name" : "addOnOwnerChange",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GdkEvent*, Clipboard) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::owner-change signal is emitted when GTK+ receives an\n event that indicates that the ownership of the selection\n associated with clipboard has changed.\n Since 2.6\n See Also\n GtkSelection\n GtkClipboard provides a high-level wrapper around the\n \t lower level routines that deal with X selections. It is\n \t also possibly to directly manipulate the X selections,\n \t though it is seldom necessary to do so.\n\t \n",
"line" : 202}
,
{
"name" : "callBackOwnerChange",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkClipboard* clipboardStruct, GdkEvent* event, Clipboard clipboard)",
"line" : 217}
,
{
"name" : "get",
"kind" : "function",
"protection" : "public",
"type" : "Clipboard(void* selection)",
"comment" : "\n Returns the clipboard object for the given selection.\n See gtk_clipboard_get_for_display() for complete details.\n Params:\n selection = a GdkAtom which identifies the clipboard to use\n Returns: the appropriate clipboard object. If no clipboard already exists, a new one will be created. Once a clipboard object has been created, it is persistent and, since it is owned by GTK+, must not be freed or unreffed. [transfer none]\n\t \n",
"line" : 233}
,
{
"name" : "getForDisplay",
"kind" : "function",
"protection" : "public",
"type" : "Clipboard(Display display, void* selection)",
"comment" : "\n Returns the clipboard object for the given selection.\n Cut\/copy\/paste menu items and keyboard shortcuts should use\n the default clipboard, returned by passing GDK_SELECTION_CLIPBOARD for selection.\n (GDK_NONE is supported as a synonym for GDK_SELECTION_CLIPBOARD\n for backwards compatibility reasons.)\n The currently-selected object or text should be provided on the clipboard\n identified by GDK_SELECTION_PRIMARY. Cut\/copy\/paste menu items\n conceptually copy the contents of the GDK_SELECTION_PRIMARY clipboard\n to the default clipboard, i.e. they copy the selection to what the\n user sees as the clipboard.\n (Passing GDK_NONE is the same as using gdk_atom_intern\n (\"CLIPBOARD\", FALSE). See\n http:\/\/www.freedesktop.org\/Standards\/clipboards-spec\n for a detailed discussion of the \"CLIPBOARD\" vs. \"PRIMARY\"\n selections under the X window system. On Win32 the\n GDK_SELECTION_PRIMARY clipboard is essentially ignored.)\n It's possible to have arbitrary named clipboards; if you do invent\n new clipboards, you should prefix the selection name with an\n underscore (because the ICCCM requires that nonstandard atoms are\n underscore-prefixed), and namespace it as well. For example,\n if your application called \"Foo\" has a special-purpose\n clipboard, you might call it \"_FOO_SPECIAL_CLIPBOARD\".\n Since 2.2\n Params:\n display = the display for which the clipboard is to be retrieved or created\n selection = a GdkAtom which identifies the clipboard\n to use.\n Returns: the appropriate clipboard object. If no clipboard already exists, a new one will be created. Once a clipboard object has been created, it is persistent and, since it is owned by GTK+, must not be freed or unrefd. [transfer none]\n\t \n",
"line" : 274}
,
{
"name" : "getDisplay",
"kind" : "function",
"protection" : "public",
"type" : "Display()",
"comment" : "\n Gets the GdkDisplay associated with clipboard\n Since 2.2\n Returns: the GdkDisplay associated with clipboard. [transfer none]\n\t \n",
"line" : 290}
,
{
"name" : "setWithData",
"kind" : "function",
"protection" : "public",
"type" : "int(GtkTargetEntry[] targets, extern (C) void function(GtkClipboard*, GtkSelectionData*, uint, void*) getFunc, extern (C) void function(GtkClipboard*, void*) clearFunc, void* userData)",
"comment" : "\n Virtually sets the contents of the specified clipboard by providing\n a list of supported formats for the clipboard data and a function\n to call to get the actual data when it is requested.\n Params:\n targets = array containing information about the available forms for the\n clipboard data\n getFunc = function to call to get the actual clipboard data\n clearFunc = when the clipboard contents are set again, this function will\n be called, and get_func will not be subsequently called.\n userData = user data to pass to get_func and clear_func.\n Returns: TRUE if setting the clipboard data succeeded. If setting the clipboard data failed the provided callback functions will be ignored.\n\t \n",
"line" : 314}
,
{
"name" : "setWithOwner",
"kind" : "function",
"protection" : "public",
"type" : "int(GtkTargetEntry[] targets, extern (C) void function(GtkClipboard*, GtkSelectionData*, uint, void*) getFunc, extern (C) void function(GtkClipboard*, void*) clearFunc, ObjectG owner)",
"comment" : "\n Virtually sets the contents of the specified clipboard by providing\n a list of supported formats for the clipboard data and a function\n to call to get the actual data when it is requested.\n The difference between this function and gtk_clipboard_set_with_data()\n is that instead of an generic user_data pointer, a GObject is passed\n in.\n Params:\n targets = array containing information about the available forms for the\n clipboard data\n getFunc = function to call to get the actual clipboard data\n clearFunc = when the clipboard contents are set again, this function will\n be called, and get_func will not be subsequently called.\n owner = an object that \"owns\" the data. This object will be passed\n to the callbacks when called.\n Returns: TRUE if setting the clipboard data succeeded. If setting the clipboard data failed the provided callback functions will be ignored.\n\t \n",
"line" : 337}
,
{
"name" : "getOwner",
"kind" : "function",
"protection" : "public",
"type" : "ObjectG()",
"comment" : "\n If the clipboard contents callbacks were set with\n gtk_clipboard_set_with_owner(), and the gtk_clipboard_set_with_data() or\n gtk_clipboard_clear() has not subsequently called, returns the owner set\n by gtk_clipboard_set_with_owner().\n Returns: the owner of the clipboard, if any; otherwise NULL. [transfer none]\n\t \n",
"line" : 350}
,
{
"name" : "clear",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Clears the contents of the clipboard. Generally this should only\n be called between the time you call gtk_clipboard_set_with_owner()\n or gtk_clipboard_set_with_data(),\n and when the clear_func you supplied is called. Otherwise, the\n clipboard may be owned by someone else.\n\t \n",
"line" : 368}
,
{
"name" : "setText",
"kind" : "function",
"protection" : "public",
"type" : "void(string text, int len)",
"comment" : "\n Sets the contents of the clipboard to the given UTF-8 string. GTK+ will\n make a copy of the text and take responsibility for responding\n for requests for the text, and for converting the text into\n the requested format.\n Params:\n text = a UTF-8 string.\n len = length of text, in bytes, or -1, in which case\n the length will be determined with strlen().\n\t \n",
"line" : 384}
,
{
"name" : "setImage",
"kind" : "function",
"protection" : "public",
"type" : "void(Pixbuf pixbuf)",
"comment" : "\n Sets the contents of the clipboard to the given GdkPixbuf.\n GTK+ will take responsibility for responding for requests\n for the image, and for converting the image into the\n requested format.\n Since 2.6\n Params:\n pixbuf = a GdkPixbuf\n\t \n",
"line" : 399}
,
{
"name" : "requestContents",
"kind" : "function",
"protection" : "public",
"type" : "void(void* target, extern (C) void function(GtkClipboard*, GtkSelectionData*, void*) callback, void* userData)",
"comment" : "\n Requests the contents of clipboard as the given target.\n When the results of the result are later received the supplied callback\n will be called.\n Params:\n target = an atom representing the form into which the clipboard\n owner should convert the selection.\n callback = A function to call when the results are received\n (or the retrieval fails). If the retrieval fails\n the length field of selection_data will be\n negative.\n userData = user data to pass to callback\n\t \n",
"line" : 418}
,
{
"name" : "requestText",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) void function(GtkClipboard*, char*, void*) callback, void* userData)",
"comment" : "\n Requests the contents of the clipboard as text. When the text is\n later received, it will be converted to UTF-8 if necessary, and\n callback will be called.\n The text parameter to callback will contain the resulting text if\n the request succeeded, or NULL if it failed. This could happen for\n various reasons, in particular if the clipboard was empty or if the\n contents of the clipboard could not be converted into text form.\n Params:\n callback = a function to call when the text is received,\n or the retrieval fails. (It will always be called\n one way or the other.)\n userData = user data to pass to callback.\n\t \n",
"line" : 438}
,
{
"name" : "requestImage",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) void function(GtkClipboard*, GdkPixbuf*, void*) callback, void* userData)",
"comment" : "\n Requests the contents of the clipboard as image. When the image is\n later received, it will be converted to a GdkPixbuf, and\n callback will be called.\n The pixbuf parameter to callback will contain the resulting\n GdkPixbuf if the request succeeded, or NULL if it failed. This\n could happen for various reasons, in particular if the clipboard\n was empty or if the contents of the clipboard could not be\n converted into an image.\n Since 2.6\n Params:\n callback = a function to call when the image is received,\n or the retrieval fails. (It will always be called\n one way or the other.)\n userData = user data to pass to callback.\n\t \n",
"line" : 460}
,
{
"name" : "requestTargets",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) void function(GtkClipboard*, void**, int, void*) callback, void* userData)",
"comment" : "\n Requests the contents of the clipboard as list of supported targets.\n When the list is later received, callback will be called.\n The targets parameter to callback will contain the resulting targets if\n the request succeeded, or NULL if it failed.\n Since 2.4\n Params:\n callback = a function to call when the targets are received,\n or the retrieval fails. (It will always be called\n one way or the other.)\n userData = user data to pass to callback.\n\t \n",
"line" : 478}
,
{
"name" : "requestRichText",
"kind" : "function",
"protection" : "public",
"type" : "void(TextBuffer buffer, extern (C) void function(GtkClipboard*, void*, ubyte*, ulong, void*) callback, void* userData)",
"comment" : "\n Requests the contents of the clipboard as rich text. When the rich\n text is later received, callback will be called.\n The text parameter to callback will contain the resulting rich\n text if the request succeeded, or NULL if it failed. The length\n parameter will contain text's length. This function can fail for\n various reasons, in particular if the clipboard was empty or if the\n contents of the clipboard could not be converted into rich text form.\n Since 2.10\n Params:\n buffer = a GtkTextBuffer\n callback = a function to call when the text is received,\n or the retrieval fails. (It will always be called\n one way or the other.)\n userData = user data to pass to callback.\n\t \n",
"line" : 500}
,
{
"name" : "requestUris",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) void function(GtkClipboard*, char**, void*) callback, void* userData)",
"comment" : "\n Requests the contents of the clipboard as URIs. When the URIs are\n later received callback will be called.\n The uris parameter to callback will contain the resulting array of\n URIs if the request succeeded, or NULL if it failed. This could happen\n for various reasons, in particular if the clipboard was empty or if the\n contents of the clipboard could not be converted into URI form.\n Since 2.14\n Params:\n callback = a function to call when the URIs are received,\n or the retrieval fails. (It will always be called\n one way or the other.)\n userData = user data to pass to callback.\n\t \n",
"line" : 520}
,
{
"name" : "waitForContents",
"kind" : "function",
"protection" : "public",
"type" : "GtkSelectionData*(void* target)",
"comment" : "\n Requests the contents of the clipboard using the given target.\n This function waits for the data to be received using the main\n loop, so events, timeouts, etc, may be dispatched during the wait.\n Params:\n target = an atom representing the form into which the clipboard\n owner should convert the selection.\n Returns: a newly-allocated GtkSelectionData object or NULL if retrieving the given target failed. If non-NULL, this value must be freed with gtk_selection_data_free() when you are finished with it.\n\t \n",
"line" : 535}
,
{
"name" : "waitForText",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Requests the contents of the clipboard as text and converts\n the result to UTF-8 if necessary. This function waits for\n the data to be received using the main loop, so events,\n timeouts, etc, may be dispatched during the wait.\n Returns: a newly-allocated UTF-8 string which must be freed with g_free(), or NULL if retrieving the selection data failed. (This could happen for various reasons, in particular if the clipboard was empty or if the contents of the clipboard could not be converted into text form.)\n\t \n",
"line" : 548}
,
{
"name" : "waitForImage",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf()",
"comment" : "\n Requests the contents of the clipboard as image and converts\n the result to a GdkPixbuf. This function waits for\n the data to be received using the main loop, so events,\n timeouts, etc, may be dispatched during the wait.\n Since 2.6\n Returns: a newly-allocated GdkPixbuf object which must be disposed with g_object_unref(), or NULL if retrieving the selection data failed. (This could happen for various reasons, in particular if the clipboard was empty or if the contents of the clipboard could not be converted into an image.). [transfer full]\n\t \n",
"line" : 562}
,
{
"name" : "waitForRichText",
"kind" : "function",
"protection" : "public",
"type" : "ubyte[](TextBuffer buffer, out void* format)",
"comment" : "\n Requests the contents of the clipboard as rich text. This function\n waits for the data to be received using the main loop, so events,\n timeouts, etc, may be dispatched during the wait.\n Since 2.10\n Params:\n buffer = a GtkTextBuffer\n format = return location for the format of the returned data\n Returns: a newly-allocated binary block of data which must be freed with g_free(), or NULL if retrieving the selection data failed. (This could happen for various reasons, in particular if the clipboard was empty or if the contents of the clipboard could not be converted into text form.). [array length=length][transfer full]\n\t \n",
"line" : 583}
,
{
"name" : "waitForUris",
"kind" : "function",
"protection" : "public",
"type" : "string[]()",
"comment" : "\n Requests the contents of the clipboard as URIs. This function waits\n for the data to be received using the main loop, so events,\n timeouts, etc, may be dispatched during the wait.\n Since 2.14\n Returns: a newly-allocated NULL-terminated array of strings which must be freed with g_strfreev(), or NULL if retrieving the selection data failed. (This could happen for various reasons, in particular if the clipboard was empty or if the contents of the clipboard could not be converted into URI form.). [array zero-terminated=1][element-type utf8][transfer full]\n\t \n",
"line" : 598}
,
{
"name" : "waitIsTextAvailable",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Test to see if there is text available to be pasted\n This is done by requesting the TARGETS atom and checking\n if it contains any of the supported text targets. This function\n waits for the data to be received using the main loop, so events,\n timeouts, etc, may be dispatched during the wait.\n This function is a little faster than calling\n gtk_clipboard_wait_for_text() since it doesn't need to retrieve\n the actual text.\n Returns: TRUE is there is text available, FALSE otherwise.\n\t \n",
"line" : 615}
,
{
"name" : "waitIsImageAvailable",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Test to see if there is an image available to be pasted\n This is done by requesting the TARGETS atom and checking\n if it contains any of the supported image targets. This function\n waits for the data to be received using the main loop, so events,\n timeouts, etc, may be dispatched during the wait.\n This function is a little faster than calling\n gtk_clipboard_wait_for_image() since it doesn't need to retrieve\n the actual image data.\n Since 2.6\n Returns: TRUE is there is an image available, FALSE otherwise.\n\t \n",
"line" : 633}
,
{
"name" : "waitIsRichTextAvailable",
"kind" : "function",
"protection" : "public",
"type" : "int(TextBuffer buffer)",
"comment" : "\n Test to see if there is rich text available to be pasted\n This is done by requesting the TARGETS atom and checking\n if it contains any of the supported rich text targets. This function\n waits for the data to be received using the main loop, so events,\n timeouts, etc, may be dispatched during the wait.\n This function is a little faster than calling\n gtk_clipboard_wait_for_rich_text() since it doesn't need to retrieve\n the actual text.\n Since 2.10\n Params:\n buffer = a GtkTextBuffer\n Returns: TRUE is there is rich text available, FALSE otherwise.\n\t \n",
"line" : 653}
,
{
"name" : "waitIsUrisAvailable",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Test to see if there is a list of URIs available to be pasted\n This is done by requesting the TARGETS atom and checking\n if it contains the URI targets. This function\n waits for the data to be received using the main loop, so events,\n timeouts, etc, may be dispatched during the wait.\n This function is a little faster than calling\n gtk_clipboard_wait_for_uris() since it doesn't need to retrieve\n the actual URI data.\n Since 2.14\n Returns: TRUE is there is an URI list available, FALSE otherwise.\n\t \n",
"line" : 671}
,
{
"name" : "waitForTargets",
"kind" : "function",
"protection" : "public",
"type" : "int(out void*[] targets)",
"comment" : "\n Returns a list of targets that are present on the clipboard, or NULL\n if there aren't any targets available. The returned list must be\n freed with g_free().\n This function waits for the data to be received using the main\n loop, so events, timeouts, etc, may be dispatched during the wait.\n Since 2.4\n Params:\n targets = location to store an array of targets. The result\n stored here must be freed with g_free(). [out][array length=n_targets][transfer container]\n Returns: TRUE if any targets are present on the clipboard, otherwise FALSE.\n\t \n",
"line" : 689}
,
{
"name" : "waitIsTargetAvailable",
"kind" : "function",
"protection" : "public",
"type" : "int(void* target)",
"comment" : "\n Checks if a clipboard supports pasting data of a given type. This\n function can be used to determine if a \"Paste\" menu item should be\n insensitive or not.\n If you want to see if there's text available on the clipboard, use\n gtk_clipboard_wait_is_text_available() instead.\n Since 2.6\n Params:\n target = A GdkAtom indicating which target to look for.\n Returns: TRUE if the target is available, FALSE otherwise.\n\t \n",
"line" : 712}
,
{
"name" : "setCanStore",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkTargetEntry[] targets)",
"comment" : "\n Hints that the clipboard data should be stored somewhere when the\n application exits or when gtk_clipboard_store() is called.\n This value is reset when the clipboard owner changes.\n Where the clipboard data is stored is platform dependent,\n see gdk_display_store_clipboard() for more information.\n Since 2.6\n Params:\n targets = array containing\n information about which forms should be stored or NULL\n to indicate that all forms should be stored. [allow-none][array length=n_targets]\n\t \n",
"line" : 730}
,
{
"name" : "store",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Stores the current clipboard data somewhere so that it will stay\n around after the application has quit.\n Since 2.6\n Signal Details\n The \"owner-change\" signal\n void user_function (GtkClipboard *clipboard,\n  GdkEvent *event,\n  gpointer user_data) : Run First\n The ::owner-change signal is emitted when GTK+ receives an\n event that indicates that the ownership of the selection\n associated with clipboard has changed.\n Since 2.6\n\t \n",
"line" : 750}
]
}
]
}
,
{
"name" : "gtk.ColorButton",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/ColorButton.d",
"members" : [
{
"name" : "ColorButton",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkColorButton is a button which displays the currently selected color\n an allows to open a color selection dialog to change the color. It is suitable\n widget for selecting a color in a preference dialog.\n \n",
"line" : 79,
"base" : "Button",
"members" : [
{
"name" : "gtkColorButton",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkColorButton*",
"comment" : " the main Gtk struct \n",
"line" : 83}
,
{
"name" : "getColorButtonStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkColorButton*()",
"line" : 86}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 93}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ColorButton(GtkColorButton* gtkColorButton)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 101}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 119}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 127}
,
{
"name" : "onColorSetListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(ColorButton)[]",
"line" : 129}
,
{
"name" : "addOnColorSet",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(ColorButton) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::color-set signal is emitted when the user selects a color.\n When handling this signal, use gtk_color_button_get_color() and\n gtk_color_button_get_alpha() to find out which color was just selected.\n Note that this signal is only emitted when the user\n changes the color. If you need to react to programmatic color changes\n as well, use the notify::color signal.\n Since 2.4\n See Also\n GtkColorSelectionDialog, GtkFontButton\n\t \n",
"line" : 141}
,
{
"name" : "callBackColorSet",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkColorButton* widgetStruct, ColorButton colorButton)",
"line" : 156}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ColorButton()",
"comment" : "\n Creates a new color button. This returns a widget in the form of\n a small button containing a swatch representing the current selected\n color. When the button is clicked, a color-selection dialog will open,\n allowing the user to select a color. The swatch will be updated to reflect\n the new color when the user finishes.\n Since 2.4\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 174}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ColorButton(Color color)",
"comment" : "\n Creates a new color button.\n Since 2.4\n Params:\n color = A GdkColor to set the current color with.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 192}
,
{
"name" : "setColor",
"kind" : "function",
"protection" : "public",
"type" : "void(Color color)",
"comment" : "\n Sets the current color to be color.\n Since 2.4\n Params:\n color = A GdkColor to set the current color with.\n\t \n",
"line" : 209}
,
{
"name" : "getColor",
"kind" : "function",
"protection" : "public",
"type" : "void(Color color)",
"comment" : "\n Sets color to be the current color in the GtkColorButton widget.\n Since 2.4\n Params:\n color = a GdkColor to fill in with the current color.\n\t \n",
"line" : 221}
,
{
"name" : "setAlpha",
"kind" : "function",
"protection" : "public",
"type" : "void(ushort alpha)",
"comment" : "\n Sets the current opacity to be alpha.\n Since 2.4\n Params:\n alpha = an integer between 0 and 65535.\n\t \n",
"line" : 233}
,
{
"name" : "getAlpha",
"kind" : "function",
"protection" : "public",
"type" : "ushort()",
"comment" : "\n Returns the current alpha value.\n Since 2.4\n Returns: an integer between 0 and 65535.\n\t \n",
"line" : 244}
,
{
"name" : "setUseAlpha",
"kind" : "function",
"protection" : "public",
"type" : "void(int useAlpha)",
"comment" : "\n Sets whether or not the color button should use the alpha channel.\n Since 2.4\n Params:\n useAlpha = TRUE if color button should use alpha channel, FALSE if not.\n\t \n",
"line" : 256}
,
{
"name" : "getUseAlpha",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Does the color selection dialog use the alpha channel?\n Since 2.4\n Returns: TRUE if the color sample uses alpha channel, FALSE if not.\n\t \n",
"line" : 267}
,
{
"name" : "setTitle",
"kind" : "function",
"protection" : "public",
"type" : "void(string title)",
"comment" : "\n Sets the title for the color selection dialog.\n Since 2.4\n Params:\n title = String containing new window title.\n\t \n",
"line" : 279}
,
{
"name" : "getTitle",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the title of the color selection dialog.\n Since 2.4\n Returns: An internal string, do not free the return value\n\t \n",
"line" : 290}
]
}
]
}
,
{
"name" : "gtk.ColorSelection",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/ColorSelection.d",
"members" : [
{
"name" : "ColorSelection",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkColorSelection is a widget that is used to select\n a color. It consists of a color wheel and number of sliders\n and entry boxes for color parameters such as hue, saturation,\n value, red, green, blue, and opacity. It is found on the standard\n color selection dialog box GtkColorSelectionDialog.\n \n",
"line" : 81,
"base" : "VBox",
"members" : [
{
"name" : "gtkColorSelection",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkColorSelection*",
"comment" : " the main Gtk struct \n",
"line" : 85}
,
{
"name" : "getColorSelectionStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkColorSelection*()",
"line" : 88}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 95}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ColorSelection(GtkColorSelection* gtkColorSelection)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 103}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 121}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 129}
,
{
"name" : "onColorChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(ColorSelection)[]",
"line" : 131}
,
{
"name" : "addOnColorChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(ColorSelection) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted when the color changes in the GtkColorSelection\n according to its update policy.\n\t \n",
"line" : 136}
,
{
"name" : "callBackColorChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkColorSelection* colorselectionStruct, ColorSelection colorSelection)",
"line" : 151}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ColorSelection()",
"comment" : "\n Creates a new GtkColorSelection.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 164}
,
{
"name" : "setUpdatePolicy",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkUpdateType policy)",
"comment" : "\n Warning\n gtk_color_selection_set_update_policy is deprecated and should not be used in newly-written code.\n Sets the policy controlling when the color_changed signals are emitted.\n Params:\n policy = a GtkUpdateType value indicating the desired policy.\n\t \n",
"line" : 182}
,
{
"name" : "setHasOpacityControl",
"kind" : "function",
"protection" : "public",
"type" : "void(int hasOpacity)",
"comment" : "\n Sets the colorsel to use or not use opacity.\n Params:\n hasOpacity = TRUE if colorsel can set the opacity, FALSE otherwise.\n\t \n",
"line" : 193}
,
{
"name" : "getHasOpacityControl",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether the colorsel has an opacity control.\n Returns: TRUE if the colorsel has an opacity control. FALSE if it does't.\n\t \n",
"line" : 203}
,
{
"name" : "setHasPalette",
"kind" : "function",
"protection" : "public",
"type" : "void(int hasPalette)",
"comment" : "\n Shows and hides the palette based upon the value of has_palette.\n Params:\n hasPalette = TRUE if palette is to be visible, FALSE otherwise.\n\t \n",
"line" : 214}
,
{
"name" : "getHasPalette",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether the color selector has a color palette.\n Returns: TRUE if the selector has a palette. FALSE if it hasn't.\n\t \n",
"line" : 224}
,
{
"name" : "getCurrentAlpha",
"kind" : "function",
"protection" : "public",
"type" : "ushort()",
"comment" : "\n Returns the current alpha value.\n Returns: an integer between 0 and 65535.\n\t \n",
"line" : 234}
,
{
"name" : "setCurrentAlpha",
"kind" : "function",
"protection" : "public",
"type" : "void(ushort alpha)",
"comment" : "\n Sets the current opacity to be alpha. The first time this is called, it will\n also set the original opacity to be alpha too.\n Params:\n alpha = an integer between 0 and 65535.\n\t \n",
"line" : 246}
,
{
"name" : "getCurrentColor",
"kind" : "function",
"protection" : "public",
"type" : "void(Color color)",
"comment" : "\n Sets color to be the current color in the GtkColorSelection widget.\n Params:\n color = a GdkColor to fill in with the current color. [out]\n\t \n",
"line" : 257}
,
{
"name" : "setCurrentColor",
"kind" : "function",
"protection" : "public",
"type" : "void(Color color)",
"comment" : "\n Sets the current color to be color. The first time this is called, it will\n also set the original color to be color too.\n Params:\n color = A GdkColor to set the current color with.\n\t \n",
"line" : 269}
,
{
"name" : "getPreviousAlpha",
"kind" : "function",
"protection" : "public",
"type" : "ushort()",
"comment" : "\n Returns the previous alpha value.\n Returns: an integer between 0 and 65535.\n\t \n",
"line" : 279}
,
{
"name" : "setPreviousAlpha",
"kind" : "function",
"protection" : "public",
"type" : "void(ushort alpha)",
"comment" : "\n Sets the 'previous' alpha to be alpha. This function should be called with\n some hesitations, as it might seem confusing to have that alpha change.\n Params:\n alpha = an integer between 0 and 65535.\n\t \n",
"line" : 291}
,
{
"name" : "getPreviousColor",
"kind" : "function",
"protection" : "public",
"type" : "void(Color color)",
"comment" : "\n Fills color in with the original color value.\n Params:\n color = a GdkColor to fill in with the original color value. [out]\n\t \n",
"line" : 302}
,
{
"name" : "setPreviousColor",
"kind" : "function",
"protection" : "public",
"type" : "void(Color color)",
"comment" : "\n Sets the 'previous' color to be color. This function should be called with\n some hesitations, as it might seem confusing to have that color change.\n Calling gtk_color_selection_set_current_color() will also set this color the first\n time it is called.\n Params:\n color = a GdkColor to set the previous color with.\n\t \n",
"line" : 316}
,
{
"name" : "isAdjusting",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the current state of the colorsel.\n Returns: TRUE if the user is currently dragging a color around, and FALSE if the selection has stopped.\n\t \n",
"line" : 326}
,
{
"name" : "paletteFromString",
"kind" : "function",
"protection" : "public",
"type" : "int(string str, out GdkColor[] colors)",
"comment" : "\n Parses a color palette string; the string is a colon-separated\n list of color names readable by gdk_color_parse().\n Params:\n str = a string encoding a color palette.\n colors = return location for allocated\n array of GdkColor. [out][array length=n_colors]\n Returns: TRUE if a palette was successfully parsed.\n\t \n",
"line" : 341}
,
{
"name" : "paletteToString",
"kind" : "function",
"protection" : "public",
"type" : "string(Color colors, int nColors)",
"comment" : "\n Encodes a palette as a string, useful for persistent storage.\n Params:\n colors = an array of colors. [array length=n_colors]\n nColors = length of the array.\n Returns: allocated string encoding the palette.\n\t \n",
"line" : 360}
,
{
"name" : "setChangePaletteHook",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void function(GdkColor*, int)(extern (C) void function(GdkColor*, int) func)",
"comment" : "\n Warning\n gtk_color_selection_set_change_palette_hook has been deprecated since version 2.4 and should not be used in newly-written code. This function does not work in multihead environments.\n  Use gtk_color_selection_set_change_palette_with_screen_hook() instead.\n Installs a global function to be called whenever the user tries to\n modify the palette in a color selection. This function should save\n the new palette contents, and update the GtkSettings property\n \"gtk-color-palette\" so all GtkColorSelection widgets will be modified.\n Params:\n func = a function to call when the custom palette needs saving.\n Returns: the previous change palette hook (that was replaced).\n\t \n",
"line" : 378}
,
{
"name" : "setChangePaletteWithScreenHook",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void function(GdkScreen*, GdkColor*, int)(extern (C) void function(GdkScreen*, GdkColor*, int) func)",
"comment" : "\n Installs a global function to be called whenever the user tries to\n modify the palette in a color selection. This function should save\n the new palette contents, and update the GtkSettings property\n \"gtk-color-palette\" so all GtkColorSelection widgets will be modified.\n Since 2.2\n Params:\n func = a function to call when the custom palette needs saving.\n Returns: the previous change palette hook (that was replaced).\n\t \n",
"line" : 394}
,
{
"name" : "setColor",
"kind" : "function",
"protection" : "public",
"type" : "void(double[] color)",
"comment" : "\n Warning\n gtk_color_selection_set_color has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_color_selection_set_current_color() instead.\n Sets the current color to be color. The first time this is called, it will\n also set the original color to be color too.\n Params:\n color = an array of 4 doubles specifying the red, green, blue and opacity\n to set the current color to.\n\t \n",
"line" : 409}
,
{
"name" : "getColor",
"kind" : "function",
"protection" : "public",
"type" : "void(double[] color)",
"comment" : "\n Warning\n gtk_color_selection_get_color has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_color_selection_get_current_color() instead.\n Sets color to be the current color in the GtkColorSelection widget.\n Params:\n color = an array of 4 gdouble to fill in with the current color.\n\t \n",
"line" : 422}
]
}
]
}
,
{
"name" : "gtk.ColorSelectionDialog",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/ColorSelectionDialog.d",
"members" : [
{
"name" : "ColorSelectionDialog",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkColorSelectionDialog provides a standard dialog which\n allows the user to select a color much like the GtkFileSelection\n provides a standard dialog for file selection.\n GtkColorSelectionDialog as GtkBuildable\n The GtkColorSelectionDialog implementation of the GtkBuildable interface\n exposes the embedded GtkColorSelection as internal child with the\n name \"color_selection\". It also exposes the buttons with the names\n \"ok_button\", \"cancel_button\" and \"help_button\".\n \n",
"line" : 85,
"base" : "Dialog",
"members" : [
{
"name" : "gtkColorSelectionDialog",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkColorSelectionDialog*",
"comment" : " the main Gtk struct \n",
"line" : 89}
,
{
"name" : "getColorSelectionDialogStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkColorSelectionDialog*()",
"line" : 92}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 99}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ColorSelectionDialog(GtkColorSelectionDialog* gtkColorSelectionDialog)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 107}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 125}
,
{
"name" : "getColorSelection",
"kind" : "function",
"protection" : "public",
"type" : "ColorSelection()",
"comment" : "\n Retrieves the GtkColorSelection widget embedded in the dialog.\n Since 2.14\n Returns: the embedded GtkColorSelection\n\t \n",
"line" : 136}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ColorSelectionDialog(string title)",
"comment" : "\n\t \n\n Creates a new GtkColorSelectionDialog.\n Params:\n title = a string containing the title text for the dialog.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 156}
]
}
]
}
,
{
"name" : "gtk.ComboBox",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/ComboBox.d",
"members" : [
{
"name" : "ComboBox",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkComboBox is a widget that allows the user to choose from a list of\n valid choices. The GtkComboBox displays the selected choice. When\n activated, the GtkComboBox displays a popup which allows the user to\n make a new choice. The style in which the selected value is displayed,\n and the style of the popup is determined by the current theme. It may\n be similar to a Windows-style combo box.\n The GtkComboBox uses the model-view pattern; the list of valid choices\n is specified in the form of a tree model, and the display of the choices\n can be adapted to the data in the model by using cell renderers, as you\n would in a tree view. This is possible since GtkComboBox implements the\n GtkCellLayout interface. The tree model holding the valid choices is\n not restricted to a flat list, it can be a real tree, and the popup will\n reflect the tree structure.\n To allow the user to enter values not in the model, the 'has-entry'\n property allows the GtkComboBox to contain a GtkEntry. This entry\n can be accessed by calling gtk_bin_get_child() on the combo box.\n For a simple list of textual choices, the model-view API of GtkComboBox\n can be a bit overwhelming. In this case, GtkComboBoxText offers a\n simple alternative. Both GtkComboBox and GtkComboBoxText can contain\n an entry.\n A GtkComboBox is a widget that allows the user to choose from a\n list of valid choices. The GtkComboBox displays the selected\n choice. When activated, the GtkComboBox displays a popup\n which allows the user to make a new choice. The style in which\n the selected value is displayed, and the style of the popup is\n determined by the current theme. It may be similar to a GtkOptionMenu,\n or similar to a Windows-style combo box.\n Unlike its predecessors GtkCombo and GtkOptionMenu, the GtkComboBox\n uses the model-view pattern; the list of valid choices is specified in the\n form of a tree model, and the display of the choices can be adapted to\n the data in the model by using cell renderers, as you would in a tree view.\n This is possible since GtkComboBox implements the GtkCellLayout interface.\n The tree model holding the valid choices is not restricted to a flat list,\n it can be a real tree, and the popup will reflect the tree structure.\n In addition to the model-view API, GtkComboBox offers a simple API which\n is suitable for text-only combo boxes, and hides the complexity of managing\n the data in a model. It consists of the functions gtk_combo_box_new_text(),\n gtk_combo_box_append_text(), gtk_combo_box_insert_text(),\n gtk_combo_box_prepend_text(), gtk_combo_box_remove_text() and\n gtk_combo_box_get_active_text().\n \n",
"line" : 136,
"base" : "Bin",
"interfaces" : [
"CellLayoutIF",
"CellEditableIF"],
"members" : [
{
"name" : "gtkComboBox",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkComboBox*",
"comment" : " the main Gtk struct \n",
"line" : 140}
,
{
"name" : "getComboBoxStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkComboBox*()",
"line" : 143}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 150}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ComboBox(GtkComboBox* gtkComboBox)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 158}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 176}
,
{
"name" : "count",
"kind" : "variable",
"protection" : "private",
"type" : "int",
"line" : 182}
,
{
"name" : "maxCount",
"kind" : "variable",
"protection" : "public",
"type" : "int",
"line" : 183}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ComboBox(bool text = true)",
"comment" : "\n Creates a new empty GtkComboBox.\n If text is true then\n constructs a new text combo box, which is a\n GtkComboBox just displaying strings. If you use this function to create\n a text combo box, you should only manipulate its data source with the\n following convenience functions: gtk_combo_box_append_text(),\n gtk_combo_box_insert_text(), gtk_combo_box_prepend_text() and\n gtk_combo_box_remove_text().\n Since 2.4\n Returns:\n  A new GtkComboBox.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 206}
,
{
"name" : "setActiveText",
"kind" : "function",
"protection" : "public",
"type" : "void(string text, bool insert = false)",
"comment" : " \n",
"line" : 229}
,
{
"name" : "getIndex",
"kind" : "function",
"protection" : "public",
"type" : "int(string text)",
"comment" : " \n",
"line" : 248}
,
{
"name" : "prependOrReplaceText",
"kind" : "function",
"protection" : "public",
"type" : "void(string text)",
"comment" : " \n",
"line" : 276}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 293}
,
{
"name" : "onChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(ComboBox)[]",
"line" : 295}
,
{
"name" : "addOnChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(ComboBox) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The changed signal is emitted when the active\n item is changed. The can be due to the user selecting\n a different item from the list, or due to a\n call to gtk_combo_box_set_active_iter().\n It will also be emitted while typing into a GtkComboBoxEntry,\n as well as when selecting an item from the GtkComboBoxEntry's list.\n Since 2.4\n\t \n",
"line" : 305}
,
{
"name" : "callBackChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkComboBox* widgetStruct, ComboBox comboBox)",
"line" : 320}
,
{
"name" : "onMoveActiveListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkScrollType, ComboBox)[]",
"line" : 328}
,
{
"name" : "addOnMoveActive",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkScrollType, ComboBox) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::move-active signal is a\n keybinding signal\n which gets emitted to move the active selection.\n Since 2.12\n\t \n",
"line" : 335}
,
{
"name" : "callBackMoveActive",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkComboBox* widgetStruct, GtkScrollType scrollType, ComboBox comboBox)",
"line" : 350}
,
{
"name" : "onPopdownListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(ComboBox)[]",
"line" : 358}
,
{
"name" : "addOnPopdown",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(ComboBox) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::popdown signal is a\n keybinding signal\n which gets emitted to popdown the combo box list.\n The default bindings for this signal are Alt+Up and Escape.\n Since 2.12\n\t \n",
"line" : 366}
,
{
"name" : "callBackPopdown",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkComboBox* buttonStruct, ComboBox comboBox)",
"line" : 381}
,
{
"name" : "onPopupListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(ComboBox)[]",
"line" : 394}
,
{
"name" : "addOnPopup",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(ComboBox) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::popup signal is a\n keybinding signal\n which gets emitted to popup the combo box list.\n The default binding for this signal is Alt+Down.\n Since 2.12\n See Also\n GtkComboBoxText, GtkTreeModel, GtkCellRenderer\n\t \n",
"line" : 404}
,
{
"name" : "callBackPopup",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkComboBox* widgetStruct, ComboBox comboBox)",
"line" : 419}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ComboBox()",
"comment" : "\n Creates a new empty GtkComboBox with an entry.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 432}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ComboBox(TreeModelIF model)",
"comment" : "\n Creates a new GtkComboBox with the model initialized to model.\n Since 2.4\n Params:\n model = A GtkTreeModel.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 450}
,
{
"name" : "getWrapWidth",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the wrap width which is used to determine the number of columns\n for the popup menu. If the wrap width is larger than 1, the combo box\n is in table mode.\n Since 2.6\n Returns: the wrap width.\n\t \n",
"line" : 468}
,
{
"name" : "setWrapWidth",
"kind" : "function",
"protection" : "public",
"type" : "void(int width)",
"comment" : "\n Sets the wrap width of combo_box to be width. The wrap width is basically\n the preferred number of columns when you want the popup to be layed out\n in a table.\n Since 2.4\n Params:\n width = Preferred number of columns\n\t \n",
"line" : 482}
,
{
"name" : "getRowSpanColumn",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the column with row span information for combo_box.\n Since 2.6\n Returns: the row span column.\n\t \n",
"line" : 493}
,
{
"name" : "setRowSpanColumn",
"kind" : "function",
"protection" : "public",
"type" : "void(int rowSpan)",
"comment" : "\n Sets the column with row span information for combo_box to be row_span.\n The row span column contains integers which indicate how many rows\n an item should span.\n Since 2.4\n Params:\n rowSpan = A column in the model passed during construction.\n\t \n",
"line" : 507}
,
{
"name" : "getColumnSpanColumn",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the column with column span information for combo_box.\n Since 2.6\n Returns: the column span column.\n\t \n",
"line" : 518}
,
{
"name" : "setColumnSpanColumn",
"kind" : "function",
"protection" : "public",
"type" : "void(int columnSpan)",
"comment" : "\n Sets the column with column span information for combo_box to be\n column_span. The column span column contains integers which indicate\n how many columns an item should span.\n Since 2.4\n Params:\n columnSpan = A column in the model passed during construction\n\t \n",
"line" : 532}
,
{
"name" : "getActive",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the index of the currently active item, or -1 if there's no\n active item. If the model is a non-flat treemodel, and the active item\n is not an immediate child of the root of the tree, this function returns\n gtk_tree_path_get_indices (path)[0], where\n path is the GtkTreePath of the active item.\n Since 2.4\n Returns: An integer which is the index of the currently active item, or -1 if there's no active item.\n\t \n",
"line" : 547}
,
{
"name" : "setActive",
"kind" : "function",
"protection" : "public",
"type" : "void(int index)",
"comment" : "\n Sets the active item of combo_box to be the item at index.\n Since 2.4\n Params:\n index = An index in the model passed during construction, or -1 to have\n no active item\n\t \n",
"line" : 560}
,
{
"name" : "getActiveIter",
"kind" : "function",
"protection" : "public",
"type" : "int(TreeIter iter)",
"comment" : "\n Sets iter to point to the current active item, if it exists.\n Since 2.4\n Params:\n iter = The uninitialized GtkTreeIter. [out]\n Returns: TRUE, if iter was set\n\t \n",
"line" : 573}
,
{
"name" : "setActiveIter",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter)",
"comment" : "\n Sets the current active item to be the one referenced by iter, or\n unsets the active item if iter is NULL.\n Since 2.4\n Params:\n iter = The GtkTreeIter, or NULL. [allow-none]\n\t \n",
"line" : 586}
,
{
"name" : "getModel",
"kind" : "function",
"protection" : "public",
"type" : "TreeModelIF()",
"comment" : "\n Returns the GtkTreeModel which is acting as data source for combo_box.\n Since 2.4\n Returns: A GtkTreeModel which was passed during construction. [transfer none]\n\t \n",
"line" : 597}
,
{
"name" : "setModel",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeModelIF model)",
"comment" : "\n Sets the model used by combo_box to be model. Will unset a previously set\n model (if applicable). If model is NULL, then it will unset the model.\n Note that this function does not clear the cell renderers, you have to\n call gtk_cell_layout_clear() yourself if you need to set up different\n cell renderers for the new model.\n Since 2.4\n Params:\n model = A GtkTreeModel. [allow-none]\n\t \n",
"line" : 618}
,
{
"name" : "appendText",
"kind" : "function",
"protection" : "public",
"type" : "void(string text)",
"comment" : "\n Warning\n gtk_combo_box_append_text has been deprecated since version 2.24 and should not be used in newly-written code. Use GtkComboBoxText\n Appends string to the list of strings stored in combo_box. Note that\n you can only use this function with combo boxes constructed with\n gtk_combo_box_new_text().\n Since 2.4\n Params:\n text = A string\n\t \n",
"line" : 634}
,
{
"name" : "insertText",
"kind" : "function",
"protection" : "public",
"type" : "void(int position, string text)",
"comment" : "\n Warning\n gtk_combo_box_insert_text has been deprecated since version 2.24 and should not be used in newly-written code. Use GtkComboBoxText\n Inserts string at position in the list of strings stored in combo_box.\n Note that you can only use this function with combo boxes constructed\n with gtk_combo_box_new_text().\n Since 2.4\n Params:\n position = An index to insert text\n text = A string\n\t \n",
"line" : 651}
,
{
"name" : "prependText",
"kind" : "function",
"protection" : "public",
"type" : "void(string text)",
"comment" : "\n Warning\n gtk_combo_box_prepend_text has been deprecated since version 2.24 and should not be used in newly-written code. Use GtkComboBoxText\n Prepends string to the list of strings stored in combo_box. Note that\n you can only use this function with combo boxes constructed with\n gtk_combo_box_new_text().\n Since 2.4\n Params:\n text = A string\n\t \n",
"line" : 667}
,
{
"name" : "removeText",
"kind" : "function",
"protection" : "public",
"type" : "void(int position)",
"comment" : "\n Warning\n gtk_combo_box_remove_text has been deprecated since version 2.24 and should not be used in newly-written code. Use GtkComboBoxText\n Removes the string at position from combo_box. Note that you can only use\n this function with combo boxes constructed with gtk_combo_box_new_text().\n Since 2.4\n Params:\n position = Index of the item to remove\n\t \n",
"line" : 682}
,
{
"name" : "getActiveText",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Warning\n gtk_combo_box_get_active_text has been deprecated since version 2.24 and should not be used in newly-written code. If you used this with a GtkComboBox constructed with\n gtk_combo_box_new_text() then you should now use GtkComboBoxText and\n gtk_combo_box_text_get_active_text() instead. Or if you used this with a\n GtkComboBoxEntry then you should now use GtkComboBox with\n \"has-entry\" as TRUE and use\n gtk_entry_get_text (GTK_ENTRY (gtk_bin_get_child (GTK_BIN (combobox))).\n Returns the currently active string in combo_box or NULL if none\n is selected. Note that you can only use this function with combo\n boxes constructed with gtk_combo_box_new_text() and with\n GtkComboBoxEntrys.\n Since 2.6\n Returns: a newly allocated string containing the currently active text. Must be freed with g_free().\n\t \n",
"line" : 703}
,
{
"name" : "popup",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Pops up the menu or dropdown list of combo_box.\n This function is mostly intended for use by accessibility technologies;\n applications should have little use for it.\n Since 2.4\n\t \n",
"line" : 715}
,
{
"name" : "popdown",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Hides the menu or dropdown list of combo_box.\n This function is mostly intended for use by accessibility technologies;\n applications should have little use for it.\n Since 2.4\n\t \n",
"line" : 727}
,
{
"name" : "getPopupAccessible",
"kind" : "function",
"protection" : "public",
"type" : "ObjectAtk()",
"comment" : "\n Gets the accessible object corresponding to the combo box's popup.\n This function is mostly intended for use by accessibility technologies;\n applications should have little use for it.\n Since 2.6\n Returns: the accessible object corresponding to the combo box's popup. [transfer none]\n\t \n",
"line" : 740}
,
{
"name" : "getRowSeparatorFunc",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int function(GtkTreeModel*, GtkTreeIter*, void*)()",
"comment" : "\n Returns the current row separator function.\n Since 2.6\n Returns: the current row separator function.\n\t \n",
"line" : 756}
,
{
"name" : "setRowSeparatorFunc",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) int function(GtkTreeModel*, GtkTreeIter*, void*) func, void* data, extern (C) void function(void* cbData) destroy)",
"comment" : "\n Sets the row separator function, which is used to determine\n whether a row should be drawn as a separator. If the row separator\n function is NULL, no separators are drawn. This is the default value.\n Since 2.6\n Params:\n func = a GtkTreeViewRowSeparatorFunc\n data = user data to pass to func, or NULL. [allow-none]\n destroy = destroy notifier for data, or NULL. [allow-none]\n\t \n",
"line" : 772}
,
{
"name" : "setAddTearoffs",
"kind" : "function",
"protection" : "public",
"type" : "void(int addTearoffs)",
"comment" : "\n Sets whether the popup menu should have a tearoff\n menu item.\n Since 2.6\n Params:\n addTearoffs = TRUE to add tearoff menu items\n\t \n",
"line" : 785}
,
{
"name" : "getAddTearoffs",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the current value of the :add-tearoffs property.\n Returns: the current value of the :add-tearoffs property.\n\t \n",
"line" : 795}
,
{
"name" : "setTitle",
"kind" : "function",
"protection" : "public",
"type" : "void(string title)",
"comment" : "\n Sets the menu's title in tearoff mode.\n Since 2.10\n Params:\n title = a title for the menu in tearoff mode\n\t \n",
"line" : 807}
,
{
"name" : "getTitle",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the current title of the menu in tearoff mode. See\n gtk_combo_box_set_add_tearoffs().\n Since 2.10\n Returns: the menu's title in tearoff mode. This is an internal copy of the string which must not be freed.\n\t \n",
"line" : 819}
,
{
"name" : "setFocusOnClick",
"kind" : "function",
"protection" : "public",
"type" : "void(int focusOnClick)",
"comment" : "\n Sets whether the combo box will grab focus when it is clicked with\n the mouse. Making mouse clicks not grab focus is useful in places\n like toolbars where you don't want the keyboard focus removed from\n the main area of the application.\n Since 2.6\n Params:\n focusOnClick = whether the combo box grabs focus when clicked\n with the mouse\n\t \n",
"line" : 835}
,
{
"name" : "getFocusOnClick",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the combo box grabs focus when it is clicked\n with the mouse. See gtk_combo_box_set_focus_on_click().\n Since 2.6\n Returns: TRUE if the combo box grabs focus when it is clicked with the mouse.\n\t \n",
"line" : 847}
,
{
"name" : "setButtonSensitivity",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkSensitivityType sensitivity)",
"comment" : "\n Sets whether the dropdown button of the combo box should be\n always sensitive (GTK_SENSITIVITY_ON), never sensitive (GTK_SENSITIVITY_OFF)\n or only if there is at least one item to display (GTK_SENSITIVITY_AUTO).\n Since 2.14\n Params:\n sensitivity = specify the sensitivity of the dropdown button\n\t \n",
"line" : 861}
,
{
"name" : "getButtonSensitivity",
"kind" : "function",
"protection" : "public",
"type" : "GtkSensitivityType()",
"comment" : "\n Returns whether the combo box sets the dropdown button\n sensitive or not when there are no items in the model.\n Since 2.14\n Returns: GTK_SENSITIVITY_ON if the dropdown button is sensitive when the model is empty, GTK_SENSITIVITY_OFF if the button is always insensitive or GTK_SENSITIVITY_AUTO if it is only sensitive as long as the model has one item to be selected.\n\t \n",
"line" : 873}
,
{
"name" : "getHasEntry",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the combo box has an entry.\n Since 2.24\n Returns: whether there is an entry in combo_box.\n\t \n",
"line" : 884}
,
{
"name" : "setEntryTextColumn",
"kind" : "function",
"protection" : "public",
"type" : "void(int textColumn)",
"comment" : "\n Sets the model column which combo_box should use to get strings from\n to be text_column. The column text_column in the model of combo_box\n must be of type G_TYPE_STRING.\n This is only relevant if combo_box has been created with\n \"has-entry\" as TRUE.\n Since 2.24\n Params:\n textColumn = A column in model to get the strings from for\n the internal entry\n\t \n",
"line" : 901}
,
{
"name" : "getEntryTextColumn",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the column which combo_box is using to get the strings\n from to display in the internal entry.\n Since 2.24\n Returns: A column in the data source model of combo_box.\n\t \n",
"line" : 913}
]
}
]
}
,
{
"name" : "gtk.ComboBoxEntry",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/ComboBoxEntry.d",
"members" : [
{
"name" : "ComboBoxEntry",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkComboBoxEntry is a widget that allows the user to choose from a\n list of valid choices or enter a different value. It is very similar\n to a GtkComboBox, but it displays the selected value in an entry to\n allow modifying it.\n In contrast to a GtkComboBox, the underlying model of a GtkComboBoxEntry\n must always have a text column (see gtk_combo_box_entry_set_text_column()),\n and the entry will show the content of the text column in the selected row.\n To get the text from the entry, use gtk_combo_box_get_active_text().\n The changed signal will be emitted while typing into a GtkComboBoxEntry,\n as well as when selecting an item from the GtkComboBoxEntry's list. Use\n gtk_combo_box_get_active() or gtk_combo_box_get_active_iter() to discover\n whether an item was actually selected from the list.\n Connect to the activate signal of the GtkEntry (use gtk_bin_get_child())\n to detect when the user actually finishes entering text.\n The convenience API to construct simple text-only GtkComboBoxes\n can also be used with GtkComboBoxEntrys which have been constructed\n with gtk_combo_box_entry_new_text().\n If you have special needs that go beyond a simple entry (e.g. input validation),\n it is possible to replace the child entry by a different widget using\n gtk_container_remove() and gtk_container_add().\n GtkComboBoxEntry as GtkBuildable\n Beyond the <attributes> support that is shared by all\n GtkCellLayout implementation,\n GtkComboBoxEntry makes the entry available in UI definitions as an internal\n child with name \"entry\".\n \n",
"line" : 101,
"base" : "ComboBox",
"members" : [
{
"name" : "gtkComboBoxEntry",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkComboBoxEntry*",
"comment" : " the main Gtk struct \n",
"line" : 105}
,
{
"name" : "getComboBoxEntryStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkComboBoxEntry*()",
"line" : 108}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 115}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ComboBoxEntry(GtkComboBoxEntry* gtkComboBoxEntry)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 123}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 141}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ComboBoxEntry(bool text = true)",
"comment" : "\n Creates a new GtkComboBoxEntry which has a GtkEntry as child. After\n construction, you should set a model using gtk_combo_box_set_model() and a\n text_column * using gtk_combo_box_entry_set_text_column().\n Since 2.4\n Returns:\n  A new GtkComboBoxEntry.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 156}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ComboBoxEntry(TreeModelIF model, int textColumn)",
"comment" : "\n\t \n\n Warning\n gtk_combo_box_entry_new_with_model has been deprecated since version 2.24 and should not be used in newly-written code. Use gtk_combo_box_new_with_model_and_entry() instead\n Creates a new GtkComboBoxEntry which has a GtkEntry as child and a list\n of strings as popup. You can get the GtkEntry from a GtkComboBoxEntry\n using GTK_ENTRY (GTK_BIN (combo_box_entry)->child). To add and remove\n strings from the list, just modify model using its data manipulation\n API.\n Since 2.4\n Params:\n model = A GtkTreeModel.\n textColumn = A column in model to get the strings from.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 196}
,
{
"name" : "setTextColumn",
"kind" : "function",
"protection" : "public",
"type" : "void(int textColumn)",
"comment" : "\n Warning\n gtk_combo_box_entry_set_text_column has been deprecated since version 2.24 and should not be used in newly-written code. Use gtk_combo_box_set_entry_text_column() instead\n Sets the model column which entry_box should use to get strings from\n to be text_column.\n Since 2.4\n Params:\n textColumn = A column in model to get the strings from.\n\t \n",
"line" : 216}
,
{
"name" : "getTextColumn",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Warning\n gtk_combo_box_entry_get_text_column has been deprecated since version 2.24 and should not be used in newly-written code. Use gtk_combo_box_get_entry_text_column() instead\n Returns the column which entry_box is using to get the strings from.\n Since 2.4\n Returns: A column in the data source model of entry_box.\n\t \n",
"line" : 229}
]
}
]
}
,
{
"name" : "gtk.Container",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Container.d",
"members" : [
{
"name" : "Container",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GTK+ user interface is constructed by nesting widgets inside widgets.\n Container widgets are the inner nodes in the resulting tree of widgets:\n they contain other widgets. So, for example, you might have a GtkWindow\n containing a GtkFrame containing a GtkLabel. If you wanted an image instead\n of a textual label inside the frame, you might replace the GtkLabel widget\n with a GtkImage widget.\n There are two major kinds of container widgets in GTK+. Both are subclasses\n of the abstract GtkContainer base class.\n The first type of container widget has a single child widget and derives\n from GtkBin. These containers are decorators, which\n add some kind of functionality to the child. For example, a GtkButton makes\n its child into a clickable button; a GtkFrame draws a frame around its child\n and a GtkWindow places its child widget inside a top-level window.\n The second type of container can have more than one child; its purpose is to\n manage layout. This means that these containers assign\n sizes and positions to their children. For example, a GtkHBox arranges its\n children in a horizontal row, and a GtkTable arranges the widgets it contains\n in a two-dimensional grid.\n To fulfill its task, a layout container must negotiate the size requirements\n with its parent and its children. This negotiation is carried out in two\n phases, size requisition and size\n allocation.\n Size Requisition\n The size requisition of a widget is it's desired width and height.\n This is represented by a GtkRequisition.\n How a widget determines its desired size depends on the widget.\n A GtkLabel, for example, requests enough space to display all its text.\n Container widgets generally base their size request on the requisitions\n of their children.\n The size requisition phase of the widget layout process operates top-down.\n It starts at a top-level widget, typically a GtkWindow. The top-level widget\n asks its child for its size requisition by calling gtk_widget_size_request().\n To determine its requisition, the child asks its own children for their\n requisitions and so on. Finally, the top-level widget will get a requisition\n back from its child.\n <hr>\n Size Allocation\n When the top-level widget has determined how much space its child would like\n to have, the second phase of the size negotiation, size allocation, begins.\n Depending on its configuration (see gtk_window_set_resizable()), the top-level\n widget may be able to expand in order to satisfy the size request or it may\n have to ignore the size request and keep its fixed size. It then tells its\n child widget how much space it gets by calling gtk_widget_size_allocate().\n The child widget divides the space among its children and tells each child\n how much space it got, and so on. Under normal circumstances, a GtkWindow\n will always give its child the amount of space the child requested.\n A child's size allocation is represented by a GtkAllocation. This struct\n contains not only a width and height, but also a position (i.e. X and Y\n coordinates), so that containers can tell their children not only how much\n space they have gotten, but also where they are positioned inside the space\n available to the container.\n Widgets are required to honor the size allocation they receive; a size\n request is only a request, and widgets must be able to cope with any size.\n <hr>\n Child properties\n GtkContainer introduces child\n properties - these are object properties that are not specific\n to either the container or the contained widget, but rather to their relation.\n Typical examples of child properties are the position or pack-type of a widget\n which is contained in a GtkBox.\n Use gtk_container_class_install_child_property() to install child properties\n for a container class and gtk_container_class_find_child_property() or\n gtk_container_class_list_child_properties() to get information about existing\n child properties.\n To set the value of a child property, use gtk_container_child_set_property(),\n gtk_container_child_set() or gtk_container_child_set_valist().\n To obtain the value of a child property, use\n gtk_container_child_get_property(), gtk_container_child_get() or\n gtk_container_child_get_valist(). To emit notification about child property\n changes, use gtk_widget_child_notify().\n <hr>\n GtkContainer as GtkBuildable\n The GtkContainer implementation of the GtkBuildable interface\n supports a <packing> element for children, which can\n contain multiple <property> elements that specify\n child properties for the child.\n $(DDOC_COMMENT example)\n Since 2.16, child properties can also be marked as translatable using\n the same \"translatable\", \"comments\" and \"context\" attributes that are used\n for regular properties.\n \n",
"line" : 167,
"base" : "Widget",
"members" : [
{
"name" : "gtkContainer",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkContainer*",
"comment" : " the main Gtk struct \n",
"line" : 171}
,
{
"name" : "getContainerStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkContainer*()",
"line" : 174}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 181}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Container(GtkContainer* gtkContainer)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 189}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 207}
,
{
"name" : "removeAll",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Removes all widgets from the container\n\t \n",
"line" : 216}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 231}
,
{
"name" : "onAddListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Widget, Container)[]",
"line" : 233}
,
{
"name" : "addOnAdd",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Widget, Container) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 236}
,
{
"name" : "callBackAdd",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkContainer* containerStruct, GtkWidget* widget, Container container)",
"line" : 251}
,
{
"name" : "onCheckResizeListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Container)[]",
"line" : 259}
,
{
"name" : "addOnCheckResize",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Container) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 262}
,
{
"name" : "callBackCheckResize",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkContainer* containerStruct, Container container)",
"line" : 277}
,
{
"name" : "onRemoveListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Widget, Container)[]",
"line" : 285}
,
{
"name" : "addOnRemove",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Widget, Container) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 288}
,
{
"name" : "callBackRemove",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkContainer* containerStruct, GtkWidget* widget, Container container)",
"line" : 303}
,
{
"name" : "onSetFocusChildListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Widget, Container)[]",
"line" : 311}
,
{
"name" : "addOnSetFocusChild",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Widget, Container) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 314}
,
{
"name" : "callBackSetFocusChild",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkContainer* containerStruct, GtkWidget* widget, Container container)",
"line" : 329}
,
{
"name" : "add",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget)",
"comment" : "\n Adds widget to container. Typically used for simple containers\n such as GtkWindow, GtkFrame, or GtkButton; for more complicated\n layout containers such as GtkBox or GtkTable, this function will\n pick default packing parameters that may not be correct. So\n consider functions such as gtk_box_pack_start() and\n gtk_table_attach() as an alternative to gtk_container_add() in\n those cases. A widget may be added to only one container at a time;\n you can't place the same widget inside two different containers.\n Params:\n widget = a widget to be placed inside container\n\t \n",
"line" : 350}
,
{
"name" : "remove",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget)",
"comment" : "\n Removes widget from container. widget must be inside container.\n Note that container will own a reference to widget, and that this\n may be the last reference held; so removing a widget from its\n container can destroy that widget. If you want to use widget\n again, you need to add a reference to it while it's not inside\n a container, using g_object_ref(). If you don't want to use widget\n again it's usually more efficient to simply destroy it directly\n using gtk_widget_destroy() since this will remove it from the\n container and help break any circular reference count cycles.\n Params:\n widget = a current child of container\n\t \n",
"line" : 369}
,
{
"name" : "getResizeMode",
"kind" : "function",
"protection" : "public",
"type" : "GtkResizeMode()",
"comment" : "\n Returns the resize mode for the container. See\n gtk_container_set_resize_mode().\n Returns: the current resize mode\n\t \n",
"line" : 380}
,
{
"name" : "setResizeMode",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkResizeMode resizeMode)",
"comment" : "\n Sets the resize mode for the container.\n The resize mode of a container determines whether a resize request\n will be passed to the container's parent, queued for later execution\n or executed immediately.\n Params:\n resizeMode = the new resize mode\n\t \n",
"line" : 394}
,
{
"name" : "checkResize",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n\t \n",
"line" : 402}
,
{
"name" : "foreac",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) void function(GtkWidget*, void*) callback, void* callbackData)",
"comment" : "\n Invokes callback on each non-internal child of container. See\n gtk_container_forall() for details on what constitutes an\n \"internal\" child. Most applications should use\n gtk_container_foreach(), rather than gtk_container_forall().\n Params:\n callback = a callback. [scope call]\n callbackData = callback user data\n\t \n",
"line" : 417}
,
{
"name" : "foreachFull",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) void function(GtkWidget*, void*) callback, extern (C) void function(GtkObject*, void*, uint, GtkArg*) marshal, void* callbackData, extern (C) void function(void* cbData) notify)",
"comment" : "\n Warning\n gtk_container_foreach_full is deprecated and should not be used in newly-written code. Use gtk_container_foreach() instead.\n\t \n",
"line" : 427}
,
{
"name" : "getChildren",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Returns the container's non-internal children. See\n gtk_container_forall() for details on what constitutes an \"internal\" child.\n Returns: a newly-allocated list of the container's non-internal children. [element-type GtkWidget][transfer container]\n\t \n",
"line" : 438}
,
{
"name" : "setReallocateRedraws",
"kind" : "function",
"protection" : "public",
"type" : "void(int needsRedraws)",
"comment" : "\n Sets the reallocate_redraws flag of the container to the given value.\n Containers requesting reallocation redraws get automatically\n redrawn if any of their children changed allocation.\n Params:\n needsRedraws = the new value for the container's reallocate_redraws flag\n\t \n",
"line" : 456}
,
{
"name" : "getFocusChild",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Returns the current focus child widget inside container. This is not the\n currently focused widget. That can be obtained by calling\n gtk_window_get_focus().\n Since 2.14\n Returns: The child widget which will receive the focus inside container when the conatiner is focussed, or NULL if none is set. [transfer none]\n\t \n",
"line" : 469}
,
{
"name" : "setFocusChild",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child)",
"comment" : "\n Sets, or unsets if child is NULL, the focused child of container.\n This function emits the GtkContainer::set_focus_child signal of\n container. Implementations of GtkContainer can override the\n default behaviour by overriding the class closure of this signal.\n This is function is mostly meant to be used by widgets. Applications can use\n gtk_widget_grab_focus() to manualy set the focus to a specific widget.\n Params:\n child = a GtkWidget, or NULL. [allow-none]\n\t \n",
"line" : 490}
,
{
"name" : "getFocusVadjustment",
"kind" : "function",
"protection" : "public",
"type" : "Adjustment()",
"comment" : "\n Retrieves the vertical focus adjustment for the container. See\n gtk_container_set_focus_vadjustment().\n Returns: the vertical focus adjustment, or NULL if none has been set. [transfer none]\n\t \n",
"line" : 501}
,
{
"name" : "setFocusVadjustment",
"kind" : "function",
"protection" : "public",
"type" : "void(Adjustment adjustment)",
"comment" : "\n Hooks up an adjustment to focus handling in a container, so when a\n child of the container is focused, the adjustment is scrolled to\n show that widget. This function sets the vertical alignment. See\n gtk_scrolled_window_get_vadjustment() for a typical way of obtaining\n the adjustment and gtk_container_set_focus_hadjustment() for setting\n the horizontal adjustment.\n The adjustments have to be in pixel units and in the same coordinate\n system as the allocation for immediate children of the container.\n Params:\n adjustment = an adjustment which should be adjusted when the focus\n is moved among the descendents of container\n\t \n",
"line" : 525}
,
{
"name" : "getFocusHadjustment",
"kind" : "function",
"protection" : "public",
"type" : "Adjustment()",
"comment" : "\n Retrieves the horizontal focus adjustment for the container. See\n gtk_container_set_focus_hadjustment().\n Returns: the horizontal focus adjustment, or NULL if none has been set. [transfer none]\n\t \n",
"line" : 536}
,
{
"name" : "setFocusHadjustment",
"kind" : "function",
"protection" : "public",
"type" : "void(Adjustment adjustment)",
"comment" : "\n Hooks up an adjustment to focus handling in a container, so when a child\n of the container is focused, the adjustment is scrolled to show that\n widget. This function sets the horizontal alignment.\n See gtk_scrolled_window_get_hadjustment() for a typical way of obtaining\n the adjustment and gtk_container_set_focus_vadjustment() for setting\n the vertical adjustment.\n The adjustments have to be in pixel units and in the same coordinate\n system as the allocation for immediate children of the container.\n Params:\n adjustment = an adjustment which should be adjusted when the focus is\n moved among the descendents of container\n\t \n",
"line" : 560}
,
{
"name" : "resizeChildren",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n\t \n",
"line" : 568}
,
{
"name" : "childType",
"kind" : "function",
"protection" : "public",
"type" : "GType()",
"comment" : "\n Returns the type of the children supported by the container.\n Note that this may return G_TYPE_NONE to indicate that no more\n children can be added, e.g. for a GtkPaned which already has two\n children.\n Returns: a GType.\n\t \n",
"line" : 581}
,
{
"name" : "childGetProperty",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, string propertyName, Value value)",
"comment" : "\n Gets the value of a child property for child and container.\n Params:\n child = a widget which is a child of container\n propertyName = the name of the property to get\n value = a location to return the value\n\t \n",
"line" : 594}
,
{
"name" : "childSetProperty",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, string propertyName, Value value)",
"comment" : "\n Sets a child property for child and container.\n Params:\n child = a widget which is a child of container\n propertyName = the name of the property to set\n value = the value to set the property to\n\t \n",
"line" : 607}
,
{
"name" : "childGetValist",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, string firstPropertyName, void* varArgs)",
"comment" : "\n Gets the values of one or more child properties for child and container.\n Params:\n child = a widget which is a child of container\n firstPropertyName = the name of the first property to get\n varArgs = return location for the first property, followed\n optionally by more name\/return location pairs, followed by NULL\n\t \n",
"line" : 621}
,
{
"name" : "childSetValist",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, string firstPropertyName, void* varArgs)",
"comment" : "\n Sets one or more child properties for child and container.\n Params:\n child = a widget which is a child of container\n firstPropertyName = the name of the first property to set\n varArgs = a NULL-terminated list of property names and values, starting\n with first_prop_name\n\t \n",
"line" : 635}
,
{
"name" : "forall",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) void function(GtkWidget*, void*) callback, void* callbackData)",
"comment" : "\n Invokes callback on each child of container, including children\n that are considered \"internal\" (implementation details of the\n container). \"Internal\" children generally weren't added by the user\n of the container, but were added by the container implementation\n itself. Most applications should use gtk_container_foreach(),\n rather than gtk_container_forall().\n Params:\n callback = a callback\n callbackData = callback user data\n\t \n",
"line" : 652}
,
{
"name" : "getBorderWidth",
"kind" : "function",
"protection" : "public",
"type" : "uint()",
"comment" : "\n Retrieves the border width of the container. See\n gtk_container_set_border_width().\n Returns: the current border width\n\t \n",
"line" : 663}
,
{
"name" : "setBorderWidth",
"kind" : "function",
"protection" : "public",
"type" : "void(uint borderWidth)",
"comment" : "\n Sets the border width of the container.\n The border width of a container is the amount of space to leave\n around the outside of the container. The only exception to this is\n GtkWindow; because toplevel windows can't leave space outside,\n they leave the space inside. The border is added on all sides of\n the container. To add space to only one side, one approach is to\n create a GtkAlignment widget, call gtk_widget_set_size_request()\n to give it a size, and place it on the side of the container as\n a spacer.\n Params:\n borderWidth = amount of blank space to leave outside\n the container. Valid values are in the range 0-65535 pixels.\n\t \n",
"line" : 683}
,
{
"name" : "propagateExpose",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, GdkEventExpose* event)",
"comment" : "\n When a container receives an expose event, it must send synthetic\n expose events to all children that don't have their own GdkWindows.\n This function provides a convenient way of doing this. A container,\n when it receives an expose event, calls gtk_container_propagate_expose()\n once for each child, passing in the event the container received.\n gtk_container_propagate_expose() takes care of deciding whether\n an expose event needs to be sent to the child, intersecting\n the event's area with the child area, and sending the event.\n In most cases, a container can simply either simply inherit the\n \"expose\" implementation from GtkContainer, or, do some drawing\n and then chain to the ::expose implementation from GtkContainer.\n Note that the ::expose-event signal has been replaced by a ::draw\n signal in GTK+ 3, and consequently, gtk_container_propagate_expose()\n has been replaced by gtk_container_propagate_draw().\n The GTK+ 3 migration guide\n for hints on how to port from ::expose-event to ::draw.\n Params:\n child = a child of container\n event = a expose event sent to container\n\t \n",
"line" : 710}
,
{
"name" : "getFocusChain",
"kind" : "function",
"protection" : "public",
"type" : "int(out ListG focusableWidgets)",
"comment" : "\n Retrieves the focus chain of the container, if one has been\n set explicitly. If no focus chain has been explicitly\n set, GTK+ computes the focus chain based on the positions\n of the children. In that case, GTK+ stores NULL in\n focusable_widgets and returns FALSE.\n Params:\n focusableWidgets = location\n to store the focus chain of the\n container, or NULL. You should free this list\n using g_list_free() when you are done with it, however\n no additional reference count is added to the\n individual widgets in the focus chain. [element-type GtkWidget][out][transfer container]\n Returns: TRUE if the focus chain of the container has been set explicitly.\n\t \n",
"line" : 731}
,
{
"name" : "setFocusChain",
"kind" : "function",
"protection" : "public",
"type" : "void(ListG focusableWidgets)",
"comment" : "\n Sets a focus chain, overriding the one computed automatically by GTK+.\n In principle each widget in the chain should be a descendant of the\n container, but this is not enforced by this method, since it's allowed\n to set the focus chain before you pack the widgets, or have a widget\n in the chain that isn't always packed. The necessary checks are done\n when the focus chain is actually traversed.\n Params:\n focusableWidgets = the new focus chain. [transfer none][element-type GtkWidget]\n\t \n",
"line" : 752}
,
{
"name" : "unsetFocusChain",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Removes a focus chain explicitly set with gtk_container_set_focus_chain().\n\t \n",
"line" : 761}
,
{
"name" : "classFindChildProperty",
"kind" : "function",
"protection" : "public",
"type" : "ParamSpec(GObjectClass* cclass, string propertyName)",
"comment" : "\n Finds a child property of a container class by name.\n Params:\n cclass = a GtkContainerClass. [type GtkContainerClass]\n propertyName = the name of the child property to find\n Returns: the GParamSpec of the child property or NULL if class has no child property with that name. [transfer none]\n\t \n",
"line" : 774}
,
{
"name" : "classInstallChildProperty",
"kind" : "function",
"protection" : "public",
"type" : "void(Container cclass, uint propertyId, ParamSpec pspec)",
"comment" : "\n Installs a child property on a container class.\n Params:\n cclass = a GtkContainerClass\n propertyId = the id for the property\n pspec = the GParamSpec for the property\n\t \n",
"line" : 792}
,
{
"name" : "classListChildProperties",
"kind" : "function",
"protection" : "public",
"type" : "ParamSpec[](GObjectClass* cclass)",
"comment" : "\n Returns all child properties of a container class.\n Params:\n cclass = a GtkContainerClass. [type GtkContainerClass]\n Returns: a newly allocated NULL-terminated array of GParamSpec*. The array must be freed with g_free(). [array length=n_properties][transfer container]\n\t \n",
"line" : 804}
]
}
]
}
,
{
"name" : "gtk.Curve",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Curve.d",
"members" : [
{
"name" : "Curve",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkCurve widget allows the user to edit a curve covering a range of\n values. It is typically used to fine-tune color balances in graphics\n applications like the Gimp.\n The GtkCurve widget has 3 modes of operation - spline, linear and free.\n In spline mode the user places points on the curve which are automatically\n connected together into a smooth curve. In linear mode the user places points\n on the curve which are connected by straight lines. In free mode the user can\n draw the points of the curve freely, and they are not connected at all.\n As of GTK+ 2.20, GtkCurve has been deprecated since it is too specialized.\n \n",
"line" : 80,
"base" : "DrawingArea",
"members" : [
{
"name" : "gtkCurve",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkCurve*",
"comment" : " the main Gtk struct \n",
"line" : 84}
,
{
"name" : "getCurveStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkCurve*()",
"line" : 87}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 94}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Curve(GtkCurve* gtkCurve)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 102}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 120}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 128}
,
{
"name" : "onCurveTypeChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Curve)[]",
"line" : 130}
,
{
"name" : "addOnCurveTypeChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Curve) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when the curve type has been changed.\n The curve type can be changed explicitly with a call to\n gtk_curve_set_curve_type(). It is also changed as a side-effect of\n calling gtk_curve_reset() or gtk_curve_set_gamma().\n See Also\n GtkGammaCurve\n a subclass for editing gamma curves.\n\t \n",
"line" : 140}
,
{
"name" : "callBackCurveTypeChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkCurve* curveStruct, Curve curve)",
"line" : 155}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Curve()",
"comment" : "\n Warning\n gtk_curve_new has been deprecated since version 2.20 and should not be used in newly-written code. Don't use this widget anymore.\n Creates a new GtkCurve.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 170}
,
{
"name" : "reset",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_curve_reset has been deprecated since version 2.20 and should not be used in newly-written code. Don't use this widget anymore.\n Resets the curve to a straight line from the minimum x and y values to the\n maximum x and y values (i.e. from the bottom-left to the top-right corners).\n The curve type is not changed.\n\t \n",
"line" : 188}
,
{
"name" : "setGamma",
"kind" : "function",
"protection" : "public",
"type" : "void(float gamma)",
"comment" : "\n Warning\n gtk_curve_set_gamma has been deprecated since version 2.20 and should not be used in newly-written code. Don't use this widget anymore.\n Recomputes the entire curve using the given gamma value.\n A gamma value of 1 results in a straight line. Values greater than 1 result\n in a curve above the straight line. Values less than 1 result in a curve\n below the straight line. The curve type is changed to GTK_CURVE_TYPE_FREE.\n FIXME: Needs a more precise definition of gamma.\n Params:\n gamma = the gamma value.\n\t \n",
"line" : 205}
,
{
"name" : "setRange",
"kind" : "function",
"protection" : "public",
"type" : "void(float minX, float maxX, float minY, float maxY)",
"comment" : "\n Warning\n gtk_curve_set_range has been deprecated since version 2.20 and should not be used in newly-written code. Don't use this widget anymore.\n Sets the minimum and maximum x and y values of the curve.\n The curve is also reset with a call to gtk_curve_reset().\n Params:\n minX = the minimum x value.\n maxX = the maximum x value.\n minY = the minimum y value.\n maxY = the maximum y value.\n\t \n",
"line" : 222}
,
{
"name" : "getVector",
"kind" : "function",
"protection" : "public",
"type" : "void(float[] vector)",
"comment" : "\n Warning\n gtk_curve_get_vector has been deprecated since version 2.20 and should not be used in newly-written code. Don't use this widget anymore.\n Returns a vector of points representing the curve.\n Params:\n vector = returns the points.\n\t \n",
"line" : 235}
,
{
"name" : "setVector",
"kind" : "function",
"protection" : "public",
"type" : "void(float[] vector)",
"comment" : "\n Warning\n gtk_curve_set_vector has been deprecated since version 2.20 and should not be used in newly-written code. Don't use this widget anymore.\n Sets the vector of points on the curve.\n The curve type is set to GTK_CURVE_TYPE_FREE.\n Params:\n vector = the points on the curve.\n\t \n",
"line" : 249}
,
{
"name" : "setCurveType",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkCurveType type)",
"comment" : "\n Warning\n gtk_curve_set_curve_type has been deprecated since version 2.20 and should not be used in newly-written code. Don't use this widget anymore.\n Sets the type of the curve. The curve will remain unchanged except when\n changing from a free curve to a linear or spline curve, in which case the\n curve will be changed as little as possible.\n Params:\n type = the type of the curve.\n\t \n",
"line" : 264}
]
}
]
}
,
{
"name" : "gtk.Dialog",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Dialog.d",
"members" : [
{
"name" : "Dialog",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n Dialog boxes are a convenient way to prompt the user for a small amount of\n input, e.g. to display a message, ask a question, or anything else that does\n not require extensive effort on the user's part.\n GTK+ treats a dialog as a window split vertically. The top section is a\n GtkVBox, and is where widgets such as a GtkLabel or a GtkEntry should\n be packed. The bottom area is known as the\n action_area. This is generally used for\n packing buttons into the dialog which may perform functions such as\n cancel, ok, or apply. The two areas are separated by a GtkHSeparator.\n GtkDialog boxes are created with a call to gtk_dialog_new() or\n gtk_dialog_new_with_buttons(). gtk_dialog_new_with_buttons() is recommended; it\n allows you to set the dialog title, some convenient flags, and add simple\n buttons.\n If 'dialog' is a newly created dialog, the two primary areas of the window\n can be accessed through gtk_dialog_get_content_area() and\n gtk_dialog_get_action_area(), as can be seen from the example, below.\n A 'modal' dialog (that is, one which freezes the rest of the application from\n user input), can be created by calling gtk_window_set_modal() on the dialog. Use\n the GTK_WINDOW() macro to cast the widget returned from gtk_dialog_new() into a\n GtkWindow. When using gtk_dialog_new_with_buttons() you can also pass the\n GTK_DIALOG_MODAL flag to make a dialog modal.\n If you add buttons to GtkDialog using gtk_dialog_new_with_buttons(),\n gtk_dialog_add_button(), gtk_dialog_add_buttons(), or\n gtk_dialog_add_action_widget(), clicking the button will emit a signal called\n \"response\" with a response ID that you specified. GTK+ will never assign a\n meaning to positive response IDs; these are entirely user-defined. But for\n convenience, you can use the response IDs in the GtkResponseType enumeration\n (these all have values less than zero). If a dialog receives a delete event,\n the \"response\" signal will be emitted with a response ID of GTK_RESPONSE_DELETE_EVENT.\n If you want to block waiting for a dialog to return before returning control\n flow to your code, you can call gtk_dialog_run(). This function enters a\n recursive main loop and waits for the user to respond to the dialog, returning the\n response ID corresponding to the button the user clicked.\n For the simple dialog in the following example, in reality you'd probably use\n GtkMessageDialog to save yourself some effort. But you'd need to create the\n dialog contents manually if you had more than a simple message in the dialog.\n $(DDOC_COMMENT example)\n GtkDialog as GtkBuildable\n The GtkDialog implementation of the GtkBuildable interface exposes the\n vbox and action_area as internal children with the names \"vbox\" and\n \"action_area\".\n GtkDialog supports a custom <action-widgets> element, which\n can contain multiple <action-widget> elements. The \"response\"\n attribute specifies a numeric response, and the content of the element\n is the id of widget (which should be a child of the dialogs action_area).\n $(DDOC_COMMENT example)\n \n",
"line" : 134,
"base" : "Window",
"members" : [
{
"name" : "gtkDialog",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkDialog*",
"comment" : " the main Gtk struct \n",
"line" : 138}
,
{
"name" : "getDialogStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkDialog*()",
"line" : 141}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 148}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Dialog(GtkDialog* gtkDialog)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 156}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 174}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Dialog(string title, Window parent, GtkDialogFlags flags, string[] buttonsText, GtkResponseType[] responses)",
"comment" : "\n Both title and parent can be null.\n\t \n",
"line" : 183}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Dialog(string title, Window parent, GtkDialogFlags flags, StockID[] stockIDs, GtkResponseType[] responses)",
"comment" : " ditto \n",
"line" : 197}
,
{
"name" : "addButton",
"kind" : "function",
"protection" : "public",
"type" : "Widget(StockID stockID, int responseId)",
"comment" : " \n",
"line" : 211}
,
{
"name" : "addButtons",
"kind" : "function",
"protection" : "public",
"type" : "void(string[] buttonsText, GtkResponseType[] responses)",
"comment" : " \n",
"line" : 217}
,
{
"name" : "addButtons",
"kind" : "function",
"protection" : "public",
"type" : "void(StockID[] stockIDs, GtkResponseType[] responses)",
"comment" : " \n",
"line" : 226}
,
{
"name" : "getActionArea",
"kind" : "function",
"protection" : "public",
"type" : "HButtonBox()",
"comment" : "\n Returns the action area of dialog.\n Since 2.14\n Returns: the action area.\n\t \n",
"line" : 240}
,
{
"name" : "getContentArea",
"kind" : "function",
"protection" : "public",
"type" : "VBox()",
"comment" : "\n Returns the content area of dialog.\n Since 2.14\n Returns: the content area GtkVBox.\n\t \n",
"line" : 257}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 270}
,
{
"name" : "onCloseListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Dialog)[]",
"line" : 272}
,
{
"name" : "addOnClose",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Dialog) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::close signal is a\n keybinding signal\n which gets emitted when the user uses a keybinding to close\n the dialog.\n The default binding for this signal is the Escape key.\n\t \n",
"line" : 280}
,
{
"name" : "callBackClose",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkDialog* arg0Struct, Dialog dialog)",
"line" : 295}
,
{
"name" : "onResponseListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(int, Dialog)[]",
"line" : 303}
,
{
"name" : "addOnResponse",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(int, Dialog) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when an action widget is clicked, the dialog receives a\n delete event, or the application programmer calls gtk_dialog_response().\n On a delete event, the response ID is GTK_RESPONSE_DELETE_EVENT.\n Otherwise, it depends on which action widget was clicked.\n See Also\n GtkVBox\n Pack widgets vertically.\n GtkWindow\n Alter the properties of your dialog box.\n GtkButton\n Add them to the action_area to get a\n response from the user.\n\t \n",
"line" : 318}
,
{
"name" : "callBackResponse",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkDialog* dialogStruct, int responseId, Dialog dialog)",
"line" : 333}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Dialog()",
"comment" : "\n Creates a new dialog box. Widgets should not be packed into this GtkWindow\n directly, but into the vbox and action_area, as described above.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 347}
,
{
"name" : "run",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Blocks in a recursive main loop until the dialog either emits the\n \"response\" signal, or is destroyed. If the dialog is\n destroyed during the call to gtk_dialog_run(), gtk_dialog_run() returns\n GTK_RESPONSE_NONE. Otherwise, it returns the response ID from the\n ::response signal emission.\n Before entering the recursive main loop, gtk_dialog_run() calls\n gtk_widget_show() on the dialog for you. Note that you still\n need to show any children of the dialog yourself.\n During gtk_dialog_run(), the default behavior of \"delete-event\"\n is disabled; if the dialog receives ::delete_event, it will not be\n destroyed as windows usually are, and gtk_dialog_run() will return\n GTK_RESPONSE_DELETE_EVENT. Also, during gtk_dialog_run() the dialog\n will be modal. You can force gtk_dialog_run() to return at any time by\n calling gtk_dialog_response() to emit the ::response signal. Destroying\n the dialog during gtk_dialog_run() is a very bad idea, because your\n post-run code won't know whether the dialog was destroyed or not.\n After gtk_dialog_run() returns, you are responsible for hiding or\n destroying the dialog if you wish to do so.\n Returns: response ID\n\t \n",
"line" : 379}
,
{
"name" : "response",
"kind" : "function",
"protection" : "public",
"type" : "void(int responseId)",
"comment" : "\n Emits the \"response\" signal with the given response ID.\n Used to indicate that the user has responded to the dialog in some way;\n typically either you or gtk_dialog_run() will be monitoring the\n ::response signal and take appropriate action.\n Params:\n responseId = response ID\n\t \n",
"line" : 393}
,
{
"name" : "addButton",
"kind" : "function",
"protection" : "public",
"type" : "Widget(string buttonText, int responseId)",
"comment" : "\n Adds a button with the given text (or a stock button, if button_text is a\n stock ID) and sets things up so that clicking the button will emit the\n \"response\" signal with the given response_id. The button is\n appended to the end of the dialog's action area. The button widget is\n returned, but usually you don't need it.\n Params:\n buttonText = text of button, or stock ID\n responseId = response ID for the button\n Returns: the button widget that was added. [transfer none]\n\t \n",
"line" : 410}
,
{
"name" : "addActionWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, int responseId)",
"comment" : "\n Adds an activatable widget to the action area of a GtkDialog,\n connecting a signal handler that will emit the \"response\"\n signal on the dialog when the widget is activated. The widget is\n appended to the end of the dialog's action area. If you want to add a\n non-activatable widget, simply pack it into the action_area field\n of the GtkDialog struct.\n Params:\n child = an activatable widget\n responseId = response ID for child\n\t \n",
"line" : 432}
,
{
"name" : "getHasSeparator",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Warning\n gtk_dialog_get_has_separator has been deprecated since version 2.22 and should not be used in newly-written code. This function will be removed in GTK+ 3\n Accessor for whether the dialog has a separator.\n Returns: TRUE if the dialog has a separator\n\t \n",
"line" : 444}
,
{
"name" : "setDefaultResponse",
"kind" : "function",
"protection" : "public",
"type" : "void(int responseId)",
"comment" : "\n Sets the last widget in the dialog's action area with the given response_id\n as the default widget for the dialog. Pressing \"Enter\" normally activates\n the default widget.\n Params:\n responseId = a response ID\n\t \n",
"line" : 457}
,
{
"name" : "setHasSeparator",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n Warning\n gtk_dialog_set_has_separator has been deprecated since version 2.22 and should not be used in newly-written code. This function will be removed in GTK+ 3\n Sets whether the dialog has a separator above the buttons.\n Params:\n setting = TRUE to have a separator\n\t \n",
"line" : 470}
,
{
"name" : "setResponseSensitive",
"kind" : "function",
"protection" : "public",
"type" : "void(int responseId, int setting)",
"comment" : "\n Calls gtk_widget_set_sensitive (widget, setting)\n for each widget in the dialog's action area with the given response_id.\n A convenient way to sensitize\/desensitize dialog buttons.\n Params:\n responseId = a response ID\n setting = TRUE for sensitive\n\t \n",
"line" : 484}
,
{
"name" : "getResponseForWidget",
"kind" : "function",
"protection" : "public",
"type" : "int(Widget widget)",
"comment" : "\n Gets the response id of a widget in the action area\n of a dialog.\n Since 2.8\n Params:\n widget = a widget in the action area of dialog\n Returns: the response id of widget, or GTK_RESPONSE_NONE if widget doesn't have a response id set.\n\t \n",
"line" : 498}
,
{
"name" : "getWidgetForResponse",
"kind" : "function",
"protection" : "public",
"type" : "Widget(int responseId)",
"comment" : "\n Gets the widget button that uses the given response ID in the action area\n of a dialog.\n Since 2.20\n Params:\n responseId = the response ID used by the dialog widget\n Returns: the widget button that uses the given response_id, or NULL. [transfer none]\n\t \n",
"line" : 512}
,
{
"name" : "alternativeDialogButtonOrder",
"kind" : "function",
"protection" : "public",
"type" : "int(Screen screen)",
"comment" : "\n Returns TRUE if dialogs are expected to use an alternative\n button order on the screen screen. See\n gtk_dialog_set_alternative_button_order() for more details\n about alternative button order.\n If you need to use this function, you should probably connect\n to the ::notify:gtk-alternative-button-order signal on the\n GtkSettings object associated to screen, in order to be\n notified if the button order setting changes.\n Since 2.6\n Params:\n screen = a GdkScreen, or NULL to use the default screen. [allow-none]\n Returns: Whether the alternative button order should be used\n\t \n",
"line" : 537}
,
{
"name" : "setAlternativeButtonOrderFromArray",
"kind" : "function",
"protection" : "public",
"type" : "void(int[] newOrder)",
"comment" : "\n Sets an alternative button order. If the\n \"gtk-alternative-button-order\" setting is set to TRUE,\n the dialog buttons are reordered according to the order of the\n response ids in new_order.\n See gtk_dialog_set_alternative_button_order() for more information.\n This function is for use by language bindings.\n Since 2.6\n Params:\n newOrder = an array of response ids of\n dialog's buttons. [array length=n_params]\n\t \n",
"line" : 555}
]
}
]
}
,
{
"name" : "gtk.DragAndDrop",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/DragAndDrop.d",
"members" : [
{
"name" : "DragAndDrop",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GTK+ has a rich set of functions for doing inter-process\n communication via the drag-and-drop metaphor. GTK+\n can do drag-and-drop (DND) via multiple protocols.\n The currently supported protocols are the Xdnd and\n Motif protocols.\n As well as the functions listed here, applications\n may need to use some facilities provided for\n Selections.\n Also, the Drag and Drop API makes use of signals\n in the GtkWidget class.\n \n",
"line" : 108,
"base" : "Object",
"members" : [
{
"name" : "gdkDragContext",
"kind" : "variable",
"protection" : "protected",
"type" : "GdkDragContext*",
"comment" : " the main Gtk struct \n",
"line" : 111}
,
{
"name" : "getDragAndDropStruct",
"kind" : "function",
"protection" : "public",
"type" : "GdkDragContext*()",
"line" : 114}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 121}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "DragAndDrop(GdkDragContext* gdkDragContext)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 129}
,
{
"name" : "destSet",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, GtkDestDefaults flags, GtkTargetEntry* targets, int nTargets, GdkDragAction actions)",
"comment" : "\n\t \n\n Sets a widget as a potential drop destination, and adds default behaviors.\n The default behaviors listed in flags have an effect similar\n to installing default handlers for the widget's drag-and-drop signals\n (\"drag-motion\", \"drag-drop\", ...). They all exist\n for convenience. When passing GTK_DEST_DEFAULT_ALL for instance it is\n sufficient to connect to the widget's \"drag-data-received\"\n signal to get primitive, but consistent drag-and-drop support.\n Things become more complicated when you try to preview the dragged data,\n as described in the documentation for \"drag-motion\". The default\n behaviors described by flags make some assumptions, that can conflict\n with your own signal handlers. For instance GTK_DEST_DEFAULT_DROP causes\n invokations of gdk_drag_status() in the context of \"drag-motion\",\n and invokations of gtk_drag_finish() in \"drag-data-received\".\n Especially the later is dramatic, when your own \"drag-motion\"\n handler calls gtk_drag_get_data() to inspect the dragged data.\n There's no way to set a default action here, you can use the\n \"drag-motion\" callback for that. Here's an example which selects\n Params:\n widget = a GtkWidget\n flags = which types of default drag behavior to use\n targets = a pointer to an array of GtkTargetEntrys\n indicating the drop types that this widget will accept, or NULL.\n Later you can access the list with gtk_drag_dest_get_target_list()\n and gtk_drag_dest_find_target(). [allow-none][array length=n_targets]\n nTargets = the number of entries in targets\n actions = a bitmask of possible actions for a drop onto this widget.\n\t \n",
"line" : 170}
,
{
"name" : "destSetProxy",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, Window proxyWindow, GdkDragProtocol protocol, int useCoordinates)",
"comment" : "\n Sets this widget as a proxy for drops to another window.\n Params:\n widget = a GtkWidget\n proxyWindow = the window to which to forward drag events\n protocol = the drag protocol which the proxy_window accepts\n (You can use gdk_drag_get_protocol() to determine this)\n useCoordinates = If TRUE, send the same coordinates to the\n destination, because it is an embedded\n subwindow.\n\t \n",
"line" : 187}
,
{
"name" : "destUnset",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget)",
"comment" : "\n Clears information about a drop destination set with\n gtk_drag_dest_set(). The widget will no longer receive\n notification of drags.\n Params:\n widget = a GtkWidget\n\t \n",
"line" : 200}
,
{
"name" : "destFindTarget",
"kind" : "function",
"protection" : "public",
"type" : "void*(Widget widget, DragContext context, TargetList targetList)",
"comment" : "\n Params:\n widget = drag destination widget\n context = drag context\n targetList = list of droppable targets, or NULL to use\n gtk_drag_dest_get_target_list (widget).\n Looks for a match between the supported targets of context and the\n dest_target_list, returning the first matching target, otherwise\n returning GDK_NONE. dest_target_list should usually be the return\n value from gtk_drag_dest_get_target_list(), but some widgets may\n have different valid targets for different parts of the widget; in\n that case, they will have to implement a drag_motion handler that\n passes the correct target list to this function. [allow-none]\n Returns: first target that the source offers and the dest can accept, or GDK_NONE. [transfer none]\n\t \n",
"line" : 221}
,
{
"name" : "destGetTargetList",
"kind" : "function",
"protection" : "public",
"type" : "TargetList(Widget widget)",
"comment" : "\n Returns the list of targets this widget can accept from\n drag-and-drop.\n Params:\n widget = a GtkWidget\n Returns: the GtkTargetList, or NULL if none. [transfer none]\n\t \n",
"line" : 234}
,
{
"name" : "destSetTargetList",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, TargetList targetList)",
"comment" : "\n Sets the target types that this widget can accept from drag-and-drop.\n The widget must first be made into a drag destination with\n gtk_drag_dest_set().\n Params:\n widget = a GtkWidget that's a drag destination\n targetList = list of droppable targets, or NULL for none. [allow-none]\n\t \n",
"line" : 253}
,
{
"name" : "destAddTextTargets",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget)",
"comment" : "\n Add the text targets supported by GtkSelection to\n the target list of the drag destination. The targets\n are added with info = 0. If you need another value,\n use gtk_target_list_add_text_targets() and\n gtk_drag_dest_set_target_list().\n Since 2.6\n Params:\n widget = a GtkWidget that's a drag destination\n\t \n",
"line" : 269}
,
{
"name" : "destAddImageTargets",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget)",
"comment" : "\n Add the image targets supported by GtkSelection to\n the target list of the drag destination. The targets\n are added with info = 0. If you need another value,\n use gtk_target_list_add_image_targets() and\n gtk_drag_dest_set_target_list().\n Since 2.6\n Params:\n widget = a GtkWidget that's a drag destination\n\t \n",
"line" : 285}
,
{
"name" : "destAddUriTargets",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget)",
"comment" : "\n Add the URI targets supported by GtkSelection to\n the target list of the drag destination. The targets\n are added with info = 0. If you need another value,\n use gtk_target_list_add_uri_targets() and\n gtk_drag_dest_set_target_list().\n Since 2.6\n Params:\n widget = a GtkWidget that's a drag destination\n\t \n",
"line" : 301}
,
{
"name" : "destSetTrackMotion",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, int trackMotion)",
"comment" : "\n Tells the widget to emit ::drag-motion and ::drag-leave\n events regardless of the targets and the GTK_DEST_DEFAULT_MOTION\n flag.\n This may be used when a widget wants to do generic\n actions regardless of the targets that the source offers.\n Since 2.10\n Params:\n widget = a GtkWidget that's a drag destination\n trackMotion = whether to accept all targets\n\t \n",
"line" : 318}
,
{
"name" : "destGetTrackMotion",
"kind" : "function",
"protection" : "public",
"type" : "int(Widget widget)",
"comment" : "\n Returns whether the widget has been configured to always\n emit ::drag-motion signals.\n Since 2.10\n Params:\n widget = a GtkWidget that's a drag destination\n Returns: TRUE if the widget always emits ::drag-motion events\n\t \n",
"line" : 332}
,
{
"name" : "finish",
"kind" : "function",
"protection" : "public",
"type" : "void(int success, int del, uint time)",
"comment" : "\n Informs the drag source that the drop is finished, and\n that the data of the drag will no longer be required.\n Params:\n success = a flag indicating whether the drop was successful\n del = a flag indicating whether the source should delete the\n original data. (This should be TRUE for a move)\n time = the timestamp from the \"drag_data_drop\" signal.\n\t \n",
"line" : 347}
,
{
"name" : "getData",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, DragContext context, void* target, uint time)",
"comment" : "\n Gets the data associated with a drag. When the data\n is received or the retrieval fails, GTK+ will emit a\n \"drag_data_received\" signal. Failure of the retrieval\n is indicated by the length field of the selection_data\n signal parameter being negative. However, when gtk_drag_get_data()\n is called implicitely because the GTK_DEST_DEFAULT_DROP was set,\n then the widget will not receive notification of failed\n drops.\n Params:\n widget = the widget that will receive the \"drag_data_received\"\n signal.\n context = the drag context\n target = the target (form of the data) to retrieve.\n time = a timestamp for retrieving the data. This will\n generally be the time received in a \"drag_data_motion\"\n or \"drag_data_drop\" signal.\n\t \n",
"line" : 371}
,
{
"name" : "getSourceWidget",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Determines the source widget for a drag.\n Determines the source widget for a drag.\n Returns: if the drag is occurring within a single application, a pointer to the source widget. Otherwise, NULL. [transfer none]\n\t \n",
"line" : 382}
,
{
"name" : "highlight",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget)",
"comment" : "\n Draws a highlight around a widget. This will attach\n handlers to \"expose_event\" and \"draw\", so the highlight\n will continue to be displayed until gtk_drag_unhighlight()\n is called.\n Params:\n widget = a widget to highlight\n\t \n",
"line" : 401}
,
{
"name" : "unhighlight",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget)",
"comment" : "\n Removes a highlight set by gtk_drag_highlight() from\n a widget.\n Params:\n widget = a widget to remove the highlight from.\n\t \n",
"line" : 413}
,
{
"name" : "begin",
"kind" : "function",
"protection" : "public",
"type" : "DragContext(Widget widget, TargetList targets, GdkDragAction actions, int button, Event event)",
"comment" : "\n Initiates a drag on the source side. The function\n only needs to be used when the application is\n starting drags itself, and is not needed when\n gtk_drag_source_set() is used.\n The event is used to retrieve the timestamp that will be used internally to\n grab the pointer. If event is NULL, then GDK_CURRENT_TIME will be used.\n However, you should try to pass a real event in all cases, since that can be\n used by GTK+ to get information about the start position of the drag, for\n example if the event is a GDK_MOTION_NOTIFY.\n Generally there are three cases when you want to start a drag by hand by calling\n Params:\n widget = the source widget.\n targets = The targets (data formats) in which the\n source can provide the data.\n actions = A bitmask of the allowed drag actions for this drag.\n button = The button the user clicked to start the drag.\n event = The event that triggered the start of the drag.\n Returns: the context for this drag. [transfer none]\n\t \n",
"line" : 439}
,
{
"name" : "setIconWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, int hotX, int hotY)",
"comment" : "\n Changes the icon for a widget to a given widget. GTK+\n will not destroy the icon, so if you don't want\n it to persist, you should connect to the \"drag-end\"\n signal and destroy it yourself.\n Params:\n widget = a toplevel window to use as an icon.\n hotX = the X offset within widget of the hotspot.\n hotY = the Y offset within widget of the hotspot.\n\t \n",
"line" : 460}
,
{
"name" : "setIconPixmap",
"kind" : "function",
"protection" : "public",
"type" : "void(Colormap colormap, Pixmap pixmap, Bitmap mask, int hotX, int hotY)",
"comment" : "\n Sets pixmap as the icon for a given drag. GTK+ retains\n references for the arguments, and will release them when\n they are no longer needed. In general, gtk_drag_set_icon_pixbuf()\n will be more convenient to use.\n Params:\n colormap = the colormap of the icon\n pixmap = the image data for the icon\n mask = the transparency mask for the icon or NULL for none. [allow-none]\n hotX = the X offset within pixmap of the hotspot.\n hotY = the Y offset within pixmap of the hotspot.\n\t \n",
"line" : 478}
,
{
"name" : "setIconPixbuf",
"kind" : "function",
"protection" : "public",
"type" : "void(Pixbuf pixbuf, int hotX, int hotY)",
"comment" : "\n Sets pixbuf as the icon for a given drag.\n Params:\n pixbuf = the GdkPixbuf to use as the drag icon.\n hotX = the X offset within widget of the hotspot.\n hotY = the Y offset within widget of the hotspot.\n\t \n",
"line" : 491}
,
{
"name" : "setIconStock",
"kind" : "function",
"protection" : "public",
"type" : "void(string stockId, int hotX, int hotY)",
"comment" : "\n Sets the icon for a given drag from a stock ID.\n Params:\n stockId = the ID of the stock icon to use for the drag.\n hotX = the X offset within the icon of the hotspot.\n hotY = the Y offset within the icon of the hotspot.\n\t \n",
"line" : 504}
,
{
"name" : "setIconName",
"kind" : "function",
"protection" : "public",
"type" : "void(string iconName, int hotX, int hotY)",
"comment" : "\n Sets the icon for a given drag from a named themed icon. See\n the docs for GtkIconTheme for more details. Note that the\n size of the icon depends on the icon theme (the icon is\n loaded at the symbolic size GTK_ICON_SIZE_DND), thus\n hot_x and hot_y have to be used with care.\n Since 2.8\n Params:\n iconName = name of icon to use\n hotX = the X offset of the hotspot within the icon\n hotY = the Y offset of the hotspot within the icon\n\t \n",
"line" : 522}
,
{
"name" : "setIconDefault",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Sets the icon for a particular drag to the default\n icon.\n\t \n",
"line" : 532}
,
{
"name" : "setDefaultIcon",
"kind" : "function",
"protection" : "public",
"type" : "void(Colormap colormap, Pixmap pixmap, Bitmap mask, int hotX, int hotY)",
"comment" : "\n Warning\n gtk_drag_set_default_icon is deprecated and should not be used in newly-written code. Change the default drag icon via the stock system by\n  changing the stock pixbuf for GTK_STOCK_DND instead.\n Changes the default drag icon. GTK+ retains references for the\n arguments, and will release them when they are no longer needed.\n Params:\n colormap = the colormap of the icon\n pixmap = the image data for the icon\n mask = the transparency mask for an image, or NULL. [allow-none]\n hotX = The X offset within widget of the hotspot.\n hotY = The Y offset within widget of the hotspot.\n\t \n",
"line" : 551}
,
{
"name" : "checkThreshold",
"kind" : "function",
"protection" : "public",
"type" : "int(Widget widget, int startX, int startY, int currentX, int currentY)",
"comment" : "\n Checks to see if a mouse drag starting at (start_x, start_y) and ending\n at (current_x, current_y) has passed the GTK+ drag threshold, and thus\n should trigger the beginning of a drag-and-drop operation.\n Params:\n widget = a GtkWidget\n startX = X coordinate of start of drag\n startY = Y coordinate of start of drag\n currentX = current X coordinate\n currentY = current Y coordinate\n Returns: TRUE if the drag threshold has been passed.\n\t \n",
"line" : 569}
,
{
"name" : "sourceSet",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, GdkModifierType startButtonMask, GtkTargetEntry* targets, int nTargets, GdkDragAction actions)",
"comment" : "\n Sets up a widget so that GTK+ will start a drag operation when the user\n clicks and drags on the widget. The widget must have a window.\n Params:\n widget = a GtkWidget\n startButtonMask = the bitmask of buttons that can start the drag\n targets = the table of targets that the drag will support,\n may be NULL. [allow-none][array length=n_targets]\n nTargets = the number of items in targets\n actions = the bitmask of possible actions for a drag from this widget\n\t \n",
"line" : 586}
,
{
"name" : "sourceSetIcon",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, Colormap colormap, Pixmap pixmap, Bitmap mask)",
"comment" : "\n Sets the icon that will be used for drags from a particular widget\n from a pixmap\/mask. GTK+ retains references for the arguments, and\n will release them when they are no longer needed.\n Use gtk_drag_source_set_icon_pixbuf() instead.\n Params:\n widget = a GtkWidget\n colormap = the colormap of the icon\n pixmap = the image data for the icon\n mask = the transparency mask for an image. [allow-none]\n\t \n",
"line" : 603}
,
{
"name" : "sourceSetIconPixbuf",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, Pixbuf pixbuf)",
"comment" : "\n Sets the icon that will be used for drags from a particular widget\n from a GdkPixbuf. GTK+ retains a reference for pixbuf and will\n release it when it is no longer needed.\n Params:\n widget = a GtkWidget\n pixbuf = the GdkPixbuf for the drag icon\n\t \n",
"line" : 617}
,
{
"name" : "sourceSetIconStock",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, string stockId)",
"comment" : "\n Sets the icon that will be used for drags from a particular source\n to a stock icon.\n Params:\n widget = a GtkWidget\n stockId = the ID of the stock icon to use\n\t \n",
"line" : 630}
,
{
"name" : "sourceSetIconName",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, string iconName)",
"comment" : "\n Sets the icon that will be used for drags from a particular source\n to a themed icon. See the docs for GtkIconTheme for more details.\n Since 2.8\n Params:\n widget = a GtkWidget\n iconName = name of icon to use\n\t \n",
"line" : 644}
,
{
"name" : "sourceUnset",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget)",
"comment" : "\n Undoes the effects of gtk_drag_source_set().\n Params:\n widget = a GtkWidget\n\t \n",
"line" : 655}
,
{
"name" : "sourceSetTargetList",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, TargetList targetList)",
"comment" : "\n Changes the target types that this widget offers for drag-and-drop.\n The widget must first be made into a drag source with\n gtk_drag_source_set().\n Since 2.4\n Params:\n widget = a GtkWidget that's a drag source\n targetList = list of draggable targets, or NULL for none. [allow-none]\n\t \n",
"line" : 670}
,
{
"name" : "sourceGetTargetList",
"kind" : "function",
"protection" : "public",
"type" : "TargetList(Widget widget)",
"comment" : "\n Gets the list of targets this widget can provide for\n drag-and-drop.\n Since 2.4\n Params:\n widget = a GtkWidget\n Returns: the GtkTargetList, or NULL if none. [transfer none]\n\t \n",
"line" : 684}
,
{
"name" : "sourceAddTextTargets",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget)",
"comment" : "\n Add the text targets supported by GtkSelection to\n the target list of the drag source. The targets\n are added with info = 0. If you need another value,\n use gtk_target_list_add_text_targets() and\n gtk_drag_source_set_target_list().\n Since 2.6\n Params:\n widget = a GtkWidget that's is a drag source\n\t \n",
"line" : 705}
,
{
"name" : "sourceAddImageTargets",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget)",
"comment" : "\n Add the writable image targets supported by GtkSelection to\n the target list of the drag source. The targets\n are added with info = 0. If you need another value,\n use gtk_target_list_add_image_targets() and\n gtk_drag_source_set_target_list().\n Since 2.6\n Params:\n widget = a GtkWidget that's is a drag source\n\t \n",
"line" : 721}
,
{
"name" : "sourceAddUriTargets",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget)",
"comment" : "\n Add the URI targets supported by GtkSelection to\n the target list of the drag source. The targets\n are added with info = 0. If you need another value,\n use gtk_target_list_add_uri_targets() and\n gtk_drag_source_set_target_list().\n Since 2.6\n Params:\n widget = a GtkWidget that's is a drag source\n\t \n",
"line" : 737}
]
}
]
}
,
{
"name" : "gtk.DrawingArea",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/DrawingArea.d",
"members" : [
{
"name" : "DrawingArea",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkDrawingArea widget is used for creating custom user interface\n elements. It's essentially a blank widget; you can draw on\n widget->window. After creating a drawing area,\n the application may want to connect to:\n  Mouse and button press signals to respond to input from\n  the user. (Use gtk_widget_add_events() to enable events\n  you wish to receive.)\n  The \"realize\" signal to take any necessary actions\n  when the widget is instantiated on a particular display.\n  (Create GDK resources in response to this signal.)\n  The \"configure_event\" signal to take any necessary actions\n  when the widget changes size.\n  The \"expose_event\" signal to handle redrawing the\n  contents of the widget.\n The following code portion demonstrates using a drawing\n area to display a circle in the normal widget foreground\n color.\n Note that GDK automatically clears the exposed area\n to the background color before sending the expose event, and\n that drawing is implicitly clipped to the exposed area.\n $(DDOC_COMMENT example)\n Expose events are normally delivered when a drawing area first comes\n onscreen, or when it's covered by another window and then uncovered\n (exposed). You can also force an expose event by adding to the \"damage\n region\" of the drawing area's window; gtk_widget_queue_draw_area() and\n gdk_window_invalidate_rect() are equally good ways to do this. You'll\n then get an expose event for the invalid region.\n The available routines for drawing are documented on the GDK Drawing Primitives page.\n See also gdk_draw_pixbuf() for drawing a GdkPixbuf.\n To receive mouse events on a drawing area, you will need to enable\n them with gtk_widget_add_events(). To receive keyboard events, you\n will need to set the GTK_CAN_FOCUS flag on the drawing area, and\n should probably draw some user-visible indication that the drawing\n area is focused. Use the GTK_HAS_FOCUS() macro in your expose event\n handler to decide whether to draw the focus indicator. See\n gtk_paint_focus() for one way to draw focus.\n \n",
"line" : 105,
"base" : "Widget",
"members" : [
{
"name" : "gtkDrawingArea",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkDrawingArea*",
"comment" : " the main Gtk struct \n",
"line" : 109}
,
{
"name" : "getDrawingAreaStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkDrawingArea*()",
"line" : 112}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 119}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "DrawingArea(GtkDrawingArea* gtkDrawingArea)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 127}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 145}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "DrawingArea(int width, int height)",
"comment" : "\n Create a new DrawingArea and sets the SizeRequest\n Params:\n    \twidth =\n    \theight =\n\t \n",
"line" : 157}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "DrawingArea()",
"comment" : "\n\t \n\n Creates a new drawing area.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 171}
,
{
"name" : "size",
"kind" : "function",
"protection" : "public",
"type" : "void(int width, int height)",
"comment" : "\n Warning\n gtk_drawing_area_size is deprecated and should not be used in newly-written code. Use gtk_widget_set_size_request() instead.\n Sets the size that the drawing area will request\n in response to a \"size_request\" signal. The\n drawing area may actually be allocated a size\n larger than this depending on how it is packed\n within the enclosing containers.\n Params:\n width = the width to request\n height = the height to request\n\t \n",
"line" : 194}
]
}
]
}
,
{
"name" : "gtk.EditableIF",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/EditableIF.d",
"members" : [
{
"name" : "EditableIF",
"kind" : "interface",
"protection" : "public",
"comment" : "\n Description\n The GtkEditable interface is an interface which should be implemented by\n text editing widgets, such as GtkEntry and GtkText. It contains functions\n for generically manipulating an editable widget, a large number of action\n signals used for key bindings, and several signals that an application can\n connect to to modify the behavior of a widget.\n As an example of the latter usage, by connecting\n the following handler to \"insert_text\", an application\n can convert all entry into a widget into uppercase.\n $(DDOC_COMMENT example)\n \n",
"line" : 82,
"members" : [
{
"name" : "getEditableTStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkEditable*()",
"line" : 85}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 88}
,
{
"name" : "onChangedListeners",
"kind" : "function",
"protection" : "public",
"type" : "void delegate(EditableIF)[]()",
"comment" : "\n\t \n",
"line" : 94}
,
{
"name" : "addOnChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(EditableIF) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::changed signal is emitted at the end of a single\n user-visible operation on the contents of the GtkEditable.\n E.g., a paste operation that replaces the contents of the\n selection will cause only one signal emission (even though it\n is implemented by first deleting the selection, then inserting\n the new content, and may cause multiple ::notify::text signals\n to be emitted).\n\t \n",
"line" : 104}
,
{
"name" : "onDeleteTextListeners",
"kind" : "function",
"protection" : "public",
"type" : "void delegate(int, int, EditableIF)[]()",
"line" : 105}
,
{
"name" : "addOnDeleteText",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(int, int, EditableIF) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted when text is deleted from\n the widget by the user. The default handler for\n this signal will normally be responsible for deleting\n the text, so by connecting to this signal and then\n stopping the signal with g_signal_stop_emission(), it\n is possible to modify the range of deleted text, or\n prevent it from being deleted entirely. The start_pos\n and end_pos parameters are interpreted as for\n gtk_editable_delete_text().\n\t \n",
"line" : 117}
,
{
"name" : "onInsertTextListeners",
"kind" : "function",
"protection" : "public",
"type" : "void delegate(string, int, void*, EditableIF)[]()",
"line" : 118}
,
{
"name" : "addOnInsertText",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(string, int, void*, EditableIF) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted when text is inserted into\n the widget by the user. The default handler for\n this signal will normally be responsible for inserting\n the text, so by connecting to this signal and then\n stopping the signal with g_signal_stop_emission(), it\n is possible to modify the inserted text, or prevent\n it from being inserted entirely.\n\t \n",
"line" : 128}
,
{
"name" : "selectRegion",
"kind" : "function",
"protection" : "public",
"type" : "void(int startPos, int endPos)",
"comment" : "\n Selects a region of text. The characters that are selected are\n those characters at positions from start_pos up to, but not\n including end_pos. If end_pos is negative, then the the\n characters selected are those characters from start_pos to\n the end of the text.\n Note that positions are specified in characters, not bytes.\n Params:\n startPos = start of region\n endPos = end of region\n\t \n",
"line" : 141}
,
{
"name" : "getSelectionBounds",
"kind" : "function",
"protection" : "public",
"type" : "int(int* startPos, int* endPos)",
"comment" : "\n Retrieves the selection bound of the editable. start_pos will be filled\n with the start of the selection and end_pos with end. If no text was\n selected both will be identical and FALSE will be returned.\n Note that positions are specified in characters, not bytes.\n Params:\n startPos = location to store the starting position, or NULL. [out][allow-none]\n endPos = location to store the end position, or NULL. [out][allow-none]\n Returns: TRUE if an area is selected, FALSE otherwise\n\t \n",
"line" : 153}
,
{
"name" : "insertText",
"kind" : "function",
"protection" : "public",
"type" : "void(string newText, int newTextLength, ref int position)",
"comment" : "\n Inserts new_text_length bytes of new_text into the contents of the\n widget, at position position.\n Note that the position is in characters, not in bytes.\n The function updates position to point after the newly inserted text.\n Params:\n newText = the text to append\n newTextLength = the length of the text in bytes, or -1\n position = location of the position text will be inserted at. [inout]\n\t \n",
"line" : 165}
,
{
"name" : "deleteText",
"kind" : "function",
"protection" : "public",
"type" : "void(int startPos, int endPos)",
"comment" : "\n Deletes a sequence of characters. The characters that are deleted are\n those characters at positions from start_pos up to, but not including\n end_pos. If end_pos is negative, then the the characters deleted\n are those from start_pos to the end of the text.\n Note that the positions are specified in characters, not bytes.\n Params:\n startPos = start position\n endPos = end position\n\t \n",
"line" : 177}
,
{
"name" : "getChars",
"kind" : "function",
"protection" : "public",
"type" : "string(int startPos, int endPos)",
"comment" : "\n Retrieves a sequence of characters. The characters that are retrieved\n are those characters at positions from start_pos up to, but not\n including end_pos. If end_pos is negative, then the the characters\n retrieved are those characters from start_pos to the end of the text.\n Note that positions are specified in characters, not bytes.\n Params:\n startPos = start of text\n endPos = end of text\n Returns: a pointer to the contents of the widget as a string. This string is allocated by the GtkEditable implementation and should be freed by the caller.\n\t \n",
"line" : 190}
,
{
"name" : "cutClipboard",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Removes the contents of the currently selected content in the editable and\n puts it on the clipboard.\n\t \n",
"line" : 196}
,
{
"name" : "copyClipboard",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Copies the contents of the currently selected content in the editable and\n puts it on the clipboard.\n\t \n",
"line" : 202}
,
{
"name" : "pasteClipboard",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Pastes the content of the clipboard to the current position of the\n cursor in the editable.\n\t \n",
"line" : 208}
,
{
"name" : "deleteSelection",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Deletes the currently selected text of the editable.\n This call doesn't do anything if there is no selected text.\n\t \n",
"line" : 214}
,
{
"name" : "setPosition",
"kind" : "function",
"protection" : "public",
"type" : "void(int position)",
"comment" : "\n Sets the cursor position in the editable to the given value.\n The cursor is displayed before the character with the given (base 0)\n index in the contents of the editable. The value must be less than or\n equal to the number of characters in the editable. A value of -1\n indicates that the position should be set after the last character\n of the editable. Note that position is in characters, not in bytes.\n Params:\n position = the position of the cursor\n\t \n",
"line" : 226}
,
{
"name" : "getPosition",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Retrieves the current position of the cursor relative to the start\n of the content of the editable.\n Note that this position is in characters, not in bytes.\n Returns: the cursor position\n\t \n",
"line" : 234}
,
{
"name" : "setEditable",
"kind" : "function",
"protection" : "public",
"type" : "void(int isEditable)",
"comment" : "\n Determines if the user can edit the text in the editable\n widget or not.\n Params:\n isEditable = TRUE if the user is allowed to edit the text\n in the widget\n\t \n",
"line" : 243}
,
{
"name" : "getEditable",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Retrieves whether editable is editable. See\n gtk_editable_set_editable().\n Returns: TRUE if editable is editable. Signal Details The \"changed\" signal void user_function (GtkEditable *editable, gpointer user_data) : Run Last The ::changed signal is emitted at the end of a single user-visible operation on the contents of the GtkEditable. E.g., a paste operation that replaces the contents of the selection will cause only one signal emission (even though it is implemented by first deleting the selection, then inserting the new content, and may cause multiple ::notify::text signals to be emitted).\n\t \n",
"line" : 250}
]
}
]
}
,
{
"name" : "gtk.EditableT",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/EditableT.d",
"members" : [
{
"name" : "EditableT(TStruct)",
"kind" : "template",
"protection" : "public",
"comment" : "\n Description\n The GtkEditable interface is an interface which should be implemented by\n text editing widgets, such as GtkEntry and GtkText. It contains functions\n for generically manipulating an editable widget, a large number of action\n signals used for key bindings, and several signals that an application can\n connect to to modify the behavior of a widget.\n As an example of the latter usage, by connecting\n the following handler to \"insert_text\", an application\n can convert all entry into a widget into uppercase.\n $(DDOC_COMMENT example)\n \n",
"line" : 82,
"members" : [
{
"name" : "gtkEditable",
"kind" : "variable",
"type" : "GtkEditable*",
"comment" : " the main Gtk struct \n",
"line" : 86}
,
{
"name" : "getEditableTStruct",
"kind" : "function",
"type" : "GtkEditable*()",
"line" : 89}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 97}
,
{
"name" : "_onChangedListeners",
"kind" : "variable",
"type" : "void delegate(EditableIF)[]",
"line" : 99}
,
{
"name" : "onChangedListeners",
"kind" : "function",
"type" : "void delegate(EditableIF)[]()",
"line" : 100}
,
{
"name" : "addOnChanged",
"kind" : "function",
"type" : "void(void delegate(EditableIF) dlg, ConnectFlags connectFlags = cast(ConnectFlags)0)",
"comment" : "\n The ::changed signal is emitted at the end of a single\n user-visible operation on the contents of the GtkEditable.\n E.g., a paste operation that replaces the contents of the\n selection will cause only one signal emission (even though it\n is implemented by first deleting the selection, then inserting\n the new content, and may cause multiple ::notify::text signals\n to be emitted).\n\t \n",
"line" : 113}
,
{
"name" : "callBackChanged",
"kind" : "function",
"type" : "extern (C) void(GtkEditable* editableStruct, EditableIF editableIF)",
"line" : 128}
,
{
"name" : "_onDeleteTextListeners",
"kind" : "variable",
"type" : "void delegate(gint, gint, EditableIF)[]",
"line" : 136}
,
{
"name" : "onDeleteTextListeners",
"kind" : "function",
"type" : "void delegate(gint, gint, EditableIF)[]()",
"line" : 137}
,
{
"name" : "addOnDeleteText",
"kind" : "function",
"type" : "void(void delegate(gint, gint, EditableIF) dlg, ConnectFlags connectFlags = cast(ConnectFlags)0)",
"comment" : "\n This signal is emitted when text is deleted from\n the widget by the user. The default handler for\n this signal will normally be responsible for deleting\n the text, so by connecting to this signal and then\n stopping the signal with g_signal_stop_emission(), it\n is possible to modify the range of deleted text, or\n prevent it from being deleted entirely. The start_pos\n and end_pos parameters are interpreted as for\n gtk_editable_delete_text().\n\t \n",
"line" : 152}
,
{
"name" : "callBackDeleteText",
"kind" : "function",
"type" : "extern (C) void(GtkEditable* editableStruct, gint startPos, gint endPos, EditableIF editableIF)",
"line" : 167}
,
{
"name" : "_onInsertTextListeners",
"kind" : "variable",
"type" : "void delegate(string, gint, gpointer, EditableIF)[]",
"line" : 175}
,
{
"name" : "onInsertTextListeners",
"kind" : "function",
"type" : "void delegate(string, gint, gpointer, EditableIF)[]()",
"line" : 176}
,
{
"name" : "addOnInsertText",
"kind" : "function",
"type" : "void(void delegate(string, gint, gpointer, EditableIF) dlg, ConnectFlags connectFlags = cast(ConnectFlags)0)",
"comment" : "\n This signal is emitted when text is inserted into\n the widget by the user. The default handler for\n this signal will normally be responsible for inserting\n the text, so by connecting to this signal and then\n stopping the signal with g_signal_stop_emission(), it\n is possible to modify the inserted text, or prevent\n it from being inserted entirely.\n\t \n",
"line" : 189}
,
{
"name" : "callBackInsertText",
"kind" : "function",
"type" : "extern (C) void(GtkEditable* editableStruct, gchar* newText, gint newTextLength, gpointer position, EditableIF editableIF)",
"line" : 204}
,
{
"name" : "selectRegion",
"kind" : "function",
"type" : "void(int startPos, int endPos)",
"comment" : "\n Selects a region of text. The characters that are selected are\n those characters at positions from start_pos up to, but not\n including end_pos. If end_pos is negative, then the the\n characters selected are those characters from start_pos to\n the end of the text.\n Note that positions are specified in characters, not bytes.\n Params:\n startPos = start of region\n endPos = end of region\n\t \n",
"line" : 224}
,
{
"name" : "getSelectionBounds",
"kind" : "function",
"type" : "int(int* startPos, int* endPos)",
"comment" : "\n Retrieves the selection bound of the editable. start_pos will be filled\n with the start of the selection and end_pos with end. If no text was\n selected both will be identical and FALSE will be returned.\n Note that positions are specified in characters, not bytes.\n Params:\n startPos = location to store the starting position, or NULL. [out][allow-none]\n endPos = location to store the end position, or NULL. [out][allow-none]\n Returns: TRUE if an area is selected, FALSE otherwise\n\t \n",
"line" : 240}
,
{
"name" : "insertText",
"kind" : "function",
"type" : "void(string newText, int newTextLength, ref int position)",
"comment" : "\n Inserts new_text_length bytes of new_text into the contents of the\n widget, at position position.\n Note that the position is in characters, not in bytes.\n The function updates position to point after the newly inserted text.\n Params:\n newText = the text to append\n newTextLength = the length of the text in bytes, or -1\n position = location of the position text will be inserted at. [inout]\n\t \n",
"line" : 256}
,
{
"name" : "deleteText",
"kind" : "function",
"type" : "void(int startPos, int endPos)",
"comment" : "\n Deletes a sequence of characters. The characters that are deleted are\n those characters at positions from start_pos up to, but not including\n end_pos. If end_pos is negative, then the the characters deleted\n are those from start_pos to the end of the text.\n Note that the positions are specified in characters, not bytes.\n Params:\n startPos = start position\n endPos = end position\n\t \n",
"line" : 272}
,
{
"name" : "getChars",
"kind" : "function",
"type" : "string(int startPos, int endPos)",
"comment" : "\n Retrieves a sequence of characters. The characters that are retrieved\n are those characters at positions from start_pos up to, but not\n including end_pos. If end_pos is negative, then the the characters\n retrieved are those characters from start_pos to the end of the text.\n Note that positions are specified in characters, not bytes.\n Params:\n startPos = start of text\n endPos = end of text\n Returns: a pointer to the contents of the widget as a string. This string is allocated by the GtkEditable implementation and should be freed by the caller.\n\t \n",
"line" : 289}
,
{
"name" : "cutClipboard",
"kind" : "function",
"type" : "void()",
"comment" : "\n Removes the contents of the currently selected content in the editable and\n puts it on the clipboard.\n\t \n",
"line" : 299}
,
{
"name" : "copyClipboard",
"kind" : "function",
"type" : "void()",
"comment" : "\n Copies the contents of the currently selected content in the editable and\n puts it on the clipboard.\n\t \n",
"line" : 309}
,
{
"name" : "pasteClipboard",
"kind" : "function",
"type" : "void()",
"comment" : "\n Pastes the content of the clipboard to the current position of the\n cursor in the editable.\n\t \n",
"line" : 319}
,
{
"name" : "deleteSelection",
"kind" : "function",
"type" : "void()",
"comment" : "\n Deletes the currently selected text of the editable.\n This call doesn't do anything if there is no selected text.\n\t \n",
"line" : 329}
,
{
"name" : "setPosition",
"kind" : "function",
"type" : "void(int position)",
"comment" : "\n Sets the cursor position in the editable to the given value.\n The cursor is displayed before the character with the given (base 0)\n index in the contents of the editable. The value must be less than or\n equal to the number of characters in the editable. A value of -1\n indicates that the position should be set after the last character\n of the editable. Note that position is in characters, not in bytes.\n Params:\n position = the position of the cursor\n\t \n",
"line" : 345}
,
{
"name" : "getPosition",
"kind" : "function",
"type" : "int()",
"comment" : "\n Retrieves the current position of the cursor relative to the start\n of the content of the editable.\n Note that this position is in characters, not in bytes.\n Returns: the cursor position\n\t \n",
"line" : 357}
,
{
"name" : "setEditable",
"kind" : "function",
"type" : "void(int isEditable)",
"comment" : "\n Determines if the user can edit the text in the editable\n widget or not.\n Params:\n isEditable = TRUE if the user is allowed to edit the text\n in the widget\n\t \n",
"line" : 370}
,
{
"name" : "getEditable",
"kind" : "function",
"type" : "int()",
"comment" : "\n Retrieves whether editable is editable. See\n gtk_editable_set_editable().\n Returns: TRUE if editable is editable. Signal Details The \"changed\" signal void user_function (GtkEditable *editable, gpointer user_data) : Run Last The ::changed signal is emitted at the end of a single user-visible operation on the contents of the GtkEditable. E.g., a paste operation that replaces the contents of the selection will cause only one signal emission (even though it is implemented by first deleting the selection, then inserting the new content, and may cause multiple ::notify::text signals to be emitted).\n\t \n",
"line" : 381}
]
}
]
}
,
{
"name" : "gtk.EntryBuffer",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/EntryBuffer.d",
"members" : [
{
"name" : "EntryBuffer",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkEntryBuffer class contains the actual text displayed in a\n GtkEntry widget.\n A single GtkEntryBuffer object can be shared by multiple GtkEntry\n widgets which will then share the same text content, but not the cursor\n position, visibility attributes, icon etc.\n GtkEntryBuffer may be derived from. Such a derived class might allow\n text to be stored in an alternate location, such as non-pageable memory,\n useful in the case of important passwords. Or a derived class could\n integrate with an application's concept of undo\/redo.\n \n",
"line" : 81,
"base" : "ObjectG",
"members" : [
{
"name" : "gtkEntryBuffer",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkEntryBuffer*",
"comment" : " the main Gtk struct \n",
"line" : 85}
,
{
"name" : "getEntryBufferStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkEntryBuffer*()",
"line" : 88}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 95}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "EntryBuffer(GtkEntryBuffer* gtkEntryBuffer)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 103}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 121}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 129}
,
{
"name" : "onDeletedTextListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(uint, uint, EntryBuffer)[]",
"line" : 131}
,
{
"name" : "addOnDeletedText",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(uint, uint, EntryBuffer) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted after text is deleted from the buffer.\n Since 2.18\n\t \n",
"line" : 136}
,
{
"name" : "callBackDeletedText",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkEntryBuffer* bufferStruct, uint position, uint nChars, EntryBuffer entryBuffer)",
"line" : 151}
,
{
"name" : "onInsertedTextListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(uint, string, uint, EntryBuffer)[]",
"line" : 159}
,
{
"name" : "addOnInsertedText",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(uint, string, uint, EntryBuffer) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted after text is inserted into the buffer.\n Since 2.18\n\t \n",
"line" : 164}
,
{
"name" : "callBackInsertedText",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkEntryBuffer* bufferStruct, uint position, char* chars, uint nChars, EntryBuffer entryBuffer)",
"line" : 179}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "EntryBuffer(char[] initialChars)",
"comment" : "\n Create a new GtkEntryBuffer object.\n Optionally, specify initial text to set in the buffer.\n Since 2.18\n Params:\n initialChars = initial buffer text, or NULL. [allow-none]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 196}
,
{
"name" : "getText",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Retrieves the contents of the buffer.\n The memory pointer returned by this call will not change\n unless this object emits a signal, or is finalized.\n Since 2.18\n Returns: a pointer to the contents of the widget as a string. This string points to internally allocated storage in the buffer and must not be freed, modified or stored.\n\t \n",
"line" : 214}
,
{
"name" : "setText",
"kind" : "function",
"protection" : "public",
"type" : "void(char[] chars)",
"comment" : "\n Sets the text in the buffer.\n This is roughly equivalent to calling gtk_entry_buffer_delete_text()\n and gtk_entry_buffer_insert_text().\n Note that n_chars is in characters, not in bytes.\n Since 2.18\n Params:\n chars = the new text\n\t \n",
"line" : 229}
,
{
"name" : "getBytes",
"kind" : "function",
"protection" : "public",
"type" : "ulong()",
"comment" : "\n Retrieves the length in bytes of the buffer.\n See gtk_entry_buffer_get_length().\n Since 2.18\n Returns: The byte length of the buffer.\n\t \n",
"line" : 241}
,
{
"name" : "getLength",
"kind" : "function",
"protection" : "public",
"type" : "uint()",
"comment" : "\n Retrieves the length in characters of the buffer.\n Since 2.18\n Returns: The number of characters in the buffer.\n\t \n",
"line" : 252}
,
{
"name" : "getMaxLength",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Retrieves the maximum allowed length of the text in\n buffer. See gtk_entry_buffer_set_max_length().\n Since 2.18\n Returns: the maximum allowed number of characters in GtkEntryBuffer, or 0 if there is no maximum.\n\t \n",
"line" : 264}
,
{
"name" : "setMaxLength",
"kind" : "function",
"protection" : "public",
"type" : "void(int maxLength)",
"comment" : "\n Sets the maximum allowed length of the contents of the buffer. If\n the current contents are longer than the given length, then they\n will be truncated to fit.\n Since 2.18\n Params:\n maxLength = the maximum length of the entry buffer, or 0 for no maximum.\n (other than the maximum length of entries.) The value passed in will\n be clamped to the range 0-65536.\n\t \n",
"line" : 280}
,
{
"name" : "insertText",
"kind" : "function",
"protection" : "public",
"type" : "uint(uint position, char[] chars)",
"comment" : "\n Inserts n_chars characters of chars into the contents of the\n buffer, at position position.\n If n_chars is negative, then characters from chars will be inserted\n until a null-terminator is found. If position or n_chars are out of\n bounds, or the maximum buffer text length is exceeded, then they are\n coerced to sane values.\n Note that the position and length are in characters, not in bytes.\n Since 2.18\n Params:\n position = the position at which to insert text.\n chars = the text to insert into the buffer.\n Returns: The number of characters actually inserted.\n\t \n",
"line" : 300}
,
{
"name" : "deleteText",
"kind" : "function",
"protection" : "public",
"type" : "uint(uint position, int nChars)",
"comment" : "\n Deletes a sequence of characters from the buffer. n_chars characters are\n deleted starting at position. If n_chars is negative, then all characters\n until the end of the text are deleted.\n If position or n_chars are out of bounds, then they are coerced to sane\n values.\n Note that the positions are specified in characters, not bytes.\n Since 2.18\n Params:\n position = position at which to delete text\n nChars = number of characters to delete\n Returns: The number of characters deleted.\n\t \n",
"line" : 319}
,
{
"name" : "emitDeletedText",
"kind" : "function",
"protection" : "public",
"type" : "void(uint position, uint nChars)",
"comment" : "\n Used when subclassing GtkEntryBuffer\n Since 2.18\n Params:\n position = position at which text was deleted\n nChars = number of characters deleted\n\t \n",
"line" : 332}
,
{
"name" : "emitInsertedText",
"kind" : "function",
"protection" : "public",
"type" : "void(uint position, char[] chars)",
"comment" : "\n Used when subclassing GtkEntryBuffer\n Since 2.18\n Params:\n position = position at which text was inserted\n chars = text that was inserted\n\t \n",
"line" : 345}
]
}
]
}
,
{
"name" : "gtk.EntryCompletion",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/EntryCompletion.d",
"members" : [
{
"name" : "EntryCompletion",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkEntryCompletion is an auxiliary object to be used in conjunction with\n GtkEntry to provide the completion functionality. It implements the\n GtkCellLayout interface, to allow the user to add extra cells to the\n GtkTreeView with completion matches.\n \"Completion functionality\" means that when the user modifies the text\n in the entry, GtkEntryCompletion checks which rows in the model match\n the current content of the entry, and displays a list of matches.\n By default, the matching is done by comparing the entry text\n case-insensitively against the text column of the model (see\n gtk_entry_completion_set_text_column()), but this can be overridden with\n a custom match function (see gtk_entry_completion_set_match_func()).\n When the user selects a completion, the content of the entry is updated.\n By default, the content of the entry is replaced by the text column of the\n model, but this can be overridden by connecting to the ::match-selected signal\n and updating the entry in the signal handler. Note that you should return\n TRUE from the signal handler to suppress the default behaviour.\n To add completion functionality to an entry, use gtk_entry_set_completion().\n In addition to regular completion matches, which will be inserted into the\n entry when they are selected, GtkEntryCompletion also allows to display\n \"actions\" in the popup window. Their appearance is similar to menuitems,\n to differentiate them clearly from completion strings. When an action is\n selected, the ::action-activated signal is emitted.\n \n",
"line" : 108,
"base" : "ObjectG",
"interfaces" : [
"CellLayoutIF"],
"members" : [
{
"name" : "gtkEntryCompletion",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkEntryCompletion*",
"comment" : " the main Gtk struct \n",
"line" : 112}
,
{
"name" : "getEntryCompletionStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkEntryCompletion*()",
"line" : 115}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 122}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "EntryCompletion(GtkEntryCompletion* gtkEntryCompletion)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 130}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 148}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 159}
,
{
"name" : "onActionActivatedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(int, EntryCompletion)[]",
"line" : 161}
,
{
"name" : "addOnActionActivated",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(int, EntryCompletion) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Gets emitted when an action is activated.\n Since 2.4\n\t \n",
"line" : 166}
,
{
"name" : "callBackActionActivated",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkEntryCompletion* widgetStruct, int index, EntryCompletion entryCompletion)",
"line" : 181}
,
{
"name" : "onCursorOnMatchListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(TreeModelIF, GtkTreeIter*, EntryCompletion)[]",
"line" : 189}
,
{
"name" : "addOnCursorOnMatch",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(TreeModelIF, GtkTreeIter*, EntryCompletion) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Gets emitted when a match from the cursor is on a match\n of the list.The default behaviour is to replace the contents\n of the entry with the contents of the text column in the row\n pointed to by iter.\n TRUE if the signal has been handled\n Since 2.12\n\t \n",
"line" : 198}
,
{
"name" : "callBackCursorOnMatch",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkEntryCompletion* widgetStruct, GtkTreeModel* model, GtkTreeIter* iter, EntryCompletion entryCompletion)",
"line" : 213}
,
{
"name" : "onInsertPrefixListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(string, EntryCompletion)[]",
"line" : 226}
,
{
"name" : "addOnInsertPrefix",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(string, EntryCompletion) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Gets emitted when the inline autocompletion is triggered.\n The default behaviour is to make the entry display the\n whole prefix and select the newly inserted part.\n Applications may connect to this signal in order to insert only a\n smaller part of the prefix into the entry - e.g. the entry used in\n the GtkFileChooser inserts only the part of the prefix up to the\n next '\/'.\n TRUE if the signal has been handled\n Since 2.6\n\t \n",
"line" : 238}
,
{
"name" : "callBackInsertPrefix",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkEntryCompletion* widgetStruct, char* prefix, EntryCompletion entryCompletion)",
"line" : 253}
,
{
"name" : "onMatchSelectedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(TreeModelIF, GtkTreeIter*, EntryCompletion)[]",
"line" : 266}
,
{
"name" : "addOnMatchSelected",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(TreeModelIF, GtkTreeIter*, EntryCompletion) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Gets emitted when a match from the list is selected.\n The default behaviour is to replace the contents of the\n entry with the contents of the text column in the row\n pointed to by iter.\n TRUE if the signal has been handled\n Since 2.4\n\t \n",
"line" : 275}
,
{
"name" : "callBackMatchSelected",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkEntryCompletion* widgetStruct, GtkTreeModel* model, GtkTreeIter* iter, EntryCompletion entryCompletion)",
"line" : 290}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "EntryCompletion()",
"comment" : "\n Creates a new GtkEntryCompletion object.\n Since 2.4\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 309}
,
{
"name" : "getEntry",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Gets the entry completion has been attached to.\n Since 2.4\n Returns: The entry completion has been attached to. [transfer none]\n\t \n",
"line" : 325}
,
{
"name" : "setModel",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeModelIF model)",
"comment" : "\n Sets the model for a GtkEntryCompletion. If completion already has\n a model set, it will remove it before setting the new model.\n If model is NULL, then it will unset the model.\n Since 2.4\n Params:\n model = The GtkTreeModel. [allow-none]\n\t \n",
"line" : 344}
,
{
"name" : "getModel",
"kind" : "function",
"protection" : "public",
"type" : "TreeModelIF()",
"comment" : "\n Returns the model the GtkEntryCompletion is using as data source.\n Returns NULL if the model is unset.\n Since 2.4\n Returns: A GtkTreeModel, or NULL if none is currently being used. [transfer none]\n\t \n",
"line" : 356}
,
{
"name" : "setMatchFunc",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) int function(GtkEntryCompletion*, char*, GtkTreeIter*, void*) func, void* funcData, extern (C) void function(void* cbData) funcNotify)",
"comment" : "\n Sets the match function for completion to be func. The match function\n is used to determine if a row should or should not be in the completion\n list.\n Since 2.4\n Params:\n func = The GtkEntryCompletionMatchFunc to use.\n funcData = The user data for func.\n funcNotify = Destroy notifier for func_data.\n\t \n",
"line" : 377}
,
{
"name" : "setMinimumKeyLength",
"kind" : "function",
"protection" : "public",
"type" : "void(int length)",
"comment" : "\n Requires the length of the search key for completion to be at least\n length. This is useful for long lists, where completing using a small\n key takes a lot of time and will come up with meaningless results anyway\n (ie, a too large dataset).\n Since 2.4\n Params:\n length = The minimum length of the key in order to start completing.\n\t \n",
"line" : 392}
,
{
"name" : "getMinimumKeyLength",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the minimum key length as set for completion.\n Since 2.4\n Returns: The currently used minimum key length.\n\t \n",
"line" : 403}
,
{
"name" : "complete",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Requests a completion operation, or in other words a refiltering of the\n current list with completions, using the current key. The completion list\n view will be updated accordingly.\n Since 2.4\n\t \n",
"line" : 415}
,
{
"name" : "getCompletionPrefix",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Get the original text entered by the user that triggered\n the completion or NULL if there's no completion ongoing.\n Since 2.12\n Returns: the prefix for the current completion\n\t \n",
"line" : 427}
,
{
"name" : "insertPrefix",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Requests a prefix insertion.\n Since 2.6\n\t \n",
"line" : 437}
,
{
"name" : "insertActionText",
"kind" : "function",
"protection" : "public",
"type" : "void(int index, string text)",
"comment" : "\n Inserts an action in completion's action item list at position index_\n with text text. If you want the action item to have markup, use\n gtk_entry_completion_insert_action_markup().\n Since 2.4\n Params:\n index = The index of the item to insert.\n text = Text of the item to insert.\n\t \n",
"line" : 452}
,
{
"name" : "insertActionMarkup",
"kind" : "function",
"protection" : "public",
"type" : "void(int index, string markup)",
"comment" : "\n Inserts an action in completion's action item list at position index_\n with markup markup.\n Since 2.4\n Params:\n index = The index of the item to insert.\n markup = Markup of the item to insert.\n\t \n",
"line" : 466}
,
{
"name" : "deleteAction",
"kind" : "function",
"protection" : "public",
"type" : "void(int index)",
"comment" : "\n Deletes the action at index_ from completion's action list.\n Since 2.4\n Params:\n index = The index of the item to Delete.\n\t \n",
"line" : 478}
,
{
"name" : "setTextColumn",
"kind" : "function",
"protection" : "public",
"type" : "void(int column)",
"comment" : "\n Convenience function for setting up the most used case of this code: a\n completion list with just strings. This function will set up completion\n to have a list displaying all (and just) strings in the completion list,\n and to get those strings from column in the model of completion.\n This functions creates and adds a GtkCellRendererText for the selected\n column. If you need to set the text column, but don't want the cell\n renderer, use g_object_set() to set the ::text_column property directly.\n Since 2.4\n Params:\n column = The column in the model of completion to get strings from.\n\t \n",
"line" : 496}
,
{
"name" : "getTextColumn",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the column in the model of completion to get strings from.\n Since 2.6\n Returns: the column containing the strings\n\t \n",
"line" : 507}
,
{
"name" : "setInlineCompletion",
"kind" : "function",
"protection" : "public",
"type" : "void(int inlineCompletion)",
"comment" : "\n Sets whether the common prefix of the possible completions should\n be automatically inserted in the entry.\n Since 2.6\n Params:\n inlineCompletion = TRUE to do inline completion\n\t \n",
"line" : 520}
,
{
"name" : "getInlineCompletion",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the common prefix of the possible completions should\n be automatically inserted in the entry.\n Since 2.6\n Returns: TRUE if inline completion is turned on\n\t \n",
"line" : 532}
,
{
"name" : "setInlineSelection",
"kind" : "function",
"protection" : "public",
"type" : "void(int inlineSelection)",
"comment" : "\n Sets whether it is possible to cycle through the possible completions\n inside the entry.\n Since 2.12\n Params:\n inlineSelection = TRUE to do inline selection\n\t \n",
"line" : 545}
,
{
"name" : "getInlineSelection",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns TRUE if inline-selection mode is turned on.\n Since 2.12\n Returns: TRUE if inline-selection mode is on\n\t \n",
"line" : 556}
,
{
"name" : "setPopupCompletion",
"kind" : "function",
"protection" : "public",
"type" : "void(int popupCompletion)",
"comment" : "\n Sets whether the completions should be presented in a popup window.\n Since 2.6\n Params:\n popupCompletion = TRUE to do popup completion\n\t \n",
"line" : 568}
,
{
"name" : "getPopupCompletion",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the completions should be presented in a popup window.\n Since 2.6\n Returns: TRUE if popup completion is turned on\n\t \n",
"line" : 579}
,
{
"name" : "setPopupSetWidth",
"kind" : "function",
"protection" : "public",
"type" : "void(int popupSetWidth)",
"comment" : "\n Sets whether the completion popup window will be resized to be the same\n width as the entry.\n Since 2.8\n Params:\n popupSetWidth = TRUE to make the width of the popup the same as the entry\n\t \n",
"line" : 592}
,
{
"name" : "getPopupSetWidth",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the completion popup window will be resized to the\n width of the entry.\n Since 2.8\n Returns: TRUE if the popup window will be resized to the width of the entry\n\t \n",
"line" : 604}
,
{
"name" : "setPopupSingleMatch",
"kind" : "function",
"protection" : "public",
"type" : "void(int popupSingleMatch)",
"comment" : "\n Sets whether the completion popup window will appear even if there is\n only a single match. You may want to set this to FALSE if you\n are using inline\n completion.\n Since 2.8\n Params:\n popupSingleMatch = TRUE if the popup should appear even for a single\n match\n\t \n",
"line" : 620}
,
{
"name" : "getPopupSingleMatch",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the completion popup window will appear even if there is\n only a single match.\n Since 2.8\n Returns: TRUE if the popup window will appear regardless of the number of matches.\n\t \n",
"line" : 632}
]
}
]
}
,
{
"name" : "gtk.Entry",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Entry.d",
"members" : [
{
"name" : "Entry",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkEntry widget is a single line text entry\n widget. A fairly large set of key bindings are supported\n by default. If the entered text is longer than the allocation\n of the widget, the widget will scroll so that the cursor\n position is visible.\n When using an entry for passwords and other sensitive information,\n it can be put into \"password mode\" using gtk_entry_set_visibility().\n In this mode, entered text is displayed using a 'invisible' character.\n By default, GTK+ picks the best invisible character that is available\n in the current font, but it can be changed with\n gtk_entry_set_invisible_char(). Since 2.16, GTK+ displays a warning\n when Caps Lock or input methods might interfere with entering text in\n a password entry. The warning can be turned off with the\n \"caps-lock-warning\" property.\n Since 2.16, GtkEntry has the ability to display progress or activity\n information behind the text. To make an entry display such information,\n use gtk_entry_set_progress_fraction() or gtk_entry_set_progress_pulse_step().\n Additionally, GtkEntry can show icons at either side of the entry. These\n icons can be activatable by clicking, can be set up as drag source and\n can have tooltips. To add an icon, use gtk_entry_set_icon_from_gicon() or\n one of the various other functions that set an icon from a stock id, an\n icon name or a pixbuf. To trigger an action when the user clicks an icon,\n connect to the \"icon-press\" signal. To allow DND operations\n from an icon, use gtk_entry_set_icon_drag_source(). To set a tooltip on\n an icon, use gtk_entry_set_icon_tooltip_text() or the corresponding function\n for markup.\n Note that functionality or information that is only available by clicking\n on an icon in an entry may not be accessible at all to users which are not\n able to use a mouse or other pointing device. It is therefore recommended\n that any such functionality should also be available by other means, e.g.\n via the context menu of the entry.\n \n",
"line" : 143,
"base" : "Widget",
"interfaces" : [
"EditableIF",
"CellEditableIF"],
"members" : [
{
"name" : "gtkEntry",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkEntry*",
"comment" : " the main Gtk struct \n",
"line" : 147}
,
{
"name" : "getEntryStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkEntry*()",
"line" : 150}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 157}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Entry(GtkEntry* gtkEntry)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 165}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 183}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Entry(string text)",
"comment" : " \n",
"line" : 196}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Entry(string text, int max)",
"comment" : " \n",
"line" : 203}
,
{
"name" : "getStockId",
"kind" : "function",
"protection" : "public",
"type" : "StockID(GtkEntryIconPosition iconPos)",
"comment" : "\n Gets the stock id of action.\n Since 2.16\n Returns: the stock id\n\t \n",
"line" : 214}
,
{
"name" : "setStockId",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkEntryIconPosition iconPos, StockID stockId)",
"comment" : "\n Sets the stock id on action\n Since 2.16\n Params:\n stockId =  the stock id\n\t \n",
"line" : 234}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 242}
,
{
"name" : "onActivateListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Entry)[]",
"line" : 244}
,
{
"name" : "addOnActivate",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Entry) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n A keybinding signal\n which gets emitted when the user activates the entry.\n Applications should not connect to it, but may emit it with\n g_signal_emit_by_name() if they need to control activation\n programmatically.\n The default bindings for this signal are all forms of the Enter key.\n\t \n",
"line" : 253}
,
{
"name" : "callBackActivate",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkEntry* entryStruct, Entry entry)",
"line" : 268}
,
{
"name" : "onBackspaceListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Entry)[]",
"line" : 276}
,
{
"name" : "addOnBackspace",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Entry) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::backspace signal is a\n keybinding signal\n which gets emitted when the user asks for it.\n The default bindings for this signal are\n Backspace and Shift-Backspace.\n\t \n",
"line" : 284}
,
{
"name" : "callBackBackspace",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkEntry* entryStruct, Entry entry)",
"line" : 299}
,
{
"name" : "onCopyClipboardListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Entry)[]",
"line" : 307}
,
{
"name" : "addOnCopyClipboard",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Entry) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::copy-clipboard signal is a\n keybinding signal\n which gets emitted to copy the selection to the clipboard.\n The default bindings for this signal are\n Ctrl-c and Ctrl-Insert.\n\t \n",
"line" : 315}
,
{
"name" : "callBackCopyClipboard",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkEntry* entryStruct, Entry entry)",
"line" : 330}
,
{
"name" : "onCutClipboardListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Entry)[]",
"line" : 338}
,
{
"name" : "addOnCutClipboard",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Entry) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::cut-clipboard signal is a\n keybinding signal\n which gets emitted to cut the selection to the clipboard.\n The default bindings for this signal are\n Ctrl-x and Shift-Delete.\n\t \n",
"line" : 346}
,
{
"name" : "callBackCutClipboard",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkEntry* entryStruct, Entry entry)",
"line" : 361}
,
{
"name" : "onDeleteFromCursorListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkDeleteType, int, Entry)[]",
"line" : 369}
,
{
"name" : "addOnDeleteFromCursor",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkDeleteType, int, Entry) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::delete-from-cursor signal is a\n keybinding signal\n which gets emitted when the user initiates a text deletion.\n If the type is GTK_DELETE_CHARS, GTK+ deletes the selection\n if there is one, otherwise it deletes the requested number\n of characters.\n The default bindings for this signal are\n Delete for deleting a character and Ctrl-Delete for\n deleting a word.\n\t \n",
"line" : 381}
,
{
"name" : "callBackDeleteFromCursor",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkEntry* entryStruct, GtkDeleteType type, int count, Entry entry)",
"line" : 396}
,
{
"name" : "onIconPressListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkEntryIconPosition, GdkEvent*, Entry)[]",
"line" : 404}
,
{
"name" : "addOnIconPress",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkEntryIconPosition, GdkEvent*, Entry) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::icon-press signal is emitted when an activatable icon\n is clicked.\n Since 2.16\n\t \n",
"line" : 410}
,
{
"name" : "callBackIconPress",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkEntry* entryStruct, GtkEntryIconPosition iconPos, GdkEvent* event, Entry entry)",
"line" : 425}
,
{
"name" : "onIconReleaseListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkEntryIconPosition, GdkEvent*, Entry)[]",
"line" : 433}
,
{
"name" : "addOnIconRelease",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkEntryIconPosition, GdkEvent*, Entry) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::icon-release signal is emitted on the button release from a\n mouse click over an activatable icon.\n Since 2.16\n\t \n",
"line" : 439}
,
{
"name" : "callBackIconRelease",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkEntry* entryStruct, GtkEntryIconPosition iconPos, GdkEvent* event, Entry entry)",
"line" : 454}
,
{
"name" : "onInsertAtCursorListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(string, Entry)[]",
"line" : 462}
,
{
"name" : "addOnInsertAtCursor",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(string, Entry) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::insert-at-cursor signal is a\n keybinding signal\n which gets emitted when the user initiates the insertion of a\n fixed string at the cursor.\n This signal has no default bindings.\n\t \n",
"line" : 470}
,
{
"name" : "callBackInsertAtCursor",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkEntry* entryStruct, char* str, Entry entry)",
"line" : 485}
,
{
"name" : "onMoveCursorListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkMovementStep, int, int, Entry)[]",
"line" : 493}
,
{
"name" : "addOnMoveCursor",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkMovementStep, int, int, Entry) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::move-cursor signal is a\n keybinding signal\n which gets emitted when the user initiates a cursor movement.\n If the cursor is not visible in entry, this signal causes\n the viewport to be moved instead.\n Applications should not connect to it, but may emit it with\n g_signal_emit_by_name() if they need to control the cursor\n programmatically.\n The default bindings for this signal come in two variants,\n the variant with the Shift modifier extends the selection,\n the variant without the Shift modifer does not.\n There are too many key combinations to list them all here.\n Arrow keys move by individual characters\/lines\n Ctrl-arrow key combinations move by words\/paragraphs\n Home\/End keys move to the ends of the buffer\n TRUE if the move should extend the selection\n\t \n",
"line" : 512}
,
{
"name" : "callBackMoveCursor",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkEntry* entryStruct, GtkMovementStep step, int count, int extendSelection, Entry entry)",
"line" : 527}
,
{
"name" : "onPasteClipboardListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Entry)[]",
"line" : 535}
,
{
"name" : "addOnPasteClipboard",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Entry) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::paste-clipboard signal is a\n keybinding signal\n which gets emitted to paste the contents of the clipboard\n into the text view.\n The default bindings for this signal are\n Ctrl-v and Shift-Insert.\n\t \n",
"line" : 544}
,
{
"name" : "callBackPasteClipboard",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkEntry* entryStruct, Entry entry)",
"line" : 559}
,
{
"name" : "onPopulatePopupListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkMenu*, Entry)[]",
"line" : 567}
,
{
"name" : "addOnPopulatePopup",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkMenu*, Entry) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::populate-popup signal gets emitted before showing the\n context menu of the entry.\n If you need to add items to the context menu, connect\n to this signal and append your menuitems to the menu.\n\t \n",
"line" : 574}
,
{
"name" : "callBackPopulatePopup",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkEntry* entryStruct, GtkMenu* menu, Entry entry)",
"line" : 589}
,
{
"name" : "onPreeditChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(string, Entry)[]",
"line" : 597}
,
{
"name" : "addOnPreeditChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(string, Entry) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n If an input method is used, the typed text will not immediately\n be committed to the buffer. So if you are interested in the text,\n connect to this signal.\n Since 2.20\n\t \n",
"line" : 604}
,
{
"name" : "callBackPreeditChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkEntry* entryStruct, char* preedit, Entry entry)",
"line" : 619}
,
{
"name" : "onToggleOverwriteListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Entry)[]",
"line" : 627}
,
{
"name" : "addOnToggleOverwrite",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Entry) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::toggle-overwrite signal is a\n keybinding signal\n which gets emitted to toggle the overwrite mode of the entry.\n The default bindings for this signal is Insert.\n See Also\n GtkTextView\n a widget for handling multi-line text entry.\n GtkEntryCompletion\n adds completion functionality to GtkEntry.\n\t \n",
"line" : 639}
,
{
"name" : "callBackToggleOverwrite",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkEntry* entryStruct, Entry entry)",
"line" : 654}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Entry()",
"comment" : "\n Creates a new entry.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 667}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Entry(EntryBuffer buffer)",
"comment" : "\n Creates a new entry with the specified text buffer.\n Since 2.18\n Params:\n buffer = The buffer to use for the new GtkEntry.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 685}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Entry(int max)",
"comment" : "\n Warning\n gtk_entry_new_with_max_length has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_entry_set_max_length() instead.\n Creates a new GtkEntry widget with the given maximum length.\n Params:\n max = the maximum length of the entry, or 0 for no maximum.\n (other than the maximum length of entries.) The value passed in will\n be clamped to the range 0-65536.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 706}
,
{
"name" : "getBuffer",
"kind" : "function",
"protection" : "public",
"type" : "EntryBuffer()",
"comment" : "\n Get the GtkEntryBuffer object which holds the text for\n this widget.\n Since 2.18\n Returns: A GtkEntryBuffer object. [transfer none]\n\t \n",
"line" : 723}
,
{
"name" : "setBuffer",
"kind" : "function",
"protection" : "public",
"type" : "void(EntryBuffer buffer)",
"comment" : "\n Set the GtkEntryBuffer object which holds the text for\n this widget.\n Since 2.18\n Params:\n buffer = a GtkEntryBuffer\n\t \n",
"line" : 741}
,
{
"name" : "setText",
"kind" : "function",
"protection" : "public",
"type" : "void(string text)",
"comment" : "\n Sets the text in the widget to the given\n value, replacing the current contents.\n See gtk_entry_buffer_set_text().\n Params:\n text = the new text\n\t \n",
"line" : 754}
,
{
"name" : "appendText",
"kind" : "function",
"protection" : "public",
"type" : "void(string text)",
"comment" : "\n Warning\n gtk_entry_append_text has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_editable_insert_text() instead.\n Appends the given text to the contents of the widget.\n Params:\n text = the text to append\n\t \n",
"line" : 767}
,
{
"name" : "prependText",
"kind" : "function",
"protection" : "public",
"type" : "void(string text)",
"comment" : "\n Warning\n gtk_entry_prepend_text has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_editable_insert_text() instead.\n Prepends the given text to the contents of the widget.\n Params:\n text = the text to prepend\n\t \n",
"line" : 780}
,
{
"name" : "getText",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Retrieves the contents of the entry widget.\n See also gtk_editable_get_chars().\n Returns: a pointer to the contents of the widget as a string. This string points to internally allocated storage in the widget and must not be freed, modified or stored.\n\t \n",
"line" : 791}
,
{
"name" : "getTextLength",
"kind" : "function",
"protection" : "public",
"type" : "ushort()",
"comment" : "\n Retrieves the current length of the text in\n entry.\n Since 2.14\n Returns: the current number of characters in GtkEntry, or 0 if there are none.\n\t \n",
"line" : 803}
,
{
"name" : "setVisibility",
"kind" : "function",
"protection" : "public",
"type" : "void(int visible)",
"comment" : "\n Sets whether the contents of the entry are visible or not.\n When visibility is set to FALSE, characters are displayed\n as the invisible char, and will also appear that way when\n the text in the entry widget is copied elsewhere.\n By default, GTK+ picks the best invisible character available\n in the current font, but it can be changed with\n gtk_entry_set_invisible_char().\n Params:\n visible = TRUE if the contents of the entry are displayed\n as plaintext\n\t \n",
"line" : 821}
,
{
"name" : "setInvisibleChar",
"kind" : "function",
"protection" : "public",
"type" : "void(uint ch)",
"comment" : "\n Sets the character to use in place of the actual text when\n gtk_entry_set_visibility() has been called to set text visibility\n to FALSE. i.e. this is the character used in \"password mode\" to\n show the user how many characters have been typed. By default, GTK+\n picks the best invisible char available in the current font. If you\n set the invisible char to 0, then the user will get no feedback\n at all; there will be no text on the screen as they type.\n Params:\n ch = a Unicode character\n\t \n",
"line" : 838}
,
{
"name" : "unsetInvisibleChar",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Unsets the invisible char previously set with\n gtk_entry_set_invisible_char(). So that the\n default invisible char is used again.\n Since 2.16\n\t \n",
"line" : 850}
,
{
"name" : "setMaxLength",
"kind" : "function",
"protection" : "public",
"type" : "void(int max)",
"comment" : "\n Sets the maximum allowed length of the contents of the widget. If\n the current contents are longer than the given length, then they\n will be truncated to fit.\n Params:\n max = the maximum length of the entry, or 0 for no maximum.\n (other than the maximum length of entries.) The value passed in will\n be clamped to the range 0-65536.\n\t \n",
"line" : 865}
,
{
"name" : "getActivatesDefault",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Retrieves the value set by gtk_entry_set_activates_default().\n Returns: TRUE if the entry will activate the default widget\n\t \n",
"line" : 875}
,
{
"name" : "getHasFrame",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value set by gtk_entry_set_has_frame().\n Returns: whether the entry has a beveled frame\n\t \n",
"line" : 885}
,
{
"name" : "getInnerBorder",
"kind" : "function",
"protection" : "public",
"type" : "Border()",
"comment" : "\n This function returns the entry's \"inner-border\" property. See\n gtk_entry_set_inner_border() for more information.\n Since 2.10\n Returns: the entry's GtkBorder, or NULL if none was set. [transfer none]\n\t \n",
"line" : 897}
,
{
"name" : "getWidthChars",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value set by gtk_entry_set_width_chars().\n Returns: number of chars to request space for, or negative if unset\n\t \n",
"line" : 912}
,
{
"name" : "setActivatesDefault",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n If setting is TRUE, pressing Enter in the entry will activate the default\n widget for the window containing the entry. This usually means that\n the dialog box containing the entry will be closed, since the default\n widget is usually one of the dialog buttons.\n (For experts: if setting is TRUE, the entry calls\n gtk_window_activate_default() on the window containing the entry, in\n the default handler for the \"activate\" signal.)\n Params:\n setting = TRUE to activate window's default widget on Enter keypress\n\t \n",
"line" : 929}
,
{
"name" : "setHasFrame",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n Sets whether the entry has a beveled frame around it.\n Params:\n setting = new value\n\t \n",
"line" : 940}
,
{
"name" : "setInnerBorder",
"kind" : "function",
"protection" : "public",
"type" : "void(Border border)",
"comment" : "\n Sets entry's inner-border property to border, or clears it if NULL\n is passed. The inner-border is the area around the entry's text, but\n inside its frame.\n If set, this property overrides the inner-border style property.\n Overriding the style-provided border is useful when you want to do\n in-place editing of some text in a canvas or list widget, where\n pixel-exact positioning of the entry is important.\n Since 2.10\n Params:\n border = a GtkBorder, or NULL. [allow-none]\n\t \n",
"line" : 958}
,
{
"name" : "setWidthChars",
"kind" : "function",
"protection" : "public",
"type" : "void(int nChars)",
"comment" : "\n Changes the size request of the entry to be about the right size\n for n_chars characters. Note that it changes the size\n request, the size can still be affected by\n how you pack the widget into containers. If n_chars is -1, the\n size reverts to the default entry size.\n Params:\n nChars = width in chars\n\t \n",
"line" : 973}
,
{
"name" : "getInvisibleChar",
"kind" : "function",
"protection" : "public",
"type" : "uint()",
"comment" : "\n Retrieves the character displayed in place of the real characters\n for entries with visibility set to false. See gtk_entry_set_invisible_char().\n Returns: the current invisible char, or 0, if the entry does not show invisible text at all.\n\t \n",
"line" : 984}
,
{
"name" : "setAlignment",
"kind" : "function",
"protection" : "public",
"type" : "void(float xalign)",
"comment" : "\n Sets the alignment for the contents of the entry. This controls\n the horizontal positioning of the contents when the displayed\n text is shorter than the width of the entry.\n Since 2.4\n Params:\n xalign = The horizontal alignment, from 0 (left) to 1 (right).\n Reversed for RTL layouts\n\t \n",
"line" : 999}
,
{
"name" : "getAlignment",
"kind" : "function",
"protection" : "public",
"type" : "float()",
"comment" : "\n Gets the value set by gtk_entry_set_alignment().\n Since 2.4\n Returns: the alignment\n\t \n",
"line" : 1010}
,
{
"name" : "setOverwriteMode",
"kind" : "function",
"protection" : "public",
"type" : "void(int overwrite)",
"comment" : "\n Sets whether the text is overwritten when typing in the GtkEntry.\n Since 2.14\n Params:\n overwrite = new value\n\t \n",
"line" : 1022}
,
{
"name" : "getOverwriteMode",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value set by gtk_entry_set_overwrite_mode().\n Since 2.14\n Returns: whether the text is overwritten when typing.\n\t \n",
"line" : 1033}
,
{
"name" : "getLayout",
"kind" : "function",
"protection" : "public",
"type" : "PgLayout()",
"comment" : "\n Gets the PangoLayout used to display the entry.\n The layout is useful to e.g. convert text positions to\n pixel positions, in combination with gtk_entry_get_layout_offsets().\n The returned layout is owned by the entry and must not be\n modified or freed by the caller.\n Keep in mind that the layout text may contain a preedit string, so\n gtk_entry_layout_index_to_text_index() and\n gtk_entry_text_index_to_layout_index() are needed to convert byte\n indices in the layout to byte indices in the entry contents.\n Returns: the PangoLayout for this entry. [transfer none]\n\t \n",
"line" : 1051}
,
{
"name" : "getLayoutOffsets",
"kind" : "function",
"protection" : "public",
"type" : "void(out int x, out int y)",
"comment" : "\n Obtains the position of the PangoLayout used to render text\n in the entry, in widget coordinates. Useful if you want to line\n up the text in an entry with some other text, e.g. when using the\n entry to implement editable cells in a sheet widget.\n Also useful to convert mouse events into coordinates inside the\n PangoLayout, e.g. to take some action if some part of the entry text\n is clicked.\n Note that as the user scrolls around in the entry the offsets will\n change; you'll need to connect to the \"notify::scroll-offset\"\n signal to track this. Remember when using the PangoLayout\n functions you need to convert to and from pixels using\n PANGO_PIXELS() or PANGO_SCALE.\n Keep in mind that the layout text may contain a preedit string, so\n gtk_entry_layout_index_to_text_index() and\n gtk_entry_text_index_to_layout_index() are needed to convert byte\n indices in the layout to byte indices in the entry contents.\n Params:\n x = location to store X offset of layout, or NULL. [out][allow-none]\n y = location to store Y offset of layout, or NULL. [out][allow-none]\n\t \n",
"line" : 1083}
,
{
"name" : "layoutIndexToTextIndex",
"kind" : "function",
"protection" : "public",
"type" : "int(int layoutIndex)",
"comment" : "\n Converts from a position in the entry contents (returned\n by gtk_entry_get_text()) to a position in the\n entry's PangoLayout (returned by gtk_entry_get_layout(),\n with text retrieved via pango_layout_get_text()).\n Params:\n layoutIndex = byte index into the entry layout text\n Returns: byte index into the entry contents\n\t \n",
"line" : 1098}
,
{
"name" : "textIndexToLayoutIndex",
"kind" : "function",
"protection" : "public",
"type" : "int(int textIndex)",
"comment" : "\n Converts from a position in the entry's PangoLayout (returned by\n gtk_entry_get_layout()) to a position in the entry contents\n (returned by gtk_entry_get_text()).\n Params:\n textIndex = byte index into the entry contents\n Returns: byte index into the entry layout text\n\t \n",
"line" : 1112}
,
{
"name" : "getMaxLength",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Retrieves the maximum allowed length of the text in\n entry. See gtk_entry_set_max_length().\n Returns: the maximum allowed number of characters in GtkEntry, or 0 if there is no maximum.\n\t \n",
"line" : 1123}
,
{
"name" : "getVisibility",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Retrieves whether the text in entry is visible. See\n gtk_entry_set_visibility().\n Returns: TRUE if the text is currently visible\n\t \n",
"line" : 1134}
,
{
"name" : "setCompletion",
"kind" : "function",
"protection" : "public",
"type" : "void(EntryCompletion completion)",
"comment" : "\n Sets completion to be the auxiliary completion object to use with entry.\n All further configuration of the completion mechanism is done on\n completion using the GtkEntryCompletion API. Completion is disabled if\n completion is set to NULL.\n Since 2.4\n Params:\n completion = The GtkEntryCompletion or NULL. [allow-none]\n\t \n",
"line" : 1149}
,
{
"name" : "getCompletion",
"kind" : "function",
"protection" : "public",
"type" : "EntryCompletion()",
"comment" : "\n Returns the auxiliary completion object currently in use by entry.\n Since 2.4\n Returns: The auxiliary completion object currently in use by entry. [transfer none]\n\t \n",
"line" : 1160}
,
{
"name" : "setCursorHadjustment",
"kind" : "function",
"protection" : "public",
"type" : "void(Adjustment adjustment)",
"comment" : "\n Hooks up an adjustment to the cursor position in an entry, so that when\n the cursor is moved, the adjustment is scrolled to show that position.\n See gtk_scrolled_window_get_hadjustment() for a typical way of obtaining\n the adjustment.\n The adjustment has to be in pixel units and in the same coordinate system\n as the entry.\n Since 2.12\n Params:\n adjustment = an adjustment which should be adjusted when the cursor\n is moved, or NULL\n\t \n",
"line" : 1183}
,
{
"name" : "getCursorHadjustment",
"kind" : "function",
"protection" : "public",
"type" : "Adjustment()",
"comment" : "\n Retrieves the horizontal cursor adjustment for the entry.\n See gtk_entry_set_cursor_hadjustment().\n Since 2.12\n Returns: the horizontal cursor adjustment, or NULL if none has been set. [transfer none]\n\t \n",
"line" : 1195}
,
{
"name" : "setProgressFraction",
"kind" : "function",
"protection" : "public",
"type" : "void(double fraction)",
"comment" : "\n Causes the entry's progress indicator to \"fill in\" the given\n fraction of the bar. The fraction should be between 0.0 and 1.0,\n inclusive.\n Since 2.16\n Params:\n fraction = fraction of the task that's been completed\n\t \n",
"line" : 1214}
,
{
"name" : "getProgressFraction",
"kind" : "function",
"protection" : "public",
"type" : "double()",
"comment" : "\n Returns the current fraction of the task that's been completed.\n See gtk_entry_set_progress_fraction().\n Since 2.16\n Returns: a fraction from 0.0 to 1.0\n\t \n",
"line" : 1226}
,
{
"name" : "setProgressPulseStep",
"kind" : "function",
"protection" : "public",
"type" : "void(double fraction)",
"comment" : "\n Sets the fraction of total entry width to move the progress\n bouncing block for each call to gtk_entry_progress_pulse().\n Since 2.16\n Params:\n fraction = fraction between 0.0 and 1.0\n\t \n",
"line" : 1239}
,
{
"name" : "getProgressPulseStep",
"kind" : "function",
"protection" : "public",
"type" : "double()",
"comment" : "\n Retrieves the pulse step set with gtk_entry_set_progress_pulse_step().\n Since 2.16\n Returns: a fraction from 0.0 to 1.0\n\t \n",
"line" : 1250}
,
{
"name" : "progressPulse",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Indicates that some progress is made, but you don't know how much.\n Causes the entry's progress indicator to enter \"activity mode,\"\n where a block bounces back and forth. Each call to\n gtk_entry_progress_pulse() causes the block to move by a little bit\n (the amount of movement per pulse is determined by\n gtk_entry_set_progress_pulse_step()).\n Since 2.16\n\t \n",
"line" : 1265}
,
{
"name" : "imContextFilterKeypress",
"kind" : "function",
"protection" : "public",
"type" : "int(GdkEventKey* event)",
"comment" : "\n Allow the GtkEntry input method to internally handle key press\n and release events. If this function returns TRUE, then no further\n processing should be done for this key event. See\n gtk_im_context_filter_keypress().\n Note that you are expected to call this function from your handler\n when overriding key event handling. This is needed in the case when\n you need to insert your own key handling between the input method\n and the default key event handling of the GtkEntry.\n See gtk_text_view_reset_im_context() for an example of use.\n Since 2.22\n Params:\n event = the key event\n Returns: TRUE if the input method handled the key event.\n\t \n",
"line" : 1286}
,
{
"name" : "resetImContext",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Reset the input method context of the entry if needed.\n This can be necessary in the case where modifying the buffer\n would confuse on-going input method behavior.\n Since 2.22\n\t \n",
"line" : 1298}
,
{
"name" : "setIconFromPixbuf",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkEntryIconPosition iconPos, Pixbuf pixbuf)",
"comment" : "\n Sets the icon shown in the specified position using a pixbuf.\n If pixbuf is NULL, no icon will be shown in the specified position.\n Since 2.16\n Params:\n iconPos = Icon position\n pixbuf = A GdkPixbuf, or NULL. [allow-none]\n\t \n",
"line" : 1312}
,
{
"name" : "setIconFromStock",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkEntryIconPosition iconPos, string stockId)",
"comment" : "\n Sets the icon shown in the entry at the specified position from\n a stock image.\n If stock_id is NULL, no icon will be shown in the specified position.\n Since 2.16\n Params:\n iconPos = Icon position\n stockId = The name of the stock item, or NULL. [allow-none]\n\t \n",
"line" : 1327}
,
{
"name" : "setIconFromIconName",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkEntryIconPosition iconPos, string iconName)",
"comment" : "\n Sets the icon shown in the entry at the specified position\n from the current icon theme.\n If the icon name isn't known, a \"broken image\" icon will be displayed\n instead.\n If icon_name is NULL, no icon will be shown in the specified position.\n Since 2.16\n Params:\n iconPos = The position at which to set the icon\n iconName = An icon name, or NULL. [allow-none]\n\t \n",
"line" : 1344}
,
{
"name" : "setIconFromGicon",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkEntryIconPosition iconPos, IconIF icon)",
"comment" : "\n Sets the icon shown in the entry at the specified position\n from the current icon theme.\n If the icon isn't known, a \"broken image\" icon will be displayed\n instead.\n If icon is NULL, no icon will be shown in the specified position.\n Since 2.16\n Params:\n iconPos = The position at which to set the icon\n icon = The icon to set, or NULL. [allow-none]\n\t \n",
"line" : 1361}
,
{
"name" : "getIconStorageType",
"kind" : "function",
"protection" : "public",
"type" : "GtkImageType(GtkEntryIconPosition iconPos)",
"comment" : "\n Gets the type of representation being used by the icon\n to store image data. If the icon has no image data,\n the return value will be GTK_IMAGE_EMPTY.\n Since 2.16\n Params:\n iconPos = Icon position\n Returns: image representation being used\n\t \n",
"line" : 1376}
,
{
"name" : "getIconPixbuf",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf(GtkEntryIconPosition iconPos)",
"comment" : "\n Retrieves the image used for the icon.\n Unlike the other methods of setting and getting icon data, this\n method will work regardless of whether the icon was set using a\n GdkPixbuf, a GIcon, a stock item, or an icon name.\n Since 2.16\n Params:\n iconPos = Icon position\n Returns: A GdkPixbuf, or NULL if no icon is set for this position. [transfer none]\n\t \n",
"line" : 1392}
,
{
"name" : "getIconStock",
"kind" : "function",
"protection" : "public",
"type" : "string(GtkEntryIconPosition iconPos)",
"comment" : "\n Retrieves the stock id used for the icon, or NULL if there is\n no icon or if the icon was set by some other method (e.g., by\n pixbuf, icon name or gicon).\n Since 2.16\n Params:\n iconPos = Icon position\n Returns: A stock id, or NULL if no icon is set or if the icon wasn't set from a stock id\n\t \n",
"line" : 1412}
,
{
"name" : "getIconName",
"kind" : "function",
"protection" : "public",
"type" : "string(GtkEntryIconPosition iconPos)",
"comment" : "\n Retrieves the icon name used for the icon, or NULL if there is\n no icon or if the icon was set by some other method (e.g., by\n pixbuf, stock or gicon).\n Since 2.16\n Params:\n iconPos = Icon position\n Returns: An icon name, or NULL if no icon is set or if the icon wasn't set from an icon name\n\t \n",
"line" : 1427}
,
{
"name" : "getIconGicon",
"kind" : "function",
"protection" : "public",
"type" : "IconIF(GtkEntryIconPosition iconPos)",
"comment" : "\n Retrieves the GIcon used for the icon, or NULL if there is\n no icon or if the icon was set by some other method (e.g., by\n stock, pixbuf, or icon name).\n Since 2.16\n Params:\n iconPos = Icon position\n Returns: A GIcon, or NULL if no icon is set or if the icon is not a GIcon. [transfer none]\n\t \n",
"line" : 1442}
,
{
"name" : "setIconActivatable",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkEntryIconPosition iconPos, int activatable)",
"comment" : "\n Sets whether the icon is activatable.\n Since 2.16\n Params:\n iconPos = Icon position\n activatable = TRUE if the icon should be activatable\n\t \n",
"line" : 1460}
,
{
"name" : "getIconActivatable",
"kind" : "function",
"protection" : "public",
"type" : "int(GtkEntryIconPosition iconPos)",
"comment" : "\n Returns whether the icon is activatable.\n Since 2.16\n Params:\n iconPos = Icon position\n Returns: TRUE if the icon is activatable.\n\t \n",
"line" : 1473}
,
{
"name" : "setIconSensitive",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkEntryIconPosition iconPos, int sensitive)",
"comment" : "\n Sets the sensitivity for the specified icon.\n Since 2.16\n Params:\n iconPos = Icon position\n sensitive = Specifies whether the icon should appear\n sensitive or insensitive\n\t \n",
"line" : 1487}
,
{
"name" : "getIconSensitive",
"kind" : "function",
"protection" : "public",
"type" : "int(GtkEntryIconPosition iconPos)",
"comment" : "\n Returns whether the icon appears sensitive or insensitive.\n Since 2.16\n Params:\n iconPos = Icon position\n Returns: TRUE if the icon is sensitive.\n\t \n",
"line" : 1500}
,
{
"name" : "getIconAtPos",
"kind" : "function",
"protection" : "public",
"type" : "int(int x, int y)",
"comment" : "\n Finds the icon at the given position and return its index.\n If x, y doesn't lie inside an icon, -1 is returned.\n This function is intended for use in a \"query-tooltip\"\n signal handler.\n Since 2.16\n Params:\n x = the x coordinate of the position to find\n y = the y coordinate of the position to find\n Returns: the index of the icon at the given position, or -1\n\t \n",
"line" : 1517}
,
{
"name" : "setIconTooltipText",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkEntryIconPosition iconPos, string tooltip)",
"comment" : "\n Sets tooltip as the contents of the tooltip for the icon\n at the specified position.\n Use NULL for tooltip to remove an existing tooltip.\n See also gtk_widget_set_tooltip_text() and\n gtk_entry_set_icon_tooltip_markup().\n Since 2.16\n Params:\n iconPos = the icon position\n tooltip = the contents of the tooltip for the icon, or NULL. [allow-none]\n\t \n",
"line" : 1534}
,
{
"name" : "getIconTooltipText",
"kind" : "function",
"protection" : "public",
"type" : "string(GtkEntryIconPosition iconPos)",
"comment" : "\n Gets the contents of the tooltip on the icon at the specified\n position in entry.\n Since 2.16\n Params:\n iconPos = the icon position\n Returns: the tooltip text, or NULL. Free the returned string with g_free() when done.\n\t \n",
"line" : 1548}
,
{
"name" : "setIconTooltipMarkup",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkEntryIconPosition iconPos, string tooltip)",
"comment" : "\n Sets tooltip as the contents of the tooltip for the icon at\n the specified position. tooltip is assumed to be marked up with\n the Pango text markup language.\n Use NULL for tooltip to remove an existing tooltip.\n See also gtk_widget_set_tooltip_markup() and\n gtk_enty_set_icon_tooltip_text().\n Since 2.16\n Params:\n iconPos = the icon position\n tooltip = the contents of the tooltip for the icon, or NULL. [allow-none]\n\t \n",
"line" : 1566}
,
{
"name" : "getIconTooltipMarkup",
"kind" : "function",
"protection" : "public",
"type" : "string(GtkEntryIconPosition iconPos)",
"comment" : "\n Gets the contents of the tooltip on the icon at the specified\n position in entry.\n Since 2.16\n Params:\n iconPos = the icon position\n Returns: the tooltip text, or NULL. Free the returned string with g_free() when done.\n\t \n",
"line" : 1580}
,
{
"name" : "setIconDragSource",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkEntryIconPosition iconPos, GtkTargetList* targetList, GdkDragAction actions)",
"comment" : "\n Sets up the icon at the given position so that GTK+ will start a drag\n operation when the user clicks and drags the icon.\n To handle the drag operation, you need to connect to the usual\n \"drag-data-get\" (or possibly \"drag-data-delete\")\n signal, and use gtk_entry_get_current_icon_drag_source() in\n your signal handler to find out if the drag was started from\n an icon.\n By default, GTK+ uses the icon as the drag icon. You can use the\n \"drag-begin\" signal to set a different icon. Note that you\n have to use g_signal_connect_after() to ensure that your signal handler\n gets executed after the default handler.\n Since 2.16\n Params:\n iconPos = icon position\n targetList = the targets (data formats) in which the data can be provided\n actions = a bitmask of the allowed drag actions\n\t \n",
"line" : 1604}
,
{
"name" : "getCurrentIconDragSource",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the index of the icon which is the source of the current\n DND operation, or -1.\n This function is meant to be used in a \"drag-data-get\"\n callback.\n Since 2.16\n Returns: index of the icon which is the source of the current DND operation, or -1.\n\t \n",
"line" : 1618}
,
{
"name" : "getIconWindow",
"kind" : "function",
"protection" : "public",
"type" : "Window(GtkEntryIconPosition iconPos)",
"comment" : "\n Returns the GdkWindow which contains the entry's icon at\n icon_pos. This function is useful when drawing something to the\n entry in an expose-event callback because it enables the callback\n to distinguish between the text window and entry's icon windows.\n See also gtk_entry_get_text_window().\n Note that GTK+ 3 does not have this function anymore; it has\n been replaced by gtk_entry_get_icon_area().\n Since 2.20\n Params:\n iconPos = Icon position\n Returns: the entry's icon window at icon_pos. [transfer none]\n\t \n",
"line" : 1637}
,
{
"name" : "getTextWindow",
"kind" : "function",
"protection" : "public",
"type" : "Window()",
"comment" : "\n Returns the GdkWindow which contains the text. This function is\n useful when drawing something to the entry in an expose-event\n callback because it enables the callback to distinguish between\n the text window and entry's icon windows.\n See also gtk_entry_get_icon_window().\n Note that GTK+ 3 does not have this function anymore; it has\n been replaced by gtk_entry_get_text_area().\n Since 2.20\n Returns: the entry's text window. [transfer none]\n\t \n",
"line" : 1659}
]
}
]
}
,
{
"name" : "gtk.EventBox",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/EventBox.d",
"members" : [
{
"name" : "EventBox",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkEventBox widget is a subclass of GtkBin which also has its own window.\n It is useful since it allows you to catch events for widgets which do not\n have their own window.\n \n",
"line" : 72,
"base" : "Bin",
"members" : [
{
"name" : "gtkEventBox",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkEventBox*",
"comment" : " the main Gtk struct \n",
"line" : 76}
,
{
"name" : "getEventBoxStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkEventBox*()",
"line" : 79}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 86}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "EventBox(GtkEventBox* gtkEventBox)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 94}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 112}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "EventBox()",
"comment" : "\n\t \n\n Creates a new GtkEventBox.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 125}
,
{
"name" : "setAboveChild",
"kind" : "function",
"protection" : "public",
"type" : "void(int aboveChild)",
"comment" : "\n Set whether the event box window is positioned above the windows of its child,\n as opposed to below it. If the window is above, all events inside the\n event box will go to the event box. If the window is below, events\n in windows of child widgets will first got to that widget, and then\n to its parents.\n The default is to keep the window below the child.\n Since 2.4\n Params:\n aboveChild = TRUE if the event box window is above the windows of its child\n\t \n",
"line" : 147}
,
{
"name" : "getAboveChild",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the event box window is above or below the\n windows of its child. See gtk_event_box_set_above_child() for\n details.\n Since 2.4\n Returns: TRUE if the event box window is above the window of its child.\n\t \n",
"line" : 160}
,
{
"name" : "setVisibleWindow",
"kind" : "function",
"protection" : "public",
"type" : "void(int visibleWindow)",
"comment" : "\n Set whether the event box uses a visible or invisible child\n window. The default is to use visible windows.\n In an invisible window event box, the window that the\n event box creates is a GDK_INPUT_ONLY window, which\n means that it is invisible and only serves to receive\n events.\n A visible window event box creates a visible (GDK_INPUT_OUTPUT)\n window that acts as the parent window for all the widgets\n contained in the event box.\n You should generally make your event box invisible if\n you just want to trap events. Creating a visible window\n may cause artifacts that are visible to the user, especially\n if the user is using a theme with gradients or pixmaps.\n The main reason to create a non input-only event box is if\n you want to set the background to a different color or\n draw on it.\n Note\n There is one unexpected issue for an invisible event box that has its\n window below the child. (See gtk_event_box_set_above_child().)\n Since the input-only window is not an ancestor window of any windows\n that descendent widgets of the event box create, events on these\n windows aren't propagated up by the windowing system, but only by GTK+.\n The practical effect of this is if an event isn't in the event\n mask for the descendant window (see gtk_widget_add_events()),\n it won't be received by the event box.\n This problem doesn't occur for visible event boxes, because in\n that case, the event box window is actually the ancestor of the\n descendant windows, not just at the same place on the screen.\n Since 2.4\n Params:\n visibleWindow = boolean value\n\t \n",
"line" : 199}
,
{
"name" : "getVisibleWindow",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the event box has a visible window.\n See gtk_event_box_set_visible_window() for details.\n Since 2.4\n Returns: TRUE if the event box window is visible\n\t \n",
"line" : 211}
]
}
]
}
,
{
"name" : "gtk.Expander",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Expander.d",
"members" : [
{
"name" : "Expander",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkExpander allows the user to hide or show its child by clicking\n on an expander triangle similar to the triangles used in a GtkTreeView.\n Normally you use an expander as you would use any other descendant\n of GtkBin; you create the child widget and use gtk_container_add()\n to add it to the expander. When the expander is toggled, it will take\n care of showing and hiding the child automatically.\n Special Usage\n There are situations in which you may prefer to show and hide the\n expanded widget yourself, such as when you want to actually create\n the widget at expansion time. In this case, create a GtkExpander\n but do not add a child to it. The expander widget has an\n expanded property which can be used to monitor\n its expansion state. You should watch this property with a signal\n connection as follows:\n expander = gtk_expander_new_with_mnemonic (\"_More Options\");\n g_signal_connect (expander, \"notify::expanded\",\n  G_CALLBACK (expander_callback), NULL);\n ...\n static void\n expander_callback (GObject *object,\n  GParamSpec *param_spec,\n  gpointer user_data)\n {\n  GtkExpander *expander;\n  expander = GTK_EXPANDER (object);\n  if (gtk_expander_get_expanded (expander))\n  {\n  \/+* Show or create widgets +\/\n  }\n  else\n  {\n  \/+* Hide or destroy widgets +\/\n  }\n }\n GtkExpander as GtkBuildable\n The GtkExpander implementation of the GtkBuildable interface\n supports placing a child in the label position by specifying\n \"label\" as the \"type\" attribute of a <child> element.\n A normal content child can be specified without specifying\n a <child> type attribute.\n $(DDOC_COMMENT example)\n \n",
"line" : 119,
"base" : "Bin",
"members" : [
{
"name" : "gtkExpander",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkExpander*",
"comment" : " the main Gtk struct \n",
"line" : 123}
,
{
"name" : "getExpanderStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkExpander*()",
"line" : 126}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 133}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Expander(GtkExpander* gtkExpander)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 141}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 159}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Expander(string label, bool mnemonic = true)",
"comment" : "\n Creates a new expander using label as the text of the label.\n Since 2.4\n Params:\n  label = the text of the label\n  mnemonic = if true characters in label that are preceded by an underscore,\n  are underlined.\n  If you need a literal underscore character in a label, use '__' (two\n  underscores). The first underlined character represents a keyboard\n  accelerator called a mnemonic.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 177}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 202}
,
{
"name" : "onActivateListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Expander)[]",
"line" : 204}
,
{
"name" : "addOnActivate",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Expander) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 207}
,
{
"name" : "callBackActivate",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkExpander* expanderStruct, Expander expander)",
"line" : 222}
,
{
"name" : "setExpanded",
"kind" : "function",
"protection" : "public",
"type" : "void(int expanded)",
"comment" : "\n Sets the state of the expander. Set to TRUE, if you want\n the child widget to be revealed, and FALSE if you want the\n child widget to be hidden.\n Since 2.4\n Params:\n expanded = whether the child widget is revealed\n\t \n",
"line" : 239}
,
{
"name" : "getExpanded",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Queries a GtkExpander and returns its current state. Returns TRUE\n if the child widget is revealed.\n See gtk_expander_set_expanded().\n Since 2.4\n Returns: the current state of the expander.\n\t \n",
"line" : 252}
,
{
"name" : "setSpacing",
"kind" : "function",
"protection" : "public",
"type" : "void(int spacing)",
"comment" : "\n Sets the spacing field of expander, which is the number of pixels to\n place between expander and the child.\n Since 2.4\n Params:\n spacing = distance between the expander and child in pixels.\n\t \n",
"line" : 265}
,
{
"name" : "getSpacing",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value set by gtk_expander_set_spacing().\n Since 2.4\n Returns: spacing between the expander and child.\n\t \n",
"line" : 276}
,
{
"name" : "setLabel",
"kind" : "function",
"protection" : "public",
"type" : "void(string label)",
"comment" : "\n Sets the text of the label of the expander to label.\n This will also clear any previously set labels.\n Since 2.4\n Params:\n label = a string. [allow-none]\n\t \n",
"line" : 289}
,
{
"name" : "getLabel",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Fetches the text from a label widget including any embedded\n underlines indicating mnemonics and Pango markup, as set by\n gtk_expander_set_label(). If the label text has not been set the\n return value will be NULL. This will be the case if you create an\n empty button with gtk_button_new() to use as a container.\n Note that this function behaved differently in versions prior to\n 2.14 and used to return the label text stripped of embedded\n underlines indicating mnemonics and Pango markup. This problem can\n be avoided by fetching the label text directly from the label\n widget.\n Since 2.4\n Returns: The text of the label widget. This string is owned by the widget and must not be modified or freed.\n\t \n",
"line" : 309}
,
{
"name" : "setUseUnderline",
"kind" : "function",
"protection" : "public",
"type" : "void(int useUnderline)",
"comment" : "\n If true, an underline in the text of the expander label indicates\n the next character should be used for the mnemonic accelerator key.\n Since 2.4\n Params:\n useUnderline = TRUE if underlines in the text indicate mnemonics\n\t \n",
"line" : 322}
,
{
"name" : "getUseUnderline",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether an embedded underline in the expander label indicates a\n mnemonic. See gtk_expander_set_use_underline().\n Since 2.4\n Returns: TRUE if an embedded underline in the expander label indicates the mnemonic accelerator keys.\n\t \n",
"line" : 334}
,
{
"name" : "setUseMarkup",
"kind" : "function",
"protection" : "public",
"type" : "void(int useMarkup)",
"comment" : "\n Sets whether the text of the label contains markup in Pango's text markup\n language. See gtk_label_set_markup().\n Since 2.4\n Params:\n useMarkup = TRUE if the label's text should be parsed for markup\n\t \n",
"line" : 347}
,
{
"name" : "getUseMarkup",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the label's text is interpreted as marked up with\n the Pango text markup\n language. See gtk_expander_set_use_markup().\n Since 2.4\n Returns: TRUE if the label's text will be parsed for markup\n\t \n",
"line" : 360}
,
{
"name" : "setLabelWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget labelWidget)",
"comment" : "\n Set the label widget for the expander. This is the widget\n that will appear embedded alongside the expander arrow.\n Since 2.4\n Params:\n labelWidget = the new label widget. [allow-none]\n\t \n",
"line" : 373}
,
{
"name" : "getLabelWidget",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Retrieves the label widget for the frame. See\n gtk_expander_set_label_widget().\n Since 2.4\n Returns: the label widget, or NULL if there is none. [transfer none]\n\t \n",
"line" : 385}
,
{
"name" : "setLabelFill",
"kind" : "function",
"protection" : "public",
"type" : "void(int labelFill)",
"comment" : "\n Sets whether the label widget should fill all available horizontal space\n allocated to expander.\n Since 2.22\n Params:\n labelFill = TRUE if the label should should fill all available horizontal\n space\n\t \n",
"line" : 404}
,
{
"name" : "getLabelFill",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the label widget will fill all available horizontal\n space allocated to expander.\n Since 2.22\n Returns: TRUE if the label widget will fill all available horizontal space\n\t \n",
"line" : 416}
]
}
]
}
,
{
"name" : "gtk.FileChooserButton",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/FileChooserButton.d",
"members" : [
{
"name" : "FileChooserButton",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkFileChooserButton is a widget that lets the user select a\n file. It implements the GtkFileChooser interface. Visually, it is a\n file name with a button to bring up a GtkFileChooserDialog.\n The user can then use that dialog to change the file associated with\n that button. This widget does not support setting the \"select-multiple\"\n property to TRUE.\n $(DDOC_COMMENT example)\n The GtkFileChooserButton supports the GtkFileChooserActions GTK_FILE_CHOOSER_ACTION_OPEN and GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER.\n Important\n The GtkFileChooserButton will ellipsize the label,\n and thus will thus request little horizontal space. To give the button\n more space, you should call gtk_widget_size_request(),\n gtk_file_chooser_button_set_width_chars(), or pack the button in\n such a way that other interface elements give space to the widget.\n \n",
"line" : 95,
"base" : "HBox",
"interfaces" : [
"FileChooserIF"],
"members" : [
{
"name" : "gtkFileChooserButton",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkFileChooserButton*",
"comment" : " the main Gtk struct \n",
"line" : 99}
,
{
"name" : "getFileChooserButtonStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkFileChooserButton*()",
"line" : 102}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 109}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "FileChooserButton(GtkFileChooserButton* gtkFileChooserButton)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 117}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 135}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 146}
,
{
"name" : "onFileSetListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(FileChooserButton)[]",
"line" : 148}
,
{
"name" : "addOnFileSet",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(FileChooserButton) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::file-set signal is emitted when the user selects a file.\n Note that this signal is only emitted when the user\n changes the file.\n Since 2.12\n See Also\n GtkFileChooserDialog\n\t \n",
"line" : 157}
,
{
"name" : "callBackFileSet",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkFileChooserButton* widgetStruct, FileChooserButton fileChooserButton)",
"line" : 172}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "FileChooserButton(string title, GtkFileChooserAction action)",
"comment" : "\n Creates a new file-selecting button widget.\n Since 2.6\n Params:\n title = the title of the browse dialog.\n action = the open mode for the widget.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 189}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "FileChooserButton(string title, GtkFileChooserAction action, string backend)",
"comment" : "\n Warning\n gtk_file_chooser_button_new_with_backend has been deprecated since version 2.14 and should not be used in newly-written code. Use gtk_file_chooser_button_new() instead.\n Creates a new file-selecting button widget using backend.\n Since 2.6\n Params:\n title = the title of the browse dialog.\n action = the open mode for the widget.\n backend = the name of the GtkFileSystem backend to use.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 211}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "FileChooserButton(Widget dialog)",
"comment" : "\n Creates a GtkFileChooserButton widget which uses dialog as its\n file-picking window.\n Note that dialog must be a GtkDialog (or subclass) which\n implements the GtkFileChooser interface and must not have\n GTK_DIALOG_DESTROY_WITH_PARENT set.\n Also note that the dialog needs to have its confirmative button\n added with response GTK_RESPONSE_ACCEPT or GTK_RESPONSE_OK in\n order for the button to take over the file selected in the dialog.\n Since 2.6\n Params:\n dialog = the widget to use as dialog\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 236}
,
{
"name" : "getTitle",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Retrieves the title of the browse dialog used by button. The returned value\n should not be modified or freed.\n Since 2.6\n Returns: a pointer to the browse dialog's title.\n\t \n",
"line" : 253}
,
{
"name" : "setTitle",
"kind" : "function",
"protection" : "public",
"type" : "void(string title)",
"comment" : "\n Modifies the title of the browse dialog used by button.\n Since 2.6\n Params:\n title = the new browse dialog title.\n\t \n",
"line" : 265}
,
{
"name" : "getWidthChars",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Retrieves the width in characters of the button widget's entry and\/or label.\n Since 2.6\n Returns: an integer width (in characters) that the button will use to size itself.\n\t \n",
"line" : 276}
,
{
"name" : "setWidthChars",
"kind" : "function",
"protection" : "public",
"type" : "void(int nChars)",
"comment" : "\n Sets the width (in characters) that button will use to n_chars.\n Since 2.6\n Params:\n nChars = the new width, in characters.\n\t \n",
"line" : 288}
,
{
"name" : "getFocusOnClick",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the button grabs focus when it is clicked with the mouse.\n See gtk_file_chooser_button_set_focus_on_click().\n Since 2.10\n Returns: TRUE if the button grabs focus when it is clicked with the mouse.\n\t \n",
"line" : 300}
,
{
"name" : "setFocusOnClick",
"kind" : "function",
"protection" : "public",
"type" : "void(int focusOnClick)",
"comment" : "\n Sets whether the button will grab focus when it is clicked with the mouse.\n Making mouse clicks not grab focus is useful in places like toolbars where\n you don't want the keyboard focus removed from the main area of the\n application.\n Since 2.10\n Params:\n focusOnClick = whether the button grabs focus when clicked with the mouse\n\t \n",
"line" : 315}
]
}
]
}
,
{
"name" : "gtk.FileChooserDialog",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/FileChooserDialog.d",
"members" : [
{
"name" : "FileChooserDialog",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n  GtkFileChooserDialog is a dialog box suitable for use with\n  \"File\/Open\" or \"File\/Save as\" commands. This widget works by\n  putting a GtkFileChooserWidget inside a GtkDialog. It exposes\n  the GtkFileChooserIface interface, so you can use all of the\n  GtkFileChooser functions on the file chooser dialog as well as\n  those for GtkDialog.\n  Note that GtkFileChooserDialog does not have any methods of its\n  own. Instead, you should use the functions that work on a\n  GtkFileChooser.\n $(DDOC_COMMENT example)\n Response Codes\n  GtkFileChooserDialog inherits from GtkDialog, so buttons that\n  go in its action area have response codes such as\n  GTK_RESPONSE_ACCEPT and GTK_RESPONSE_CANCEL. For example, you\n  could call gtk_file_chooser_dialog_new() as follows:\n GtkWidget *dialog;\n dialog = gtk_file_chooser_dialog_new (\"Open File\",\n \t\t\t\t parent_window,\n \t\t\t\t GTK_FILE_CHOOSER_ACTION_OPEN,\n \t\t\t\t GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,\n \t\t\t\t GTK_STOCK_OPEN, GTK_RESPONSE_ACCEPT,\n \t\t\t\t NULL);\n  This will create buttons for \"Cancel\" and \"Open\" that use stock\n  response identifiers from GtkResponseType. For most dialog\n  boxes you can use your own custom response codes rather than the\n  ones in GtkResponseType, but GtkFileChooserDialog assumes that\n  its \"accept\"-type action, e.g. an \"Open\" or \"Save\" button,\n  will have one of the following response\n  codes:\n GTK_RESPONSE_ACCEPT\n GTK_RESPONSE_OK\n GTK_RESPONSE_YES\n GTK_RESPONSE_APPLY\n  This is because GtkFileChooserDialog must intercept responses\n  and switch to folders if appropriate, rather than letting the\n  dialog terminate — the implementation uses these known\n  response codes to know which responses can be blocked if\n  appropriate.\n Note\n \tTo summarize, make sure you use a stock response\n \tcode when you use GtkFileChooserDialog to ensure\n \tproper operation.\n \n",
"line" : 122,
"base" : "Dialog",
"interfaces" : [
"FileChooserIF"],
"members" : [
{
"name" : "gtkFileChooserDialog",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkFileChooserDialog*",
"comment" : " the main Gtk struct \n",
"line" : 126}
,
{
"name" : "getFileChooserDialogStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkFileChooserDialog*()",
"line" : 129}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 136}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "FileChooserDialog(GtkFileChooserDialog* gtkFileChooserDialog)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 144}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 162}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "FileChooserDialog(string title, Window parent, GtkFileChooserAction action, string[] buttonsText = null, GtkResponseType[] responses = null)",
"comment" : "\n Creates a new GtkFileChooserDialog. This function is analogous to\n gtk_dialog_new_with_buttons().\n Since 2.4\n Params:\n  title = Title of the dialog, or NULL\n  parent = Transient parent of the dialog, or NULL\n  action = Open or save mode for the dialog\n  buttonsText = text to go in the buttons\n  responses = response ID's for the buttons\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 183}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "FileChooserDialog(string title, Window parent, GtkFileChooserAction action, string backend, string[] buttonsText = null, GtkResponseType[] responses = null)",
"comment" : "\n Creates a new GtkFileChooserDialog with a specified backend. This is\n especially useful if you use gtk_file_chooser_set_local_only() to allow\n non-local files and you use a more expressive vfs, such as gnome-vfs,\n to load files.\n Since 2.4\n Params:\n  title = Title of the dialog, or NULL\n  parent = Transient parent of the dialog, or NULL\n  action = Open or save mode for the dialog\n  backend = The name of the specific filesystem backend to use.\n  buttonsText = text to go in the buttons\n  responses = response ID's for the buttons\n See_Also:\n  GtkFileChooser, GtkDialog\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 230}
]
}
]
}
,
{
"name" : "gtk.FileChooserIF",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/FileChooserIF.d",
"members" : [
{
"name" : "FileChooserIF",
"kind" : "interface",
"protection" : "public",
"comment" : "\n Description\n GtkFileChooser is an interface that can be implemented by file\n selection widgets. In GTK+, the main objects that implement this\n interface are GtkFileChooserWidget, GtkFileChooserDialog, and\n GtkFileChooserButton. You do not need to write an object that\n implements the GtkFileChooser interface unless you are trying to\n adapt an existing file selector to expose a standard programming\n interface.\n GtkFileChooser allows for shortcuts to various places in the filesystem.\n In the default implementation these are displayed in the left pane. It\n may be a bit confusing at first taht these shortcuts come from various\n sources and in various flavours, so lets explain the terminology here:\n Bookmarks\n  are created by the user, by dragging folders from the\n  right pane to the left pane, or by using the \"Add\". Bookmarks\n  can be renamed and deleted by the user.\n Shortcuts\n  can be provided by the application or by the underlying filesystem\n  abstraction (e.g. both the gnome-vfs and the Windows filesystems\n  provide \"Desktop\" shortcuts). Shortcuts cannot be modified by the\n  user.\n Volumes\n  are provided by the underlying filesystem abstraction. They are\n  the \"roots\" of the filesystem.\n File Names and Encodings\n When the user is finished selecting files in a\n GtkFileChooser, your program can get the selected names\n either as filenames or as URIs. For URIs, the normal escaping\n rules are applied if the URI contains non-ASCII characters.\n However, filenames are always returned in\n the character set specified by the\n G_FILENAME_ENCODING environment variable.\n Please see the Glib documentation for more details about this\n variable.\n Note\n  This means that while you can pass the result of\n  gtk_file_chooser_get_filename() to\n  open(2) or\n  fopen(3), you may not be able to\n  directly set it as the text of a GtkLabel widget unless you\n  convert it first to UTF-8, which all GTK+ widgets expect.\n  You should use g_filename_to_utf8() to convert filenames\n  into strings that can be passed to GTK+ widgets.\n <hr>\n Adding a Preview Widget\n You can add a custom preview widget to a file chooser and then\n get notification about when the preview needs to be updated.\n To install a preview widget, use\n gtk_file_chooser_set_preview_widget(). Then, connect to the\n \"update-preview\" signal to get notified when\n you need to update the contents of the preview.\n Your callback should use\n gtk_file_chooser_get_preview_filename() to see what needs\n previewing. Once you have generated the preview for the\n corresponding file, you must call\n gtk_file_chooser_set_preview_widget_active() with a boolean\n flag that indicates whether your callback could successfully\n generate a preview.\n $(DDOC_COMMENT example)\n <hr>\n Adding Extra Widgets\n You can add extra widgets to a file chooser to provide options\n that are not present in the default design. For example, you\n can add a toggle button to give the user the option to open a\n file in read-only mode. You can use\n gtk_file_chooser_set_extra_widget() to insert additional\n widgets in a file chooser.\n $(DDOC_COMMENT example)\n Note\n  If you want to set more than one extra widget in the file\n  chooser, you can a container such as a GtkVBox or a GtkTable\n  and include your widgets in it. Then, set the container as\n  the whole extra widget.\n <hr>\n Key Bindings\n Internally, GTK+ implements a file chooser's graphical user\n interface with the private\n GtkFileChooserDefaultClass. This\n widget has several key\n bindings and their associated signals. This section\n describes the available key binding signals.\n $(DDOC_COMMENT example)\n You can change these defaults to something else. For\n example, to add a Shift modifier to a few\n of the default bindings, you can include the following\n fragment in your .gtkrc-2.0 file:\n binding \"my-own-gtkfilechooser-bindings\" {\n \tbind \"<Alt><Shift>Up\" {\n \t\t\"up-folder\" ()\n \t}\n \tbind \"<Alt><Shift>Down\" {\n \t\t\"down-folder\" ()\n \t}\n \tbind \"<Alt><Shift>Home\" {\n \t\t\"home-folder\" ()\n \t}\n }\n class \"GtkFileChooserDefault\" binding \"my-own-gtkfilechooser-bindings\"\n The \"GtkFileChooserDefault::location-popup\" signal\n  void user_function (GtkFileChooserDefault *chooser,\n  const char *path,\n gpointer user_data);\n This is used to make the file chooser show a \"Location\"\n dialog which the user can use to manually type the name of\n the file he wishes to select. The\n path argument is a string that gets\n put in the text entry for the file name. By default this is bound to\n Control+L\n with a path string of \"\" (the empty\n string). It is also bound to \/ with a\n path string of \"\/\"\n (a slash): this lets you type \/ and\n immediately type a path name. On Unix systems, this is bound to\n ~ (tilde) with a path string\n of \"~\" itself for access to home directories.\n chooser :\n \t\tthe object which received the signal.\n path :\n \t\tdefault contents for the text entry for the file name\n user_data :\n \t\tuser data set when the signal handler was connected.\n Note\n  You can create your own bindings for the\n  GtkFileChooserDefault::location-popup signal with custom\n  path strings, and have a crude form\n  of easily-to-type bookmarks. For example, say you access\n  the path \/home\/username\/misc very\n  frequently. You could then create an Alt+M\n  shortcut by including the following in your\n  .gtkrc-2.0:\n   binding \"misc-shortcut\" {\n  bind \"<Alt>M\" {\n  \"location-popup\" (\"\/home\/username\/misc\")\n \t }\n  }\n  class \"GtkFileChooserDefault\" binding \"misc-shortcut\"\n The \"GtkFileChooserDefault::up-folder\" signal\n  void user_function (GtkFileChooserDefault *chooser,\n  gpointer user_data);\n This is used to make the file chooser go to the parent of\n the current folder in the file hierarchy. By default this\n is bound to Backspace and\n Alt+Up\n (the Up key in the numeric keypad also works).\n chooser :\n \t\tthe object which received the signal.\n user_data :\n \t\tuser data set when the signal handler was connected.\n The \"GtkFileChooserDefault::down-folder\" signal\n  void user_function (GtkFileChooserDefault *chooser,\n  gpointer user_data);\n This is used to make the file chooser go to a child of the\n current folder in the file hierarchy. The subfolder that\n will be used is displayed in the path bar widget of the file\n chooser. For example, if the path bar is showing\n \"\/foo\/bar\/baz\", then this will cause\n the file chooser to switch to the \"baz\" subfolder. By\n default this is bound to\n Alt+Down\n (the Down key in the numeric keypad also works).\n chooser :\n \t\tthe object which received the signal.\n user_data :\n \t\tuser data set when the signal handler was connected.\n The \"GtkFileChooserDefault::home-folder\" signal\n  void user_function (GtkFileChooserDefault *chooser,\n  gpointer user_data);\n This is used to make the file chooser show the user's home\n folder in the file list. By default this is bound to\n Alt+Home\n (the Home key in the numeric keypad also works).\n chooser :\n \t\tthe object which received the signal.\n user_data :\n \t\tuser data set when the signal handler was connected.\n The \"GtkFileChooserDefault::desktop-folder\" signal\n  void user_function (GtkFileChooserDefault *chooser,\n  gpointer user_data);\n This is used to make the file chooser show the user's Desktop\n folder in the file list. By default this is bound to\n Alt+D.\n chooser :\n \t\tthe object which received the signal.\n user_data :\n \t\tuser data set when the signal handler was connected.\n The \"GtkFileChooserDefault::quick-bookmark\" signal\n  void user_function (GtkFileChooserDefault *chooser,\n  gint bookmark_index,\n  gpointer user_data);\n This is used to make the file chooser switch to the bookmark\n specified in the bookmark_index parameter.\n For example, if you have three bookmarks, you can pass 0, 1, 2 to\n this signal to switch to each of them, respectively. By default this is bound to\n Alt+1,\n Alt+2,\n etc. until\n Alt+0. Note\n that in the default binding,\n that Alt+1 is\n actually defined to switch to the bookmark at index 0, and so on\n successively;\n Alt+0 is\n defined to switch to the bookmark at index 10.\n chooser :\n \t\tthe object which received the signal.\n bookmark_indes :\n \t\tindex of the bookmark to switch to; the indices start at 0.\n user_data :\n \t\tuser data set when the signal handler was connected.\n \n",
"line" : 302,
"members" : [
{
"name" : "getFileChooserTStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkFileChooser*()",
"line" : 305}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 308}
,
{
"name" : "onConfirmOverwriteListeners",
"kind" : "function",
"protection" : "public",
"type" : "GtkFileChooserConfirmation delegate(FileChooserIF)[]()",
"comment" : "\n\t \n",
"line" : 314}
,
{
"name" : "addOnConfirmOverwrite",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkFileChooserConfirmation delegate(FileChooserIF) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal gets emitted whenever it is appropriate to present a\n confirmation dialog when the user has selected a file name that\n already exists. The signal only gets emitted when the file\n chooser is in GTK_FILE_CHOOSER_ACTION_SAVE mode.\n Most applications just need to turn on the\n \"do-overwrite-confirmation\" property (or call the\n gtk_file_chooser_set_do_overwrite_confirmation() function), and\n they will automatically get a stock confirmation dialog.\n Applications which need to customize this behavior should do\n that, and also connect to the \"confirm-overwrite\"\n signal.\n A signal handler for this signal must return a\n GtkFileChooserConfirmation value, which indicates the action to\n take. If the handler determines that the user wants to select a\n different filename, it should return\n GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN. If it determines\n that the user is satisfied with his choice of file name, it\n should return GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME.\n On the other hand, if it determines that the stock confirmation\n dialog should be used, it should return\n GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM. The following example\n illustrates this.\n $(DDOC_COMMENT example)\n\n Since 2.8\n\t \n",
"line" : 342}
,
{
"name" : "onCurrentFolderChangedListeners",
"kind" : "function",
"protection" : "public",
"type" : "void delegate(FileChooserIF)[]()",
"line" : 343}
,
{
"name" : "addOnCurrentFolderChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(FileChooserIF) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted when the current folder in a GtkFileChooser\n changes. This can happen due to the user performing some action that\n changes folders, such as selecting a bookmark or visiting a folder on the\n file list. It can also happen as a result of calling a function to\n explicitly change the current folder in a file chooser.\n Normally you do not need to connect to this signal, unless you need to keep\n track of which folder a file chooser is showing.\n See also: gtk_file_chooser_set_current_folder(),\n gtk_file_chooser_get_current_folder(),\n gtk_file_chooser_set_current_folder_uri(),\n gtk_file_chooser_get_current_folder_uri().\n\t \n",
"line" : 357}
,
{
"name" : "onFileActivatedListeners",
"kind" : "function",
"protection" : "public",
"type" : "void delegate(FileChooserIF)[]()",
"line" : 358}
,
{
"name" : "addOnFileActivated",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(FileChooserIF) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted when the user \"activates\" a file in the file\n chooser. This can happen by double-clicking on a file in the file list, or\n by pressing Enter.\n Normally you do not need to connect to this signal. It is used internally\n by GtkFileChooserDialog to know when to activate the default button in the\n dialog.\n See also: gtk_file_chooser_get_filename(),\n gtk_file_chooser_get_filenames(), gtk_file_chooser_get_uri(),\n gtk_file_chooser_get_uris().\n\t \n",
"line" : 370}
,
{
"name" : "onSelectionChangedListeners",
"kind" : "function",
"protection" : "public",
"type" : "void delegate(FileChooserIF)[]()",
"line" : 371}
,
{
"name" : "addOnSelectionChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(FileChooserIF) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted when there is a change in the set of selected files\n in a GtkFileChooser. This can happen when the user modifies the selection\n with the mouse or the keyboard, or when explicitly calling functions to\n change the selection.\n Normally you do not need to connect to this signal, as it is easier to wait\n for the file chooser to finish running, and then to get the list of\n selected files using the functions mentioned below.\n See also: gtk_file_chooser_select_filename(),\n gtk_file_chooser_unselect_filename(), gtk_file_chooser_get_filename(),\n gtk_file_chooser_get_filenames(), gtk_file_chooser_select_uri(),\n gtk_file_chooser_unselect_uri(), gtk_file_chooser_get_uri(),\n gtk_file_chooser_get_uris().\n\t \n",
"line" : 386}
,
{
"name" : "onUpdatePreviewListeners",
"kind" : "function",
"protection" : "public",
"type" : "void delegate(FileChooserIF)[]()",
"line" : 387}
,
{
"name" : "addOnUpdatePreview",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(FileChooserIF) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted when the preview in a file chooser should be\n regenerated. For example, this can happen when the currently selected file\n changes. You should use this signal if you want your file chooser to have\n a preview widget.\n Once you have installed a preview widget with\n gtk_file_chooser_set_preview_widget(), you should update it when this\n signal is emitted. You can use the functions\n gtk_file_chooser_get_preview_filename() or\n gtk_file_chooser_get_preview_uri() to get the name of the file to preview.\n Your widget may not be able to preview all kinds of files; your callback\n must call gtk_file_chooser_set_preview_widget_active() to inform the file\n chooser about whether the preview was generated successfully or not.\n Please see the example code in the section called “Adding a Preview Widget”.\n See also: gtk_file_chooser_set_preview_widget(),\n gtk_file_chooser_set_preview_widget_active(),\n gtk_file_chooser_set_use_preview_label(),\n gtk_file_chooser_get_preview_filename(),\n gtk_file_chooser_get_preview_uri().\n See Also\n GtkFileChooserDialog, GtkFileChooserWidget, GtkFileChooserButton\n\t \n",
"line" : 410}
,
{
"name" : "setFileChooserAction",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkFileChooserAction action)",
"comment" : "\n Sets the type of operation that the chooser is performing; the\n user interface is adapted to suit the selected action. For example,\n an option to create a new folder might be shown if the action is\n GTK_FILE_CHOOSER_ACTION_SAVE but not if the action is\n GTK_FILE_CHOOSER_ACTION_OPEN.\n Since 2.4\n Params:\n action = the action that the file selector is performing\n\t \n",
"line" : 422}
,
{
"name" : "getFileChooserAction",
"kind" : "function",
"protection" : "public",
"type" : "GtkFileChooserAction()",
"comment" : "\n Gets the type of operation that the file chooser is performing; see\n gtk_file_chooser_set_action().\n Since 2.4\n Returns: the action that the file selector is performing\n\t \n",
"line" : 430}
,
{
"name" : "setLocalOnly",
"kind" : "function",
"protection" : "public",
"type" : "void(int localOnly)",
"comment" : "\n Sets whether only local files can be selected in the\n file selector. If local_only is TRUE (the default),\n then the selected file are files are guaranteed to be\n accessible through the operating systems native file\n file system and therefore the application only\n needs to worry about the filename functions in\n GtkFileChooser, like gtk_file_chooser_get_filename(),\n rather than the URI functions like\n gtk_file_chooser_get_uri(),\n Since 2.4\n Params:\n localOnly = TRUE if only local files can be selected\n\t \n",
"line" : 446}
,
{
"name" : "getLocalOnly",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets whether only local files can be selected in the\n file selector. See gtk_file_chooser_set_local_only()\n Since 2.4\n Returns: TRUE if only local files can be selected.\n\t \n",
"line" : 454}
,
{
"name" : "setSelectMultiple",
"kind" : "function",
"protection" : "public",
"type" : "void(int selectMultiple)",
"comment" : "\n Sets whether multiple files can be selected in the file selector. This is\n only relevant if the action is set to be GTK_FILE_CHOOSER_ACTION_OPEN or\n GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER.\n Since 2.4\n Params:\n selectMultiple = TRUE if multiple files can be selected.\n\t \n",
"line" : 464}
,
{
"name" : "getSelectMultiple",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets whether multiple files can be selected in the file\n selector. See gtk_file_chooser_set_select_multiple().\n Since 2.4\n Returns: TRUE if multiple files can be selected.\n\t \n",
"line" : 472}
,
{
"name" : "setShowHidden",
"kind" : "function",
"protection" : "public",
"type" : "void(int showHidden)",
"comment" : "\n Sets whether hidden files and folders are displayed in the file selector.\n Since 2.6\n Params:\n showHidden = TRUE if hidden files and folders should be displayed.\n\t \n",
"line" : 480}
,
{
"name" : "getShowHidden",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets whether hidden files and folders are displayed in the file selector.\n See gtk_file_chooser_set_show_hidden().\n Since 2.6\n Returns: TRUE if hidden files and folders are displayed.\n\t \n",
"line" : 488}
,
{
"name" : "setDoOverwriteConfirmation",
"kind" : "function",
"protection" : "public",
"type" : "void(int doOverwriteConfirmation)",
"comment" : "\n Sets whether a file chooser in GTK_FILE_CHOOSER_ACTION_SAVE mode will present\n a confirmation dialog if the user types a file name that already exists. This\n is FALSE by default.\n Regardless of this setting, the chooser will emit the\n \"confirm-overwrite\" signal when appropriate.\n If all you need is the stock confirmation dialog, set this property to TRUE.\n You can override the way confirmation is done by actually handling the\n \"confirm-overwrite\" signal; please refer to its documentation\n for the details.\n Since 2.8\n Params:\n doOverwriteConfirmation = whether to confirm overwriting in save mode\n\t \n",
"line" : 504}
,
{
"name" : "getDoOverwriteConfirmation",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Queries whether a file chooser is set to confirm for overwriting when the user\n types a file name that already exists.\n Since 2.8\n Returns: TRUE if the file chooser will present a confirmation dialog; FALSE otherwise.\n\t \n",
"line" : 512}
,
{
"name" : "setCreateFolders",
"kind" : "function",
"protection" : "public",
"type" : "void(int createFolders)",
"comment" : "\n Sets whether file choser will offer to create new folders.\n This is only relevant if the action is not set to be\n GTK_FILE_CHOOSER_ACTION_OPEN.\n Since 2.18\n Params:\n createFolders = TRUE if the New Folder button should be displayed\n\t \n",
"line" : 522}
,
{
"name" : "getCreateFolders",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets whether file choser will offer to create new folders.\n See gtk_file_chooser_set_create_folders().\n Since 2.18\n Returns: TRUE if the New Folder button should be displayed.\n\t \n",
"line" : 530}
,
{
"name" : "setCurrentName",
"kind" : "function",
"protection" : "public",
"type" : "void(string name)",
"comment" : "\n Sets the current name in the file selector, as if entered\n by the user. Note that the name passed in here is a UTF-8\n string rather than a filename. This function is meant for\n such uses as a suggested name in a \"Save As...\" dialog.\n If you want to preselect a particular existing file, you should use\n gtk_file_chooser_set_filename() or gtk_file_chooser_set_uri() instead.\n Please see the documentation for those functions for an example of using\n gtk_file_chooser_set_current_name() as well.\n Since 2.4\n Params:\n name = the filename to use, as a UTF-8 string\n\t \n",
"line" : 545}
,
{
"name" : "getFilename",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the filename for the currently selected file in\n the file selector. If multiple files are selected,\n one of the filenames will be returned at random.\n If the file chooser is in folder mode, this function returns the selected\n folder.\n Since 2.4\n Returns: The currently selected filename, or NULL if no file is selected, or the selected file can't be represented with a local filename. Free with g_free().\n\t \n",
"line" : 556}
,
{
"name" : "setFilename",
"kind" : "function",
"protection" : "public",
"type" : "int(string filename)",
"comment" : "\n Sets filename as the current filename for the file chooser, by changing\n to the file's parent folder and actually selecting the file in list. If\n the chooser is in GTK_FILE_CHOOSER_ACTION_SAVE mode, the file's base name\n will also appear in the dialog's file name entry.\n If the file name isn't in the current folder of chooser, then the current\n folder of chooser will be changed to the folder containing filename. This\n is equivalent to a sequence of gtk_file_chooser_unselect_all() followed by\n gtk_file_chooser_select_filename().\n Note that the file must exist, or nothing will be done except\n for the directory change.\n If you are implementing a File\/Save As... dialog,\n you should use this function if you already have a file name to which the\n user may save; for example, when the user opens an existing file and then\n does File\/Save As... on it. If you don't have\n a file name already — for example, if the user just created a new\n file and is saving it for the first time, do not call this function.\n Since 2.4\n Params:\n filename = the filename to set as current\n Returns: TRUE if both the folder could be changed and the file was selected successfully, FALSE otherwise.\n\t \n",
"line" : 580}
,
{
"name" : "selectFilename",
"kind" : "function",
"protection" : "public",
"type" : "int(string filename)",
"comment" : "\n Selects a filename. If the file name isn't in the current\n folder of chooser, then the current folder of chooser will\n be changed to the folder containing filename.\n Since 2.4\n Params:\n filename = the filename to select\n Returns: TRUE if both the folder could be changed and the file was selected successfully, FALSE otherwise.\n\t \n",
"line" : 591}
,
{
"name" : "unselectFilename",
"kind" : "function",
"protection" : "public",
"type" : "void(string filename)",
"comment" : "\n Unselects a currently selected filename. If the filename\n is not in the current directory, does not exist, or\n is otherwise not currently selected, does nothing.\n Since 2.4\n Params:\n filename = the filename to unselect\n\t \n",
"line" : 601}
,
{
"name" : "selectAll",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Selects all the files in the current folder of a file chooser.\n Since 2.4\n\t \n",
"line" : 607}
,
{
"name" : "unselectAll",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Unselects all the files in the current folder of a file chooser.\n Since 2.4\n\t \n",
"line" : 613}
,
{
"name" : "getFilenames",
"kind" : "function",
"protection" : "public",
"type" : "ListSG()",
"comment" : "\n Lists all the selected files and subfolders in the current folder of\n chooser. The returned names are full absolute paths. If files in the current\n folder cannot be represented as local filenames they will be ignored. (See\n gtk_file_chooser_get_uris())\n Since 2.4\n Returns: a GSList containing the filenames of all selected files and subfolders in the current folder. Free the returned list with g_slist_free(), and the filenames with g_free(). [element-type utf8][transfer full utf8]\n\t \n",
"line" : 623}
,
{
"name" : "setCurrentFolder",
"kind" : "function",
"protection" : "public",
"type" : "int(string filename)",
"comment" : "\n Sets the current folder for chooser from a local filename.\n The user will be shown the full contents of the current folder,\n plus user interface elements for navigating to other folders.\n Since 2.4\n Params:\n filename = the full path of the new current folder\n Returns: TRUE if the folder could be changed successfully, FALSE otherwise.\n\t \n",
"line" : 634}
,
{
"name" : "getCurrentFolder",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the current folder of chooser as a local filename.\n See gtk_file_chooser_set_current_folder().\n Note that this is the folder that the file chooser is currently displaying\n (e.g. \"\/home\/username\/Documents\"), which is not the same\n as the currently-selected folder if the chooser is in\n GTK_FILE_CHOOSER_SELECT_FOLDER mode\n (e.g. \"\/home\/username\/Documents\/selected-folder\/\". To get the\n currently-selected folder in that mode, use gtk_file_chooser_get_uri() as the\n usual way to get the selection.\n Since 2.4\n Returns: the full path of the current folder, or NULL if the current path cannot be represented as a local filename. Free with g_free(). This function will also return NULL if the file chooser was unable to load the last folder that was requested from it; for example, as would be for calling gtk_file_chooser_set_current_folder() on a nonexistent folder.\n\t \n",
"line" : 649}
,
{
"name" : "getUri",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the URI for the currently selected file in\n the file selector. If multiple files are selected,\n one of the filenames will be returned at random.\n If the file chooser is in folder mode, this function returns the selected\n folder.\n Since 2.4\n Returns: The currently selected URI, or NULL if no file is selected. Free with g_free()\n\t \n",
"line" : 660}
,
{
"name" : "setUri",
"kind" : "function",
"protection" : "public",
"type" : "int(string uri)",
"comment" : "\n Sets the file referred to by uri as the current file for the file chooser,\n by changing to the URI's parent folder and actually selecting the URI in the\n list. If the chooser is GTK_FILE_CHOOSER_ACTION_SAVE mode, the URI's base\n name will also appear in the dialog's file name entry.\n If the URI isn't in the current folder of chooser, then the current folder\n of chooser will be changed to the folder containing uri. This is equivalent\n to a sequence of gtk_file_chooser_unselect_all() followed by\n gtk_file_chooser_select_uri().\n Note that the URI must exist, or nothing will be done except for the\n directory change.\n If you are implementing a File\/Save As... dialog,\n you should use this function if you already have a file name to which the\n user may save; for example, when the user opens an existing file and then\n does File\/Save As... on it. If you don't have\n a file name already — for example, if the user just created a new\n file and is saving it for the first time, do not call this function.\n Since 2.4\n Params:\n uri = the URI to set as current\n Returns: TRUE if both the folder could be changed and the URI was selected successfully, FALSE otherwise.\n\t \n",
"line" : 684}
,
{
"name" : "selectUri",
"kind" : "function",
"protection" : "public",
"type" : "int(string uri)",
"comment" : "\n Selects the file to by uri. If the URI doesn't refer to a\n file in the current folder of chooser, then the current folder of\n chooser will be changed to the folder containing filename.\n Since 2.4\n Params:\n uri = the URI to select\n Returns: TRUE if both the folder could be changed and the URI was selected successfully, FALSE otherwise.\n\t \n",
"line" : 695}
,
{
"name" : "unselectUri",
"kind" : "function",
"protection" : "public",
"type" : "void(string uri)",
"comment" : "\n Unselects the file referred to by uri. If the file\n is not in the current directory, does not exist, or\n is otherwise not currently selected, does nothing.\n Since 2.4\n Params:\n uri = the URI to unselect\n\t \n",
"line" : 705}
,
{
"name" : "getUris",
"kind" : "function",
"protection" : "public",
"type" : "ListSG()",
"comment" : "\n Lists all the selected files and subfolders in the current folder of\n chooser. The returned names are full absolute URIs.\n Since 2.4\n Returns: a GSList containing the URIs of all selected files and subfolders in the current folder. Free the returned list with g_slist_free(), and the filenames with g_free(). [element-type utf8][transfer full utf8]\n\t \n",
"line" : 713}
,
{
"name" : "setCurrentFolderUri",
"kind" : "function",
"protection" : "public",
"type" : "int(string uri)",
"comment" : "\n Sets the current folder for chooser from an URI.\n The user will be shown the full contents of the current folder,\n plus user interface elements for navigating to other folders.\n Since 2.4\n Params:\n uri = the URI for the new current folder\n Returns: TRUE if the folder could be changed successfully, FALSE otherwise.\n\t \n",
"line" : 724}
,
{
"name" : "getCurrentFolderUri",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the current folder of chooser as an URI.\n See gtk_file_chooser_set_current_folder_uri().\n Note that this is the folder that the file chooser is currently displaying\n (e.g. \"file:\/\/\/home\/username\/Documents\"), which is not the same\n as the currently-selected folder if the chooser is in\n GTK_FILE_CHOOSER_SELECT_FOLDER mode\n (e.g. \"file:\/\/\/home\/username\/Documents\/selected-folder\/\". To get the\n currently-selected folder in that mode, use gtk_file_chooser_get_uri() as the\n usual way to get the selection.\n Since 2.4\n Returns: the URI for the current folder. Free with g_free(). This function will also return NULL if the file chooser was unable to load the last folder that was requested from it; for example, as would be for calling gtk_file_chooser_set_current_folder_uri() on a nonexistent folder.\n\t \n",
"line" : 739}
,
{
"name" : "setPreviewWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget previewWidget)",
"comment" : "\n Sets an application-supplied widget to use to display a custom preview\n of the currently selected file. To implement a preview, after setting the\n preview widget, you connect to the \"update-preview\"\n signal, and call gtk_file_chooser_get_preview_filename() or\n gtk_file_chooser_get_preview_uri() on each change. If you can\n display a preview of the new file, update your widget and\n set the preview active using gtk_file_chooser_set_preview_widget_active().\n Otherwise, set the preview inactive.\n When there is no application-supplied preview widget, or the\n application-supplied preview widget is not active, the file chooser\n may display an internally generated preview of the current file or\n it may display no preview at all.\n Since 2.4\n Params:\n previewWidget = widget for displaying preview.\n\t \n",
"line" : 758}
,
{
"name" : "getPreviewWidget",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Gets the current preview widget; see\n gtk_file_chooser_set_preview_widget().\n Since 2.4\n Returns: the current preview widget, or NULL\n\t \n",
"line" : 766}
,
{
"name" : "setPreviewWidgetActive",
"kind" : "function",
"protection" : "public",
"type" : "void(int active)",
"comment" : "\n Sets whether the preview widget set by\n gtk_file_chooser_set_preview_widget() should be shown for the\n current filename. When active is set to false, the file chooser\n may display an internally generated preview of the current file\n or it may display no preview at all. See\n gtk_file_chooser_set_preview_widget() for more details.\n Since 2.4\n Params:\n active = whether to display the user-specified preview widget\n\t \n",
"line" : 779}
,
{
"name" : "getPreviewWidgetActive",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets whether the preview widget set by gtk_file_chooser_set_preview_widget()\n should be shown for the current filename. See\n gtk_file_chooser_set_preview_widget_active().\n Since 2.4\n Returns: TRUE if the preview widget is active for the current filename.\n\t \n",
"line" : 788}
,
{
"name" : "setUsePreviewLabel",
"kind" : "function",
"protection" : "public",
"type" : "void(int useLabel)",
"comment" : "\n Sets whether the file chooser should display a stock label with the name of\n the file that is being previewed; the default is TRUE. Applications that\n want to draw the whole preview area themselves should set this to FALSE and\n display the name themselves in their preview widget.\n See also: gtk_file_chooser_set_preview_widget()\n Since 2.4\n Params:\n useLabel = whether to display a stock label with the name of the previewed file\n\t \n",
"line" : 800}
,
{
"name" : "getUsePreviewLabel",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets whether a stock label should be drawn with the name of the previewed\n file. See gtk_file_chooser_set_use_preview_label().\n Returns: TRUE if the file chooser is set to display a label with the name of the previewed file, FALSE otherwise.\n\t \n",
"line" : 807}
,
{
"name" : "getPreviewFilename",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the filename that should be previewed in a custom preview\n widget. See gtk_file_chooser_set_preview_widget().\n Since 2.4\n Returns: the filename to preview, or NULL if no file is selected, or if the selected file cannot be represented as a local filename. Free with g_free()\n\t \n",
"line" : 815}
,
{
"name" : "getPreviewUri",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the URI that should be previewed in a custom preview\n widget. See gtk_file_chooser_set_preview_widget().\n Since 2.4\n Returns: the URI for the file to preview, or NULL if no file is selected. Free with g_free().\n\t \n",
"line" : 823}
,
{
"name" : "setExtraWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget extraWidget)",
"comment" : "\n Sets an application-supplied widget to provide extra options to the user.\n Since 2.4\n Params:\n extraWidget = widget for extra options\n\t \n",
"line" : 831}
,
{
"name" : "getExtraWidget",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Gets the current preview widget; see\n gtk_file_chooser_set_extra_widget().\n Since 2.4\n Returns: the current extra widget, or NULL\n\t \n",
"line" : 839}
,
{
"name" : "addFilter",
"kind" : "function",
"protection" : "public",
"type" : "void(FileFilter filter)",
"comment" : "\n Adds filter to the list of filters that the user can select between.\n When a filter is selected, only files that are passed by that\n filter are displayed.\n Note that the chooser takes ownership of the filter, so you have to\n ref and sink it if you want to keep a reference.\n Since 2.4\n Params:\n filter = a GtkFileFilter\n\t \n",
"line" : 851}
,
{
"name" : "removeFilter",
"kind" : "function",
"protection" : "public",
"type" : "void(FileFilter filter)",
"comment" : "\n Removes filter from the list of filters that the user can select between.\n Since 2.4\n Params:\n filter = a GtkFileFilter\n\t \n",
"line" : 859}
,
{
"name" : "listFilters",
"kind" : "function",
"protection" : "public",
"type" : "ListSG()",
"comment" : "\n Lists the current set of user-selectable filters; see\n gtk_file_chooser_add_filter(), gtk_file_chooser_remove_filter().\n Since 2.4\n Returns: a GSList containing the current set of user selectable filters. The contents of the list are owned by GTK+, but you must free the list itself with g_slist_free() when you are done with it. [element-type utf8][transfer container utf8]\n\t \n",
"line" : 867}
,
{
"name" : "setFilter",
"kind" : "function",
"protection" : "public",
"type" : "void(FileFilter filter)",
"comment" : "\n Sets the current filter; only the files that pass the\n filter will be displayed. If the user-selectable list of filters\n is non-empty, then the filter should be one of the filters\n in that list. Setting the current filter when the list of\n filters is empty is useful if you want to restrict the displayed\n set of files without letting the user change it.\n Since 2.4\n Params:\n filter = a GtkFileFilter\n\t \n",
"line" : 880}
,
{
"name" : "getFilter",
"kind" : "function",
"protection" : "public",
"type" : "FileFilter()",
"comment" : "\n Gets the current filter; see gtk_file_chooser_set_filter().\n Since 2.4\n Returns: the current filter, or NULL\n\t \n",
"line" : 887}
,
{
"name" : "addShortcutFolder",
"kind" : "function",
"protection" : "public",
"type" : "int(string folder)",
"comment" : "\n Adds a folder to be displayed with the shortcut folders in a file chooser.\n Note that shortcut folders do not get saved, as they are provided by the\n application. For example, you can use this to add a\n \"\/usr\/share\/mydrawprogram\/Clipart\" folder to the volume list.\n Since 2.4\n Params:\n folder = filename of the folder to add\n Returns: TRUE if the folder could be added successfully, FALSE otherwise. In the latter case, the error will be set as appropriate.\n Throws: GException on failure.\n\t \n",
"line" : 900}
,
{
"name" : "removeShortcutFolder",
"kind" : "function",
"protection" : "public",
"type" : "int(string folder)",
"comment" : "\n Removes a folder from a file chooser's list of shortcut folders.\n Since 2.4\n Params:\n folder = filename of the folder to remove\n Returns: TRUE if the operation succeeds, FALSE otherwise. In the latter case, the error will be set as appropriate. See also: gtk_file_chooser_add_shortcut_folder()\n Throws: GException on failure.\n\t \n",
"line" : 910}
,
{
"name" : "listShortcutFolders",
"kind" : "function",
"protection" : "public",
"type" : "ListSG()",
"comment" : "\n Queries the list of shortcut folders in the file chooser, as set by\n gtk_file_chooser_add_shortcut_folder().\n Since 2.4\n Returns: A list of folder filenames, or NULL if there are no shortcut folders. Free the returned list with g_slist_free(), and the filenames with g_free(). [element-type utf8][transfer full utf8]\n\t \n",
"line" : 918}
,
{
"name" : "addShortcutFolderUri",
"kind" : "function",
"protection" : "public",
"type" : "int(string uri)",
"comment" : "\n Adds a folder URI to be displayed with the shortcut folders in a file\n chooser. Note that shortcut folders do not get saved, as they are provided\n by the application. For example, you can use this to add a\n \"file:\/\/\/usr\/share\/mydrawprogram\/Clipart\" folder to the volume list.\n Since 2.4\n Params:\n uri = URI of the folder to add\n Returns: TRUE if the folder could be added successfully, FALSE otherwise. In the latter case, the error will be set as appropriate.\n Throws: GException on failure.\n\t \n",
"line" : 931}
,
{
"name" : "removeShortcutFolderUri",
"kind" : "function",
"protection" : "public",
"type" : "int(string uri)",
"comment" : "\n Removes a folder URI from a file chooser's list of shortcut folders.\n Since 2.4\n Params:\n uri = URI of the folder to remove\n Returns: TRUE if the operation succeeds, FALSE otherwise. In the latter case, the error will be set as appropriate. See also: gtk_file_chooser_add_shortcut_folder_uri()\n Throws: GException on failure.\n\t \n",
"line" : 941}
,
{
"name" : "listShortcutFolderUris",
"kind" : "function",
"protection" : "public",
"type" : "ListSG()",
"comment" : "\n Queries the list of shortcut folders in the file chooser, as set by\n gtk_file_chooser_add_shortcut_folder_uri().\n Since 2.4\n Returns: A list of folder URIs, or NULL if there are no shortcut folders. Free the returned list with g_slist_free(), and the URIs with g_free(). [element-type utf8][transfer full utf8]\n\t \n",
"line" : 949}
,
{
"name" : "getCurrentFolderFile",
"kind" : "function",
"protection" : "public",
"type" : "File()",
"comment" : "\n Gets the current folder of chooser as GFile.\n See gtk_file_chooser_get_current_folder_uri().\n Since 2.14\n Returns: the GFile for the current folder.\n\t \n",
"line" : 957}
,
{
"name" : "getFile",
"kind" : "function",
"protection" : "public",
"type" : "File()",
"comment" : "\n Gets the GFile for the currently selected file in\n the file selector. If multiple files are selected,\n one of the files will be returned at random.\n If the file chooser is in folder mode, this function returns the selected\n folder.\n Since 2.14\n Returns: a selected GFile. You own the returned file; use g_object_unref() to release it.\n\t \n",
"line" : 968}
,
{
"name" : "getFiles",
"kind" : "function",
"protection" : "public",
"type" : "ListSG()",
"comment" : "\n Lists all the selected files and subfolders in the current folder of chooser\n as GFile. An internal function, see gtk_file_chooser_get_uris().\n Since 2.14\n Returns: a GSList containing a GFile for each selected file and subfolder in the current folder. Free the returned list with g_slist_free(), and the files with g_object_unref(). [element-type utf8][transfer full utf8]\n\t \n",
"line" : 976}
,
{
"name" : "getPreviewFile",
"kind" : "function",
"protection" : "public",
"type" : "File()",
"comment" : "\n Gets the GFile that should be previewed in a custom preview\n Internal function, see gtk_file_chooser_get_preview_uri().\n Since 2.14\n Returns: the GFile for the file to preview, or NULL if no file is selected. Free with g_object_unref().\n\t \n",
"line" : 984}
,
{
"name" : "selectFile",
"kind" : "function",
"protection" : "public",
"type" : "int(File file)",
"comment" : "\n Selects the file referred to by file. An internal function. See\n _gtk_file_chooser_select_uri().\n Since 2.14\n Params:\n file = the file to select\n Returns: TRUE if both the folder could be changed and the path was selected successfully, FALSE otherwise.\n Throws: GException on failure.\n\t \n",
"line" : 995}
,
{
"name" : "setCurrentFolderFile",
"kind" : "function",
"protection" : "public",
"type" : "int(File file)",
"comment" : "\n Sets the current folder for chooser from a GFile.\n Internal function, see gtk_file_chooser_set_current_folder_uri().\n Since 2.14\n Params:\n file = the GFile for the new folder\n Returns: TRUE if the folder could be changed successfully, FALSE otherwise.\n Throws: GException on failure.\n\t \n",
"line" : 1006}
,
{
"name" : "setFile",
"kind" : "function",
"protection" : "public",
"type" : "int(File file)",
"comment" : "\n Sets file as the current filename for the file chooser, by changing\n to the file's parent folder and actually selecting the file in list. If\n the chooser is in GTK_FILE_CHOOSER_ACTION_SAVE mode, the file's base name\n will also appear in the dialog's file name entry.\n If the file name isn't in the current folder of chooser, then the current\n folder of chooser will be changed to the folder containing filename. This\n is equivalent to a sequence of gtk_file_chooser_unselect_all() followed by\n gtk_file_chooser_select_filename().\n Note that the file must exist, or nothing will be done except\n for the directory change.\n If you are implementing a File\/Save As... dialog,\n you should use this function if you already have a file name to which the\n user may save; for example, when the user opens an existing file and then\n does File\/Save As... on it. If you don't have\n a file name already — for example, if the user just created a new\n file and is saving it for the first time, do not call this function.\n Since 2.14\n Params:\n file = the GFile to set as current\n Returns: TRUE if both the folder could be changed and the file was selected successfully, FALSE otherwise.\n Throws: GException on failure.\n\t \n",
"line" : 1031}
,
{
"name" : "unselectFile",
"kind" : "function",
"protection" : "public",
"type" : "void(File file)",
"comment" : "\n Unselects the file referred to by file. If the file is not in the current\n directory, does not exist, or is otherwise not currently selected, does nothing.\n Since 2.14\n Params:\n file = a GFile\n\t \n",
"line" : 1040}
]
}
]
}
,
{
"name" : "gtk.FileChooserT",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/FileChooserT.d",
"members" : [
{
"name" : "FileChooserT(TStruct)",
"kind" : "template",
"protection" : "public",
"comment" : "\n Description\n GtkFileChooser is an interface that can be implemented by file\n selection widgets. In GTK+, the main objects that implement this\n interface are GtkFileChooserWidget, GtkFileChooserDialog, and\n GtkFileChooserButton. You do not need to write an object that\n implements the GtkFileChooser interface unless you are trying to\n adapt an existing file selector to expose a standard programming\n interface.\n GtkFileChooser allows for shortcuts to various places in the filesystem.\n In the default implementation these are displayed in the left pane. It\n may be a bit confusing at first taht these shortcuts come from various\n sources and in various flavours, so lets explain the terminology here:\n Bookmarks\n  are created by the user, by dragging folders from the\n  right pane to the left pane, or by using the \"Add\". Bookmarks\n  can be renamed and deleted by the user.\n Shortcuts\n  can be provided by the application or by the underlying filesystem\n  abstraction (e.g. both the gnome-vfs and the Windows filesystems\n  provide \"Desktop\" shortcuts). Shortcuts cannot be modified by the\n  user.\n Volumes\n  are provided by the underlying filesystem abstraction. They are\n  the \"roots\" of the filesystem.\n File Names and Encodings\n When the user is finished selecting files in a\n GtkFileChooser, your program can get the selected names\n either as filenames or as URIs. For URIs, the normal escaping\n rules are applied if the URI contains non-ASCII characters.\n However, filenames are always returned in\n the character set specified by the\n G_FILENAME_ENCODING environment variable.\n Please see the Glib documentation for more details about this\n variable.\n Note\n  This means that while you can pass the result of\n  gtk_file_chooser_get_filename() to\n  open(2) or\n  fopen(3), you may not be able to\n  directly set it as the text of a GtkLabel widget unless you\n  convert it first to UTF-8, which all GTK+ widgets expect.\n  You should use g_filename_to_utf8() to convert filenames\n  into strings that can be passed to GTK+ widgets.\n <hr>\n Adding a Preview Widget\n You can add a custom preview widget to a file chooser and then\n get notification about when the preview needs to be updated.\n To install a preview widget, use\n gtk_file_chooser_set_preview_widget(). Then, connect to the\n \"update-preview\" signal to get notified when\n you need to update the contents of the preview.\n Your callback should use\n gtk_file_chooser_get_preview_filename() to see what needs\n previewing. Once you have generated the preview for the\n corresponding file, you must call\n gtk_file_chooser_set_preview_widget_active() with a boolean\n flag that indicates whether your callback could successfully\n generate a preview.\n $(DDOC_COMMENT example)\n <hr>\n Adding Extra Widgets\n You can add extra widgets to a file chooser to provide options\n that are not present in the default design. For example, you\n can add a toggle button to give the user the option to open a\n file in read-only mode. You can use\n gtk_file_chooser_set_extra_widget() to insert additional\n widgets in a file chooser.\n $(DDOC_COMMENT example)\n Note\n  If you want to set more than one extra widget in the file\n  chooser, you can a container such as a GtkVBox or a GtkTable\n  and include your widgets in it. Then, set the container as\n  the whole extra widget.\n <hr>\n Key Bindings\n Internally, GTK+ implements a file chooser's graphical user\n interface with the private\n GtkFileChooserDefaultClass. This\n widget has several key\n bindings and their associated signals. This section\n describes the available key binding signals.\n $(DDOC_COMMENT example)\n You can change these defaults to something else. For\n example, to add a Shift modifier to a few\n of the default bindings, you can include the following\n fragment in your .gtkrc-2.0 file:\n binding \"my-own-gtkfilechooser-bindings\" {\n \tbind \"<Alt><Shift>Up\" {\n \t\t\"up-folder\" ()\n \t}\n \tbind \"<Alt><Shift>Down\" {\n \t\t\"down-folder\" ()\n \t}\n \tbind \"<Alt><Shift>Home\" {\n \t\t\"home-folder\" ()\n \t}\n }\n class \"GtkFileChooserDefault\" binding \"my-own-gtkfilechooser-bindings\"\n The \"GtkFileChooserDefault::location-popup\" signal\n  void user_function (GtkFileChooserDefault *chooser,\n  const char *path,\n gpointer user_data);\n This is used to make the file chooser show a \"Location\"\n dialog which the user can use to manually type the name of\n the file he wishes to select. The\n path argument is a string that gets\n put in the text entry for the file name. By default this is bound to\n Control+L\n with a path string of \"\" (the empty\n string). It is also bound to \/ with a\n path string of \"\/\"\n (a slash): this lets you type \/ and\n immediately type a path name. On Unix systems, this is bound to\n ~ (tilde) with a path string\n of \"~\" itself for access to home directories.\n chooser :\n \t\tthe object which received the signal.\n path :\n \t\tdefault contents for the text entry for the file name\n user_data :\n \t\tuser data set when the signal handler was connected.\n Note\n  You can create your own bindings for the\n  GtkFileChooserDefault::location-popup signal with custom\n  path strings, and have a crude form\n  of easily-to-type bookmarks. For example, say you access\n  the path \/home\/username\/misc very\n  frequently. You could then create an Alt+M\n  shortcut by including the following in your\n  .gtkrc-2.0:\n   binding \"misc-shortcut\" {\n  bind \"<Alt>M\" {\n  \"location-popup\" (\"\/home\/username\/misc\")\n \t }\n  }\n  class \"GtkFileChooserDefault\" binding \"misc-shortcut\"\n The \"GtkFileChooserDefault::up-folder\" signal\n  void user_function (GtkFileChooserDefault *chooser,\n  gpointer user_data);\n This is used to make the file chooser go to the parent of\n the current folder in the file hierarchy. By default this\n is bound to Backspace and\n Alt+Up\n (the Up key in the numeric keypad also works).\n chooser :\n \t\tthe object which received the signal.\n user_data :\n \t\tuser data set when the signal handler was connected.\n The \"GtkFileChooserDefault::down-folder\" signal\n  void user_function (GtkFileChooserDefault *chooser,\n  gpointer user_data);\n This is used to make the file chooser go to a child of the\n current folder in the file hierarchy. The subfolder that\n will be used is displayed in the path bar widget of the file\n chooser. For example, if the path bar is showing\n \"\/foo\/bar\/baz\", then this will cause\n the file chooser to switch to the \"baz\" subfolder. By\n default this is bound to\n Alt+Down\n (the Down key in the numeric keypad also works).\n chooser :\n \t\tthe object which received the signal.\n user_data :\n \t\tuser data set when the signal handler was connected.\n The \"GtkFileChooserDefault::home-folder\" signal\n  void user_function (GtkFileChooserDefault *chooser,\n  gpointer user_data);\n This is used to make the file chooser show the user's home\n folder in the file list. By default this is bound to\n Alt+Home\n (the Home key in the numeric keypad also works).\n chooser :\n \t\tthe object which received the signal.\n user_data :\n \t\tuser data set when the signal handler was connected.\n The \"GtkFileChooserDefault::desktop-folder\" signal\n  void user_function (GtkFileChooserDefault *chooser,\n  gpointer user_data);\n This is used to make the file chooser show the user's Desktop\n folder in the file list. By default this is bound to\n Alt+D.\n chooser :\n \t\tthe object which received the signal.\n user_data :\n \t\tuser data set when the signal handler was connected.\n The \"GtkFileChooserDefault::quick-bookmark\" signal\n  void user_function (GtkFileChooserDefault *chooser,\n  gint bookmark_index,\n  gpointer user_data);\n This is used to make the file chooser switch to the bookmark\n specified in the bookmark_index parameter.\n For example, if you have three bookmarks, you can pass 0, 1, 2 to\n this signal to switch to each of them, respectively. By default this is bound to\n Alt+1,\n Alt+2,\n etc. until\n Alt+0. Note\n that in the default binding,\n that Alt+1 is\n actually defined to switch to the bookmark at index 0, and so on\n successively;\n Alt+0 is\n defined to switch to the bookmark at index 10.\n chooser :\n \t\tthe object which received the signal.\n bookmark_indes :\n \t\tindex of the bookmark to switch to; the indices start at 0.\n user_data :\n \t\tuser data set when the signal handler was connected.\n \n",
"line" : 302,
"members" : [
{
"name" : "gtkFileChooser",
"kind" : "variable",
"type" : "GtkFileChooser*",
"comment" : " the main Gtk struct \n",
"line" : 306}
,
{
"name" : "getFileChooserTStruct",
"kind" : "function",
"type" : "GtkFileChooser*()",
"line" : 309}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 317}
,
{
"name" : "_onConfirmOverwriteListeners",
"kind" : "variable",
"type" : "GtkFileChooserConfirmation delegate(FileChooserIF)[]",
"line" : 319}
,
{
"name" : "onConfirmOverwriteListeners",
"kind" : "function",
"type" : "GtkFileChooserConfirmation delegate(FileChooserIF)[]()",
"line" : 320}
,
{
"name" : "addOnConfirmOverwrite",
"kind" : "function",
"type" : "void(GtkFileChooserConfirmation delegate(FileChooserIF) dlg, ConnectFlags connectFlags = cast(ConnectFlags)0)",
"comment" : "\n This signal gets emitted whenever it is appropriate to present a\n confirmation dialog when the user has selected a file name that\n already exists. The signal only gets emitted when the file\n chooser is in GTK_FILE_CHOOSER_ACTION_SAVE mode.\n Most applications just need to turn on the\n \"do-overwrite-confirmation\" property (or call the\n gtk_file_chooser_set_do_overwrite_confirmation() function), and\n they will automatically get a stock confirmation dialog.\n Applications which need to customize this behavior should do\n that, and also connect to the \"confirm-overwrite\"\n signal.\n A signal handler for this signal must return a\n GtkFileChooserConfirmation value, which indicates the action to\n take. If the handler determines that the user wants to select a\n different filename, it should return\n GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN. If it determines\n that the user is satisfied with his choice of file name, it\n should return GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME.\n On the other hand, if it determines that the stock confirmation\n dialog should be used, it should return\n GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM. The following example\n illustrates this.\n $(DDOC_COMMENT example)\n\n Since 2.8\n\t \n",
"line" : 351}
,
{
"name" : "callBackConfirmOverwrite",
"kind" : "function",
"type" : "extern (C) void(GtkFileChooser* chooserStruct, FileChooserIF fileChooserIF)",
"line" : 366}
,
{
"name" : "_onCurrentFolderChangedListeners",
"kind" : "variable",
"type" : "void delegate(FileChooserIF)[]",
"line" : 374}
,
{
"name" : "onCurrentFolderChangedListeners",
"kind" : "function",
"type" : "void delegate(FileChooserIF)[]()",
"line" : 375}
,
{
"name" : "addOnCurrentFolderChanged",
"kind" : "function",
"type" : "void(void delegate(FileChooserIF) dlg, ConnectFlags connectFlags = cast(ConnectFlags)0)",
"comment" : "\n This signal is emitted when the current folder in a GtkFileChooser\n changes. This can happen due to the user performing some action that\n changes folders, such as selecting a bookmark or visiting a folder on the\n file list. It can also happen as a result of calling a function to\n explicitly change the current folder in a file chooser.\n Normally you do not need to connect to this signal, unless you need to keep\n track of which folder a file chooser is showing.\n See also: gtk_file_chooser_set_current_folder(),\n gtk_file_chooser_get_current_folder(),\n gtk_file_chooser_set_current_folder_uri(),\n gtk_file_chooser_get_current_folder_uri().\n\t \n",
"line" : 392}
,
{
"name" : "callBackCurrentFolderChanged",
"kind" : "function",
"type" : "extern (C) void(GtkFileChooser* chooserStruct, FileChooserIF fileChooserIF)",
"line" : 407}
,
{
"name" : "_onFileActivatedListeners",
"kind" : "variable",
"type" : "void delegate(FileChooserIF)[]",
"line" : 415}
,
{
"name" : "onFileActivatedListeners",
"kind" : "function",
"type" : "void delegate(FileChooserIF)[]()",
"line" : 416}
,
{
"name" : "addOnFileActivated",
"kind" : "function",
"type" : "void(void delegate(FileChooserIF) dlg, ConnectFlags connectFlags = cast(ConnectFlags)0)",
"comment" : "\n This signal is emitted when the user \"activates\" a file in the file\n chooser. This can happen by double-clicking on a file in the file list, or\n by pressing Enter.\n Normally you do not need to connect to this signal. It is used internally\n by GtkFileChooserDialog to know when to activate the default button in the\n dialog.\n See also: gtk_file_chooser_get_filename(),\n gtk_file_chooser_get_filenames(), gtk_file_chooser_get_uri(),\n gtk_file_chooser_get_uris().\n\t \n",
"line" : 431}
,
{
"name" : "callBackFileActivated",
"kind" : "function",
"type" : "extern (C) void(GtkFileChooser* chooserStruct, FileChooserIF fileChooserIF)",
"line" : 446}
,
{
"name" : "_onSelectionChangedListeners",
"kind" : "variable",
"type" : "void delegate(FileChooserIF)[]",
"line" : 454}
,
{
"name" : "onSelectionChangedListeners",
"kind" : "function",
"type" : "void delegate(FileChooserIF)[]()",
"line" : 455}
,
{
"name" : "addOnSelectionChanged",
"kind" : "function",
"type" : "void(void delegate(FileChooserIF) dlg, ConnectFlags connectFlags = cast(ConnectFlags)0)",
"comment" : "\n This signal is emitted when there is a change in the set of selected files\n in a GtkFileChooser. This can happen when the user modifies the selection\n with the mouse or the keyboard, or when explicitly calling functions to\n change the selection.\n Normally you do not need to connect to this signal, as it is easier to wait\n for the file chooser to finish running, and then to get the list of\n selected files using the functions mentioned below.\n See also: gtk_file_chooser_select_filename(),\n gtk_file_chooser_unselect_filename(), gtk_file_chooser_get_filename(),\n gtk_file_chooser_get_filenames(), gtk_file_chooser_select_uri(),\n gtk_file_chooser_unselect_uri(), gtk_file_chooser_get_uri(),\n gtk_file_chooser_get_uris().\n\t \n",
"line" : 473}
,
{
"name" : "callBackSelectionChanged",
"kind" : "function",
"type" : "extern (C) void(GtkFileChooser* chooserStruct, FileChooserIF fileChooserIF)",
"line" : 488}
,
{
"name" : "_onUpdatePreviewListeners",
"kind" : "variable",
"type" : "void delegate(FileChooserIF)[]",
"line" : 496}
,
{
"name" : "onUpdatePreviewListeners",
"kind" : "function",
"type" : "void delegate(FileChooserIF)[]()",
"line" : 497}
,
{
"name" : "addOnUpdatePreview",
"kind" : "function",
"type" : "void(void delegate(FileChooserIF) dlg, ConnectFlags connectFlags = cast(ConnectFlags)0)",
"comment" : "\n This signal is emitted when the preview in a file chooser should be\n regenerated. For example, this can happen when the currently selected file\n changes. You should use this signal if you want your file chooser to have\n a preview widget.\n Once you have installed a preview widget with\n gtk_file_chooser_set_preview_widget(), you should update it when this\n signal is emitted. You can use the functions\n gtk_file_chooser_get_preview_filename() or\n gtk_file_chooser_get_preview_uri() to get the name of the file to preview.\n Your widget may not be able to preview all kinds of files; your callback\n must call gtk_file_chooser_set_preview_widget_active() to inform the file\n chooser about whether the preview was generated successfully or not.\n Please see the example code in the section called “Adding a Preview Widget”.\n See also: gtk_file_chooser_set_preview_widget(),\n gtk_file_chooser_set_preview_widget_active(),\n gtk_file_chooser_set_use_preview_label(),\n gtk_file_chooser_get_preview_filename(),\n gtk_file_chooser_get_preview_uri().\n See Also\n GtkFileChooserDialog, GtkFileChooserWidget, GtkFileChooserButton\n\t \n",
"line" : 523}
,
{
"name" : "callBackUpdatePreview",
"kind" : "function",
"type" : "extern (C) void(GtkFileChooser* chooserStruct, FileChooserIF fileChooserIF)",
"line" : 538}
,
{
"name" : "setFileChooserAction",
"kind" : "function",
"type" : "void(GtkFileChooserAction action)",
"comment" : "\n Sets the type of operation that the chooser is performing; the\n user interface is adapted to suit the selected action. For example,\n an option to create a new folder might be shown if the action is\n GTK_FILE_CHOOSER_ACTION_SAVE but not if the action is\n GTK_FILE_CHOOSER_ACTION_OPEN.\n Since 2.4\n Params:\n action = the action that the file selector is performing\n\t \n",
"line" : 557}
,
{
"name" : "getFileChooserAction",
"kind" : "function",
"type" : "GtkFileChooserAction()",
"comment" : "\n Gets the type of operation that the file chooser is performing; see\n gtk_file_chooser_set_action().\n Since 2.4\n Returns: the action that the file selector is performing\n\t \n",
"line" : 569}
,
{
"name" : "setLocalOnly",
"kind" : "function",
"type" : "void(int localOnly)",
"comment" : "\n Sets whether only local files can be selected in the\n file selector. If local_only is TRUE (the default),\n then the selected file are files are guaranteed to be\n accessible through the operating systems native file\n file system and therefore the application only\n needs to worry about the filename functions in\n GtkFileChooser, like gtk_file_chooser_get_filename(),\n rather than the URI functions like\n gtk_file_chooser_get_uri(),\n Since 2.4\n Params:\n localOnly = TRUE if only local files can be selected\n\t \n",
"line" : 589}
,
{
"name" : "getLocalOnly",
"kind" : "function",
"type" : "int()",
"comment" : "\n Gets whether only local files can be selected in the\n file selector. See gtk_file_chooser_set_local_only()\n Since 2.4\n Returns: TRUE if only local files can be selected.\n\t \n",
"line" : 601}
,
{
"name" : "setSelectMultiple",
"kind" : "function",
"type" : "void(int selectMultiple)",
"comment" : "\n Sets whether multiple files can be selected in the file selector. This is\n only relevant if the action is set to be GTK_FILE_CHOOSER_ACTION_OPEN or\n GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER.\n Since 2.4\n Params:\n selectMultiple = TRUE if multiple files can be selected.\n\t \n",
"line" : 615}
,
{
"name" : "getSelectMultiple",
"kind" : "function",
"type" : "int()",
"comment" : "\n Gets whether multiple files can be selected in the file\n selector. See gtk_file_chooser_set_select_multiple().\n Since 2.4\n Returns: TRUE if multiple files can be selected.\n\t \n",
"line" : 627}
,
{
"name" : "setShowHidden",
"kind" : "function",
"type" : "void(int showHidden)",
"comment" : "\n Sets whether hidden files and folders are displayed in the file selector.\n Since 2.6\n Params:\n showHidden = TRUE if hidden files and folders should be displayed.\n\t \n",
"line" : 639}
,
{
"name" : "getShowHidden",
"kind" : "function",
"type" : "int()",
"comment" : "\n Gets whether hidden files and folders are displayed in the file selector.\n See gtk_file_chooser_set_show_hidden().\n Since 2.6\n Returns: TRUE if hidden files and folders are displayed.\n\t \n",
"line" : 651}
,
{
"name" : "setDoOverwriteConfirmation",
"kind" : "function",
"type" : "void(int doOverwriteConfirmation)",
"comment" : "\n Sets whether a file chooser in GTK_FILE_CHOOSER_ACTION_SAVE mode will present\n a confirmation dialog if the user types a file name that already exists. This\n is FALSE by default.\n Regardless of this setting, the chooser will emit the\n \"confirm-overwrite\" signal when appropriate.\n If all you need is the stock confirmation dialog, set this property to TRUE.\n You can override the way confirmation is done by actually handling the\n \"confirm-overwrite\" signal; please refer to its documentation\n for the details.\n Since 2.8\n Params:\n doOverwriteConfirmation = whether to confirm overwriting in save mode\n\t \n",
"line" : 671}
,
{
"name" : "getDoOverwriteConfirmation",
"kind" : "function",
"type" : "int()",
"comment" : "\n Queries whether a file chooser is set to confirm for overwriting when the user\n types a file name that already exists.\n Since 2.8\n Returns: TRUE if the file chooser will present a confirmation dialog; FALSE otherwise.\n\t \n",
"line" : 683}
,
{
"name" : "setCreateFolders",
"kind" : "function",
"type" : "void(int createFolders)",
"comment" : "\n Sets whether file choser will offer to create new folders.\n This is only relevant if the action is not set to be\n GTK_FILE_CHOOSER_ACTION_OPEN.\n Since 2.18\n Params:\n createFolders = TRUE if the New Folder button should be displayed\n\t \n",
"line" : 697}
,
{
"name" : "getCreateFolders",
"kind" : "function",
"type" : "int()",
"comment" : "\n Gets whether file choser will offer to create new folders.\n See gtk_file_chooser_set_create_folders().\n Since 2.18\n Returns: TRUE if the New Folder button should be displayed.\n\t \n",
"line" : 709}
,
{
"name" : "setCurrentName",
"kind" : "function",
"type" : "void(string name)",
"comment" : "\n Sets the current name in the file selector, as if entered\n by the user. Note that the name passed in here is a UTF-8\n string rather than a filename. This function is meant for\n such uses as a suggested name in a \"Save As...\" dialog.\n If you want to preselect a particular existing file, you should use\n gtk_file_chooser_set_filename() or gtk_file_chooser_set_uri() instead.\n Please see the documentation for those functions for an example of using\n gtk_file_chooser_set_current_name() as well.\n Since 2.4\n Params:\n name = the filename to use, as a UTF-8 string\n\t \n",
"line" : 728}
,
{
"name" : "getFilename",
"kind" : "function",
"type" : "string()",
"comment" : "\n Gets the filename for the currently selected file in\n the file selector. If multiple files are selected,\n one of the filenames will be returned at random.\n If the file chooser is in folder mode, this function returns the selected\n folder.\n Since 2.4\n Returns: The currently selected filename, or NULL if no file is selected, or the selected file can't be represented with a local filename. Free with g_free().\n\t \n",
"line" : 743}
,
{
"name" : "setFilename",
"kind" : "function",
"type" : "int(string filename)",
"comment" : "\n Sets filename as the current filename for the file chooser, by changing\n to the file's parent folder and actually selecting the file in list. If\n the chooser is in GTK_FILE_CHOOSER_ACTION_SAVE mode, the file's base name\n will also appear in the dialog's file name entry.\n If the file name isn't in the current folder of chooser, then the current\n folder of chooser will be changed to the folder containing filename. This\n is equivalent to a sequence of gtk_file_chooser_unselect_all() followed by\n gtk_file_chooser_select_filename().\n Note that the file must exist, or nothing will be done except\n for the directory change.\n If you are implementing a File\/Save As... dialog,\n you should use this function if you already have a file name to which the\n user may save; for example, when the user opens an existing file and then\n does File\/Save As... on it. If you don't have\n a file name already — for example, if the user just created a new\n file and is saving it for the first time, do not call this function.\n Since 2.4\n Params:\n filename = the filename to set as current\n Returns: TRUE if both the folder could be changed and the file was selected successfully, FALSE otherwise.\n\t \n",
"line" : 771}
,
{
"name" : "selectFilename",
"kind" : "function",
"type" : "int(string filename)",
"comment" : "\n Selects a filename. If the file name isn't in the current\n folder of chooser, then the current folder of chooser will\n be changed to the folder containing filename.\n Since 2.4\n Params:\n filename = the filename to select\n Returns: TRUE if both the folder could be changed and the file was selected successfully, FALSE otherwise.\n\t \n",
"line" : 786}
,
{
"name" : "unselectFilename",
"kind" : "function",
"type" : "void(string filename)",
"comment" : "\n Unselects a currently selected filename. If the filename\n is not in the current directory, does not exist, or\n is otherwise not currently selected, does nothing.\n Since 2.4\n Params:\n filename = the filename to unselect\n\t \n",
"line" : 800}
,
{
"name" : "selectAll",
"kind" : "function",
"type" : "void()",
"comment" : "\n Selects all the files in the current folder of a file chooser.\n Since 2.4\n\t \n",
"line" : 810}
,
{
"name" : "unselectAll",
"kind" : "function",
"type" : "void()",
"comment" : "\n Unselects all the files in the current folder of a file chooser.\n Since 2.4\n\t \n",
"line" : 820}
,
{
"name" : "getFilenames",
"kind" : "function",
"type" : "ListSG()",
"comment" : "\n Lists all the selected files and subfolders in the current folder of\n chooser. The returned names are full absolute paths. If files in the current\n folder cannot be represented as local filenames they will be ignored. (See\n gtk_file_chooser_get_uris())\n Since 2.4\n Returns: a GSList containing the filenames of all selected files and subfolders in the current folder. Free the returned list with g_slist_free(), and the filenames with g_free(). [element-type utf8][transfer full utf8]\n\t \n",
"line" : 834}
,
{
"name" : "setCurrentFolder",
"kind" : "function",
"type" : "int(string filename)",
"comment" : "\n Sets the current folder for chooser from a local filename.\n The user will be shown the full contents of the current folder,\n plus user interface elements for navigating to other folders.\n Since 2.4\n Params:\n filename = the full path of the new current folder\n Returns: TRUE if the folder could be changed successfully, FALSE otherwise.\n\t \n",
"line" : 854}
,
{
"name" : "getCurrentFolder",
"kind" : "function",
"type" : "string()",
"comment" : "\n Gets the current folder of chooser as a local filename.\n See gtk_file_chooser_set_current_folder().\n Note that this is the folder that the file chooser is currently displaying\n (e.g. \"\/home\/username\/Documents\"), which is not the same\n as the currently-selected folder if the chooser is in\n GTK_FILE_CHOOSER_SELECT_FOLDER mode\n (e.g. \"\/home\/username\/Documents\/selected-folder\/\". To get the\n currently-selected folder in that mode, use gtk_file_chooser_get_uri() as the\n usual way to get the selection.\n Since 2.4\n Returns: the full path of the current folder, or NULL if the current path cannot be represented as a local filename. Free with g_free(). This function will also return NULL if the file chooser was unable to load the last folder that was requested from it; for example, as would be for calling gtk_file_chooser_set_current_folder() on a nonexistent folder.\n\t \n",
"line" : 873}
,
{
"name" : "getUri",
"kind" : "function",
"type" : "string()",
"comment" : "\n Gets the URI for the currently selected file in\n the file selector. If multiple files are selected,\n one of the filenames will be returned at random.\n If the file chooser is in folder mode, this function returns the selected\n folder.\n Since 2.4\n Returns: The currently selected URI, or NULL if no file is selected. Free with g_free()\n\t \n",
"line" : 888}
,
{
"name" : "setUri",
"kind" : "function",
"type" : "int(string uri)",
"comment" : "\n Sets the file referred to by uri as the current file for the file chooser,\n by changing to the URI's parent folder and actually selecting the URI in the\n list. If the chooser is GTK_FILE_CHOOSER_ACTION_SAVE mode, the URI's base\n name will also appear in the dialog's file name entry.\n If the URI isn't in the current folder of chooser, then the current folder\n of chooser will be changed to the folder containing uri. This is equivalent\n to a sequence of gtk_file_chooser_unselect_all() followed by\n gtk_file_chooser_select_uri().\n Note that the URI must exist, or nothing will be done except for the\n directory change.\n If you are implementing a File\/Save As... dialog,\n you should use this function if you already have a file name to which the\n user may save; for example, when the user opens an existing file and then\n does File\/Save As... on it. If you don't have\n a file name already — for example, if the user just created a new\n file and is saving it for the first time, do not call this function.\n Since 2.4\n Params:\n uri = the URI to set as current\n Returns: TRUE if both the folder could be changed and the URI was selected successfully, FALSE otherwise.\n\t \n",
"line" : 916}
,
{
"name" : "selectUri",
"kind" : "function",
"type" : "int(string uri)",
"comment" : "\n Selects the file to by uri. If the URI doesn't refer to a\n file in the current folder of chooser, then the current folder of\n chooser will be changed to the folder containing filename.\n Since 2.4\n Params:\n uri = the URI to select\n Returns: TRUE if both the folder could be changed and the URI was selected successfully, FALSE otherwise.\n\t \n",
"line" : 931}
,
{
"name" : "unselectUri",
"kind" : "function",
"type" : "void(string uri)",
"comment" : "\n Unselects the file referred to by uri. If the file\n is not in the current directory, does not exist, or\n is otherwise not currently selected, does nothing.\n Since 2.4\n Params:\n uri = the URI to unselect\n\t \n",
"line" : 945}
,
{
"name" : "getUris",
"kind" : "function",
"type" : "ListSG()",
"comment" : "\n Lists all the selected files and subfolders in the current folder of\n chooser. The returned names are full absolute URIs.\n Since 2.4\n Returns: a GSList containing the URIs of all selected files and subfolders in the current folder. Free the returned list with g_slist_free(), and the filenames with g_free(). [element-type utf8][transfer full utf8]\n\t \n",
"line" : 957}
,
{
"name" : "setCurrentFolderUri",
"kind" : "function",
"type" : "int(string uri)",
"comment" : "\n Sets the current folder for chooser from an URI.\n The user will be shown the full contents of the current folder,\n plus user interface elements for navigating to other folders.\n Since 2.4\n Params:\n uri = the URI for the new current folder\n Returns: TRUE if the folder could be changed successfully, FALSE otherwise.\n\t \n",
"line" : 977}
,
{
"name" : "getCurrentFolderUri",
"kind" : "function",
"type" : "string()",
"comment" : "\n Gets the current folder of chooser as an URI.\n See gtk_file_chooser_set_current_folder_uri().\n Note that this is the folder that the file chooser is currently displaying\n (e.g. \"file:\/\/\/home\/username\/Documents\"), which is not the same\n as the currently-selected folder if the chooser is in\n GTK_FILE_CHOOSER_SELECT_FOLDER mode\n (e.g. \"file:\/\/\/home\/username\/Documents\/selected-folder\/\". To get the\n currently-selected folder in that mode, use gtk_file_chooser_get_uri() as the\n usual way to get the selection.\n Since 2.4\n Returns: the URI for the current folder. Free with g_free(). This function will also return NULL if the file chooser was unable to load the last folder that was requested from it; for example, as would be for calling gtk_file_chooser_set_current_folder_uri() on a nonexistent folder.\n\t \n",
"line" : 996}
,
{
"name" : "setPreviewWidget",
"kind" : "function",
"type" : "void(Widget previewWidget)",
"comment" : "\n Sets an application-supplied widget to use to display a custom preview\n of the currently selected file. To implement a preview, after setting the\n preview widget, you connect to the \"update-preview\"\n signal, and call gtk_file_chooser_get_preview_filename() or\n gtk_file_chooser_get_preview_uri() on each change. If you can\n display a preview of the new file, update your widget and\n set the preview active using gtk_file_chooser_set_preview_widget_active().\n Otherwise, set the preview inactive.\n When there is no application-supplied preview widget, or the\n application-supplied preview widget is not active, the file chooser\n may display an internally generated preview of the current file or\n it may display no preview at all.\n Since 2.4\n Params:\n previewWidget = widget for displaying preview.\n\t \n",
"line" : 1019}
,
{
"name" : "getPreviewWidget",
"kind" : "function",
"type" : "Widget()",
"comment" : "\n Gets the current preview widget; see\n gtk_file_chooser_set_preview_widget().\n Since 2.4\n Returns: the current preview widget, or NULL\n\t \n",
"line" : 1031}
,
{
"name" : "setPreviewWidgetActive",
"kind" : "function",
"type" : "void(int active)",
"comment" : "\n Sets whether the preview widget set by\n gtk_file_chooser_set_preview_widget() should be shown for the\n current filename. When active is set to false, the file chooser\n may display an internally generated preview of the current file\n or it may display no preview at all. See\n gtk_file_chooser_set_preview_widget() for more details.\n Since 2.4\n Params:\n active = whether to display the user-specified preview widget\n\t \n",
"line" : 1053}
,
{
"name" : "getPreviewWidgetActive",
"kind" : "function",
"type" : "int()",
"comment" : "\n Gets whether the preview widget set by gtk_file_chooser_set_preview_widget()\n should be shown for the current filename. See\n gtk_file_chooser_set_preview_widget_active().\n Since 2.4\n Returns: TRUE if the preview widget is active for the current filename.\n\t \n",
"line" : 1066}
,
{
"name" : "setUsePreviewLabel",
"kind" : "function",
"type" : "void(int useLabel)",
"comment" : "\n Sets whether the file chooser should display a stock label with the name of\n the file that is being previewed; the default is TRUE. Applications that\n want to draw the whole preview area themselves should set this to FALSE and\n display the name themselves in their preview widget.\n See also: gtk_file_chooser_set_preview_widget()\n Since 2.4\n Params:\n useLabel = whether to display a stock label with the name of the previewed file\n\t \n",
"line" : 1082}
,
{
"name" : "getUsePreviewLabel",
"kind" : "function",
"type" : "int()",
"comment" : "\n Gets whether a stock label should be drawn with the name of the previewed\n file. See gtk_file_chooser_set_use_preview_label().\n Returns: TRUE if the file chooser is set to display a label with the name of the previewed file, FALSE otherwise.\n\t \n",
"line" : 1093}
,
{
"name" : "getPreviewFilename",
"kind" : "function",
"type" : "string()",
"comment" : "\n Gets the filename that should be previewed in a custom preview\n widget. See gtk_file_chooser_set_preview_widget().\n Since 2.4\n Returns: the filename to preview, or NULL if no file is selected, or if the selected file cannot be represented as a local filename. Free with g_free()\n\t \n",
"line" : 1105}
,
{
"name" : "getPreviewUri",
"kind" : "function",
"type" : "string()",
"comment" : "\n Gets the URI that should be previewed in a custom preview\n widget. See gtk_file_chooser_set_preview_widget().\n Since 2.4\n Returns: the URI for the file to preview, or NULL if no file is selected. Free with g_free().\n\t \n",
"line" : 1117}
,
{
"name" : "setExtraWidget",
"kind" : "function",
"type" : "void(Widget extraWidget)",
"comment" : "\n Sets an application-supplied widget to provide extra options to the user.\n Since 2.4\n Params:\n extraWidget = widget for extra options\n\t \n",
"line" : 1129}
,
{
"name" : "getExtraWidget",
"kind" : "function",
"type" : "Widget()",
"comment" : "\n Gets the current preview widget; see\n gtk_file_chooser_set_extra_widget().\n Since 2.4\n Returns: the current extra widget, or NULL\n\t \n",
"line" : 1141}
,
{
"name" : "addFilter",
"kind" : "function",
"type" : "void(FileFilter filter)",
"comment" : "\n Adds filter to the list of filters that the user can select between.\n When a filter is selected, only files that are passed by that\n filter are displayed.\n Note that the chooser takes ownership of the filter, so you have to\n ref and sink it if you want to keep a reference.\n Since 2.4\n Params:\n filter = a GtkFileFilter\n\t \n",
"line" : 1162}
,
{
"name" : "removeFilter",
"kind" : "function",
"type" : "void(FileFilter filter)",
"comment" : "\n Removes filter from the list of filters that the user can select between.\n Since 2.4\n Params:\n filter = a GtkFileFilter\n\t \n",
"line" : 1174}
,
{
"name" : "listFilters",
"kind" : "function",
"type" : "ListSG()",
"comment" : "\n Lists the current set of user-selectable filters; see\n gtk_file_chooser_add_filter(), gtk_file_chooser_remove_filter().\n Since 2.4\n Returns: a GSList containing the current set of user selectable filters. The contents of the list are owned by GTK+, but you must free the list itself with g_slist_free() when you are done with it. [element-type utf8][transfer container utf8]\n\t \n",
"line" : 1186}
,
{
"name" : "setFilter",
"kind" : "function",
"type" : "void(FileFilter filter)",
"comment" : "\n Sets the current filter; only the files that pass the\n filter will be displayed. If the user-selectable list of filters\n is non-empty, then the filter should be one of the filters\n in that list. Setting the current filter when the list of\n filters is empty is useful if you want to restrict the displayed\n set of files without letting the user change it.\n Since 2.4\n Params:\n filter = a GtkFileFilter\n\t \n",
"line" : 1208}
,
{
"name" : "getFilter",
"kind" : "function",
"type" : "FileFilter()",
"comment" : "\n Gets the current filter; see gtk_file_chooser_set_filter().\n Since 2.4\n Returns: the current filter, or NULL\n\t \n",
"line" : 1219}
,
{
"name" : "addShortcutFolder",
"kind" : "function",
"type" : "int(string folder)",
"comment" : "\n Adds a folder to be displayed with the shortcut folders in a file chooser.\n Note that shortcut folders do not get saved, as they are provided by the\n application. For example, you can use this to add a\n \"\/usr\/share\/mydrawprogram\/Clipart\" folder to the volume list.\n Since 2.4\n Params:\n folder = filename of the folder to add\n Returns: TRUE if the folder could be added successfully, FALSE otherwise. In the latter case, the error will be set as appropriate.\n Throws: GException on failure.\n\t \n",
"line" : 1241}
,
{
"name" : "removeShortcutFolder",
"kind" : "function",
"type" : "int(string folder)",
"comment" : "\n Removes a folder from a file chooser's list of shortcut folders.\n Since 2.4\n Params:\n folder = filename of the folder to remove\n Returns: TRUE if the operation succeeds, FALSE otherwise. In the latter case, the error will be set as appropriate. See also: gtk_file_chooser_add_shortcut_folder()\n Throws: GException on failure.\n\t \n",
"line" : 1264}
,
{
"name" : "listShortcutFolders",
"kind" : "function",
"type" : "ListSG()",
"comment" : "\n Queries the list of shortcut folders in the file chooser, as set by\n gtk_file_chooser_add_shortcut_folder().\n Since 2.4\n Returns: A list of folder filenames, or NULL if there are no shortcut folders. Free the returned list with g_slist_free(), and the filenames with g_free(). [element-type utf8][transfer full utf8]\n\t \n",
"line" : 1285}
,
{
"name" : "addShortcutFolderUri",
"kind" : "function",
"type" : "int(string uri)",
"comment" : "\n Adds a folder URI to be displayed with the shortcut folders in a file\n chooser. Note that shortcut folders do not get saved, as they are provided\n by the application. For example, you can use this to add a\n \"file:\/\/\/usr\/share\/mydrawprogram\/Clipart\" folder to the volume list.\n Since 2.4\n Params:\n uri = URI of the folder to add\n Returns: TRUE if the folder could be added successfully, FALSE otherwise. In the latter case, the error will be set as appropriate.\n Throws: GException on failure.\n\t \n",
"line" : 1307}
,
{
"name" : "removeShortcutFolderUri",
"kind" : "function",
"type" : "int(string uri)",
"comment" : "\n Removes a folder URI from a file chooser's list of shortcut folders.\n Since 2.4\n Params:\n uri = URI of the folder to remove\n Returns: TRUE if the operation succeeds, FALSE otherwise. In the latter case, the error will be set as appropriate. See also: gtk_file_chooser_add_shortcut_folder_uri()\n Throws: GException on failure.\n\t \n",
"line" : 1330}
,
{
"name" : "listShortcutFolderUris",
"kind" : "function",
"type" : "ListSG()",
"comment" : "\n Queries the list of shortcut folders in the file chooser, as set by\n gtk_file_chooser_add_shortcut_folder_uri().\n Since 2.4\n Returns: A list of folder URIs, or NULL if there are no shortcut folders. Free the returned list with g_slist_free(), and the URIs with g_free(). [element-type utf8][transfer full utf8]\n\t \n",
"line" : 1351}
,
{
"name" : "getCurrentFolderFile",
"kind" : "function",
"type" : "File()",
"comment" : "\n Gets the current folder of chooser as GFile.\n See gtk_file_chooser_get_current_folder_uri().\n Since 2.14\n Returns: the GFile for the current folder.\n\t \n",
"line" : 1368}
,
{
"name" : "getFile",
"kind" : "function",
"type" : "File()",
"comment" : "\n Gets the GFile for the currently selected file in\n the file selector. If multiple files are selected,\n one of the files will be returned at random.\n If the file chooser is in folder mode, this function returns the selected\n folder.\n Since 2.14\n Returns: a selected GFile. You own the returned file; use g_object_unref() to release it.\n\t \n",
"line" : 1388}
,
{
"name" : "getFiles",
"kind" : "function",
"type" : "ListSG()",
"comment" : "\n Lists all the selected files and subfolders in the current folder of chooser\n as GFile. An internal function, see gtk_file_chooser_get_uris().\n Since 2.14\n Returns: a GSList containing a GFile for each selected file and subfolder in the current folder. Free the returned list with g_slist_free(), and the files with g_object_unref(). [element-type utf8][transfer full utf8]\n\t \n",
"line" : 1405}
,
{
"name" : "getPreviewFile",
"kind" : "function",
"type" : "File()",
"comment" : "\n Gets the GFile that should be previewed in a custom preview\n Internal function, see gtk_file_chooser_get_preview_uri().\n Since 2.14\n Returns: the GFile for the file to preview, or NULL if no file is selected. Free with g_object_unref().\n\t \n",
"line" : 1422}
,
{
"name" : "selectFile",
"kind" : "function",
"type" : "int(File file)",
"comment" : "\n Selects the file referred to by file. An internal function. See\n _gtk_file_chooser_select_uri().\n Since 2.14\n Params:\n file = the file to select\n Returns: TRUE if both the folder could be changed and the path was selected successfully, FALSE otherwise.\n Throws: GException on failure.\n\t \n",
"line" : 1442}
,
{
"name" : "setCurrentFolderFile",
"kind" : "function",
"type" : "int(File file)",
"comment" : "\n Sets the current folder for chooser from a GFile.\n Internal function, see gtk_file_chooser_set_current_folder_uri().\n Since 2.14\n Params:\n file = the GFile for the new folder\n Returns: TRUE if the folder could be changed successfully, FALSE otherwise.\n Throws: GException on failure.\n\t \n",
"line" : 1466}
,
{
"name" : "setFile",
"kind" : "function",
"type" : "int(File file)",
"comment" : "\n Sets file as the current filename for the file chooser, by changing\n to the file's parent folder and actually selecting the file in list. If\n the chooser is in GTK_FILE_CHOOSER_ACTION_SAVE mode, the file's base name\n will also appear in the dialog's file name entry.\n If the file name isn't in the current folder of chooser, then the current\n folder of chooser will be changed to the folder containing filename. This\n is equivalent to a sequence of gtk_file_chooser_unselect_all() followed by\n gtk_file_chooser_select_filename().\n Note that the file must exist, or nothing will be done except\n for the directory change.\n If you are implementing a File\/Save As... dialog,\n you should use this function if you already have a file name to which the\n user may save; for example, when the user opens an existing file and then\n does File\/Save As... on it. If you don't have\n a file name already — for example, if the user just created a new\n file and is saving it for the first time, do not call this function.\n Since 2.14\n Params:\n file = the GFile to set as current\n Returns: TRUE if both the folder could be changed and the file was selected successfully, FALSE otherwise.\n Throws: GException on failure.\n\t \n",
"line" : 1504}
,
{
"name" : "unselectFile",
"kind" : "function",
"type" : "void(File file)",
"comment" : "\n Unselects the file referred to by file. If the file is not in the current\n directory, does not exist, or is otherwise not currently selected, does nothing.\n Since 2.14\n Params:\n file = a GFile\n\t \n",
"line" : 1526}
]
}
]
}
,
{
"name" : "gtk.FileChooserWidget",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/FileChooserWidget.d",
"members" : [
{
"name" : "FileChooserWidget",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n  GtkFileChooserWidget is a widget suitable for selecting files.\n  It is the main building block of a GtkFileChooserDialog. Most\n  applications will only need to use the latter; you can use\n  GtkFileChooserWidget as part of a larger window if you have\n  special needs.\n  Note that GtkFileChooserWidget does not have any methods of its\n  own. Instead, you should use the functions that work on a\n  GtkFileChooser.\n \n",
"line" : 83,
"base" : "VBox",
"members" : [
{
"name" : "gtkFileChooserWidget",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkFileChooserWidget*",
"comment" : " the main Gtk struct \n",
"line" : 87}
,
{
"name" : "getFileChooserWidgetStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkFileChooserWidget*()",
"line" : 90}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 97}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "FileChooserWidget(GtkFileChooserWidget* gtkFileChooserWidget)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 105}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 123}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "FileChooserWidget(GtkFileChooserAction action)",
"comment" : "\n\t \n\n Creates a new GtkFileChooserWidget. This is a file chooser widget that can\n be embedded in custom windows, and it is the same widget that is used by\n GtkFileChooserDialog.\n Since 2.4\n Params:\n action = Open or save mode for the widget\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 144}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "FileChooserWidget(GtkFileChooserAction action, string backend)",
"comment" : "\n Warning\n gtk_file_chooser_widget_new_with_backend has been deprecated since version 2.14 and should not be used in newly-written code. Use gtk_file_chooser_widget_new() instead.\n Creates a new GtkFileChooserWidget with a specified backend. This is\n especially useful if you use gtk_file_chooser_set_local_only() to allow\n non-local files. This is a file chooser widget that can be embedded in\n custom windows and it is the same widget that is used by\n GtkFileChooserDialog.\n Since 2.4\n Params:\n action = Open or save mode for the widget\n backend = The name of the specific filesystem backend to use.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 169}
]
}
]
}
,
{
"name" : "gtk.FileFilter",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/FileFilter.d",
"members" : [
{
"name" : "FileFilter",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkFileFilter can be used to restrict the files being shown\n in a GtkFileChooser. Files can be filtered based on their name\n (with gtk_file_filter_add_pattern()), on their mime type (with\n gtk_file_filter_add_mime_type()), or by a custom filter function\n (with gtk_file_filter_add_custom()).\n Filtering by mime types handles aliasing and subclassing of mime\n types; e.g. a filter for text\/plain also matches a file with mime\n type application\/rtf, since application\/rtf is a subclass of\n text\/plain. Note that GtkFileFilter allows wildcards for the\n subtype of a mime type, so you can e.g. filter for image\/+*.\n Normally, filters are used by adding them to a GtkFileChooser,\n see gtk_file_chooser_add_filter(), but it is also possible\n to manually use a filter on a file with gtk_file_filter_filter().\n \n",
"line" : 84,
"base" : "ObjectGtk",
"members" : [
{
"name" : "gtkFileFilter",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkFileFilter*",
"comment" : " the main Gtk struct \n",
"line" : 88}
,
{
"name" : "getFileFilterStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkFileFilter*()",
"line" : 91}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 98}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "FileFilter(GtkFileFilter* gtkFileFilter)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 106}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 124}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "FileFilter()",
"comment" : "\n\t \n\n Creates a new GtkFileFilter with no rules added to it.\n Such a filter doesn't accept any files, so is not\n particularly useful until you add rules with\n gtk_file_filter_add_mime_type(), gtk_file_filter_add_pattern(),\n or gtk_file_filter_add_custom(). To create a filter\n Since 2.4\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 142}
,
{
"name" : "setName",
"kind" : "function",
"protection" : "public",
"type" : "void(string name)",
"comment" : "\n Sets the human-readable name of the filter; this is the string\n that will be displayed in the file selector user interface if\n there is a selectable list of filters.\n Since 2.4\n Params:\n name = the human-readable-name for the filter, or NULL\n to remove any existing name. [allow-none]\n\t \n",
"line" : 162}
,
{
"name" : "getName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the human-readable name for the filter. See gtk_file_filter_set_name().\n Since 2.4\n Returns: The human-readable name of the filter, or NULL. This value is owned by GTK+ and must not be modified or freed.\n\t \n",
"line" : 173}
,
{
"name" : "addMimeType",
"kind" : "function",
"protection" : "public",
"type" : "void(string mimeType)",
"comment" : "\n Adds a rule allowing a given mime type to filter.\n Since 2.4\n Params:\n mimeType = name of a MIME type\n\t \n",
"line" : 185}
,
{
"name" : "addPattern",
"kind" : "function",
"protection" : "public",
"type" : "void(string pattern)",
"comment" : "\n Adds a rule allowing a shell style glob to a filter.\n Since 2.4\n Params:\n pattern = a shell style glob\n\t \n",
"line" : 197}
,
{
"name" : "addPixbufFormats",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Adds a rule allowing image files in the formats supported\n by GdkPixbuf.\n Since 2.6\n\t \n",
"line" : 208}
,
{
"name" : "addCustom",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkFileFilterFlags needed, extern (C) int function(GtkFileFilterInfo*, void*) func, void* data, extern (C) void function(void* cbData) notify)",
"comment" : "\n Adds rule to a filter that allows files based on a custom callback\n function. The bitfield needed which is passed in provides information\n about what sorts of information that the filter function needs;\n this allows GTK+ to avoid retrieving expensive information when\n it isn't needed by the filter.\n Since 2.4\n Params:\n needed = bitfield of flags indicating the information that the custom\n filter function needs.\n func = callback function; if the function returns TRUE, then\n the file will be displayed.\n data = data to pass to func\n notify = function to call to free data when it is no longer needed.\n\t \n",
"line" : 229}
,
{
"name" : "getNeeded",
"kind" : "function",
"protection" : "public",
"type" : "GtkFileFilterFlags()",
"comment" : "\n Gets the fields that need to be filled in for the structure\n passed to gtk_file_filter_filter()\n This function will not typically be used by applications; it\n is intended principally for use in the implementation of\n GtkFileChooser.\n Since 2.4\n Returns: bitfield of flags indicating needed fields when calling gtk_file_filter_filter()\n\t \n",
"line" : 244}
,
{
"name" : "filter",
"kind" : "function",
"protection" : "public",
"type" : "int(GtkFileFilterInfo* filterInfo)",
"comment" : "\n Tests whether a file should be displayed according to filter.\n The GtkFileFilterInfo structure filter_info should include\n the fields returned from gtk_file_filter_get_needed().\n This function will not typically be used by applications; it\n is intended principally for use in the implementation of\n GtkFileChooser.\n Since 2.4\n Params:\n filter = a GtkFileFilter\n filterInfo = a GtkFileFilterInfo structure containing information\n about a file.\n Returns: TRUE if the file should be displayed\n\t \n",
"line" : 264}
]
}
]
}
,
{
"name" : "gtk.FileSelection",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/FileSelection.d",
"members" : [
{
"name" : "FileSelection",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkFileSelection has been superseded by the newer GtkFileChooser family\n of widgets.\n GtkFileSelection should be used to retrieve file or directory names from\n the user. It will create a new dialog window containing a directory list,\n and a file list corresponding to the current working directory. The filesystem\n can be navigated using the directory list or the drop-down history menu.\n Alternatively, the TAB key can be used to navigate using filename\n completion - common in text based editors such as emacs and jed.\n File selection dialogs are created with a call to gtk_file_selection_new().\n The default filename can be set using gtk_file_selection_set_filename() and the selected filename retrieved using gtk_file_selection_get_filename().\n Use gtk_file_selection_complete() to display files and directories\n that match a given pattern. This can be used for example, to show only\n *.txt files, or only files beginning with gtk*.\n Simple file operations; create directory, delete file, and rename file, are available from buttons at the top of the dialog. These can be hidden using gtk_file_selection_hide_fileop_buttons() and shown again using gtk_file_selection_show_fileop_buttons().\n $(DDOC_COMMENT example)\n \n",
"line" : 86,
"base" : "Dialog",
"members" : [
{
"name" : "gtkFileSelection",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkFileSelection*",
"comment" : " the main Gtk struct \n",
"line" : 90}
,
{
"name" : "getFileSelectionStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkFileSelection*()",
"line" : 93}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 100}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "FileSelection(GtkFileSelection* gtkFileSelection)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 108}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 126}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "FileSelection(string title)",
"comment" : "\n\t \n\n Warning\n gtk_file_selection_new is deprecated and should not be used in newly-written code. Use gtk_file_chooser_dialog_new() instead\n Creates a new file selection dialog box. By default it will contain a GtkTreeView of the application's current working directory, and a file listing. Operation buttons that allow the user to create a directory, delete files and rename files, are also present.\n Params:\n title = a message that will be placed in the file requestor's titlebar.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 143}
,
{
"name" : "setFilename",
"kind" : "function",
"protection" : "public",
"type" : "void(string filename)",
"comment" : "\n Warning\n gtk_file_selection_set_filename is deprecated and should not be used in newly-written code.\n Sets a default path for the file requestor. If filename includes a\n directory path, then the requestor will open with that path as its\n current working directory.\n This has the consequence that in order to open the requestor with a\n working directory and an empty filename, filename must have a trailing\n directory separator.\n The encoding of filename is preferred GLib file name encoding, which\n may not be UTF-8. See g_filename_from_utf8().\n Params:\n filename = a string to set as the default file name.\n\t \n",
"line" : 168}
,
{
"name" : "getFilename",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Warning\n gtk_file_selection_get_filename is deprecated and should not be used in newly-written code.\n This function returns the selected filename in the GLib file name\n encoding. To convert to UTF-8, call g_filename_to_utf8(). The\n returned string points to a statically allocated buffer and should\n be copied if you plan to keep it around.\n If no file is selected then the selected directory path is returned.\n Returns: currently-selected filename in the on-disk encoding.\n\t \n",
"line" : 184}
,
{
"name" : "complete",
"kind" : "function",
"protection" : "public",
"type" : "void(string pattern)",
"comment" : "\n Warning\n gtk_file_selection_complete is deprecated and should not be used in newly-written code.\n Will attempt to match pattern to a valid filenames or subdirectories in the current directory. If a match can be made, the matched filename will appear in the text entry field of the file selection dialog.\n If a partial match can be made, the \"Files\" list will contain those\n file names which have been partially matched, and the \"Folders\"\n list those directories which have been partially matched.\n Params:\n pattern = a string of characters which may or may not match any filenames in the current directory.\n\t \n",
"line" : 200}
,
{
"name" : "showFileopButtons",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_file_selection_show_fileop_buttons is deprecated and should not be used in newly-written code.\n Shows the file operation buttons, if they have previously been hidden. The rest of the widgets in the dialog will be resized accordingly.\n\t \n",
"line" : 211}
,
{
"name" : "hideFileopButtons",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_file_selection_hide_fileop_buttons is deprecated and should not be used in newly-written code.\n Hides the file operation buttons that normally appear at the top of the dialog. Useful if you wish to create a custom file selector, based on GtkFileSelection.\n\t \n",
"line" : 222}
,
{
"name" : "getSelections",
"kind" : "function",
"protection" : "public",
"type" : "string[]()",
"comment" : "\n Warning\n gtk_file_selection_get_selections is deprecated and should not be used in newly-written code.\n Retrieves the list of file selections the user has made in the dialog box.\n This function is intended for use when the user can select multiple files\n in the file list.\n The filenames are in the GLib file name encoding. To convert to\n UTF-8, call g_filename_to_utf8() on each string.\n Returns: a newly-allocated NULL-terminated array of strings. Use g_strfreev() to free it.\n\t \n",
"line" : 238}
,
{
"name" : "setSelectMultiple",
"kind" : "function",
"protection" : "public",
"type" : "void(int selectMultiple)",
"comment" : "\n Warning\n gtk_file_selection_set_select_multiple is deprecated and should not be used in newly-written code.\n Sets whether the user is allowed to select multiple files in the file list.\n Use gtk_file_selection_get_selections() to get the list of selected files.\n Params:\n selectMultiple = whether or not the user is allowed to select multiple\n files in the file list.\n\t \n",
"line" : 253}
,
{
"name" : "getSelectMultiple",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Warning\n gtk_file_selection_get_select_multiple is deprecated and should not be used in newly-written code.\n Determines whether or not the user is allowed to select multiple files in\n the file list. See gtk_file_selection_set_select_multiple().\n Returns: TRUE if the user is allowed to select multiple files in the file list\n\t \n",
"line" : 266}
]
}
]
}
,
{
"name" : "gtk.Fixed",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Fixed.d",
"members" : [
{
"name" : "Fixed",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkFixed widget is a container which can place child widgets at fixed\n positions and with fixed sizes, given in pixels. GtkFixed performs no\n automatic layout management.\n For most applications, you should not use this container! It keeps\n you from having to learn about the other GTK+ containers, but it\n results in broken applications.\n With GtkFixed, the following things will result in truncated text,\n overlapping widgets, and other display bugs:\n Themes, which may change widget sizes.\n Fonts other than the one you used to write the app will of\n course change the size of widgets containing text; keep in mind that\n users may use a larger font because of difficulty reading the default,\n or they may be using Windows or the framebuffer port of GTK+, where\n different fonts are available.\n Translation of text into other languages changes its size. Also,\n display of non-English text will use a different font in many cases.\n In addition, the fixed widget can't properly be mirrored in\n right-to-left languages such as Hebrew and Arabic. i.e. normally GTK+\n will flip the interface to put labels to the right of the thing they\n label, but it can't do that with GtkFixed. So your application will\n not be usable in right-to-left languages.\n Finally, fixed positioning makes it kind of annoying to add\/remove GUI\n elements, since you have to reposition all the other elements. This is\n a long-term maintenance problem for your application.\n If you know none of these things are an issue for your application,\n and prefer the simplicity of GtkFixed, by all means use the\n widget. But you should be aware of the tradeoffs.\n \n",
"line" : 101,
"base" : "Container",
"members" : [
{
"name" : "gtkFixed",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkFixed*",
"comment" : " the main Gtk struct \n",
"line" : 105}
,
{
"name" : "getFixedStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkFixed*()",
"line" : 108}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 115}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Fixed(GtkFixed* gtkFixed)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 123}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 141}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Fixed()",
"comment" : "\n\t \n\n Creates a new GtkFixed.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 154}
,
{
"name" : "put",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, int x, int y)",
"comment" : "\n Adds a widget to a GtkFixed container at the given position.\n Params:\n widget = the widget to add.\n x = the horizontal position to place the widget at.\n y = the vertical position to place the widget at.\n\t \n",
"line" : 172}
,
{
"name" : "move",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, int x, int y)",
"comment" : "\n Moves a child of a GtkFixed container to the given position.\n Params:\n widget = the child widget.\n x = the horizontal position to move the widget to.\n y = the vertical position to move the widget to.\n\t \n",
"line" : 185}
,
{
"name" : "getHasWindow",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Warning\n gtk_fixed_get_has_window has been deprecated since version 2.20 and should not be used in newly-written code. Use gtk_widget_get_has_window() instead.\n Gets whether the GtkFixed has its own GdkWindow.\n See gtk_fixed_set_has_window().\n Returns: TRUE if fixed has its own window.\n\t \n",
"line" : 198}
,
{
"name" : "setHasWindow",
"kind" : "function",
"protection" : "public",
"type" : "void(int hasWindow)",
"comment" : "\n Warning\n gtk_fixed_set_has_window has been deprecated since version 2.20 and should not be used in newly-written code. Use gtk_widget_set_has_window() instead.\n Sets whether a GtkFixed widget is created with a separate\n GdkWindow for widget->window or not. (By default, it will be\n created with no separate GdkWindow). This function must be called\n while the GtkFixed is not realized, for instance, immediately after the\n window is created.\n This function was added to provide an easy migration path for\n older applications which may expect GtkFixed to have a separate window.\n Params:\n hasWindow = TRUE if a separate window should be created\n Child Property Details\n The \"x\" child property\n  \"x\" gint : Read \/ Write\n X position of child widget.\n Default value: 0\n\t \n",
"line" : 222}
]
}
]
}
,
{
"name" : "gtk.FontButton",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/FontButton.d",
"members" : [
{
"name" : "FontButton",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkFontButton is a button which displays the currently selected font an allows to open a font selection\n dialog to change the font. It is suitable widget for selecting a font in a preference dialog.\n \n",
"line" : 75,
"base" : "Button",
"members" : [
{
"name" : "gtkFontButton",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkFontButton*",
"comment" : " the main Gtk struct \n",
"line" : 79}
,
{
"name" : "getFontButtonStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkFontButton*()",
"line" : 82}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 89}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "FontButton(GtkFontButton* gtkFontButton)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 97}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 115}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 123}
,
{
"name" : "onFontSetListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(FontButton)[]",
"line" : 125}
,
{
"name" : "addOnFontSet",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(FontButton) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::font-set signal is emitted when the user selects a font.\n When handling this signal, use gtk_font_button_get_font_name()\n to find out which font was just selected.\n Note that this signal is only emitted when the user\n changes the font. If you need to react to programmatic font changes\n as well, use the notify::font-name signal.\n Since 2.4\n See Also\n GtkFontSelectionDialog, GtkColorButton.\n\t \n",
"line" : 137}
,
{
"name" : "callBackFontSet",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkFontButton* widgetStruct, FontButton fontButton)",
"line" : 152}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "FontButton()",
"comment" : "\n Creates a new font picker widget.\n Since 2.4\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 166}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "FontButton(string fontname)",
"comment" : "\n Creates a new font picker widget.\n Since 2.4\n Params:\n fontname = Name of font to display in font selection dialog\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 184}
,
{
"name" : "setFontName",
"kind" : "function",
"protection" : "public",
"type" : "int(string fontname)",
"comment" : "\n Sets or updates the currently-displayed font in font picker dialog.\n Since 2.4\n Params:\n fontname = Name of font to display in font selection dialog\n Returns: Return value of gtk_font_selection_dialog_set_font_name() if the font selection dialog exists, otherwise FALSE.\n\t \n",
"line" : 202}
,
{
"name" : "getFontName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Retrieves the name of the currently selected font. This name includes\n style and size information as well. If you want to render something\n with the font, use this string with pango_font_description_from_string() .\n If you're interested in peeking certain values (family name,\n style, size, weight) just query these properties from the\n PangoFontDescription object.\n Since 2.4\n Returns: an internal copy of the font name which must not be freed.\n\t \n",
"line" : 218}
,
{
"name" : "setShowStyle",
"kind" : "function",
"protection" : "public",
"type" : "void(int showStyle)",
"comment" : "\n If show_style is TRUE, the font style will be displayed along with name of the selected font.\n Since 2.4\n Params:\n showStyle = TRUE if font style should be displayed in label.\n\t \n",
"line" : 230}
,
{
"name" : "getShowStyle",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the name of the font style will be shown in the label.\n Since 2.4\n Returns: whether the font style will be shown in the label.\n\t \n",
"line" : 241}
,
{
"name" : "setShowSize",
"kind" : "function",
"protection" : "public",
"type" : "void(int showSize)",
"comment" : "\n If show_size is TRUE, the font size will be displayed along with the name of the selected font.\n Since 2.4\n Params:\n showSize = TRUE if font size should be displayed in dialog.\n\t \n",
"line" : 253}
,
{
"name" : "getShowSize",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the font size will be shown in the label.\n Since 2.4\n Returns: whether the font size will be shown in the label.\n\t \n",
"line" : 264}
,
{
"name" : "setUseFont",
"kind" : "function",
"protection" : "public",
"type" : "void(int useFont)",
"comment" : "\n If use_font is TRUE, the font name will be written using the selected font.\n Since 2.4\n Params:\n useFont = If TRUE, font name will be written using font chosen.\n\t \n",
"line" : 276}
,
{
"name" : "getUseFont",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the selected font is used in the label.\n Since 2.4\n Returns: whether the selected font is used in the label.\n\t \n",
"line" : 287}
,
{
"name" : "setUseSize",
"kind" : "function",
"protection" : "public",
"type" : "void(int useSize)",
"comment" : "\n If use_size is TRUE, the font name will be written using the selected size.\n Since 2.4\n Params:\n useSize = If TRUE, font name will be written using the selected size.\n\t \n",
"line" : 299}
,
{
"name" : "getUseSize",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the selected size is used in the label.\n Since 2.4\n Returns: whether the selected size is used in the label.\n\t \n",
"line" : 310}
,
{
"name" : "setTitle",
"kind" : "function",
"protection" : "public",
"type" : "void(string title)",
"comment" : "\n Sets the title for the font selection dialog.\n Since 2.4\n Params:\n title = a string containing the font selection dialog title\n\t \n",
"line" : 322}
,
{
"name" : "getTitle",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Retrieves the title of the font selection dialog.\n Since 2.4\n Returns: an internal copy of the title string which must not be freed.\n\t \n",
"line" : 333}
]
}
]
}
,
{
"name" : "gtk.FontSelection",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/FontSelection.d",
"members" : [
{
"name" : "FontSelection",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkFontSelection widget lists the available fonts, styles and sizes,\n allowing the user to select a font.\n It is used in the GtkFontSelectionDialog widget to provide a dialog box for\n selecting fonts.\n To set the font which is initially selected, use\n gtk_font_selection_set_font_name().\n To get the selected font use gtk_font_selection_get_font_name().\n To change the text which is shown in the preview area, use\n gtk_font_selection_set_preview_text().\n \n",
"line" : 92,
"base" : "VBox",
"members" : [
{
"name" : "gtkFontSelection",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkFontSelection*",
"comment" : " the main Gtk struct \n",
"line" : 96}
,
{
"name" : "getFontSelectionStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkFontSelection*()",
"line" : 99}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 106}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "FontSelection(GtkFontSelection* gtkFontSelection)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 114}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 132}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "FontSelection()",
"comment" : "\n\t \n\n Creates a new GtkFontSelection.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 145}
,
{
"name" : "getFont",
"kind" : "function",
"protection" : "public",
"type" : "Font()",
"comment" : "\n Warning\n gtk_font_selection_get_font has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_font_selection_get_font_name() instead.\n Gets the currently-selected font.\n Returns: A GdkFont.\n\t \n",
"line" : 162}
,
{
"name" : "getFontName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the currently-selected font name.\n Note that this can be a different string than what you set with\n gtk_font_selection_set_font_name(), as the font selection widget may\n normalize font names and thus return a string with a different structure.\n For example, \"Helvetica Italic Bold 12\" could be normalized to\n \"Helvetica Bold Italic 12\". Use pango_font_description_equal()\n if you want to compare two font descriptions.\n Returns: A string with the name of the current font, or NULL if no font is selected. You must free this string with g_free().\n\t \n",
"line" : 183}
,
{
"name" : "setFontName",
"kind" : "function",
"protection" : "public",
"type" : "int(string fontname)",
"comment" : "\n Sets the currently-selected font.\n Note that the fontsel needs to know the screen in which it will appear\n for this to work; this can be guaranteed by simply making sure that the\n fontsel is inserted in a toplevel window before you call this function.\n Params:\n fontname = a font name like \"Helvetica 12\" or \"Times Bold 18\"\n Returns: TRUE if the font could be set successfully; FALSE if no such font exists or if the fontsel doesn't belong to a particular screen yet.\n\t \n",
"line" : 198}
,
{
"name" : "getPreviewText",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the text displayed in the preview area.\n Returns: the text displayed in the preview area. This string is owned by the widget and should not be modified or freed\n\t \n",
"line" : 208}
,
{
"name" : "setPreviewText",
"kind" : "function",
"protection" : "public",
"type" : "void(string text)",
"comment" : "\n Sets the text displayed in the preview area.\n The text is used to show how the selected font looks.\n Params:\n text = the text to display in the preview area\n\t \n",
"line" : 220}
,
{
"name" : "getFace",
"kind" : "function",
"protection" : "public",
"type" : "PgFontFace()",
"comment" : "\n Gets the PangoFontFace representing the selected font group\n details (i.e. family, slant, weight, width, etc).\n Since 2.14\n Returns: A PangoFontFace representing the selected font group details. The returned object is owned by fontsel and must not be modified or freed. [transfer none]\n\t \n",
"line" : 232}
,
{
"name" : "getFaceList",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n This returns the GtkTreeView which lists all styles available for\n the selected font. For example, 'Regular', 'Bold', etc.\n Since 2.14\n Returns: A GtkWidget that is part of fontsel. [transfer none]\n\t \n",
"line" : 249}
,
{
"name" : "getFamily",
"kind" : "function",
"protection" : "public",
"type" : "PgFontFamily()",
"comment" : "\n Gets the PangoFontFamily representing the selected font family.\n Since 2.14\n Returns: A PangoFontFamily representing the selected font family. Font families are a collection of font faces. The returned object is owned by fontsel and must not be modified or freed. [transfer none]\n\t \n",
"line" : 265}
,
{
"name" : "getSize",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n The selected font size.\n Since 2.14\n Returns: A n integer representing the selected font size, or -1 if no font size is selected.\n\t \n",
"line" : 281}
,
{
"name" : "getFamilyList",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n This returns the GtkTreeView that lists font families, for\n example, 'Sans', 'Serif', etc.\n Since 2.14\n Returns: A GtkWidget that is part of fontsel. [transfer none]\n\t \n",
"line" : 293}
,
{
"name" : "getPreviewEntry",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n This returns the GtkEntry used to display the font as a preview.\n Since 2.14\n Returns: A GtkWidget that is part of fontsel. [transfer none]\n\t \n",
"line" : 309}
,
{
"name" : "getSizeEntry",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n This returns the GtkEntry used to allow the user to edit the font\n number manually instead of selecting it from the list of font sizes.\n Since 2.14\n Returns: A GtkWidget that is part of fontsel. [transfer none]\n\t \n",
"line" : 326}
,
{
"name" : "getSizeList",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n This returns the GtkTreeeView used to list font sizes.\n Since 2.14\n Returns: A GtkWidget that is part of fontsel. [transfer none]\n\t \n",
"line" : 342}
]
}
]
}
,
{
"name" : "gtk.FontSelectionDialog",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/FontSelectionDialog.d",
"members" : [
{
"name" : "FontSelectionDialog",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkFontSelectionDialog widget is a dialog box for selecting a font.\n To set the font which is initially selected, use\n gtk_font_selection_dialog_set_font_name().\n To get the selected font use gtk_font_selection_dialog_get_font_name().\n To change the text which is shown in the preview area, use\n gtk_font_selection_dialog_set_preview_text().\n GtkFontSelectionDialog as GtkBuildable\n The GtkFontSelectionDialog implementation of the GtkBuildable interface\n exposes the embedded GtkFontSelection as internal child with the\n name \"font_selection\". It also exposes the buttons with the names\n \"ok_button\", \"cancel_button\" and \"apply_button\".\n \n",
"line" : 91,
"base" : "Dialog",
"members" : [
{
"name" : "gtkFontSelectionDialog",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkFontSelectionDialog*",
"comment" : " the main Gtk struct \n",
"line" : 95}
,
{
"name" : "getFontSelectionDialogStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkFontSelectionDialog*()",
"line" : 98}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 105}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "FontSelectionDialog(GtkFontSelectionDialog* gtkFontSelectionDialog)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 113}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 131}
,
{
"name" : "getFontSelection",
"kind" : "function",
"protection" : "public",
"type" : "FontSelection()",
"comment" : "\n Retrieves the GtkFontSelection widget embedded in the dialog.\n Since 2.22\n Returns: the embedded GtkFontSelection\n\t \n",
"line" : 142}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "FontSelectionDialog(string title)",
"comment" : "\n\t \n\n Creates a new GtkFontSelectionDialog.\n Params:\n title = the title of the dialog window\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 162}
,
{
"name" : "getFont",
"kind" : "function",
"protection" : "public",
"type" : "Font()",
"comment" : "\n Warning\n gtk_font_selection_dialog_get_font has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_font_selection_dialog_get_font_name() instead.\n Gets the currently-selected font.\n Returns: the GdkFont from the GtkFontSelection for the currently selected font in the dialog, or NULL if no font is selected\n\t \n",
"line" : 179}
,
{
"name" : "getFontName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the currently-selected font name.\n Note that this can be a different string than what you set with\n gtk_font_selection_dialog_set_font_name(), as the font selection widget\n may normalize font names and thus return a string with a different\n structure. For example, \"Helvetica Italic Bold 12\" could be normalized\n to \"Helvetica Bold Italic 12\". Use pango_font_description_equal()\n if you want to compare two font descriptions.\n Returns: A string with the name of the current font, or NULL if no font is selected. You must free this string with g_free().\n\t \n",
"line" : 200}
,
{
"name" : "setFontName",
"kind" : "function",
"protection" : "public",
"type" : "int(string fontname)",
"comment" : "\n Sets the currently selected font.\n Params:\n fontname = a font name like \"Helvetica 12\" or \"Times Bold 18\"\n Returns: TRUE if the font selected in fsd is now the fontname specified, FALSE otherwise.\n\t \n",
"line" : 212}
,
{
"name" : "getPreviewText",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the text displayed in the preview area.\n Returns: the text displayed in the preview area. This string is owned by the widget and should not be modified or freed\n\t \n",
"line" : 222}
,
{
"name" : "setPreviewText",
"kind" : "function",
"protection" : "public",
"type" : "void(string text)",
"comment" : "\n Sets the text displayed in the preview area.\n Params:\n text = the text to display in the preview area\n\t \n",
"line" : 233}
,
{
"name" : "getApplyButton",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Warning\n gtk_font_selection_dialog_get_apply_button has been deprecated since version 2.16 and should not be used in newly-written code. Don't use this function.\n Obtains a button. The button doesn't have any function.\n Since 2.14\n Returns: a GtkWidget\n\t \n",
"line" : 246}
,
{
"name" : "getCancelButton",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Gets the 'Cancel' button.\n Since 2.14\n Returns: the GtkWidget used in the dialog for the 'Cancel' button. [transfer none]\n\t \n",
"line" : 262}
,
{
"name" : "getOkButton",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Gets the 'OK' button.\n Since 2.14\n Returns: the GtkWidget used in the dialog for the 'OK' button. [transfer none]\n\t \n",
"line" : 278}
]
}
]
}
,
{
"name" : "gtk.Frame",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Frame.d",
"members" : [
{
"name" : "Frame",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The frame widget is a Bin that surrounds its child\n with a decorative frame and an optional label.\n If present, the label is drawn in a gap in the\n top side of the frame. The position of the\n label can be controlled with gtk_frame_set_label_align().\n GtkFrame as GtkBuildable\n The GtkFrame implementation of the GtkBuildable interface\n supports placing a child in the label position by specifying\n \"label\" as the \"type\" attribute of a <child> element.\n A normal content child can be specified without specifying\n a <child> type attribute.\n $(DDOC_COMMENT example)\n \n",
"line" : 86,
"base" : "Bin",
"members" : [
{
"name" : "gtkFrame",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkFrame*",
"comment" : " the main Gtk struct \n",
"line" : 90}
,
{
"name" : "getFrameStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkFrame*()",
"line" : 93}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 100}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Frame(GtkFrame* gtkFrame)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 108}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 126}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Frame(Widget widget, string label)",
"comment" : "\n Creates frame with label and set it's child widget\n\t \n",
"line" : 135}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Frame(string label)",
"comment" : "\n\t \n\n Creates a new GtkFrame, with optional label label.\n If label is NULL, the label is omitted.\n Params:\n label = the text to use as the label of the frame\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 151}
,
{
"name" : "setLabel",
"kind" : "function",
"protection" : "public",
"type" : "void(string label)",
"comment" : "\n Sets the text of the label. If label is NULL,\n the current label is removed.\n Params:\n label = the text to use as the label of the frame. [allow-none]\n\t \n",
"line" : 168}
,
{
"name" : "setLabelWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget labelWidget)",
"comment" : "\n Sets the label widget for the frame. This is the widget that\n will appear embedded in the top edge of the frame as a\n title.\n Params:\n labelWidget = the new label widget\n\t \n",
"line" : 181}
,
{
"name" : "setLabelAlign",
"kind" : "function",
"protection" : "public",
"type" : "void(float xalign, float yalign)",
"comment" : "\n Sets the alignment of the frame widget's label. The\n default values for a newly created frame are 0.0 and 0.5.\n Params:\n xalign = The position of the label along the top edge\n of the widget. A value of 0.0 represents left alignment;\n 1.0 represents right alignment.\n yalign = The y alignment of the label. A value of 0.0 aligns under\n the frame; 1.0 aligns above the frame. If the values are exactly\n 0.0 or 1.0 the gap in the frame won't be painted because the label\n will be completely above or below the frame.\n\t \n",
"line" : 199}
,
{
"name" : "setShadowType",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkShadowType type)",
"comment" : "\n Sets the shadow type for frame.\n Params:\n type = the new GtkShadowType\n\t \n",
"line" : 210}
,
{
"name" : "getLabel",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n If the frame's label widget is a GtkLabel, returns the\n text in the label widget. (The frame will have a GtkLabel\n for the label widget if a non-NULL argument was passed\n to gtk_frame_new().)\n Returns: the text in the label, or NULL if there was no label widget or the lable widget was not a GtkLabel. This string is owned by GTK+ and must not be modified or freed.\n\t \n",
"line" : 223}
,
{
"name" : "getLabelAlign",
"kind" : "function",
"protection" : "public",
"type" : "void(out float xalign, out float yalign)",
"comment" : "\n Retrieves the X and Y alignment of the frame's label. See\n gtk_frame_set_label_align().\n Params:\n xalign = location to store X alignment of\n frame's label, or NULL. [out][allow-none]\n yalign = location to store X alignment of\n frame's label, or NULL. [out][allow-none]\n\t \n",
"line" : 238}
,
{
"name" : "getLabelWidget",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Retrieves the label widget for the frame. See\n gtk_frame_set_label_widget().\n Returns: the label widget, or NULL if there is none. [transfer none]\n\t \n",
"line" : 249}
,
{
"name" : "getShadowType",
"kind" : "function",
"protection" : "public",
"type" : "GtkShadowType()",
"comment" : "\n Retrieves the shadow type of the frame. See\n gtk_frame_set_shadow_type().\n Returns: the current shadow type of the frame.\n\t \n",
"line" : 265}
]
}
]
}
,
{
"name" : "gtk.GammaCurve",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/GammaCurve.d",
"members" : [
{
"name" : "GammaCurve",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkGammaCurve widget is a variant of GtkCurve specifically for\n editing gamma curves, which are used in graphics applications such as the\n Gimp.\n The GtkGammaCurve widget shows a curve which the user can edit with the\n mouse just like a GtkCurve widget. On the right of the curve it also displays\n 5 buttons, 3 of which change between the 3 curve modes (spline, linear and\n free), and the other 2 set the curve to a particular gamma value, or reset it\n to a straight line.\n As of GTK+ 2.20, GtkGammaCurve has been deprecated since it is too specialized.\n \n",
"line" : 78,
"base" : "VBox",
"members" : [
{
"name" : "gtkGammaCurve",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkGammaCurve*",
"comment" : " the main Gtk struct \n",
"line" : 82}
,
{
"name" : "getGammaCurveStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkGammaCurve*()",
"line" : 85}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 92}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "GammaCurve(GtkGammaCurve* gtkGammaCurve)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 100}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 118}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "GammaCurve()",
"comment" : "\n\t \n\n Warning\n gtk_gamma_curve_new has been deprecated since version 2.20 and should not be used in newly-written code. Don't use this widget anymore.\n Creates a new GtkGammaCurve.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 133}
]
}
]
}
,
{
"name" : "gtk.GCs",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/GCs.d",
"members" : [
{
"name" : "GCs",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n These functions provide access to a shared pool of GdkGC objects.\n When a new GdkGC is needed, gtk_gc_get() is called with the required depth,\n colormap and GdkGCValues. If a GdkGC with the required properties already\n exists then that is returned. If not, a new GdkGC is created.\n When the GdkGC is no longer needed, gtk_gc_release() should be called.\n \n",
"line" : 80,
"base" : "Object",
"members" : [
{
"name" : "get",
"kind" : "function",
"protection" : "public",
"type" : "GC(int depth, Colormap colormap, GdkGCValues* values, GdkGCValuesMask valuesMask)",
"comment" : "\n\t \n\n Gets a GdkGC with the given depth, colormap and GdkGCValues.\n If a GdkGC with the given properties already exists then it is returned,\n otherwise a new GdkGC is created.\n The returned GdkGC should be released with gtk_gc_release() when it is no\n longer needed.\n Params:\n depth = the depth of the GdkGC to create.\n colormap = the GdkColormap (FIXME: I don't know why this is needed).\n values = a GdkGCValues struct containing settings for the GdkGC.\n valuesMask = a set of flags indicating which of the fields in values has\n been set.\n Returns: a GdkGC.\n\t \n",
"line" : 99}
,
{
"name" : "release",
"kind" : "function",
"protection" : "public",
"type" : "void(GC gc)",
"comment" : "\n Releases a GdkGC allocated using gtk_gc_get().\n Params:\n gc = a GdkGC.\n\t \n",
"line" : 115}
]
}
]
}
,
{
"name" : "gtk.HandleBox",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/HandleBox.d",
"members" : [
{
"name" : "HandleBox",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkHandleBox widget allows a portion of a window to be \"torn\n off\". It is a bin widget which displays its child and a handle that\n the user can drag to tear off a separate window (the float\n window) containing the child widget. A thin\n ghost is drawn in the original location of the\n handlebox. By dragging the separate window back to its original\n location, it can be reattached.\n When reattaching, the ghost and float window, must be aligned\n along one of the edges, the snap edge.\n This either can be specified by the application programmer\n explicitely, or GTK+ will pick a reasonable default based\n on the handle position.\n To make detaching and reattaching the handlebox as minimally confusing\n as possible to the user, it is important to set the snap edge so that\n the snap edge does not move when the handlebox is deattached. For\n instance, if the handlebox is packed at the bottom of a VBox, then\n when the handlebox is detached, the bottom edge of the handlebox's\n allocation will remain fixed as the height of the handlebox shrinks,\n so the snap edge should be set to GTK_POS_BOTTOM.\n \n",
"line" : 90,
"base" : "Bin",
"members" : [
{
"name" : "gtkHandleBox",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkHandleBox*",
"comment" : " the main Gtk struct \n",
"line" : 94}
,
{
"name" : "getHandleBoxStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkHandleBox*()",
"line" : 97}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 104}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "HandleBox(GtkHandleBox* gtkHandleBox)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 112}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 130}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 138}
,
{
"name" : "onChildAttachedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkWidget*, HandleBox)[]",
"line" : 140}
,
{
"name" : "addOnChildAttached",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkWidget*, HandleBox) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted when the contents of the\n handlebox are reattached to the main window.\n\t \n",
"line" : 145}
,
{
"name" : "callBackChildAttached",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkHandleBox* handleboxStruct, GtkWidget* widget, HandleBox handleBox)",
"line" : 160}
,
{
"name" : "onChildDetachedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkWidget*, HandleBox)[]",
"line" : 168}
,
{
"name" : "addOnChildDetached",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkWidget*, HandleBox) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted when the contents of the\n handlebox are detached from the main window.\n\t \n",
"line" : 173}
,
{
"name" : "callBackChildDetached",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkHandleBox* handleboxStruct, GtkWidget* widget, HandleBox handleBox)",
"line" : 188}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "HandleBox()",
"comment" : "\n Create a new handle box.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 201}
,
{
"name" : "setShadowType",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkShadowType type)",
"comment" : "\n Sets the type of shadow to be drawn around the border\n of the handle box.\n Params:\n type = the shadow type.\n\t \n",
"line" : 218}
,
{
"name" : "setHandlePosition",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkPositionType position)",
"comment" : "\n Sets the side of the handlebox where the handle is drawn.\n Params:\n position = the side of the handlebox where the handle should be drawn.\n\t \n",
"line" : 229}
,
{
"name" : "setSnapEdge",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkPositionType edge)",
"comment" : "\n Sets the snap edge of a handlebox. The snap edge is\n the edge of the detached child that must be aligned\n with the corresponding edge of the \"ghost\" left\n behind when the child was detached to reattach\n the torn-off window. Usually, the snap edge should\n be chosen so that it stays in the same place on\n the screen when the handlebox is torn off.\n If the snap edge is not set, then an appropriate value\n will be guessed from the handle position. If the\n handle position is GTK_POS_RIGHT or GTK_POS_LEFT,\n then the snap edge will be GTK_POS_TOP, otherwise\n it will be GTK_POS_LEFT.\n Params:\n edge = the snap edge, or -1 to unset the value; in which\n case GTK+ will try to guess an appropriate value\n in the future.\n\t \n",
"line" : 253}
,
{
"name" : "getHandlePosition",
"kind" : "function",
"protection" : "public",
"type" : "GtkPositionType()",
"comment" : "\n Gets the handle position of the handle box. See\n gtk_handle_box_set_handle_position().\n Returns: the current handle position.\n\t \n",
"line" : 264}
,
{
"name" : "getShadowType",
"kind" : "function",
"protection" : "public",
"type" : "GtkShadowType()",
"comment" : "\n Gets the type of shadow drawn around the handle box. See\n gtk_handle_box_set_shadow_type().\n Returns: the type of shadow currently drawn around the handle box.\n\t \n",
"line" : 275}
,
{
"name" : "getSnapEdge",
"kind" : "function",
"protection" : "public",
"type" : "GtkPositionType()",
"comment" : "\n Gets the edge used for determining reattachment of the handle box. See\n gtk_handle_box_set_snap_edge().\n Returns: the edge used for determining reattachment, or (GtkPositionType)-1 if this is determined (as per default) from the handle position.\n\t \n",
"line" : 286}
,
{
"name" : "getChildDetached",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Whether the handlebox's child is currently detached.\n Since 2.14\n Returns: TRUE if the child is currently detached, otherwise FALSE\n\t \n",
"line" : 297}
]
}
]
}
,
{
"name" : "gtk.HBox",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/HBox.d",
"members" : [
{
"name" : "HBox",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkHBox is a container that organizes child widgets into a single row.\n Use the GtkBox packing interface to determine the arrangement,\n spacing, width, and alignment of GtkHBox children.\n All children are allocated the same height.\n \n",
"line" : 73,
"base" : "Box",
"members" : [
{
"name" : "gtkHBox",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkHBox*",
"comment" : " the main Gtk struct \n",
"line" : 77}
,
{
"name" : "getHBoxStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkHBox*()",
"line" : 80}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 87}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "HBox(GtkHBox* gtkHBox)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 95}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 113}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "HBox(int homogeneous, int spacing)",
"comment" : "\n\t \n\n Creates a new GtkHBox.\n Params:\n homogeneous = TRUE if all children are to be given equal space allotments.\n spacing = the number of pixels to place by default between children.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 129}
]
}
]
}
,
{
"name" : "gtk.HButtonBox",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/HButtonBox.d",
"members" : [
{
"name" : "HButtonBox",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A button box should be used to provide a consistent layout of buttons\n throughout your application. The layout\/spacing can be altered by the\n programmer, or if desired, by the user to alter the 'feel' of a\n program to a small degree.\n A GtkHButtonBox is created with gtk_hbutton_box_new(). Buttons are\n packed into a button box the same way widgets are added to any other\n container, using gtk_container_add(). You can also use\n gtk_box_pack_start() or gtk_box_pack_end(), but for button boxes both\n these functions work just like gtk_container_add(), ie., they pack the\n button in a way that depends on the current layout style and on\n whether the button has had gtk_button_box_set_child_secondary() called\n on it.\n The spacing between buttons can be set with gtk_box_set_spacing(). The\n arrangement and layout of the buttons can be changed with\n gtk_button_box_set_layout().\n \n",
"line" : 84,
"base" : "ButtonBox",
"members" : [
{
"name" : "gtkHButtonBox",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkHButtonBox*",
"comment" : " the main Gtk struct \n",
"line" : 88}
,
{
"name" : "getHButtonBoxStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkHButtonBox*()",
"line" : 91}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 98}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "HButtonBox(GtkHButtonBox* gtkHButtonBox)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 106}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 124}
,
{
"name" : "createActionBox",
"kind" : "function",
"protection" : "public",
"type" : "HButtonBox()",
"comment" : "\n Creates a new HButtonBox and sets comon parameters\n\t \n",
"line" : 133}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "HButtonBox()",
"comment" : "\n\t \n\n Creates a new horizontal button box.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 150}
,
{
"name" : "getSpacingDefault",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Warning\n gtk_hbutton_box_get_spacing_default is deprecated and should not be used in newly-written code.\n Retrieves the current default spacing for horizontal button boxes. This is the number of pixels\n to be placed between the buttons when they are arranged.\n Returns: the default number of pixels between buttons.\n\t \n",
"line" : 168}
,
{
"name" : "getLayoutDefault",
"kind" : "function",
"protection" : "public",
"type" : "GtkButtonBoxStyle()",
"comment" : "\n Warning\n gtk_hbutton_box_get_layout_default is deprecated and should not be used in newly-written code.\n Retrieves the current layout used to arrange buttons in button box widgets.\n Returns: the current GtkButtonBoxStyle.\n\t \n",
"line" : 180}
,
{
"name" : "setSpacingDefault",
"kind" : "function",
"protection" : "public",
"type" : "void(int spacing)",
"comment" : "\n Warning\n gtk_hbutton_box_set_spacing_default is deprecated and should not be used in newly-written code.\n Changes the default spacing that is placed between widgets in an\n horizontal button box.\n Params:\n spacing = an integer value.\n\t \n",
"line" : 194}
,
{
"name" : "setLayoutDefault",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkButtonBoxStyle layout)",
"comment" : "\n Warning\n gtk_hbutton_box_set_layout_default is deprecated and should not be used in newly-written code.\n Sets a new layout mode that will be used by all button boxes.\n Params:\n layout = a new GtkButtonBoxStyle.\n\t \n",
"line" : 207}
]
}
]
}
,
{
"name" : "gtk.HPaned",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/HPaned.d",
"members" : [
{
"name" : "HPaned",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The HPaned widget is a container widget with two\n children arranged horizontally. The division between\n the two panes is adjustable by the user by dragging\n a handle. See GtkPaned for details.\n \n",
"line" : 76,
"base" : "Paned",
"members" : [
{
"name" : "gtkHPaned",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkHPaned*",
"comment" : " the main Gtk struct \n",
"line" : 80}
,
{
"name" : "getHPanedStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkHPaned*()",
"line" : 83}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 90}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "HPaned(GtkHPaned* gtkHPaned)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 98}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 116}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "HPaned(Widget child1, Widget child2)",
"comment" : "\n Creates a new HPaned and adds two widgets as it's children\n Params:\n  child1 =\n  child2 =\n\t \n",
"line" : 128}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "HPaned()",
"comment" : "\n\t \n\n Create a new GtkHPaned\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 143}
]
}
]
}
,
{
"name" : "gtk.HRuler",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/HRuler.d",
"members" : [
{
"name" : "HRuler",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n Note\n  This widget is considered too specialized\/little-used for\n  GTK+, and will be removed in GTK 3. If your application needs this widget,\n  feel free to use it, as the widget is useful in some applications; it's just\n  not of general interest. However, we are not accepting new features for the\n  widget, and it will move out of the GTK+ distribution.\n The HRuler widget is a widget arranged horizontally creating a ruler that is\n utilized around other widgets such as a text widget. The ruler is used to show\n the location of the mouse on the window and to show the size of the window in\n specified units. The available units of measurement are GTK_PIXELS, GTK_INCHES\n and GTK_CENTIMETERS. GTK_PIXELS is the default.\n rulers.\n \n",
"line" : 81,
"base" : "Ruler",
"members" : [
{
"name" : "gtkHRuler",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkHRuler*",
"comment" : " the main Gtk struct \n",
"line" : 85}
,
{
"name" : "getHRulerStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkHRuler*()",
"line" : 88}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 95}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "HRuler(GtkHRuler* gtkHRuler)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 103}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 121}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "HRuler()",
"comment" : "\n\t \n\n Warning\n gtk_hruler_new has been deprecated since version 2.24 and should not be used in newly-written code. GtkRuler has been removed from GTK 3 for being\n  unmaintained and too specialized. There is no replacement.\n Creates a new horizontal ruler.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 137}
]
}
]
}
,
{
"name" : "gtk.HScale",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/HScale.d",
"members" : [
{
"name" : "HScale",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkHScale widget is used to allow the user to select a value using\n a horizontal slider. To create one, use gtk_hscale_new_with_range().\n The position to show the current value, and the number of decimal places\n shown can be set using the parent GtkScale class's functions.\n \n",
"line" : 76,
"base" : "Scale",
"members" : [
{
"name" : "gtkHScale",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkHScale*",
"comment" : " the main Gtk struct \n",
"line" : 80}
,
{
"name" : "getHScaleStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkHScale*()",
"line" : 83}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 90}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "HScale(GtkHScale* gtkHScale)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 98}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 116}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "HScale(Adjustment adjustment)",
"comment" : "\n\t \n\n Creates a new GtkHScale.\n Params:\n adjustment = the GtkAdjustment which sets the range of the scale.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 131}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "HScale(double min, double max, double step)",
"comment" : "\n Creates a new horizontal scale widget that lets the user input a\n number between min and max (including min and max) with the\n increment step. step must be nonzero; it's the distance the\n slider moves when using the arrow keys to adjust the scale value.\n Note that the way in which the precision is derived works best if step\n is a power of ten. If the resulting precision is not suitable for your\n needs, use gtk_scale_set_digits() to correct it.\n Params:\n min = minimum value\n max = maximum value\n step = step increment (tick size) used with keyboard shortcuts\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 156}
]
}
]
}
,
{
"name" : "gtk.HScrollbar",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/HScrollbar.d",
"members" : [
{
"name" : "HScrollbar",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkHScrollbar widget is a widget arranged horizontally creating a\n scrollbar. See GtkScrollbar for details on\n scrollbars. GtkAdjustment pointers may be added to handle the\n adjustment of the scrollbar or it may be left NULL in which case one\n will be created for you. See GtkScrollbar for a description of what the\n fields in an adjustment represent for a scrollbar.\n \n",
"line" : 78,
"base" : "Scrollbar",
"members" : [
{
"name" : "gtkHScrollbar",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkHScrollbar*",
"comment" : " the main Gtk struct \n",
"line" : 82}
,
{
"name" : "getHScrollbarStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkHScrollbar*()",
"line" : 85}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 92}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "HScrollbar(GtkHScrollbar* gtkHScrollbar)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 100}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 118}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "HScrollbar(Adjustment adjustment)",
"comment" : "\n\t \n\n Creates a new horizontal scrollbar.\n Params:\n adjustment = the GtkAdjustment to use, or NULL to create a new adjustment. [allow-none]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 133}
]
}
]
}
,
{
"name" : "gtk.HSeparator",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/HSeparator.d",
"members" : [
{
"name" : "HSeparator",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkHSeparator widget is a horizontal separator, used to group the\n widgets within a window. It displays a horizontal line with a shadow to\n make it appear sunken into the interface.\n Note\n The GtkHSeparator widget is not used as a separator within menus.\n To create a separator in a menu create an empty GtkSeparatorMenuItem\n widget using gtk_separator_menu_item_new() and add it to the menu with\n gtk_menu_shell_append().\n \n",
"line" : 77,
"base" : "Separator",
"members" : [
{
"name" : "gtkHSeparator",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkHSeparator*",
"comment" : " the main Gtk struct \n",
"line" : 81}
,
{
"name" : "getHSeparatorStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkHSeparator*()",
"line" : 84}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 91}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "HSeparator(GtkHSeparator* gtkHSeparator)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 99}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 117}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "HSeparator()",
"comment" : "\n\t \n\n Creates a new GtkHSeparator.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 130}
]
}
]
}
,
{
"name" : "gtk.IconFactory",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/IconFactory.d",
"members" : [
{
"name" : "IconFactory",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n Browse the available stock icons in the list of stock IDs found here. You can also use\n the gtk-demo application for this purpose.\n  An icon factory manages a collection of GtkIconSet; a GtkIconSet manages a\n  set of variants of a particular icon (i.e. a GtkIconSet contains variants for\n  different sizes and widget states). Icons in an icon factory are named by a\n  stock ID, which is a simple string identifying the icon. Each GtkStyle has a\n  list of GtkIconFactory derived from the current theme; those icon factories\n  are consulted first when searching for an icon. If the theme doesn't set a\n  particular icon, GTK+ looks for the icon in a list of default icon factories,\n  maintained by gtk_icon_factory_add_default() and\n  gtk_icon_factory_remove_default(). Applications with icons should add a default\n  icon factory with their icons, which will allow themes to override the icons\n  for the application.\n To display an icon, always use gtk_style_lookup_icon_set() on the widget that\n will display the icon, or the convenience function\n gtk_widget_render_icon(). These functions take the theme into account when\n looking up the icon to use for a given stock ID.\n GtkIconFactory as GtkBuildable\n GtkIconFactory supports a custom <sources> element, which\n can contain multiple <source> elements.\n The following attributes are allowed:\n stock-id\n The stock id of the source, a string.\n This attribute is mandatory\n filename\n The filename of the source, a string.\n This attribute is optional\n icon-name\n The icon name for the source, a string.\n This attribute is optional.\n size\n Size of the icon, a GtkIconSize enum value.\n This attribute is optional.\n direction\n Direction of the source, a GtkTextDirection enum value.\n This attribute is optional.\n state\n State of the source, a GtkStateType enum value.\n This attribute is optional.\n $(DDOC_COMMENT example)\n \n",
"line" : 114,
"base" : "ObjectG",
"members" : [
{
"name" : "gtkIconFactory",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkIconFactory*",
"comment" : " the main Gtk struct \n",
"line" : 118}
,
{
"name" : "getIconFactoryStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkIconFactory*()",
"line" : 121}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 128}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "IconFactory(GtkIconFactory* gtkIconFactory)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 136}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 154}
,
{
"name" : "add",
"kind" : "function",
"protection" : "public",
"type" : "void(string stockId, IconSet iconSet)",
"comment" : "\n\t \n\n Adds the given icon_set to the icon factory, under the name\n stock_id. stock_id should be namespaced for your application,\n e.g. \"myapp-whatever-icon\". Normally applications create a\n GtkIconFactory, then add it to the list of default factories with\n gtk_icon_factory_add_default(). Then they pass the stock_id to\n widgets such as GtkImage to display the icon. Themes can provide\n an icon with the same name (such as \"myapp-whatever-icon\") to\n override your application's default icons. If an icon already\n existed in factory for stock_id, it is unreferenced and replaced\n with the new icon_set.\n Params:\n stockId = icon name\n iconSet = icon set\n\t \n",
"line" : 178}
,
{
"name" : "addDefault",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Adds an icon factory to the list of icon factories searched by\n gtk_style_lookup_icon_set(). This means that, for example,\n gtk_image_new_from_stock() will be able to find icons in factory.\n There will normally be an icon factory added for each library or\n application that comes with icons. The default icon factories\n can be overridden by themes.\n\t \n",
"line" : 192}
,
{
"name" : "lookup",
"kind" : "function",
"protection" : "public",
"type" : "IconSet(string stockId)",
"comment" : "\n Looks up stock_id in the icon factory, returning an icon set\n if found, otherwise NULL. For display to the user, you should\n use gtk_style_lookup_icon_set() on the GtkStyle for the\n widget that will display the icon, instead of using this\n function directly, so that themes are taken into account.\n Params:\n stockId = an icon name\n Returns: icon set of stock_id.\n\t \n",
"line" : 208}
,
{
"name" : "lookupDefault",
"kind" : "function",
"protection" : "public",
"type" : "IconSet(string stockId)",
"comment" : "\n Looks for an icon in the list of default icon factories. For\n display to the user, you should use gtk_style_lookup_icon_set() on\n the GtkStyle for the widget that will display the icon, instead of\n using this function directly, so that themes are taken into\n account.\n Params:\n stockId = an icon name\n Returns: a GtkIconSet, or NULL\n\t \n",
"line" : 229}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "IconFactory()",
"comment" : "\n Creates a new GtkIconFactory. An icon factory manages a collection\n of GtkIconSets; a GtkIconSet manages a set of variants of a\n particular icon (i.e. a GtkIconSet contains variants for different\n sizes and widget states). Icons in an icon factory are named by a\n stock ID, which is a simple string identifying the icon. Each\n GtkStyle has a list of GtkIconFactorys derived from the current\n theme; those icon factories are consulted first when searching for\n an icon. If the theme doesn't set a particular icon, GTK+ looks for\n the icon in a list of default icon factories, maintained by\n gtk_icon_factory_add_default() and\n gtk_icon_factory_remove_default(). Applications with icons should\n add a default icon factory with their icons, which will allow\n themes to override the icons for the application.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 256}
,
{
"name" : "removeDefault",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Removes an icon factory from the list of default icon\n factories. Not normally used; you might use it for a library that\n can be unloaded or shut down.\n\t \n",
"line" : 272}
]
}
]
}
,
{
"name" : "gtk.IconInfo",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/IconInfo.d",
"members" : [
{
"name" : "IconInfo",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkIconTheme provides a facility for looking up icons by name\n and size. The main reason for using a name rather than simply\n providing a filename is to allow different icons to be used\n depending on what icon theme is selected\n by the user. The operation of icon themes on Linux and Unix\n follows the Icon\n Theme Specification. There is a default icon theme,\n named hicolor where applications should install\n their icons, but more additional application themes can be\n installed as operating system vendors and users choose.\n Named icons are similar to the Themeable Stock Images(3)\n facility, and the distinction between the two may be a bit confusing.\n A few things to keep in mind:\n Stock images usually are used in conjunction with\n Stock Items(3)., such as GTK_STOCK_OK or\n GTK_STOCK_OPEN. Named icons are easier to set up and therefore\n are more useful for new icons that an application wants to\n add, such as application icons or window icons.\n Stock images can only be loaded at the symbolic sizes defined\n by the GtkIconSize enumeration, or by custom sizes defined\n by gtk_icon_size_register(), while named icons are more flexible\n and any pixel size can be specified.\n Because stock images are closely tied to stock items, and thus\n to actions in the user interface, stock images may come in\n multiple variants for different widget states or writing\n directions.\n A good rule of thumb is that if there is a stock image for what\n you want to use, use it, otherwise use a named icon. It turns\n out that internally stock images are generally defined in\n terms of one or more named icons. (An example of the\n more than one case is icons that depend on writing direction;\n GTK_STOCK_GO_FORWARD uses the two themed icons\n \"gtk-stock-go-forward-ltr\" and \"gtk-stock-go-forward-rtl\".)\n In many cases, named themes are used indirectly, via GtkImage\n or stock items, rather than directly, but looking up icons\n directly is also simple. The GtkIconTheme object acts\n as a database of all the icons in the current theme. You\n can create new GtkIconTheme objects, but its much more\n efficient to use the standard icon theme for the GdkScreen\n so that the icon information is shared with other people\n looking up icons. In the case where the default screen is\n being used, looking up an icon can be as simple as:\n $(DDOC_COMMENT example)\n \n",
"line" : 128,
"base" : "Object",
"members" : [
{
"name" : "gtkIconInfo",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkIconInfo*",
"comment" : " the main Gtk struct \n",
"line" : 131}
,
{
"name" : "getIconInfoStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkIconInfo*()",
"line" : 134}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 141}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "IconInfo(GtkIconInfo* gtkIconInfo)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 149}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 161}
,
{
"name" : "onChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(IconInfo)[]",
"line" : 163}
,
{
"name" : "addOnChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(IconInfo) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when the current icon theme is switched or GTK+ detects\n that a change has occurred in the contents of the current\n icon theme.\n\t \n",
"line" : 169}
,
{
"name" : "callBackChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkIconTheme* iconThemeStruct, IconInfo iconInfo)",
"line" : 184}
,
{
"name" : "copy",
"kind" : "function",
"protection" : "public",
"type" : "IconInfo()",
"comment" : "\n Make a copy of a GtkIconInfo.\n Since 2.4\n Returns: the new GtkIconInfo\n\t \n",
"line" : 198}
,
{
"name" : "free",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Free a GtkIconInfo and associated information\n Since 2.4\n\t \n",
"line" : 213}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "IconInfo(IconTheme iconTheme, Pixbuf pixbuf)",
"comment" : "\n Creates a GtkIconInfo for a GdkPixbuf.\n Since 2.14\n Params:\n iconTheme = a GtkIconTheme\n pixbuf = the pixbuf to wrap in a GtkIconInfo\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 227}
,
{
"name" : "getBaseSize",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the base size for the icon. The base size\n is a size for the icon that was specified by\n the icon theme creator. This may be different\n than the actual size of image; an example of\n this is small emblem icons that can be attached\n to a larger icon. These icons will be given\n the same base size as the larger icons to which\n they are attached.\n Since 2.4\n Returns: the base size, or 0, if no base size is known for the icon.\n\t \n",
"line" : 250}
,
{
"name" : "getFilename",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the filename for the icon. If the\n GTK_ICON_LOOKUP_USE_BUILTIN flag was passed\n to gtk_icon_theme_lookup_icon(), there may be\n no filename if a builtin icon is returned; in this\n case, you should use gtk_icon_info_get_builtin_pixbuf().\n Since 2.4\n Returns: the filename for the icon, or NULL if gtk_icon_info_get_builtin_pixbuf() should be used instead. The return value is owned by GTK+ and should not be modified or freed.\n\t \n",
"line" : 265}
,
{
"name" : "getBuiltinPixbuf",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf()",
"comment" : "\n Gets the built-in image for this icon, if any. To allow\n GTK+ to use built in icon images, you must pass the\n GTK_ICON_LOOKUP_USE_BUILTIN to\n gtk_icon_theme_lookup_icon().\n Since 2.4\n Returns: the built-in image pixbuf, or NULL. No extra reference is added to the returned pixbuf, so if you want to keep it around, you must use g_object_ref(). The returned image must not be modified. [transfer none]\n\t \n",
"line" : 279}
,
{
"name" : "loadIcon",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf()",
"comment" : "\n Renders an icon previously looked up in an icon theme using\n gtk_icon_theme_lookup_icon(); the size will be based on the size\n passed to gtk_icon_theme_lookup_icon(). Note that the resulting\n pixbuf may not be exactly this size; an icon theme may have icons\n that differ slightly from their nominal sizes, and in addition GTK+\n will avoid scaling icons that it considers sufficiently close to the\n requested size or for which the source image would have to be scaled\n up too far. (This maintains sharpness.). This behaviour can be changed\n by passing the GTK_ICON_LOOKUP_FORCE_SIZE flag when obtaining\n the GtkIconInfo. If this flag has been specified, the pixbuf\n returned by this function will be scaled to the exact size.\n Since 2.4\n Returns: the rendered icon; this may be a newly created icon or a new reference to an internal icon, so you must not modify the icon. Use g_object_unref() to release your reference to the icon.\n Throws: GException on failure.\n\t \n",
"line" : 306}
,
{
"name" : "setRawCoordinates",
"kind" : "function",
"protection" : "public",
"type" : "void(int rawCoordinates)",
"comment" : "\n Sets whether the coordinates returned by gtk_icon_info_get_embedded_rect()\n and gtk_icon_info_get_attach_points() should be returned in their\n original form as specified in the icon theme, instead of scaled\n appropriately for the pixbuf returned by gtk_icon_info_load_icon().\n Raw coordinates are somewhat strange; they are specified to be with\n respect to the unscaled pixmap for PNG and XPM icons, but for SVG\n icons, they are in a 1000x1000 coordinate space that is scaled\n to the final size of the icon. You can determine if the icon is an SVG\n icon by using gtk_icon_info_get_filename(), and seeing if it is non-NULL\n and ends in '.svg'.\n This function is provided primarily to allow compatibility wrappers\n for older API's, and is not expected to be useful for applications.\n Since 2.4\n Params:\n rawCoordinates = whether the coordinates of embedded rectangles\n  and attached points should be returned in their original\n  (unscaled) form.\n\t \n",
"line" : 344}
,
{
"name" : "getEmbeddedRect",
"kind" : "function",
"protection" : "public",
"type" : "int(out GdkRectangle rectangle)",
"comment" : "\n Gets the coordinates of a rectangle within the icon\n that can be used for display of information such\n as a preview of the contents of a text file.\n See gtk_icon_info_set_raw_coordinates() for further\n information about the coordinate system.\n Since 2.4\n Params:\n rectangle = GdkRectangle in which to store embedded\n  rectangle coordinates; coordinates are only stored\n  when this function returns TRUE.\n Returns: TRUE if the icon has an embedded rectangle\n\t \n",
"line" : 363}
,
{
"name" : "getAttachPoints",
"kind" : "function",
"protection" : "public",
"type" : "int(out GdkPoint[] points)",
"comment" : "\n Fetches the set of attach points for an icon. An attach point\n is a location in the icon that can be used as anchor points for attaching\n emblems or overlays to the icon.\n Since 2.4\n Params:\n points = location to store pointer to an array of points, or NULL\n  free the array of points with g_free(). [allow-none][out]\n Returns: TRUE if there are any attach points for the icon.\n\t \n",
"line" : 379}
,
{
"name" : "getDisplayName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the display name for an icon. A display name is a\n string to be used in place of the icon name in a user\n visible context like a list of icons.\n Since 2.4\n Signal Details\n The \"changed\" signal\n void user_function (GtkIconTheme *icon_theme,\n  gpointer user_data) : Run Last\n Emitted when the current icon theme is switched or GTK+ detects\n that a change has occurred in the contents of the current\n icon theme.\n Returns: the display name for the icon or NULL, if the icon doesn't have a specified display name. This value is owned icon_info and must not be modified or free.\n\t \n",
"line" : 405}
]
}
]
}
,
{
"name" : "gtk.IconSet",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/IconSet.d",
"members" : [
{
"name" : "IconSet",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n Browse the available stock icons in the list of stock IDs found here. You can also use\n the gtk-demo application for this purpose.\n  An icon factory manages a collection of GtkIconSet; a GtkIconSet manages a\n  set of variants of a particular icon (i.e. a GtkIconSet contains variants for\n  different sizes and widget states). Icons in an icon factory are named by a\n  stock ID, which is a simple string identifying the icon. Each GtkStyle has a\n  list of GtkIconFactory derived from the current theme; those icon factories\n  are consulted first when searching for an icon. If the theme doesn't set a\n  particular icon, GTK+ looks for the icon in a list of default icon factories,\n  maintained by gtk_icon_factory_add_default() and\n  gtk_icon_factory_remove_default(). Applications with icons should add a default\n  icon factory with their icons, which will allow themes to override the icons\n  for the application.\n To display an icon, always use gtk_style_lookup_icon_set() on the widget that\n will display the icon, or the convenience function\n gtk_widget_render_icon(). These functions take the theme into account when\n looking up the icon to use for a given stock ID.\n GtkIconFactory as GtkBuildable\n GtkIconFactory supports a custom <sources> element, which\n can contain multiple <source> elements.\n The following attributes are allowed:\n stock-id\n The stock id of the source, a string.\n This attribute is mandatory\n filename\n The filename of the source, a string.\n This attribute is optional\n icon-name\n The icon name for the source, a string.\n This attribute is optional.\n size\n Size of the icon, a GtkIconSize enum value.\n This attribute is optional.\n direction\n Direction of the source, a GtkTextDirection enum value.\n This attribute is optional.\n state\n State of the source, a GtkStateType enum value.\n This attribute is optional.\n $(DDOC_COMMENT example)\n \n",
"line" : 123,
"base" : "Object",
"members" : [
{
"name" : "gtkIconSet",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkIconSet*",
"comment" : " the main Gtk struct \n",
"line" : 126}
,
{
"name" : "getIconSetStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkIconSet*()",
"line" : 129}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 136}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "IconSet(GtkIconSet* gtkIconSet)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 144}
,
{
"name" : "addSource",
"kind" : "function",
"protection" : "public",
"type" : "void(IconSource source)",
"comment" : "\n\t \n\n Icon sets have a list of GtkIconSource, which they use as base\n icons for rendering icons in different states and sizes. Icons are\n scaled, made to look insensitive, etc. in\n gtk_icon_set_render_icon(), but GtkIconSet needs base images to\n work with. The base images and when to use them are described by\n a GtkIconSource.\n This function copies source, so you can reuse the same source immediately\n without affecting the icon set.\n An example of when you'd use this function: a web browser's \"Back\n to Previous Page\" icon might point in a different direction in\n Hebrew and in English; it might look different when insensitive;\n and it might change size depending on toolbar mode (small\/large\n icons). So a single icon set would contain all those variants of\n the icon, and you might add a separate source for each one.\n You should nearly always add a \"default\" icon source with all\n fields wildcarded, which will be used as a fallback if no more\n specific source matches. GtkIconSet always prefers more specific\n icon sources to more generic icon sources. The order in which you\n add the sources to the icon set does not matter.\n gtk_icon_set_new_from_pixbuf() creates a new icon set with a\n default icon source based on the given pixbuf.\n Params:\n source = a GtkIconSource\n\t \n",
"line" : 182}
,
{
"name" : "copy",
"kind" : "function",
"protection" : "public",
"type" : "IconSet()",
"comment" : "\n Copies icon_set by value.\n Returns: a new GtkIconSet identical to the first.\n\t \n",
"line" : 192}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "IconSet()",
"comment" : "\n Creates a new GtkIconSet. A GtkIconSet represents a single icon\n in various sizes and widget states. It can provide a GdkPixbuf\n for a given size and state on request, and automatically caches\n some of the rendered GdkPixbuf objects.\n Normally you would use gtk_widget_render_icon() instead of\n using GtkIconSet directly. The one case where you'd use\n GtkIconSet is to create application-specific icon sets to place in\n a GtkIconFactory.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 214}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "IconSet(Pixbuf pixbuf)",
"comment" : "\n Creates a new GtkIconSet with pixbuf as the default\/fallback\n source image. If you don't add any additional GtkIconSource to the\n icon set, all variants of the icon will be created from pixbuf,\n using scaling, pixelation, etc. as required to adjust the icon size\n or make the icon look insensitive\/prelighted.\n Params:\n pixbuf = a GdkPixbuf\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 235}
,
{
"name" : "doref",
"kind" : "function",
"protection" : "public",
"type" : "IconSet()",
"comment" : "\n Increments the reference count on icon_set.\n Returns: icon_set.\n\t \n",
"line" : 250}
,
{
"name" : "renderIcon",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf(Style style, GtkTextDirection direction, GtkStateType state, GtkIconSize size, Widget widget, string detail)",
"comment" : "\n Renders an icon using gtk_style_render_icon(). In most cases,\n gtk_widget_render_icon() is better, since it automatically provides\n most of the arguments from the current widget settings. This\n function never returns NULL; if the icon can't be rendered\n (perhaps because an image file fails to load), a default \"missing\n image\" icon will be returned instead.\n Params:\n style = a GtkStyle associated with widget, or NULL. [allow-none]\n direction = text direction\n state = widget state\n size = icon size. A size of (GtkIconSize)-1\n  means render at the size of the source and don't scale. [type int]\n widget = widget that will display the icon, or NULL.\n  The only use that is typically made of this\n  is to determine the appropriate GdkScreen. [allow-none]\n detail = detail to pass to the theme engine, or NULL.\n  Note that passing a detail of anything but NULL\n  will disable caching. [allow-none]\n Returns: a GdkPixbuf to be displayed\n\t \n",
"line" : 282}
,
{
"name" : "unref",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Decrements the reference count on icon_set, and frees memory\n if the reference count reaches 0.\n\t \n",
"line" : 297}
,
{
"name" : "getSizes",
"kind" : "function",
"protection" : "public",
"type" : "void(out GtkIconSize[] sizes)",
"comment" : "\n Obtains a list of icon sizes this icon set can render. The returned\n array must be freed with g_free().\n Params:\n sizes = return location\n  for array of sizes. [array length=n_sizes][out length=n_sizes][type int]\n\t \n",
"line" : 310}
]
}
]
}
,
{
"name" : "gtk.IconSize",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/IconSize.d",
"members" : [
{
"name" : "IconSize",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n Browse the available stock icons in the list of stock IDs found here. You can also use\n the gtk-demo application for this purpose.\n  An icon factory manages a collection of GtkIconSet; a GtkIconSet manages a\n  set of variants of a particular icon (i.e. a GtkIconSet contains variants for\n  different sizes and widget states). Icons in an icon factory are named by a\n  stock ID, which is a simple string identifying the icon. Each GtkStyle has a\n  list of GtkIconFactory derived from the current theme; those icon factories\n  are consulted first when searching for an icon. If the theme doesn't set a\n  particular icon, GTK+ looks for the icon in a list of default icon factories,\n  maintained by gtk_icon_factory_add_default() and\n  gtk_icon_factory_remove_default(). Applications with icons should add a default\n  icon factory with their icons, which will allow themes to override the icons\n  for the application.\n To display an icon, always use gtk_style_lookup_icon_set() on the widget that\n will display the icon, or the convenience function\n gtk_widget_render_icon(). These functions take the theme into account when\n looking up the icon to use for a given stock ID.\n GtkIconFactory as GtkBuildable\n GtkIconFactory supports a custom <sources> element, which\n can contain multiple <source> elements.\n The following attributes are allowed:\n stock-id\n The stock id of the source, a string.\n This attribute is mandatory\n filename\n The filename of the source, a string.\n This attribute is optional\n icon-name\n The icon name for the source, a string.\n This attribute is optional.\n size\n Size of the icon, a GtkIconSize enum value.\n This attribute is optional.\n direction\n Direction of the source, a GtkTextDirection enum value.\n This attribute is optional.\n state\n State of the source, a GtkStateType enum value.\n This attribute is optional.\n $(DDOC_COMMENT example)\n \n",
"line" : 113,
"base" : "Object",
"members" : [
{
"name" : "lookup",
"kind" : "function",
"protection" : "public",
"type" : "int(GtkIconSize size, out int width, out int height)",
"comment" : "\n\t \n\n Obtains the pixel size of a semantic icon size, possibly\n modified by user preferences for the default GtkSettings.\n (See gtk_icon_size_lookup_for_settings().)\n Normally size would be\n GTK_ICON_SIZE_MENU, GTK_ICON_SIZE_BUTTON, etc. This function\n isn't normally needed, gtk_widget_render_icon() is the usual\n way to get an icon for rendering, then just look at the size of\n the rendered pixbuf. The rendered pixbuf may not even correspond to\n the width\/height returned by gtk_icon_size_lookup(), because themes\n are free to render the pixbuf however they like, including changing\n the usual size.\n Params:\n size = an icon size. [type int]\n width = location to store icon width\n height = location to store icon height\n Returns: TRUE if size was a valid size\n\t \n",
"line" : 136}
,
{
"name" : "lookupForSettings",
"kind" : "function",
"protection" : "public",
"type" : "int(Settings settings, GtkIconSize size, out int width, out int height)",
"comment" : "\n Obtains the pixel size of a semantic icon size, possibly\n modified by user preferences for a particular\n GtkSettings. Normally size would be\n GTK_ICON_SIZE_MENU, GTK_ICON_SIZE_BUTTON, etc. This function\n isn't normally needed, gtk_widget_render_icon() is the usual\n way to get an icon for rendering, then just look at the size of\n the rendered pixbuf. The rendered pixbuf may not even correspond to\n the width\/height returned by gtk_icon_size_lookup(), because themes\n are free to render the pixbuf however they like, including changing\n the usual size.\n Since 2.2\n Params:\n settings = a GtkSettings object, used to determine\n  which set of user preferences to used.\n size = an icon size. [type int]\n width = location to store icon width\n height = location to store icon height\n Returns: TRUE if size was a valid size\n\t \n",
"line" : 162}
,
{
"name" : "register",
"kind" : "function",
"protection" : "public",
"type" : "GtkIconSize(string name, int width, int height)",
"comment" : "\n Registers a new icon size, along the same lines as GTK_ICON_SIZE_MENU,\n etc. Returns the integer value for the size.\n Params:\n name = name of the icon size\n width = the icon width\n height = the icon height\n Returns: integer value representing the size. [type int]\n\t \n",
"line" : 177}
,
{
"name" : "registerAlias",
"kind" : "function",
"protection" : "public",
"type" : "void(string alia, GtkIconSize target)",
"comment" : "\n Registers alias as another name for target.\n So calling gtk_icon_size_from_name() with alias as argument\n will return target.\n Params:\n target = an existing icon size. [type int]\n\t \n",
"line" : 190}
,
{
"name" : "fromName",
"kind" : "function",
"protection" : "public",
"type" : "GtkIconSize(string name)",
"comment" : "\n Looks up the icon size associated with name.\n Params:\n name = the name to look up.\n Returns: the icon size with the given name.\n\t \n",
"line" : 202}
,
{
"name" : "getName",
"kind" : "function",
"protection" : "public",
"type" : "string(GtkIconSize size)",
"comment" : "\n Gets the canonical name of the given icon size. The returned string\n is statically allocated and should not be freed.\n Params:\n size = a GtkIconSize. [type int]\n Returns: the name of the given icon size.\n\t \n",
"line" : 215}
]
}
]
}
,
{
"name" : "gtk.IconSource",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/IconSource.d",
"members" : [
{
"name" : "IconSource",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n Browse the available stock icons in the list of stock IDs found here. You can also use\n the gtk-demo application for this purpose.\n  An icon factory manages a collection of GtkIconSet; a GtkIconSet manages a\n  set of variants of a particular icon (i.e. a GtkIconSet contains variants for\n  different sizes and widget states). Icons in an icon factory are named by a\n  stock ID, which is a simple string identifying the icon. Each GtkStyle has a\n  list of GtkIconFactory derived from the current theme; those icon factories\n  are consulted first when searching for an icon. If the theme doesn't set a\n  particular icon, GTK+ looks for the icon in a list of default icon factories,\n  maintained by gtk_icon_factory_add_default() and\n  gtk_icon_factory_remove_default(). Applications with icons should add a default\n  icon factory with their icons, which will allow themes to override the icons\n  for the application.\n To display an icon, always use gtk_style_lookup_icon_set() on the widget that\n will display the icon, or the convenience function\n gtk_widget_render_icon(). These functions take the theme into account when\n looking up the icon to use for a given stock ID.\n GtkIconFactory as GtkBuildable\n GtkIconFactory supports a custom <sources> element, which\n can contain multiple <source> elements.\n The following attributes are allowed:\n stock-id\n The stock id of the source, a string.\n This attribute is mandatory\n filename\n The filename of the source, a string.\n This attribute is optional\n icon-name\n The icon name for the source, a string.\n This attribute is optional.\n size\n Size of the icon, a GtkIconSize enum value.\n This attribute is optional.\n direction\n Direction of the source, a GtkTextDirection enum value.\n This attribute is optional.\n state\n State of the source, a GtkStateType enum value.\n This attribute is optional.\n $(DDOC_COMMENT example)\n \n",
"line" : 117,
"base" : "Object",
"members" : [
{
"name" : "gtkIconSource",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkIconSource*",
"comment" : " the main Gtk struct \n",
"line" : 120}
,
{
"name" : "getIconSourceStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkIconSource*()",
"line" : 123}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 130}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "IconSource(GtkIconSource* gtkIconSource)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 138}
,
{
"name" : "copy",
"kind" : "function",
"protection" : "public",
"type" : "IconSource()",
"comment" : "\n\t \n\n Creates a copy of source; mostly useful for language bindings.\n Returns: a new GtkIconSource\n\t \n",
"line" : 155}
,
{
"name" : "free",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Frees a dynamically-allocated icon source, along with its\n filename, size, and pixbuf fields if those are not NULL.\n\t \n",
"line" : 170}
,
{
"name" : "getDirection",
"kind" : "function",
"protection" : "public",
"type" : "GtkTextDirection()",
"comment" : "\n Obtains the text direction this icon source applies to. The return\n value is only useful\/meaningful if the text direction is not\n wildcarded.\n Returns: text direction this source matches\n\t \n",
"line" : 182}
,
{
"name" : "getDirectionWildcarded",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value set by gtk_icon_source_set_direction_wildcarded().\n Returns: TRUE if this icon source is a base for any text direction variant\n\t \n",
"line" : 192}
,
{
"name" : "getFilename",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Retrieves the source filename, or NULL if none is set. The\n filename is not a copy, and should not be modified or expected to\n persist beyond the lifetime of the icon source.\n Returns: image filename. This string must not be modified or freed.\n\t \n",
"line" : 204}
,
{
"name" : "getPixbuf",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf()",
"comment" : "\n Retrieves the source pixbuf, or NULL if none is set.\n In addition, if a filename source is in use, this\n function in some cases will return the pixbuf from\n loaded from the filename. This is, for example, true\n for the GtkIconSource passed to the GtkStyle::render_icon()\n virtual function. The reference count on the pixbuf is\n not incremented.\n Returns: source pixbuf\n\t \n",
"line" : 220}
,
{
"name" : "getIconName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Retrieves the source icon name, or NULL if none is set. The\n icon_name is not a copy, and should not be modified or expected to\n persist beyond the lifetime of the icon source.\n Returns: icon name. This string must not be modified or freed.\n\t \n",
"line" : 237}
,
{
"name" : "getSize",
"kind" : "function",
"protection" : "public",
"type" : "GtkIconSize()",
"comment" : "\n Obtains the icon size this source applies to. The return value\n is only useful\/meaningful if the icon size is not wildcarded.\n Returns: icon size this source matches. [type int]\n\t \n",
"line" : 248}
,
{
"name" : "getSizeWildcarded",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value set by gtk_icon_source_set_size_wildcarded().\n Returns: TRUE if this icon source is a base for any icon size variant\n\t \n",
"line" : 258}
,
{
"name" : "getState",
"kind" : "function",
"protection" : "public",
"type" : "GtkStateType()",
"comment" : "\n Obtains the widget state this icon source applies to. The return\n value is only useful\/meaningful if the widget state is not\n wildcarded.\n Returns: widget state this source matches\n\t \n",
"line" : 270}
,
{
"name" : "getStateWildcarded",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value set by gtk_icon_source_set_state_wildcarded().\n Returns: TRUE if this icon source is a base for any widget state variant\n\t \n",
"line" : 280}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "IconSource()",
"comment" : "\n Creates a new GtkIconSource. A GtkIconSource contains a GdkPixbuf (or\n image filename) that serves as the base image for one or more of the\n icons in a GtkIconSet, along with a specification for which icons in the\n icon set will be based on that pixbuf or image file. An icon set contains\n a set of icons that represent \"the same\" logical concept in different states,\n different global text directions, and different sizes.\n So for example a web browser's \"Back to Previous Page\" icon might\n point in a different direction in Hebrew and in English; it might\n look different when insensitive; and it might change size depending\n on toolbar mode (small\/large icons). So a single icon set would\n contain all those variants of the icon. GtkIconSet contains a list\n of GtkIconSource from which it can derive specific icon variants in\n the set.\n In the simplest case, GtkIconSet contains one source pixbuf from\n which it derives all variants. The convenience function\n gtk_icon_set_new_from_pixbuf() handles this case; if you only have\n one source pixbuf, just use that function.\n If you want to use a different base pixbuf for different icon\n variants, you create multiple icon sources, mark which variants\n they'll be used to create, and add them to the icon set with\n gtk_icon_set_add_source().\n By default, the icon source has all parameters wildcarded. That is,\n the icon source will be used as the base icon for any desired text\n direction, widget state, or icon size.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 313}
,
{
"name" : "setDirection",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkTextDirection direction)",
"comment" : "\n Sets the text direction this icon source is intended to be used\n with.\n Setting the text direction on an icon source makes no difference\n if the text direction is wildcarded. Therefore, you should usually\n call gtk_icon_source_set_direction_wildcarded() to un-wildcard it\n in addition to calling this function.\n Params:\n direction = text direction this source applies to\n\t \n",
"line" : 334}
,
{
"name" : "setDirectionWildcarded",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n If the text direction is wildcarded, this source can be used\n as the base image for an icon in any GtkTextDirection.\n If the text direction is not wildcarded, then the\n text direction the icon source applies to should be set\n with gtk_icon_source_set_direction(), and the icon source\n will only be used with that text direction.\n GtkIconSet prefers non-wildcarded sources (exact matches) over\n wildcarded sources, and will use an exact match when possible.\n Params:\n setting = TRUE to wildcard the text direction\n\t \n",
"line" : 352}
,
{
"name" : "setFilename",
"kind" : "function",
"protection" : "public",
"type" : "void(string filename)",
"comment" : "\n Sets the name of an image file to use as a base image when creating\n icon variants for GtkIconSet. The filename must be absolute.\n Params:\n filename = image file to use\n\t \n",
"line" : 364}
,
{
"name" : "setPixbuf",
"kind" : "function",
"protection" : "public",
"type" : "void(Pixbuf pixbuf)",
"comment" : "\n Sets a pixbuf to use as a base image when creating icon variants\n for GtkIconSet.\n Params:\n pixbuf = pixbuf to use as a source\n\t \n",
"line" : 376}
,
{
"name" : "setIconName",
"kind" : "function",
"protection" : "public",
"type" : "void(string iconName)",
"comment" : "\n Sets the name of an icon to look up in the current icon theme\n to use as a base image when creating icon variants for GtkIconSet.\n Params:\n iconName = name of icon to use. [allow-none]\n\t \n",
"line" : 388}
,
{
"name" : "setSize",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkIconSize size)",
"comment" : "\n Sets the icon size this icon source is intended to be used\n with.\n Setting the icon size on an icon source makes no difference\n if the size is wildcarded. Therefore, you should usually\n call gtk_icon_source_set_size_wildcarded() to un-wildcard it\n in addition to calling this function.\n Params:\n size = icon size this source applies to. [type int]\n\t \n",
"line" : 404}
,
{
"name" : "setSizeWildcarded",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n If the icon size is wildcarded, this source can be used as the base\n image for an icon of any size. If the size is not wildcarded, then\n the size the source applies to should be set with\n gtk_icon_source_set_size() and the icon source will only be used\n with that specific size.\n GtkIconSet prefers non-wildcarded sources (exact matches) over\n wildcarded sources, and will use an exact match when possible.\n GtkIconSet will normally scale wildcarded source images to produce\n an appropriate icon at a given size, but will not change the size\n of source images that match exactly.\n Params:\n setting = TRUE to wildcard the widget state\n\t \n",
"line" : 424}
,
{
"name" : "setState",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkStateType state)",
"comment" : "\n Sets the widget state this icon source is intended to be used\n with.\n Setting the widget state on an icon source makes no difference\n if the state is wildcarded. Therefore, you should usually\n call gtk_icon_source_set_state_wildcarded() to un-wildcard it\n in addition to calling this function.\n Params:\n state = widget state this source applies to\n\t \n",
"line" : 440}
,
{
"name" : "setStateWildcarded",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n If the widget state is wildcarded, this source can be used as the\n base image for an icon in any GtkStateType. If the widget state\n is not wildcarded, then the state the source applies to should be\n set with gtk_icon_source_set_state() and the icon source will\n only be used with that specific state.\n GtkIconSet prefers non-wildcarded sources (exact matches) over\n wildcarded sources, and will use an exact match when possible.\n GtkIconSet will normally transform wildcarded source images to\n produce an appropriate icon for a given state, for example\n lightening an image on prelight, but will not modify source images\n that match exactly.\n Params:\n setting = TRUE to wildcard the widget state\n\t \n",
"line" : 461}
]
}
]
}
,
{
"name" : "gtk.IconTheme",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/IconTheme.d",
"members" : [
{
"name" : "IconTheme",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkIconTheme provides a facility for looking up icons by name\n and size. The main reason for using a name rather than simply\n providing a filename is to allow different icons to be used\n depending on what icon theme is selected\n by the user. The operation of icon themes on Linux and Unix\n follows the Icon\n Theme Specification. There is a default icon theme,\n named hicolor where applications should install\n their icons, but more additional application themes can be\n installed as operating system vendors and users choose.\n Named icons are similar to the Themeable Stock Images(3)\n facility, and the distinction between the two may be a bit confusing.\n A few things to keep in mind:\n Stock images usually are used in conjunction with\n Stock Items(3)., such as GTK_STOCK_OK or\n GTK_STOCK_OPEN. Named icons are easier to set up and therefore\n are more useful for new icons that an application wants to\n add, such as application icons or window icons.\n Stock images can only be loaded at the symbolic sizes defined\n by the GtkIconSize enumeration, or by custom sizes defined\n by gtk_icon_size_register(), while named icons are more flexible\n and any pixel size can be specified.\n Because stock images are closely tied to stock items, and thus\n to actions in the user interface, stock images may come in\n multiple variants for different widget states or writing\n directions.\n A good rule of thumb is that if there is a stock image for what\n you want to use, use it, otherwise use a named icon. It turns\n out that internally stock images are generally defined in\n terms of one or more named icons. (An example of the\n more than one case is icons that depend on writing direction;\n GTK_STOCK_GO_FORWARD uses the two themed icons\n \"gtk-stock-go-forward-ltr\" and \"gtk-stock-go-forward-rtl\".)\n In many cases, named themes are used indirectly, via GtkImage\n or stock items, rather than directly, but looking up icons\n directly is also simple. The GtkIconTheme object acts\n as a database of all the icons in the current theme. You\n can create new GtkIconTheme objects, but its much more\n efficient to use the standard icon theme for the GdkScreen\n so that the icon information is shared with other people\n looking up icons. In the case where the default screen is\n being used, looking up an icon can be as simple as:\n $(DDOC_COMMENT example)\n \n",
"line" : 137,
"base" : "ObjectG",
"members" : [
{
"name" : "gtkIconTheme",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkIconTheme*",
"comment" : " the main Gtk struct \n",
"line" : 141}
,
{
"name" : "getIconThemeStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkIconTheme*()",
"line" : 144}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 151}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "IconTheme(GtkIconTheme* gtkIconTheme)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 159}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 177}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 185}
,
{
"name" : "onChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(IconTheme)[]",
"line" : 187}
,
{
"name" : "addOnChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(IconTheme) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when the current icon theme is switched or GTK+ detects\n that a change has occurred in the contents of the current\n icon theme.\n\t \n",
"line" : 193}
,
{
"name" : "callBackChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkIconTheme* iconThemeStruct, IconTheme iconTheme)",
"line" : 208}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "IconTheme()",
"comment" : "\n Creates a new icon theme object. Icon theme objects are used\n to lookup up an icon by name in a particular icon theme.\n Usually, you'll want to use gtk_icon_theme_get_default()\n or gtk_icon_theme_get_for_screen() rather than creating\n a new icon theme object for scratch.\n Since 2.4\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 226}
,
{
"name" : "getDefault",
"kind" : "function",
"protection" : "public",
"type" : "IconTheme()",
"comment" : "\n Gets the icon theme for the default screen. See\n gtk_icon_theme_get_for_screen().\n Since 2.4\n Returns: A unique GtkIconTheme associated with the default screen. This icon theme is associated with the screen and can be used as long as the screen is open. Do not ref or unref it. [transfer none]\n\t \n",
"line" : 243}
,
{
"name" : "getForScreen",
"kind" : "function",
"protection" : "public",
"type" : "IconTheme(Screen screen)",
"comment" : "\n Gets the icon theme object associated with screen; if this\n function has not previously been called for the given\n screen, a new icon theme object will be created and\n associated with the screen. Icon theme objects are\n fairly expensive to create, so using this function\n is usually a better choice than calling than gtk_icon_theme_new()\n and setting the screen yourself; by using this function\n a single icon theme object will be shared between users.\n Since 2.4\n Params:\n screen = a GdkScreen\n Returns: A unique GtkIconTheme associated with the given screen. This icon theme is associated with the screen and can be used as long as the screen is open. Do not ref or unref it. [transfer none]\n\t \n",
"line" : 268}
,
{
"name" : "setScreen",
"kind" : "function",
"protection" : "public",
"type" : "void(Screen screen)",
"comment" : "\n Sets the screen for an icon theme; the screen is used\n to track the user's currently configured icon theme,\n which might be different for different screens.\n Since 2.4\n Params:\n screen = a GdkScreen\n\t \n",
"line" : 287}
,
{
"name" : "setSearchPath",
"kind" : "function",
"protection" : "public",
"type" : "void(string[] path)",
"comment" : "\n Sets the search path for the icon theme object. When looking\n for an icon theme, GTK+ will search for a subdirectory of\n one or more of the directories in path with the same name\n as the icon theme. (Themes from multiple of the path elements\n are combined to allow themes to be extended by adding icons\n in the user's home directory.)\n In addition if an icon found isn't found either in the current\n icon theme or the default icon theme, and an image file with\n the right name is found directly in one of the elements of\n path, then that image will be used for the icon name.\n (This is legacy feature, and new icons should be put\n into the default icon theme, which is called DEFAULT_THEME_NAME,\n rather than directly on the icon path.)\n Since 2.4\n Params:\n path = array of directories that are searched for icon themes\n\t \n",
"line" : 311}
,
{
"name" : "getSearchPath",
"kind" : "function",
"protection" : "public",
"type" : "void(out string[] path)",
"comment" : "\n Gets the current search path. See gtk_icon_theme_set_search_path().\n Since 2.4\n Params:\n path = location to store a list of icon theme path directories or NULL\n  The stored value should be freed with g_strfreev(). [allow-none][out]\n\t \n",
"line" : 324}
,
{
"name" : "appendSearchPath",
"kind" : "function",
"protection" : "public",
"type" : "void(string path)",
"comment" : "\n Appends a directory to the search path.\n See gtk_icon_theme_set_search_path().\n Since 2.4\n Params:\n path = directory name to append to the icon path\n\t \n",
"line" : 346}
,
{
"name" : "prependSearchPath",
"kind" : "function",
"protection" : "public",
"type" : "void(string path)",
"comment" : "\n Prepends a directory to the search path.\n See gtk_icon_theme_set_search_path().\n Since 2.4\n Params:\n path = directory name to prepend to the icon path\n\t \n",
"line" : 359}
,
{
"name" : "setCustomTheme",
"kind" : "function",
"protection" : "public",
"type" : "void(string themeName)",
"comment" : "\n Sets the name of the icon theme that the GtkIconTheme object uses\n overriding system configuration. This function cannot be called\n on the icon theme objects returned from gtk_icon_theme_get_default()\n and gtk_icon_theme_get_for_screen().\n Since 2.4\n Params:\n themeName = name of icon theme to use instead of configured theme,\n  or NULL to unset a previously set custom theme\n\t \n",
"line" : 375}
,
{
"name" : "hasIcon",
"kind" : "function",
"protection" : "public",
"type" : "int(string iconName)",
"comment" : "\n Checks whether an icon theme includes an icon\n for a particular name.\n Since 2.4\n Params:\n iconName = the name of an icon\n Returns: TRUE if icon_theme includes an icon for icon_name.\n\t \n",
"line" : 389}
,
{
"name" : "lookupIcon",
"kind" : "function",
"protection" : "public",
"type" : "IconInfo(string iconName, int size, GtkIconLookupFlags flags)",
"comment" : "\n Looks up a named icon and returns a structure containing\n information such as the filename of the icon. The icon\n can then be rendered into a pixbuf using\n gtk_icon_info_load_icon(). (gtk_icon_theme_load_icon()\n combines these two steps if all you need is the pixbuf.)\n Since 2.4\n Params:\n iconName = the name of the icon to lookup\n size = desired icon size\n flags = flags modifying the behavior of the icon lookup\n Returns: a GtkIconInfo structure containing information about the icon, or NULL if the icon wasn't found. Free with gtk_icon_info_free()\n\t \n",
"line" : 408}
,
{
"name" : "chooseIcon",
"kind" : "function",
"protection" : "public",
"type" : "IconInfo(string[] iconNames, int size, GtkIconLookupFlags flags)",
"comment" : "\n Looks up a named icon and returns a structure containing\n information such as the filename of the icon. The icon\n can then be rendered into a pixbuf using\n gtk_icon_info_load_icon(). (gtk_icon_theme_load_icon()\n combines these two steps if all you need is the pixbuf.)\n If icon_names contains more than one name, this function\n tries them all in the given order before falling back to\n inherited icon themes.\n Since 2.12\n Params:\n iconNames = NULL-terminated array of icon names to lookup\n size = desired icon size\n flags = flags modifying the behavior of the icon lookup\n Returns: a GtkIconInfo structure containing information about the icon, or NULL if the icon wasn't found. Free with gtk_icon_info_free()\n\t \n",
"line" : 435}
,
{
"name" : "lookupByGicon",
"kind" : "function",
"protection" : "public",
"type" : "IconInfo(IconIF icon, int size, GtkIconLookupFlags flags)",
"comment" : "\n Looks up an icon and returns a structure containing\n information such as the filename of the icon.\n The icon can then be rendered into a pixbuf using\n gtk_icon_info_load_icon().\n Since 2.14\n Params:\n icon = the GIcon to look up\n size = desired icon size\n flags = flags modifying the behavior of the icon lookup\n Returns: a GtkIconInfo structure containing information about the icon, or NULL if the icon wasn't found. Free with gtk_icon_info_free()\n\t \n",
"line" : 458}
,
{
"name" : "loadIcon",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf(string iconName, int size, GtkIconLookupFlags flags)",
"comment" : "\n Looks up an icon in an icon theme, scales it to the given size\n and renders it into a pixbuf. This is a convenience function;\n if more details about the icon are needed, use\n gtk_icon_theme_lookup_icon() followed by gtk_icon_info_load_icon().\n Note that you probably want to listen for icon theme changes and\n update the icon. This is usually done by connecting to the\n GtkWidget::style-set signal. If for some reason you do not want to\n update the icon when the icon theme changes, you should consider\n using gdk_pixbuf_copy() to make a private copy of the pixbuf\n returned by this function. Otherwise GTK+ may need to keep the old\n icon theme loaded, which would be a waste of memory.\n Since 2.4\n Params:\n iconName = the name of the icon to lookup\n size = the desired icon size. The resulting icon may not be\n  exactly this size; see gtk_icon_info_load_icon().\n flags = flags modifying the behavior of the icon lookup\n Returns: the rendered icon; this may be a newly created icon or a new reference to an internal icon, so you must not modify the icon. Use g_object_unref() to release your reference to the icon. NULL if the icon isn't found.\n Throws: GException on failure.\n\t \n",
"line" : 490}
,
{
"name" : "listContexts",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Gets the list of contexts available within the current\n hierarchy of icon themes\n Since 2.12\n Returns: a GList list holding the names of all the contexts in the theme. You must first free each element in the list with g_free(), then free the list itself with g_list_free(). [element-type utf8][transfer full utf8]\n\t \n",
"line" : 515}
,
{
"name" : "listIcons",
"kind" : "function",
"protection" : "public",
"type" : "ListG(string context)",
"comment" : "\n Lists the icons in the current icon theme. Only a subset\n of the icons can be listed by providing a context string.\n The set of values for the context string is system dependent,\n but will typically include such values as \"Applications\" and\n \"MimeTypes\".\n Since 2.4\n Params:\n context = a string identifying a particular type of icon,\n  or NULL to list all icons.\n Returns: a GList list holding the names of all the icons in the theme. You must first free each element in the list with g_free(), then free the list itself with g_list_free(). [element-type utf8][transfer none utf8]\n\t \n",
"line" : 538}
,
{
"name" : "getIconSizes",
"kind" : "function",
"protection" : "public",
"type" : "int*(string iconName)",
"comment" : "\n Returns an array of integers describing the sizes at which\n the icon is available without scaling. A size of -1 means\n that the icon is available in a scalable format. The array\n is zero-terminated.\n Since 2.6\n Params:\n iconName = the name of an icon\n Returns: An newly allocated array describing the sizes at which the icon is available. The array should be freed with g_free() when it is no longer needed.\n\t \n",
"line" : 559}
,
{
"name" : "getExampleIconName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the name of an icon that is representative of the\n current theme (for instance, to use when presenting\n a list of themes to the user.)\n Since 2.4\n Returns: the name of an example icon or NULL. Free with g_free().\n\t \n",
"line" : 572}
,
{
"name" : "rescanIfNeeded",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Checks to see if the icon theme has changed; if it has, any\n currently cached information is discarded and will be reloaded\n next time icon_theme is accessed.\n Since 2.4\n Returns: TRUE if the icon theme has changed and needed to be reloaded.\n\t \n",
"line" : 585}
,
{
"name" : "addBuiltinIcon",
"kind" : "function",
"protection" : "public",
"type" : "void(string iconName, int size, Pixbuf pixbuf)",
"comment" : "\n Registers a built-in icon for icon theme lookups. The idea\n of built-in icons is to allow an application or library\n that uses themed icons to function requiring files to\n be present in the file system. For instance, the default\n images for all of GTK+'s stock icons are registered\n as built-icons.\n In general, if you use gtk_icon_theme_add_builtin_icon()\n you should also install the icon in the icon theme, so\n that the icon is generally available.\n This function will generally be used with pixbufs loaded\n via gdk_pixbuf_new_from_inline().\n Since 2.4\n Params:\n iconName = the name of the icon to register\n size = the size at which to register the icon (different\n  images can be registered for the same icon name\n  at different sizes.)\n pixbuf = GdkPixbuf that contains the image to use\n  for icon_name.\n\t \n",
"line" : 612}
]
}
]
}
,
{
"name" : "gtk.IconView",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/IconView.d",
"members" : [
{
"name" : "IconView",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkIconView provides an alternative view on a list model.\n It displays the model as a grid of icons with labels. Like\n GtkTreeView, it allows to select one or multiple items\n (depending on the selection mode, see gtk_icon_view_set_selection_mode()).\n In addition to selection with the arrow keys, GtkIconView supports\n rubberband selection, which is controlled by dragging the pointer.\n \n",
"line" : 105,
"base" : "Container",
"interfaces" : [
"CellLayoutIF"],
"members" : [
{
"name" : "gtkIconView",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkIconView*",
"comment" : " the main Gtk struct \n",
"line" : 109}
,
{
"name" : "getIconViewStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkIconView*()",
"line" : 112}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 119}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "IconView(GtkIconView* gtkIconView)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 127}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 145}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 156}
,
{
"name" : "onActivateCursorItemListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(IconView)[]",
"line" : 158}
,
{
"name" : "addOnActivateCursorItem",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(IconView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n A keybinding signal\n which gets emitted when the user activates the currently\n focused item.\n Applications should not connect to it, but may emit it with\n g_signal_emit_by_name() if they need to control activation\n programmatically.\n The default bindings for this signal are Space, Return and Enter.\n\t \n",
"line" : 168}
,
{
"name" : "callBackActivateCursorItem",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkIconView* iconviewStruct, IconView iconView)",
"line" : 183}
,
{
"name" : "onItemActivatedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TreePath, IconView)[]",
"line" : 196}
,
{
"name" : "addOnItemActivated",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TreePath, IconView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::item-activated signal is emitted when the method\n gtk_icon_view_item_activated() is called or the user double\n clicks an item. It is also emitted when a non-editable item\n is selected and one of the keys: Space, Return or Enter is\n pressed.\n\t \n",
"line" : 204}
,
{
"name" : "callBackItemActivated",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkIconView* iconviewStruct, GtkTreePath* path, IconView iconView)",
"line" : 219}
,
{
"name" : "onMoveCursorListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GtkMovementStep, int, IconView)[]",
"line" : 227}
,
{
"name" : "addOnMoveCursor",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GtkMovementStep, int, IconView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::move-cursor signal is a\n keybinding signal\n which gets emitted when the user initiates a cursor movement.\n Applications should not connect to it, but may emit it with\n g_signal_emit_by_name() if they need to control the cursor\n programmatically.\n The default bindings for this signal include\n Arrow keys which move by individual steps\n Home\/End keys which move to the first\/last item\n PageUp\/PageDown which move by \"pages\"\n All of these will extend the selection when combined with\n the Shift modifier.\n\t \n",
"line" : 242}
,
{
"name" : "callBackMoveCursor",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkIconView* iconviewStruct, GtkMovementStep step, int count, IconView iconView)",
"line" : 257}
,
{
"name" : "onSelectAllListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(IconView)[]",
"line" : 270}
,
{
"name" : "addOnSelectAll",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(IconView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n A keybinding signal\n which gets emitted when the user selects all items.\n Applications should not connect to it, but may emit it with\n g_signal_emit_by_name() if they need to control selection\n programmatically.\n The default binding for this signal is Ctrl-a.\n\t \n",
"line" : 279}
,
{
"name" : "callBackSelectAll",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkIconView* iconviewStruct, IconView iconView)",
"line" : 294}
,
{
"name" : "onSelectCursorItemListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(IconView)[]",
"line" : 302}
,
{
"name" : "addOnSelectCursorItem",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(IconView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n A keybinding signal\n which gets emitted when the user selects the item that is currently\n focused.\n Applications should not connect to it, but may emit it with\n g_signal_emit_by_name() if they need to control selection\n programmatically.\n There is no default binding for this signal.\n\t \n",
"line" : 312}
,
{
"name" : "callBackSelectCursorItem",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkIconView* iconviewStruct, IconView iconView)",
"line" : 327}
,
{
"name" : "onSelectionChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(IconView)[]",
"line" : 335}
,
{
"name" : "addOnSelectionChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(IconView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::selection-changed signal is emitted when the selection\n (i.e. the set of selected items) changes.\n\t \n",
"line" : 340}
,
{
"name" : "callBackSelectionChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkIconView* iconviewStruct, IconView iconView)",
"line" : 355}
,
{
"name" : "onSetScrollAdjustmentsListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkAdjustment*, GtkAdjustment*, IconView)[]",
"line" : 363}
,
{
"name" : "addOnSetScrollAdjustments",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkAdjustment*, GtkAdjustment*, IconView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Set the scroll adjustments for the icon view. Usually scrolled containers\n like GtkScrolledWindow will emit this signal to connect two instances\n of GtkScrollbar to the scroll directions of the GtkIconView.\n\t \n",
"line" : 369}
,
{
"name" : "callBackSetScrollAdjustments",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkIconView* horizontalStruct, GtkAdjustment* vertical, GtkAdjustment* arg2, IconView iconView)",
"line" : 384}
,
{
"name" : "onToggleCursorItemListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(IconView)[]",
"line" : 392}
,
{
"name" : "addOnToggleCursorItem",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(IconView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n A keybinding signal\n which gets emitted when the user toggles whether the currently\n focused item is selected or not. The exact effect of this\n depend on the selection mode.\n Applications should not connect to it, but may emit it with\n g_signal_emit_by_name() if they need to control selection\n programmatically.\n There is no default binding for this signal is Ctrl-Space.\n\t \n",
"line" : 403}
,
{
"name" : "callBackToggleCursorItem",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkIconView* iconviewStruct, IconView iconView)",
"line" : 418}
,
{
"name" : "onUnselectAllListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(IconView)[]",
"line" : 426}
,
{
"name" : "addOnUnselectAll",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(IconView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n A keybinding signal\n which gets emitted when the user unselects all items.\n Applications should not connect to it, but may emit it with\n g_signal_emit_by_name() if they need to control selection\n programmatically.\n The default binding for this signal is Ctrl-Shift-a.\n\t \n",
"line" : 435}
,
{
"name" : "callBackUnselectAll",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkIconView* iconviewStruct, IconView iconView)",
"line" : 450}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "IconView()",
"comment" : "\n Creates a new GtkIconView widget\n Since 2.6\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 464}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "IconView(TreeModelIF model)",
"comment" : "\n Creates a new GtkIconView widget with the model model.\n Since 2.6\n Params:\n model = The model.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 482}
,
{
"name" : "setModel",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeModelIF model)",
"comment" : "\n Sets the model for a GtkIconView.\n If the icon_view already has a model set, it will remove\n it before setting the new model. If model is NULL, then\n it will unset the old model.\n Since 2.6\n Params:\n model = The model. [allow-none]\n\t \n",
"line" : 502}
,
{
"name" : "getModel",
"kind" : "function",
"protection" : "public",
"type" : "TreeModelIF()",
"comment" : "\n Returns the model the GtkIconView is based on. Returns NULL if the\n model is unset.\n Since 2.6\n Returns: A GtkTreeModel, or NULL if none is currently being used. [transfer none]\n\t \n",
"line" : 514}
,
{
"name" : "setTextColumn",
"kind" : "function",
"protection" : "public",
"type" : "void(int column)",
"comment" : "\n Sets the column with text for icon_view to be column. The text\n column must be of type G_TYPE_STRING.\n Since 2.6\n Params:\n column = A column in the currently used model, or -1 to display no text\n\t \n",
"line" : 532}
,
{
"name" : "getTextColumn",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the column with text for icon_view.\n Since 2.6\n Returns: the text column, or -1 if it's unset.\n\t \n",
"line" : 543}
,
{
"name" : "setMarkupColumn",
"kind" : "function",
"protection" : "public",
"type" : "void(int column)",
"comment" : "\n Sets the column with markup information for icon_view to be\n column. The markup column must be of type G_TYPE_STRING.\n If the markup column is set to something, it overrides\n the text column set by gtk_icon_view_set_text_column().\n Since 2.6\n Params:\n column = A column in the currently used model, or -1 to display no text\n\t \n",
"line" : 558}
,
{
"name" : "getMarkupColumn",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the column with markup text for icon_view.\n Since 2.6\n Returns: the markup column, or -1 if it's unset.\n\t \n",
"line" : 569}
,
{
"name" : "setPixbufColumn",
"kind" : "function",
"protection" : "public",
"type" : "void(int column)",
"comment" : "\n Sets the column with pixbufs for icon_view to be column. The pixbuf\n column must be of type GDK_TYPE_PIXBUF\n Since 2.6\n Params:\n column = A column in the currently used model, or -1 to disable\n\t \n",
"line" : 582}
,
{
"name" : "getPixbufColumn",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the column with pixbufs for icon_view.\n Since 2.6\n Returns: the pixbuf column, or -1 if it's unset.\n\t \n",
"line" : 593}
,
{
"name" : "getPathAtPos",
"kind" : "function",
"protection" : "public",
"type" : "TreePath(int x, int y)",
"comment" : "\n Finds the path at the point (x, y), relative to bin_window coordinates.\n See gtk_icon_view_get_item_at_pos(), if you are also interested in\n the cell at the specified position.\n See gtk_icon_view_convert_widget_to_bin_window_coords() for converting\n widget coordinates to bin_window coordinates.\n Since 2.6\n Params:\n x = The x position to be identified\n y = The y position to be identified\n Returns: The GtkTreePath corresponding to the icon or NULL if no icon exists at that position.\n\t \n",
"line" : 611}
,
{
"name" : "getItemAtPos",
"kind" : "function",
"protection" : "public",
"type" : "int(int x, int y, out TreePath path, out CellRenderer cell)",
"comment" : "\n Finds the path at the point (x, y), relative to bin_window coordinates.\n In contrast to gtk_icon_view_get_path_at_pos(), this function also\n obtains the cell at the specified position. The returned path should\n be freed with gtk_tree_path_free().\n See gtk_icon_view_convert_widget_to_bin_window_coords() for converting\n widget coordinates to bin_window coordinates.\n Since 2.8\n Params:\n x = The x position to be identified\n y = The y position to be identified\n path = Return location for the path, or NULL. [allow-none]\n cell = Return location for the renderer responsible for the cell\n at (x, y), or NULL\n Returns: TRUE if an item exists at the specified position\n\t \n",
"line" : 638}
,
{
"name" : "convertWidgetToBinWindowCoords",
"kind" : "function",
"protection" : "public",
"type" : "void(int wx, int wy, out int bx, out int by)",
"comment" : "\n Converts widget coordinates to coordinates for the bin_window,\n as expected by e.g. gtk_icon_view_get_path_at_pos().\n Since 2.12\n Params:\n wx = X coordinate relative to the widget\n wy = Y coordinate relative to the widget\n bx = return location for bin_window X coordinate. [out]\n by = return location for bin_window Y coordinate. [out]\n\t \n",
"line" : 661}
,
{
"name" : "setCursor",
"kind" : "function",
"protection" : "public",
"type" : "void(TreePath path, CellRenderer cell, int startEditing)",
"comment" : "\n Sets the current keyboard focus to be at path, and selects it. This is\n useful when you want to focus the user's attention on a particular item.\n If cell is not NULL, then focus is given to the cell specified by\n it. Additionally, if start_editing is TRUE, then editing should be\n started in the specified cell.\n This function is often followed by gtk_widget_grab_focus\n (icon_view) in order to give keyboard focus to the widget.\n Please note that editing can only happen when the widget is realized.\n Since 2.8\n Params:\n path = A GtkTreePath\n cell = One of the cell renderers of icon_view, or NULL. [allow-none]\n startEditing = TRUE if the specified cell should start being edited.\n\t \n",
"line" : 682}
,
{
"name" : "getCursor",
"kind" : "function",
"protection" : "public",
"type" : "int(out TreePath path, out CellRenderer cell)",
"comment" : "\n Fills in path and cell with the current cursor path and cell.\n If the cursor isn't currently set, then *path will be NULL.\n If no cell currently has focus, then *cell will be NULL.\n The returned GtkTreePath must be freed with gtk_tree_path_free().\n Since 2.8\n Params:\n path = Return location for the current cursor path, or NULL. [allow-none]\n cell = Return location the current focus cell, or NULL. [allow-none]\n Returns: TRUE if the cursor is set.\n\t \n",
"line" : 699}
,
{
"name" : "selectedForeach",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) void function(GtkIconView*, GtkTreePath*, void*) func, void* data)",
"comment" : "\n Calls a function for each selected icon. Note that the model or\n selection cannot be modified from within this function.\n Since 2.6\n Params:\n func = The function to call for each selected icon. [scope call]\n data = User data to pass to the function.\n\t \n",
"line" : 720}
,
{
"name" : "setSelectionMode",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkSelectionMode mode)",
"comment" : "\n Sets the selection mode of the icon_view.\n Since 2.6\n Params:\n mode = The selection mode\n\t \n",
"line" : 732}
,
{
"name" : "getSelectionMode",
"kind" : "function",
"protection" : "public",
"type" : "GtkSelectionMode()",
"comment" : "\n Gets the selection mode of the icon_view.\n Since 2.6\n Returns: the current selection mode\n\t \n",
"line" : 743}
,
{
"name" : "setOrientation",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkOrientation orientation)",
"comment" : "\n Warning\n gtk_icon_view_set_orientation has been deprecated since version 2.22 and should not be used in newly-written code. Use gtk_icon_view_set_item_orientation()\n Sets the ::orientation property which determines whether the labels\n are drawn beside the icons instead of below.\n Since 2.6\n Params:\n orientation = the relative position of texts and icons\n\t \n",
"line" : 758}
,
{
"name" : "getOrientation",
"kind" : "function",
"protection" : "public",
"type" : "GtkOrientation()",
"comment" : "\n Warning\n gtk_icon_view_get_orientation has been deprecated since version 2.22 and should not be used in newly-written code. Use gtk_icon_view_get_item_orientation()\n Returns the value of the ::orientation property which determines\n whether the labels are drawn beside the icons instead of below.\n Since 2.6\n Returns: the relative position of texts and icons\n\t \n",
"line" : 772}
,
{
"name" : "setItemOrientation",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkOrientation orientation)",
"comment" : "\n Sets the ::item-orientation property which determines whether\n the labels are drawn beside the icons instead of below.\n Since 2.22\n Params:\n orientation = the relative position of texts and icons\n\t \n",
"line" : 785}
,
{
"name" : "getItemOrientation",
"kind" : "function",
"protection" : "public",
"type" : "GtkOrientation()",
"comment" : "\n Returns the value of the ::item-orientation property which determines\n whether the labels are drawn beside the icons instead of below.\n Since 2.22\n Returns: the relative position of texts and icons\n\t \n",
"line" : 797}
,
{
"name" : "setColumns",
"kind" : "function",
"protection" : "public",
"type" : "void(int columns)",
"comment" : "\n Sets the ::columns property which determines in how\n many columns the icons are arranged. If columns is\n -1, the number of columns will be chosen automatically\n to fill the available area.\n Since 2.6\n Params:\n columns = the number of columns\n\t \n",
"line" : 812}
,
{
"name" : "getColumns",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the value of the ::columns property.\n Since 2.6\n Returns: the number of columns, or -1\n\t \n",
"line" : 823}
,
{
"name" : "setItemWidth",
"kind" : "function",
"protection" : "public",
"type" : "void(int itemWidth)",
"comment" : "\n Sets the ::item-width property which specifies the width\n to use for each item. If it is set to -1, the icon view will\n automatically determine a suitable item size.\n Since 2.6\n Params:\n itemWidth = the width for each item\n\t \n",
"line" : 837}
,
{
"name" : "getItemWidth",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the value of the ::item-width property.\n Since 2.6\n Returns: the width of a single item, or -1\n\t \n",
"line" : 848}
,
{
"name" : "setSpacing",
"kind" : "function",
"protection" : "public",
"type" : "void(int spacing)",
"comment" : "\n Sets the ::spacing property which specifies the space\n which is inserted between the cells (i.e. the icon and\n the text) of an item.\n Since 2.6\n Params:\n spacing = the spacing\n\t \n",
"line" : 862}
,
{
"name" : "getSpacing",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the value of the ::spacing property.\n Since 2.6\n Returns: the space between cells\n\t \n",
"line" : 873}
,
{
"name" : "setRowSpacing",
"kind" : "function",
"protection" : "public",
"type" : "void(int rowSpacing)",
"comment" : "\n Sets the ::row-spacing property which specifies the space\n which is inserted between the rows of the icon view.\n Since 2.6\n Params:\n rowSpacing = the row spacing\n\t \n",
"line" : 886}
,
{
"name" : "getRowSpacing",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the value of the ::row-spacing property.\n Since 2.6\n Returns: the space between rows\n\t \n",
"line" : 897}
,
{
"name" : "setColumnSpacing",
"kind" : "function",
"protection" : "public",
"type" : "void(int columnSpacing)",
"comment" : "\n Sets the ::column-spacing property which specifies the space\n which is inserted between the columns of the icon view.\n Since 2.6\n Params:\n columnSpacing = the column spacing\n\t \n",
"line" : 910}
,
{
"name" : "getColumnSpacing",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the value of the ::column-spacing property.\n Since 2.6\n Returns: the space between columns\n\t \n",
"line" : 921}
,
{
"name" : "setMargin",
"kind" : "function",
"protection" : "public",
"type" : "void(int margin)",
"comment" : "\n Sets the ::margin property which specifies the space\n which is inserted at the top, bottom, left and right\n of the icon view.\n Since 2.6\n Params:\n margin = the margin\n\t \n",
"line" : 935}
,
{
"name" : "getMargin",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the value of the ::margin property.\n Since 2.6\n Returns: the space at the borders\n\t \n",
"line" : 946}
,
{
"name" : "setItemPadding",
"kind" : "function",
"protection" : "public",
"type" : "void(int itemPadding)",
"comment" : "\n Sets the \"item-padding\" property which specifies the padding\n around each of the icon view's items.\n Since 2.18\n Params:\n itemPadding = the item padding\n\t \n",
"line" : 959}
,
{
"name" : "getItemPadding",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the value of the ::item-padding property.\n Since 2.18\n Returns: the padding around items\n\t \n",
"line" : 970}
,
{
"name" : "selectPath",
"kind" : "function",
"protection" : "public",
"type" : "void(TreePath path)",
"comment" : "\n Selects the row at path.\n Since 2.6\n Params:\n path = The GtkTreePath to be selected.\n\t \n",
"line" : 982}
,
{
"name" : "unselectPath",
"kind" : "function",
"protection" : "public",
"type" : "void(TreePath path)",
"comment" : "\n Unselects the row at path.\n Since 2.6\n Params:\n path = The GtkTreePath to be unselected.\n\t \n",
"line" : 994}
,
{
"name" : "pathIsSelected",
"kind" : "function",
"protection" : "public",
"type" : "int(TreePath path)",
"comment" : "\n Returns TRUE if the icon pointed to by path is currently\n selected. If path does not point to a valid location, FALSE is returned.\n Since 2.6\n Params:\n path = A GtkTreePath to check selection on.\n Returns: TRUE if path is selected.\n\t \n",
"line" : 1008}
,
{
"name" : "getSelectedItems",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Creates a list of paths of all selected items. Additionally, if you are\n planning on modifying the model after calling this function, you may\n want to convert the returned list into a list of GtkTreeRowReferences.\n To do this, you can use gtk_tree_row_reference_new().\n Since 2.6\n Returns: A GList containing a GtkTreePath for each selected row. [element-type GtkTreePath][transfer full]\n\t \n",
"line" : 1022}
,
{
"name" : "selectAll",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Selects all the icons. icon_view must has its selection mode set\n to GTK_SELECTION_MULTIPLE.\n Since 2.6\n\t \n",
"line" : 1038}
,
{
"name" : "unselectAll",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Unselects all the icons.\n Since 2.6\n\t \n",
"line" : 1048}
,
{
"name" : "itemActivated",
"kind" : "function",
"protection" : "public",
"type" : "void(TreePath path)",
"comment" : "\n Activates the item determined by path.\n Since 2.6\n Params:\n path = The GtkTreePath to be activated\n\t \n",
"line" : 1060}
,
{
"name" : "scrollToPath",
"kind" : "function",
"protection" : "public",
"type" : "void(TreePath path, int useAlign, float rowAlign, float colAlign)",
"comment" : "\n Moves the alignments of icon_view to the position specified by path.\n row_align determines where the row is placed, and col_align determines\n where column is placed. Both are expected to be between 0.0 and 1.0.\n 0.0 means left\/top alignment, 1.0 means right\/bottom alignment, 0.5 means\n center.\n If use_align is FALSE, then the alignment arguments are ignored, and the\n tree does the minimum amount of work to scroll the item onto the screen.\n This means that the item will be scrolled to the edge closest to its current\n position. If the item is currently visible on the screen, nothing is done.\n This function only works if the model is set, and path is a valid row on\n the model. If the model changes before the icon_view is realized, the\n centered path will be modified to reflect this change.\n Since 2.8\n Params:\n path = The path of the item to move to.\n useAlign = whether to use alignment arguments, or FALSE.\n rowAlign = The vertical alignment of the item specified by path.\n colAlign = The horizontal alignment of the item specified by path.\n\t \n",
"line" : 1086}
,
{
"name" : "getVisibleRange",
"kind" : "function",
"protection" : "public",
"type" : "int(out TreePath startPath, out TreePath endPath)",
"comment" : "\n Sets start_path and end_path to be the first and last visible path.\n Note that there may be invisible paths in between.\n Both paths should be freed with gtk_tree_path_free() after use.\n Since 2.8\n Params:\n startPath = Return location for start of region, or NULL. [allow-none]\n endPath = Return location for end of region, or NULL. [allow-none]\n Returns: TRUE, if valid paths were placed in start_path and end_path\n\t \n",
"line" : 1102}
,
{
"name" : "setTooltipItem",
"kind" : "function",
"protection" : "public",
"type" : "void(Tooltip tooltip, TreePath path)",
"comment" : "\n Sets the tip area of tooltip to be the area covered by the item at path.\n See also gtk_icon_view_set_tooltip_column() for a simpler alternative.\n See also gtk_tooltip_set_tip_area().\n Since 2.12\n Params:\n tooltip = a GtkTooltip\n path = a GtkTreePath\n\t \n",
"line" : 1124}
,
{
"name" : "setTooltipCell",
"kind" : "function",
"protection" : "public",
"type" : "void(Tooltip tooltip, TreePath path, CellRenderer cell)",
"comment" : "\n Sets the tip area of tooltip to the area which cell occupies in\n the item pointed to by path. See also gtk_tooltip_set_tip_area().\n See also gtk_icon_view_set_tooltip_column() for a simpler alternative.\n Since 2.12\n Params:\n tooltip = a GtkTooltip\n path = a GtkTreePath\n cell = a GtkCellRenderer or NULL. [allow-none]\n\t \n",
"line" : 1140}
,
{
"name" : "getTooltipContext",
"kind" : "function",
"protection" : "public",
"type" : "int(int* x, int* y, int keyboardTip, out TreeModelIF model, out TreePath path, TreeIter iter)",
"comment" : "\n This function is supposed to be used in a \"query-tooltip\"\n signal handler for GtkIconView. The x, y and keyboard_tip values\n which are received in the signal handler, should be passed to this\n function without modification.\n The return value indicates whether there is an icon view item at the given\n coordinates (TRUE) or not (FALSE) for mouse tooltips. For keyboard\n tooltips the item returned will be the cursor item. When TRUE, then any of\n model, path and iter which have been provided will be set to point to\n that row and the corresponding model. x and y will always be converted\n to be relative to icon_view's bin_window if keyboard_tooltip is FALSE.\n Since 2.12\n Params:\n x = the x coordinate (relative to widget coordinates). [inout]\n y = the y coordinate (relative to widget coordinates). [inout]\n keyboardTip = whether this is a keyboard tooltip or not\n model = a pointer to receive a GtkTreeModel or NULL. [out][allow-none]\n path = a pointer to receive a GtkTreePath or NULL. [out][allow-none]\n iter = a pointer to receive a GtkTreeIter or NULL. [out][allow-none]\n Returns: whether or not the given tooltip context points to a item\n\t \n",
"line" : 1167}
,
{
"name" : "setTooltipColumn",
"kind" : "function",
"protection" : "public",
"type" : "void(int column)",
"comment" : "\n If you only plan to have simple (text-only) tooltips on full items, you\n can use this function to have GtkIconView handle these automatically\n for you. column should be set to the column in icon_view's model\n containing the tooltip texts, or -1 to disable this feature.\n When enabled, \"has-tooltip\" will be set to TRUE and\n icon_view will connect a \"query-tooltip\" signal handler.\n Since 2.12\n Params:\n column = an integer, which is a valid column number for icon_view's model\n\t \n",
"line" : 1191}
,
{
"name" : "getTooltipColumn",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the column of icon_view's model which is being used for\n displaying tooltips on icon_view's rows.\n Since 2.12\n Returns: the index of the tooltip column that is currently being used, or -1 if this is disabled.\n\t \n",
"line" : 1203}
,
{
"name" : "getItemRow",
"kind" : "function",
"protection" : "public",
"type" : "int(TreePath path)",
"comment" : "\n Gets the row in which the item path is currently\n displayed. Row numbers start at 0.\n Since 2.22\n Params:\n path = the GtkTreePath of the item\n Returns: The row in which the item is displayed\n\t \n",
"line" : 1217}
,
{
"name" : "getItemColumn",
"kind" : "function",
"protection" : "public",
"type" : "int(TreePath path)",
"comment" : "\n Gets the column in which the item path is currently\n displayed. Column numbers start at 0.\n Since 2.22\n Params:\n path = the GtkTreePath of the item\n Returns: The column in which the item is displayed\n\t \n",
"line" : 1231}
,
{
"name" : "enableModelDragSource",
"kind" : "function",
"protection" : "public",
"type" : "void(GdkModifierType startButtonMask, GtkTargetEntry[] targets, GdkDragAction actions)",
"comment" : "\n Turns icon_view into a drag source for automatic DND. Calling this\n method sets \"reorderable\" to FALSE.\n Since 2.8\n Params:\n startButtonMask = Mask of allowed buttons to start drag\n targets = the table of targets that the drag will support\n actions = the bitmask of possible actions for a drag from this\n widget\n\t \n",
"line" : 1247}
,
{
"name" : "enableModelDragDest",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkTargetEntry[] targets, GdkDragAction actions)",
"comment" : "\n Turns icon_view into a drop destination for automatic DND. Calling this\n method sets \"reorderable\" to FALSE.\n Since 2.8\n Params:\n targets = the table of targets that the drag will support\n actions = the bitmask of possible actions for a drag to this\n widget\n\t \n",
"line" : 1262}
,
{
"name" : "unsetModelDragSource",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Undoes the effect of gtk_icon_view_enable_model_drag_source(). Calling this\n method sets \"reorderable\" to FALSE.\n Since 2.8\n\t \n",
"line" : 1273}
,
{
"name" : "unsetModelDragDest",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Undoes the effect of gtk_icon_view_enable_model_drag_dest(). Calling this\n method sets \"reorderable\" to FALSE.\n Since 2.8\n\t \n",
"line" : 1284}
,
{
"name" : "setReorderable",
"kind" : "function",
"protection" : "public",
"type" : "void(int reorderable)",
"comment" : "\n This function is a convenience function to allow you to reorder models that\n support the GtkTreeDragSourceIface and the GtkTreeDragDestIface. Both\n GtkTreeStore and GtkListStore support these. If reorderable is TRUE, then\n the user can reorder the model by dragging and dropping rows. The\n developer can listen to these changes by connecting to the model's\n row_inserted and row_deleted signals. The reordering is implemented by setting up\n the icon view as a drag source and destination. Therefore, drag and\n drop can not be used in a reorderable view for any other purpose.\n This function does not give you any degree of control over the order -- any\n reordering is allowed. If more control is needed, you should probably\n handle drag and drop manually.\n Since 2.8\n Params:\n reorderable = TRUE, if the list of items can be reordered.\n\t \n",
"line" : 1306}
,
{
"name" : "getReorderable",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Retrieves whether the user can reorder the list via drag-and-drop.\n See gtk_icon_view_set_reorderable().\n Since 2.8\n Returns: TRUE if the list can be reordered.\n\t \n",
"line" : 1318}
,
{
"name" : "setDragDestItem",
"kind" : "function",
"protection" : "public",
"type" : "void(TreePath path, GtkIconViewDropPosition pos)",
"comment" : "\n Sets the item that is highlighted for feedback.\n Since 2.8\n Params:\n path = The path of the item to highlight, or NULL. [allow-none]\n pos = Specifies where to drop, relative to the item\n\t \n",
"line" : 1331}
,
{
"name" : "getDragDestItem",
"kind" : "function",
"protection" : "public",
"type" : "void(out TreePath path, out GtkIconViewDropPosition pos)",
"comment" : "\n Gets information about the item that is highlighted for feedback.\n Since 2.8\n Params:\n path = Return location for the path of the highlighted item, or NULL. [allow-none]\n pos = Return location for the drop position, or NULL. [allow-none]\n\t \n",
"line" : 1344}
,
{
"name" : "getDestItemAtPos",
"kind" : "function",
"protection" : "public",
"type" : "int(int dragX, int dragY, out TreePath path, out GtkIconViewDropPosition pos)",
"comment" : "\n Determines the destination item for a given position.\n Since 2.8\n Params:\n dragX = the position to determine the destination item for\n dragY = the position to determine the destination item for\n path = Return location for the path of the item, or NULL. [allow-none]\n pos = Return location for the drop position, or NULL. [allow-none]\n Returns: whether there is an item at the given position.\n\t \n",
"line" : 1364}
,
{
"name" : "createDragIcon",
"kind" : "function",
"protection" : "public",
"type" : "Pixmap(TreePath path)",
"comment" : "\n Creates a GdkPixmap representation of the item at path.\n This image is used for a drag icon.\n Since 2.8\n Params:\n path = a GtkTreePath in icon_view\n Returns: a newly-allocated pixmap of the drag icon. [transfer full]\n\t \n",
"line" : 1383}
]
}
]
}
,
{
"name" : "gtk.Idle",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Idle.d",
"members" : [
{
"name" : "Idle",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n Before using GTK+, you need to initialize it; initialization connects\n to the window system display, and parses some standard command line\n arguments. The gtk_init() function initializes GTK+. gtk_init() exits\n the application if errors occur; to avoid this, use gtk_init_check().\n gtk_init_check() allows you to recover from a failed GTK+\n initialization - you might start up your application in text mode instead.\n Like all GUI toolkits, GTK+ uses an event-driven programming\n model. When the user is doing nothing, GTK+ sits in the\n main loop and waits for input. If the user\n performs some action - say, a mouse click - then the main loop \"wakes\n up\" and delivers an event to GTK+. GTK+ forwards the event to one or\n more widgets.\n When widgets receive an event, they frequently emit one or more\n signals. Signals notify your program that\n \"something interesting happened\" by invoking functions you've\n connected to the signal with g_signal_connect(). Functions connected\n to a signal are often termed callbacks.\n When your callbacks are invoked, you would typically take some action\n - for example, when an Open button is clicked you might display a\n GtkFileSelectionDialog. After a callback finishes, GTK+ will return\n to the main loop and await more user input.\n $(DDOC_COMMENT example)\n It's OK to use the GLib main loop directly instead of gtk_main(),\n though it involves slightly more typing. See GMainLoop in the GLib\n documentation.\n \n",
"line" : 93,
"base" : "Object",
"members" : [
{
"name" : "idleListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate()[]",
"comment" : " Holds all idle delegates \n",
"line" : 96}
,
{
"name" : "idleID",
"kind" : "variable",
"protection" : "public",
"type" : "uint",
"comment" : " our gtk idle ID \n",
"line" : 98}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Idle(bool delegate() dlg, bool fireNow = false)",
"comment" : "\n Creates a new idle cycle.\n Params:\n    \tinterval = the idle in milieconds\n    \tdlg = the delegate to be executed\n    \tfireNow = When true the delegate will be executed emmidiatly\n\t \n",
"line" : 107}
,
{
"name" : "stop",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : " \n",
"line" : 121}
,
{
"name" : "addListener",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate() dlg, bool fireNow = false)",
"comment" : "\n Adds a new delegate to this idle cycle\n Params:\n    \tdlg =\n    \tfireNow =\n\t \n",
"line" : 144}
,
{
"name" : "idleCallback",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) bool(Idle idle)",
"comment" : "\n The callback execution from glib\n Params:\n    \tidle =\n Returns:\n\t \n",
"line" : 162}
,
{
"name" : "callAllListeners",
"kind" : "function",
"protection" : "private",
"type" : "bool()",
"comment" : "\n Executes all delegates on the execution list\n Returns:\n\t \n",
"line" : 171}
,
{
"name" : "add",
"kind" : "function",
"protection" : "public",
"type" : "uint(extern (C) int function(void*) funct, void* data)",
"comment" : "\n\t \n\n Warning\n gtk_idle_add has been deprecated since version 2.4 and should not be used in newly-written code. Use g_idle_add() instead.\n Causes the mainloop to call the given function whenever no events with\n higher priority are to be processed. The default priority is\n GTK_PRIORITY_DEFAULT, which is rather low.\n Params:\n data = The information to pass to the function.\n Returns: a unique handle for this registration.\n\t \n",
"line" : 205}
,
{
"name" : "addPriority",
"kind" : "function",
"protection" : "public",
"type" : "uint(int priority, extern (C) int function(void*) funct, void* data)",
"comment" : "\n Warning\n gtk_idle_add_priority has been deprecated since version 2.4 and should not be used in newly-written code. Use g_idle_add_full() instead.\n Like gtk_idle_add() this function allows you to have a function called\n when the event loop is idle. The difference is that you can give a\n priority different from GTK_PRIORITY_DEFAULT to the idle function.\n Params:\n priority = The priority which should not be above G_PRIORITY_HIGH_IDLE.\n Note that you will interfere with GTK+ if you use a priority above\n GTK_PRIORITY_RESIZE.\n data = Data to pass to that function.\n Returns: A unique id for the event source.\n\t \n",
"line" : 224}
,
{
"name" : "addFull",
"kind" : "function",
"protection" : "public",
"type" : "uint(int priority, extern (C) int function(void*) funct, extern (C) void function(GtkObject*, void*, uint, GtkArg*) marshal, void* data, extern (C) void function(void* cbData) destroy)",
"comment" : "\n Warning\n gtk_idle_add_full has been deprecated since version 2.4 and should not be used in newly-written code. Use g_idle_add_full() instead.\n Like gtk_idle_add() this function allows you to have a function called\n when the event loop is idle. The difference is that you can give a\n priority different from GTK_PRIORITY_DEFAULT to the idle function.\n Params:\n priority = The priority which should not be above G_PRIORITY_HIGH_IDLE.\n Note that you will interfere with GTK+ if you use a priority above\n GTK_PRIORITY_RESIZE.\n marshal = The marshaller to use instead of the function (if non-NULL).\n data = Data to pass to that function.\n destroy = Function to call when the timeout is destroyed or NULL.\n Returns: A unique id for the event source.\n\t \n",
"line" : 245}
,
{
"name" : "remove",
"kind" : "function",
"protection" : "public",
"type" : "void(uint idleHandlerId)",
"comment" : "\n Warning\n gtk_idle_remove has been deprecated since version 2.4 and should not be used in newly-written code. Use g_source_remove() instead.\n Removes the idle function with the given id.\n Params:\n idleHandlerId = Identifies the idle function to remove.\n\t \n",
"line" : 258}
,
{
"name" : "removeByData",
"kind" : "function",
"protection" : "public",
"type" : "void(void* data)",
"comment" : "\n Warning\n gtk_idle_remove_by_data has been deprecated since version 2.4 and should not be used in newly-written code. Use g_idle_remove_by_data() instead.\n Removes the idle function identified by the user data.\n Params:\n data = remove the idle function which was registered with this user data.\n\t \n",
"line" : 271}
]
}
]
}
,
{
"name" : "gtk.Image",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Image.d",
"members" : [
{
"name" : "Image",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkImage widget displays an image. Various kinds of object\n can be displayed as an image; most typically, you would load a\n GdkPixbuf (\"pixel buffer\") from a file, and then display that.\n There's a convenience function to do this, gtk_image_new_from_file(),\n used as follows:\n $(DDOC_COMMENT example)\n If the file isn't loaded successfully, the image will contain a\n \"broken image\" icon similar to that used in many web browsers.\n If you want to handle errors in loading the file yourself,\n for example by displaying an error message, then load the image with\n gdk_pixbuf_new_from_file(), then create the GtkImage with\n gtk_image_new_from_pixbuf().\n The image file may contain an animation, if so the GtkImage will\n display an animation (GdkPixbufAnimation) instead of a static image.\n GtkImage is a subclass of GtkMisc, which implies that you can\n align it (center, left, right) and add padding to it, using\n GtkMisc methods.\n GtkImage is a \"no window\" widget (has no GdkWindow of its own),\n so by default does not receive events. If you want to receive events\n on the image, such as button clicks, place the image inside a\n GtkEventBox, then connect to the event signals on the event box.\n $(DDOC_COMMENT example)\n When handling events on the event box, keep in mind that coordinates\n in the image may be different from event box coordinates due to\n the alignment and padding settings on the image (see GtkMisc).\n The simplest way to solve this is to set the alignment to 0.0\n (left\/top), and set the padding to zero. Then the origin of\n the image will be the same as the origin of the event box.\n Sometimes an application will want to avoid depending on external data\n files, such as image files. GTK+ comes with a program to avoid this,\n called gdk-pixbuf-csource. This program\n allows you to convert an image into a C variable declaration, which\n can then be loaded into a GdkPixbuf using\n gdk_pixbuf_new_from_inline().\n \n",
"line" : 138,
"base" : "Misc",
"members" : [
{
"name" : "gtkImage",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkImage*",
"comment" : " the main Gtk struct \n",
"line" : 142}
,
{
"name" : "getImageStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkImage*()",
"line" : 145}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 152}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Image(GtkImage* gtkImage)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 160}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 178}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Image(StockID stockID, GtkIconSize size)",
"comment" : "\n Creates a GtkImage displaying a stock icon. Sample stock icon\n names are GTK_STOCK_OPEN, GTK_STOCK_EXIT. Sample stock sizes\n are GTK_ICON_SIZE_MENU, GTK_ICON_SIZE_SMALL_TOOLBAR. If the stock\n icon name isn't known, the image will be empty.\n You can register your own stock icon names, see\n gtk_icon_factory_add_default() and gtk_icon_factory_add().\n Params:\n  StockID = a stock icon name\n  size = a stock icon size\n Returns:\n  a new GtkImage displaying the stock icon\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 199}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Image(string iconName, GtkIconSize size)",
"comment" : "\n Creates a GtkImage displaying an icon from the current icon theme.\n If the icon name isn't known, a \"broken image\" icon will be\n displayed instead. If the current icon theme is changed, the icon\n will be updated appropriately. Since 2.6\n Params:\n  iconName = an icon name\n  size = a stock icon size\n Returns:\n  a new GtkImage displaying the themed icon\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 222}
,
{
"name" : "getIconSet",
"kind" : "function",
"protection" : "public",
"type" : "void(out IconSet iconSet, out GtkIconSize size)",
"comment" : "\n\t \n\n Gets the icon set and size being displayed by the GtkImage.\n The storage type of the image must be GTK_IMAGE_EMPTY or\n GTK_IMAGE_ICON_SET (see gtk_image_get_storage_type()).\n Params:\n iconSet = location to store a\n  GtkIconSet, or NULL. [out][transfer none][allow-none]\n size = location to store a stock\n  icon size, or NULL. [out][allow-none][type int]\n\t \n",
"line" : 247}
,
{
"name" : "getImage",
"kind" : "function",
"protection" : "public",
"type" : "void(out ImageGdk gdkImage, out Bitmap mask)",
"comment" : "\n Gets the GdkImage and mask being displayed by the GtkImage.\n The storage type of the image must be GTK_IMAGE_EMPTY or\n GTK_IMAGE_IMAGE (see gtk_image_get_storage_type()).\n The caller of this function does not own a reference to the\n returned image and mask.\n Params:\n gdkImage = return location for\n  a GtkImage, or NULL. [out][transfer none][allow-none]\n mask = return location for a\n  GdkBitmap, or NULL. [out][transfer none][allow-none]\n\t \n",
"line" : 269}
,
{
"name" : "getPixbuf",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf()",
"comment" : "\n Gets the GdkPixbuf being displayed by the GtkImage.\n The storage type of the image must be GTK_IMAGE_EMPTY or\n GTK_IMAGE_PIXBUF (see gtk_image_get_storage_type()).\n The caller of this function does not own a reference to the\n returned pixbuf.\n Returns: the displayed pixbuf, or NULL if the image is empty. [transfer none]\n\t \n",
"line" : 289}
,
{
"name" : "getPixmap",
"kind" : "function",
"protection" : "public",
"type" : "void(out Pixmap pixmap, out Bitmap mask)",
"comment" : "\n Gets the pixmap and mask being displayed by the GtkImage.\n The storage type of the image must be GTK_IMAGE_EMPTY or\n GTK_IMAGE_PIXMAP (see gtk_image_get_storage_type()).\n The caller of this function does not own a reference to the\n returned pixmap and mask.\n Params:\n pixmap = location to store the\n  pixmap, or NULL. [out][transfer none][allow-none]\n mask = location to store the\n  mask, or NULL. [out][transfer none][allow-none]\n\t \n",
"line" : 312}
,
{
"name" : "getStock",
"kind" : "function",
"protection" : "public",
"type" : "void(out string stockId, out GtkIconSize size)",
"comment" : "\n Gets the stock icon name and size being displayed by the GtkImage.\n The storage type of the image must be GTK_IMAGE_EMPTY or\n GTK_IMAGE_STOCK (see gtk_image_get_storage_type()).\n The returned string is owned by the GtkImage and should not\n be freed.\n Params:\n stockId = place to store a\n  stock icon name, or NULL. [out][transfer none][allow-none]\n size = place to store a stock icon\n  size, or NULL. [out][allow-none][type int]\n\t \n",
"line" : 336}
,
{
"name" : "getAnimation",
"kind" : "function",
"protection" : "public",
"type" : "PixbufAnimation()",
"comment" : "\n Gets the GdkPixbufAnimation being displayed by the GtkImage.\n The storage type of the image must be GTK_IMAGE_EMPTY or\n GTK_IMAGE_ANIMATION (see gtk_image_get_storage_type()).\n The caller of this function does not own a reference to the\n returned animation.\n Returns: the displayed animation, or NULL if the image is empty. [transfer none]\n\t \n",
"line" : 354}
,
{
"name" : "getIconName",
"kind" : "function",
"protection" : "public",
"type" : "void(out string iconName, out GtkIconSize size)",
"comment" : "\n Gets the icon name and size being displayed by the GtkImage.\n The storage type of the image must be GTK_IMAGE_EMPTY or\n GTK_IMAGE_ICON_NAME (see gtk_image_get_storage_type()).\n The returned string is owned by the GtkImage and should not\n be freed.\n Since 2.6\n Params:\n iconName = place to store an\n  icon name, or NULL. [out][transfer none][allow-none]\n size = place to store an icon size,\n  or NULL. [out][allow-none][type int]\n\t \n",
"line" : 378}
,
{
"name" : "getGicon",
"kind" : "function",
"protection" : "public",
"type" : "void(out IconIF gicon, out GtkIconSize size)",
"comment" : "\n Gets the GIcon and size being displayed by the GtkImage.\n The storage type of the image must be GTK_IMAGE_EMPTY or\n GTK_IMAGE_GICON (see gtk_image_get_storage_type()).\n The caller of this function does not own a reference to the\n returned GIcon.\n Since 2.14\n Params:\n gicon = place to store a\n  GIcon, or NULL. [out][transfer none][allow-none]\n size = place to store an icon size,\n  or NULL. [out][allow-none][type int]\n\t \n",
"line" : 401}
,
{
"name" : "getStorageType",
"kind" : "function",
"protection" : "public",
"type" : "GtkImageType()",
"comment" : "\n Gets the type of representation being used by the GtkImage\n to store image data. If the GtkImage has no image data,\n the return value will be GTK_IMAGE_EMPTY.\n Returns: image representation being used\n\t \n",
"line" : 417}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Image(string filename)",
"comment" : "\n Creates a new GtkImage displaying the file filename. If the file\n isn't found or can't be loaded, the resulting GtkImage will\n display a \"broken image\" icon. This function never returns NULL,\n it always returns a valid GtkImage widget.\n If the file contains an animation, the image will contain an\n animation.\n If you need to detect failures to load the file, use\n gdk_pixbuf_new_from_file() to load the file yourself, then create\n the GtkImage from the pixbuf. (Or for animations, use\n gdk_pixbuf_animation_new_from_file()).\n The storage type (gtk_image_get_storage_type()) of the returned\n image is not defined, it will be whatever is appropriate for\n displaying the file.\n Params:\n filename = a filename\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 441}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Image(IconSet iconSet, GtkIconSize size)",
"comment" : "\n Creates a GtkImage displaying an icon set. Sample stock sizes are\n GTK_ICON_SIZE_MENU, GTK_ICON_SIZE_SMALL_TOOLBAR. Instead of using\n this function, usually it's better to create a GtkIconFactory, put\n your icon sets in the icon factory, add the icon factory to the\n list of default factories with gtk_icon_factory_add_default(), and\n then use gtk_image_new_from_stock(). This will allow themes to\n override the icon you ship with your application.\n The GtkImage does not assume a reference to the\n icon set; you still need to unref it if you own references.\n GtkImage will add its own reference rather than adopting yours.\n Params:\n iconSet = a GtkIconSet\n size = a stock icon size. [type int]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 468}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Image(ImageGdk image, Bitmap mask)",
"comment" : "\n Creates a GtkImage widget displaying a image with a mask.\n A GdkImage is a client-side image buffer in the pixel format of the\n current display. The GtkImage does not assume a reference to the\n image or mask; you still need to unref them if you own references.\n GtkImage will add its own reference rather than adopting yours.\n Params:\n image = a GdkImage, or NULL. [allow-none]\n mask = a GdkBitmap, or NULL. [allow-none]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 490}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Image(Pixbuf pixbuf)",
"comment" : "\n Creates a new GtkImage displaying pixbuf.\n The GtkImage does not assume a reference to the\n pixbuf; you still need to unref it if you own references.\n GtkImage will add its own reference rather than adopting yours.\n Note that this function just creates an GtkImage from the pixbuf. The\n GtkImage created will not react to state changes. Should you want that,\n you should use gtk_image_new_from_icon_set().\n Params:\n pixbuf = a GdkPixbuf, or NULL. [allow-none]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 513}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Image(Pixmap pixmap, Bitmap mask)",
"comment" : "\n Creates a GtkImage widget displaying pixmap with a mask.\n A GdkPixmap is a server-side image buffer in the pixel format of the\n current display. The GtkImage does not assume a reference to the\n pixmap or mask; you still need to unref them if you own references.\n GtkImage will add its own reference rather than adopting yours.\n Params:\n pixmap = a GdkPixmap, or NULL. [allow-none]\n mask = a GdkBitmap, or NULL. [allow-none]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 535}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Image(PixbufAnimation animation)",
"comment" : "\n Creates a GtkImage displaying the given animation.\n The GtkImage does not assume a reference to the\n animation; you still need to unref it if you own references.\n GtkImage will add its own reference rather than adopting yours.\n Note that the animation frames are shown using a timeout with\n G_PRIORITY_DEFAULT. When using animations to indicate busyness,\n keep in mind that the animation will only be shown if the main loop\n is not busy with something that has a higher priority.\n Params:\n animation = an animation\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 559}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Image(IconIF icon, GtkIconSize size)",
"comment" : "\n Creates a GtkImage displaying an icon from the current icon theme.\n If the icon name isn't known, a \"broken image\" icon will be\n displayed instead. If the current icon theme is changed, the icon\n will be updated appropriately.\n Since 2.14\n Params:\n icon = an icon\n size = a stock icon size. [type int]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 581}
,
{
"name" : "setFromFile",
"kind" : "function",
"protection" : "public",
"type" : "void(string filename)",
"comment" : "\n See gtk_image_new_from_file() for details.\n Params:\n filename = a filename or NULL. [allow-none]\n\t \n",
"line" : 597}
,
{
"name" : "setFromIconSet",
"kind" : "function",
"protection" : "public",
"type" : "void(IconSet iconSet, GtkIconSize size)",
"comment" : "\n See gtk_image_new_from_icon_set() for details.\n Params:\n iconSet = a GtkIconSet\n size = a stock icon size. [type int]\n\t \n",
"line" : 609}
,
{
"name" : "setFromImage",
"kind" : "function",
"protection" : "public",
"type" : "void(ImageGdk gdkImage, Bitmap mask)",
"comment" : "\n See gtk_image_new_from_image() for details.\n Params:\n gdkImage = a GdkImage or NULL. [allow-none]\n mask = a GdkBitmap or NULL. [allow-none]\n\t \n",
"line" : 621}
,
{
"name" : "setFromPixbuf",
"kind" : "function",
"protection" : "public",
"type" : "void(Pixbuf pixbuf)",
"comment" : "\n See gtk_image_new_from_pixbuf() for details.\n Params:\n pixbuf = a GdkPixbuf or NULL. [allow-none]\n\t \n",
"line" : 632}
,
{
"name" : "setFromPixmap",
"kind" : "function",
"protection" : "public",
"type" : "void(Pixmap pixmap, Bitmap mask)",
"comment" : "\n See gtk_image_new_from_pixmap() for details.\n Params:\n pixmap = a GdkPixmap or NULL. [allow-none]\n mask = a GdkBitmap or NULL. [allow-none]\n\t \n",
"line" : 644}
,
{
"name" : "setFromStock",
"kind" : "function",
"protection" : "public",
"type" : "void(string stockId, GtkIconSize size)",
"comment" : "\n See gtk_image_new_from_stock() for details.\n Params:\n stockId = a stock icon name\n size = a stock icon size. [type int]\n\t \n",
"line" : 656}
,
{
"name" : "setFromAnimation",
"kind" : "function",
"protection" : "public",
"type" : "void(PixbufAnimation animation)",
"comment" : "\n Causes the GtkImage to display the given animation (or display\n nothing, if you set the animation to NULL).\n Params:\n animation = the GdkPixbufAnimation\n\t \n",
"line" : 668}
,
{
"name" : "setFromIconName",
"kind" : "function",
"protection" : "public",
"type" : "void(string iconName, GtkIconSize size)",
"comment" : "\n See gtk_image_new_from_icon_name() for details.\n Since 2.6\n Params:\n iconName = an icon name\n size = an icon size. [type int]\n\t \n",
"line" : 681}
,
{
"name" : "setFromGicon",
"kind" : "function",
"protection" : "public",
"type" : "void(IconIF icon, GtkIconSize size)",
"comment" : "\n See gtk_image_new_from_gicon() for details.\n Since 2.14\n Params:\n icon = an icon\n size = an icon size. [type int]\n\t \n",
"line" : 694}
,
{
"name" : "clear",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Resets the image to be empty.\n Since 2.8\n\t \n",
"line" : 704}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Image()",
"comment" : "\n Creates a new empty GtkImage widget.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 714}
,
{
"name" : "set",
"kind" : "function",
"protection" : "public",
"type" : "void(ImageGdk val, Bitmap mask)",
"comment" : "\n Warning\n gtk_image_set has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_image_set_from_image() instead.\n Sets the GtkImage.\n Params:\n val = a GdkImage\n mask = a GdkBitmap that indicates which parts of the image should be transparent.\n\t \n",
"line" : 733}
,
{
"name" : "get",
"kind" : "function",
"protection" : "public",
"type" : "void(out ImageGdk val, out Bitmap mask)",
"comment" : "\n Warning\n gtk_image_get has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_image_get_image() instead.\n Gets the GtkImage.\n Params:\n val = return location for a GdkImage\n mask = a GdkBitmap that indicates which parts of the image should be transparent.\n\t \n",
"line" : 747}
,
{
"name" : "setPixelSize",
"kind" : "function",
"protection" : "public",
"type" : "void(int pixelSize)",
"comment" : "\n Sets the pixel size to use for named icons. If the pixel size is set\n to a value != -1, it is used instead of the icon size set by\n gtk_image_set_from_icon_name().\n Since 2.6\n Params:\n pixelSize = the new pixel size\n\t \n",
"line" : 767}
,
{
"name" : "getPixelSize",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the pixel size used for named icons.\n Since 2.6\n Returns: the pixel size used for named icons.\n\t \n",
"line" : 778}
]
}
]
}
,
{
"name" : "gtk.ImageMenuItem",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/ImageMenuItem.d",
"members" : [
{
"name" : "ImageMenuItem",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkImageMenuItem is a menu item which has an icon next to the text label.\n Note that the user can disable display of menu icons, so make sure to still\n fill in the text label.\n \n",
"line" : 83,
"base" : "MenuItem",
"members" : [
{
"name" : "gtkImageMenuItem",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkImageMenuItem*",
"comment" : " the main Gtk struct \n",
"line" : 87}
,
{
"name" : "getImageMenuItemStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkImageMenuItem*()",
"line" : 90}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 97}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ImageMenuItem(GtkImageMenuItem* gtkImageMenuItem)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 105}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 123}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ImageMenuItem(string label, bool mnemonic = true)",
"comment" : "\n Creates a new GtkImageMenuItem containing a label.\n If mnemonic it true the label\n will be created using gtk_label_new_with_mnemonic(), so underscores\n in label indicate the mnemonic for the menu item.\n Params:\n  label = the text of the menu item.\n Returns:\n  a new GtkImageMenuItem.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 140}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ImageMenuItem(StockID stockID, AccelGroup accelGroup)",
"comment" : "\n Creates a new GtkImageMenuItem containing the image and text from a\n stock item. Some stock ids have preprocessor macros like GTK_STOCK_OK\n and GTK_STOCK_APPLY.\n If you want this menu item to have changeable accelerators, then pass in\n NULL for accel_group. Next call gtk_menu_item_set_accel_path() with an\n appropriate path for the menu item, use gtk_stock_lookup() to look up the\n standard accelerator for the stock item, and if one is found, call\n gtk_accel_map_add_entry() to register it.\n Params:\n StockID = the name of the stock item\n accelGroup =  the GtkAccelGroup to add the menu items accelerator to,\n  or NULL.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 178}
,
{
"name" : "setImage",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget image)",
"comment" : "\n\t \n\n Sets the image of image_menu_item to the given widget.\n Note that it depends on the show-menu-images setting whether\n the image will be displayed or not.\n Params:\n image = a widget to set as the image for the menu item. [allow-none]\n\t \n",
"line" : 199}
,
{
"name" : "getImage",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Gets the widget that is currently set as the image of image_menu_item.\n See gtk_image_menu_item_set_image().\n Returns: the widget set as image of image_menu_item. [transfer none]\n\t \n",
"line" : 210}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ImageMenuItem()",
"comment" : "\n Creates a new GtkImageMenuItem with an empty label.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 225}
,
{
"name" : "getUseStock",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Checks whether the label set in the menuitem is used as a\n stock id to select the stock item for the item.\n Since 2.16\n Returns: TRUE if the label set in the menuitem is used as a stock id to select the stock item for the item\n\t \n",
"line" : 242}
,
{
"name" : "setUseStock",
"kind" : "function",
"protection" : "public",
"type" : "void(int useStock)",
"comment" : "\n If TRUE, the label set in the menuitem is used as a\n stock id to select the stock item for the item.\n Since 2.16\n Params:\n useStock = TRUE if the menuitem should use a stock item\n\t \n",
"line" : 255}
,
{
"name" : "getAlwaysShowImage",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the menu item will ignore the \"gtk-menu-images\"\n setting and always show the image, if available.\n Since 2.16\n Returns: TRUE if the menu item will always show the image\n\t \n",
"line" : 267}
,
{
"name" : "setAlwaysShowImage",
"kind" : "function",
"protection" : "public",
"type" : "void(int alwaysShow)",
"comment" : "\n If TRUE, the menu item will ignore the \"gtk-menu-images\"\n setting and always show the image, if available.\n Use this property if the menuitem would be useless or hard to use\n without the image.\n Since 2.16\n Params:\n alwaysShow = TRUE if the menuitem should always show the image\n\t \n",
"line" : 282}
,
{
"name" : "setAccelGroup",
"kind" : "function",
"protection" : "public",
"type" : "void(AccelGroup accelGroup)",
"comment" : "\n Specifies an accel_group to add the menu items accelerator to\n (this only applies to stock items so a stock item must already\n be set, make sure to call gtk_image_menu_item_set_use_stock()\n and gtk_menu_item_set_label() with a valid stock item first).\n If you want this menu item to have changeable accelerators then\n you shouldnt need this (see gtk_image_menu_item_new_from_stock()).\n Since 2.16\n Params:\n accelGroup = the GtkAccelGroup\n\t \n",
"line" : 299}
]
}
]
}
,
{
"name" : "gtk.IMContext",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/IMContext.d",
"members" : [
{
"name" : "IMContext",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkIMContext defines the interface for GTK+ input methods. An input method\n is used by GTK+ text input widgets like GtkEntry to map from key events to\n Unicode character strings.\n The user may change the current input method via a context menu, unless the\n \"gtk-show-input-method-menu\" GtkSettings property is set to FALSE.\n The default input method can be set programmatically via the\n \"gtk-im-module\" GtkSettings property. Alternatively, you may set\n the GTK_IM_MODULE environment variable as documented in gtk-running.\n The GtkEntry \"im-module\" and GtkTextView \"im-module\"\n properties may also be used to set input methods for specific widget\n instances. For instance, a certain entry widget might be expected to contain\n certain characters which would be easier to input with a certain input\n method.\n An input method may consume multiple key events in sequence and finally\n output the composed result. This is called preediting, and an input method\n may provide feedback about this process by displaying the intermediate\n composition states as preedit text. For instance, the default GTK+ input\n method implements the input of arbitrary Unicode code points by holding down\n the Control and Shift keys and then typing \"U\" followed by the hexadecimal\n digits of the code point. When releasing the Control and Shift keys,\n preediting ends and the character is inserted as text. Ctrl+Shift+u20AC for\n example results in the € sign.\n Additional input methods can be made available for use by GTK+ widgets as\n loadable modules. An input method module is a small shared library which\n implements a subclass of GtkIMContext or GtkIMContextSimple and exports\n these four functions:\n $(DDOC_COMMENT example)\n This function should register the GType of the GtkIMContext subclass which\n implements the input method by means of g_type_module_register_type(). Note\n that g_type_register_static() cannot be used as the type needs to be\n registered dynamically.\n $(DDOC_COMMENT example)\n Here goes any cleanup code your input method might require on module unload.\n $(DDOC_COMMENT example)\n This function returns the list of input methods provided by the module. The\n example implementation above shows a common solution and simply returns a\n pointer to statically defined array of GtkIMContextInfo items for each\n provided input method.\n $(DDOC_COMMENT example)\n This function should return a pointer to a newly created instance of the\n GtkIMContext subclass identified by context_id. The context ID is the same\n as specified in the GtkIMContextInfo array returned by im_module_list().\n After a new loadable input method module has been installed on the system,\n the configuration file gtk.immodules needs to be\n regenerated by gtk-query-immodules-2.0,\n in order for the new input method to become available to GTK+ applications.\n \n",
"line" : 125,
"base" : "ObjectG",
"members" : [
{
"name" : "gtkIMContext",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkIMContext*",
"comment" : " the main Gtk struct \n",
"line" : 129}
,
{
"name" : "getIMContextStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkIMContext*()",
"line" : 132}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 139}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "IMContext(GtkIMContext* gtkIMContext)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 147}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 165}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 173}
,
{
"name" : "onCommitListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(string, IMContext)[]",
"line" : 175}
,
{
"name" : "addOnCommit",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(string, IMContext) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::commit signal is emitted when a complete input sequence\n has been entered by the user. This can be a single character\n immediately after a key press or the final result of preediting.\n\t \n",
"line" : 181}
,
{
"name" : "callBackCommit",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkIMContext* contextStruct, char* str, IMContext iMContext)",
"line" : 196}
,
{
"name" : "onDeleteSurroundingListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(int, int, IMContext)[]",
"line" : 204}
,
{
"name" : "addOnDeleteSurrounding",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(int, int, IMContext) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::delete-surrounding signal is emitted when the input method\n needs to delete all or part of the context surrounding the cursor.\n TRUE if the signal was handled.\n\t \n",
"line" : 210}
,
{
"name" : "callBackDeleteSurrounding",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkIMContext* contextStruct, int offset, int nChars, IMContext iMContext)",
"line" : 225}
,
{
"name" : "onPreeditChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(IMContext)[]",
"line" : 238}
,
{
"name" : "addOnPreeditChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(IMContext) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::preedit-changed signal is emitted whenever the preedit sequence\n currently being entered has changed. It is also emitted at the end of\n a preedit sequence, in which case\n gtk_im_context_get_preedit_string() returns the empty string.\n\t \n",
"line" : 245}
,
{
"name" : "callBackPreeditChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkIMContext* contextStruct, IMContext iMContext)",
"line" : 260}
,
{
"name" : "onPreeditEndListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(IMContext)[]",
"line" : 268}
,
{
"name" : "addOnPreeditEnd",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(IMContext) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::preedit-end signal is emitted when a preediting sequence\n has been completed or canceled.\n\t \n",
"line" : 273}
,
{
"name" : "callBackPreeditEnd",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkIMContext* contextStruct, IMContext iMContext)",
"line" : 288}
,
{
"name" : "onPreeditStartListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(IMContext)[]",
"line" : 296}
,
{
"name" : "addOnPreeditStart",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(IMContext) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::preedit-start signal is emitted when a new preediting sequence\n starts.\n\t \n",
"line" : 301}
,
{
"name" : "callBackPreeditStart",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkIMContext* contextStruct, IMContext iMContext)",
"line" : 316}
,
{
"name" : "onRetrieveSurroundingListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(IMContext)[]",
"line" : 324}
,
{
"name" : "addOnRetrieveSurrounding",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(IMContext) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::retrieve-surrounding signal is emitted when the input method\n requires the context surrounding the cursor. The callback should set\n the input method surrounding context by calling the\n gtk_im_context_set_surrounding() method.\n TRUE if the signal was handled.\n\t \n",
"line" : 332}
,
{
"name" : "callBackRetrieveSurrounding",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkIMContext* contextStruct, IMContext iMContext)",
"line" : 347}
,
{
"name" : "setClientWindow",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window)",
"comment" : "\n Set the client window for the input context; this is the\n GdkWindow in which the input appears. This window is\n used in order to correctly position status windows, and may\n also be used for purposes internal to the input method.\n Params:\n window = the client window. This may be NULL to indicate\n that the previous client window no longer exists. [allow-none]\n\t \n",
"line" : 370}
,
{
"name" : "getPreeditString",
"kind" : "function",
"protection" : "public",
"type" : "void(out string str, out PangoAttrList* attrs, out int cursorPos)",
"comment" : "\n Retrieve the current preedit string for the input context,\n and a list of attributes to apply to the string.\n This string should be displayed inserted at the insertion\n point.\n Params:\n str = location to store the retrieved\n string. The string retrieved must be freed with g_free(). [out][transfer full]\n attrs = location to store the retrieved\n attribute list. When you are done with this list, you\n must unreference it with pango_attr_list_unref(). [out][transfer full]\n cursorPos = location to store position of cursor (in characters)\n within the preedit string. [out]\n\t \n",
"line" : 390}
,
{
"name" : "filterKeypress",
"kind" : "function",
"protection" : "public",
"type" : "int(GdkEventKey* event)",
"comment" : "\n Allow an input method to internally handle key press and release\n events. If this function returns TRUE, then no further processing\n should be done for this key event.\n Params:\n event = the key event\n Returns: TRUE if the input method handled the key event.\n\t \n",
"line" : 408}
,
{
"name" : "focusIn",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Notify the input method that the widget to which this\n input context corresponds has gained focus. The input method\n may, for example, change the displayed feedback to reflect\n this change.\n\t \n",
"line" : 420}
,
{
"name" : "focusOut",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Notify the input method that the widget to which this\n input context corresponds has lost focus. The input method\n may, for example, change the displayed feedback or reset the contexts\n state to reflect this change.\n\t \n",
"line" : 432}
,
{
"name" : "reset",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Notify the input method that a change such as a change in cursor\n position has been made. This will typically cause the input\n method to clear the preedit state.\n\t \n",
"line" : 443}
,
{
"name" : "setCursorLocation",
"kind" : "function",
"protection" : "public",
"type" : "void(Rectangle area)",
"comment" : "\n Notify the input method that a change in cursor\n position has been made. The location is relative to the client\n window.\n Params:\n area = new location\n\t \n",
"line" : 456}
,
{
"name" : "setUsePreedit",
"kind" : "function",
"protection" : "public",
"type" : "void(int usePreedit)",
"comment" : "\n Sets whether the IM context should use the preedit string\n to display feedback. If use_preedit is FALSE (default\n is TRUE), then the IM context may use some other method to display\n feedback, such as displaying it in a child of the root window.\n Params:\n usePreedit = whether the IM context should use the preedit string.\n\t \n",
"line" : 470}
,
{
"name" : "setSurrounding",
"kind" : "function",
"protection" : "public",
"type" : "void(string text, int len, int cursorIndex)",
"comment" : "\n Sets surrounding context around the insertion point and preedit\n string. This function is expected to be called in response to the\n GtkIMContext::retrieve_surrounding signal, and will likely have no\n effect if called at other times.\n Params:\n text = text surrounding the insertion point, as UTF-8.\n the preedit string should not be included within\n text.\n len = the length of text, or -1 if text is nul-terminated\n cursorIndex = the byte index of the insertion cursor within text.\n\t \n",
"line" : 488}
,
{
"name" : "getSurrounding",
"kind" : "function",
"protection" : "public",
"type" : "int(out string text, out int cursorIndex)",
"comment" : "\n Retrieves context around the insertion point. Input methods\n typically want context in order to constrain input text based on\n existing text; this is important for languages such as Thai where\n only some sequences of characters are allowed.\n This function is implemented by emitting the\n GtkIMContext::retrieve_surrounding signal on the input method; in\n response to this signal, a widget should provide as much context as\n is available, up to an entire paragraph, by calling\n gtk_im_context_set_surrounding(). Note that there is no obligation\n for a widget to respond to the ::retrieve_surrounding signal, so input\n methods must be prepared to function without context.\n Params:\n text = location to store a UTF-8 encoded\n string of text holding context around the insertion point.\n If the function returns TRUE, then you must free the result\n stored in this location with g_free(). [out][transfer full]\n cursorIndex = (out) location to store byte index of the insertion\n cursor within text.\n Returns: TRUE if surrounding text was provided; in this case you must free the result stored in *text.\n\t \n",
"line" : 515}
,
{
"name" : "deleteSurrounding",
"kind" : "function",
"protection" : "public",
"type" : "int(int offset, int nChars)",
"comment" : "\n Asks the widget that the input context is attached to to delete\n characters around the cursor position by emitting the\n GtkIMContext::delete_surrounding signal. Note that offset and n_chars\n are in characters not in bytes which differs from the usage other\n places in GtkIMContext.\n In order to use this function, you should first call\n gtk_im_context_get_surrounding() to get the current context, and\n call this function immediately afterwards to make sure that you\n know what you are deleting. You should also account for the fact\n that even if the signal was handled, the input context might not\n have deleted all the characters that were requested to be deleted.\n This function is used by an input method that wants to make\n subsitutions in the existing text in response to new input. It is\n not useful for applications.\n Params:\n offset = offset from cursor position in chars;\n a negative value means start before the cursor.\n nChars = number of characters to delete.\n Returns: TRUE if the signal was handled. Signal Details The \"commit\" signal void user_function (GtkIMContext *context, gchar *str, gpointer user_data) : Run Last The ::commit signal is emitted when a complete input sequence has been entered by the user. This can be a single character immediately after a key press or the final result of preediting.\n\t \n",
"line" : 547}
]
}
]
}
,
{
"name" : "gtk.IMContextSimple",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/IMContextSimple.d",
"members" : [
{
"name" : "IMContextSimple",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n \n",
"line" : 72,
"base" : "IMContext",
"members" : [
{
"name" : "gtkIMContextSimple",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkIMContextSimple*",
"comment" : " the main Gtk struct \n",
"line" : 76}
,
{
"name" : "getIMContextSimpleStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkIMContextSimple*()",
"line" : 79}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 86}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "IMContextSimple(GtkIMContextSimple* gtkIMContextSimple)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 94}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 112}
,
{
"name" : "newIMContextSimple",
"kind" : "function",
"protection" : "public",
"type" : "IMContext()",
"comment" : "\n\t \n\n Creates a new GtkIMContextSimple.\n Returns: a new GtkIMContextSimple.\n\t \n",
"line" : 125}
,
{
"name" : "addTable",
"kind" : "function",
"protection" : "public",
"type" : "void(ushort[] data, int maxSeqLen)",
"comment" : "\n Adds an additional table to search to the input context.\n Each row of the table consists of max_seq_len key symbols\n followed by two guint16 interpreted as the high and low\n words of a gunicode value. Tables are searched starting\n from the last added.\n The table must be sorted in dictionary order on the\n numeric value of the key symbol fields. (Values beyond\n the length of the sequence should be zero.)\n Params:\n data = the table\n maxSeqLen = Maximum length of a sequence in the table\n (cannot be greater than GTK_MAX_COMPOSE_LEN)\n\t \n",
"line" : 150}
]
}
]
}
,
{
"name" : "gtk.IMMulticontext",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/IMMulticontext.d",
"members" : [
{
"name" : "IMMulticontext",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n \n",
"line" : 77,
"base" : "IMContext",
"members" : [
{
"name" : "gtkIMMulticontext",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkIMMulticontext*",
"comment" : " the main Gtk struct \n",
"line" : 81}
,
{
"name" : "getIMMulticontextStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkIMMulticontext*()",
"line" : 84}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 91}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "IMMulticontext(GtkIMMulticontext* gtkIMMulticontext)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 99}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 117}
,
{
"name" : "newIMMulticontext",
"kind" : "function",
"protection" : "public",
"type" : "IMContext()",
"comment" : "\n\t \n\n Creates a new GtkIMMulticontext.\n Returns: a new GtkIMMulticontext.\n\t \n",
"line" : 130}
,
{
"name" : "appendMenuitems",
"kind" : "function",
"protection" : "public",
"type" : "void(MenuShell menushell)",
"comment" : "\n Add menuitems for various available input methods to a menu;\n the menuitems, when selected, will switch the input method\n for the context and the global default input method.\n Params:\n menushell = a GtkMenuShell\n\t \n",
"line" : 148}
,
{
"name" : "getContextId",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the id of the currently active slave of the context.\n Since 2.16\n Returns: the id of the currently active slave\n\t \n",
"line" : 159}
,
{
"name" : "setContextId",
"kind" : "function",
"protection" : "public",
"type" : "void(string contextId)",
"comment" : "\n Sets the context id for context.\n This causes the currently active slave of context to be\n replaced by the slave corresponding to the new context id.\n Since 2.16\n Params:\n context = a GtkIMMulticontext\n contextId = the id to use\n\t \n",
"line" : 174}
]
}
]
}
,
{
"name" : "gtk.InfoBar",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/InfoBar.d",
"members" : [
{
"name" : "InfoBar",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkInfoBar is a widget that can be used to show messages to\n the user without showing a dialog. It is often temporarily shown\n at the top or bottom of a document. In contrast to GtkDialog, which\n has a horizontal action area at the bottom, GtkInfoBar has a\n vertical action area at the side.\n The API of GtkInfoBar is very similar to GtkDialog, allowing you\n to add buttons to the action area with gtk_info_bar_add_button() or\n gtk_info_bar_new_with_buttons(). The sensitivity of action widgets\n can be controlled with gtk_info_bar_set_response_sensitive().\n To add widgets to the main content area of a GtkInfoBar, use\n gtk_info_bar_get_content_area() and add your widgets to the container.\n Similar to GtkMessageDialog, the contents of a GtkInfoBar can by\n classified as error message, warning, informational message, etc,\n by using gtk_info_bar_set_message_type(). GTK+ uses the message type\n to determine the background color of the message area.\n $(DDOC_COMMENT example)\n GtkInfoBar as GtkBuildable\n The GtkInfoBar implementation of the GtkBuildable interface exposes\n the content area and action area as internal children with the names\n \"content_area\" and \"action_area\".\n GtkInfoBar supports a custom <action-widgets> element, which\n can contain multiple <action-widget> elements. The \"response\"\n attribute specifies a numeric response, and the content of the element\n is the id of widget (which should be a child of the dialogs action_area).\n \n",
"line" : 105,
"base" : "HBox",
"members" : [
{
"name" : "gtkInfoBar",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkInfoBar*",
"comment" : " the main Gtk struct \n",
"line" : 109}
,
{
"name" : "getInfoBarStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkInfoBar*()",
"line" : 112}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 119}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "InfoBar(GtkInfoBar* gtkInfoBar)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 127}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 145}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "InfoBar(string[] buttonsText, GtkResponseType[] responses)",
"comment" : " \n",
"line" : 152}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "InfoBar(StockID[] stockIDs, GtkResponseType[] responses)",
"comment" : " \n",
"line" : 163}
,
{
"name" : "addButton",
"kind" : "function",
"protection" : "public",
"type" : "Widget(StockID stockID, int responseId)",
"comment" : " \n",
"line" : 174}
,
{
"name" : "addButtons",
"kind" : "function",
"protection" : "public",
"type" : "void(string[] buttonsText, GtkResponseType[] responses)",
"comment" : " \n",
"line" : 180}
,
{
"name" : "addButtons",
"kind" : "function",
"protection" : "public",
"type" : "void(StockID[] stockIDs, GtkResponseType[] responses)",
"comment" : " \n",
"line" : 189}
,
{
"name" : "getActionArea",
"kind" : "function",
"protection" : "public",
"type" : "VButtonBox()",
"comment" : "\n Returns the action area of info_bar.\n Since 2.18\n Returns: the action area.\n\t \n",
"line" : 202}
,
{
"name" : "getContentArea",
"kind" : "function",
"protection" : "public",
"type" : "HBox()",
"comment" : "\n Returns the content area of info_bar.\n Since 2.18\n Returns: the content area.\n\t \n",
"line" : 218}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 231}
,
{
"name" : "onCloseListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(InfoBar)[]",
"line" : 233}
,
{
"name" : "addOnClose",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(InfoBar) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::close signal is a\n keybinding signal\n which gets emitted when the user uses a keybinding to dismiss\n the info bar.\n The default binding for this signal is the Escape key.\n Since 2.18\n\t \n",
"line" : 242}
,
{
"name" : "callBackClose",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkInfoBar* arg0Struct, InfoBar infoBar)",
"line" : 257}
,
{
"name" : "onResponseListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(int, InfoBar)[]",
"line" : 265}
,
{
"name" : "addOnResponse",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(int, InfoBar) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when an action widget is clicked or the application programmer\n calls gtk_dialog_response(). The response_id depends on which action\n widget was clicked.\n Since 2.18\n See Also\n GtkStatusbar, GtkMessageDialog\n\t \n",
"line" : 274}
,
{
"name" : "callBackResponse",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkInfoBar* infoBarStruct, int responseId, InfoBar infoBar)",
"line" : 289}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "InfoBar()",
"comment" : "\n Creates a new GtkInfoBar object.\n Since 2.18\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 303}
,
{
"name" : "addActionWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, int responseId)",
"comment" : "\n Add an activatable widget to the action area of a GtkInfoBar,\n connecting a signal handler that will emit the \"response\"\n signal on the message area when the widget is activated. The widget\n is appended to the end of the message areas action area.\n Since 2.18\n Params:\n child = an activatable widget\n responseId = response ID for child\n\t \n",
"line" : 324}
,
{
"name" : "addButton",
"kind" : "function",
"protection" : "public",
"type" : "Widget(string buttonText, int responseId)",
"comment" : "\n Adds a button with the given text (or a stock button, if button_text\n is a stock ID) and sets things up so that clicking the button will emit\n the \"response\" signal with the given response_id. The button is appended\n to the end of the info bars's action area. The button widget is\n returned, but usually you don't need it.\n Since 2.18\n Params:\n buttonText = text of button, or stock ID\n responseId = response ID for the button\n Returns: the button widget that was added. [transfer none]\n\t \n",
"line" : 342}
,
{
"name" : "setResponseSensitive",
"kind" : "function",
"protection" : "public",
"type" : "void(int responseId, int setting)",
"comment" : "\n Calls gtk_widget_set_sensitive (widget, setting) for each\n widget in the info bars's action area with the given response_id.\n A convenient way to sensitize\/desensitize dialog buttons.\n Since 2.18\n Params:\n responseId = a response ID\n setting = TRUE for sensitive\n\t \n",
"line" : 362}
,
{
"name" : "setDefaultResponse",
"kind" : "function",
"protection" : "public",
"type" : "void(int responseId)",
"comment" : "\n Sets the last widget in the info bar's action area with\n the given response_id as the default widget for the dialog.\n Pressing \"Enter\" normally activates the default widget.\n Note that this function currently requires info_bar to\n be added to a widget hierarchy.\n Since 2.18\n Params:\n responseId = a response ID\n\t \n",
"line" : 378}
,
{
"name" : "response",
"kind" : "function",
"protection" : "public",
"type" : "void(int responseId)",
"comment" : "\n Emits the 'response' signal with the given response_id.\n Since 2.18\n Params:\n responseId = a response ID\n\t \n",
"line" : 390}
,
{
"name" : "setMessageType",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkMessageType messageType)",
"comment" : "\n Sets the message type of the message area.\n GTK+ uses this type to determine what color to use\n when drawing the message area.\n Since 2.18\n Params:\n messageType = a GtkMessageType\n\t \n",
"line" : 404}
,
{
"name" : "getMessageType",
"kind" : "function",
"protection" : "public",
"type" : "GtkMessageType()",
"comment" : "\n Returns the message type of the message area.\n Since 2.18\n Returns: the message type of the message area.\n\t \n",
"line" : 415}
]
}
]
}
,
{
"name" : "gtk.InputDialog",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/InputDialog.d",
"members" : [
{
"name" : "InputDialog",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkInputDialog displays a dialog which allows the user\n to configure XInput extension devices. For each\n device, they can control the mode of the device\n (disabled, screen-relative, or window-relative),\n the mapping of axes to coordinates, and the\n mapping of the devices macro keys to key press\n events.\n GtkInputDialog contains two buttons to which\n the application can connect; one for closing\n the dialog, and one for saving the changes.\n No actions are bound to these by default.\n The changes that the user makes take effect\n immediately.\n As of GTK+ 2.20, GtkInputDialog has been deprecated since it is too specialized.\n \n",
"line" : 87,
"base" : "Dialog",
"members" : [
{
"name" : "gtkInputDialog",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkInputDialog*",
"comment" : " the main Gtk struct \n",
"line" : 91}
,
{
"name" : "getInputDialogStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkInputDialog*()",
"line" : 94}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 101}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "InputDialog(GtkInputDialog* gtkInputDialog)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 109}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 127}
,
{
"name" : "getCloseButton",
"kind" : "function",
"protection" : "public",
"type" : "Button()",
"line" : 133}
,
{
"name" : "getSaveButton",
"kind" : "function",
"protection" : "public",
"type" : "Button()",
"line" : 154}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 177}
,
{
"name" : "onDisableDeviceListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GdkDevice*, InputDialog)[]",
"line" : 179}
,
{
"name" : "addOnDisableDevice",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GdkDevice*, InputDialog) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted when the user changes the\n mode of a device from a GDK_MODE_SCREEN or GDK_MODE_WINDOW\n to GDK_MODE_ENABLED.\n\t \n",
"line" : 185}
,
{
"name" : "callBackDisableDevice",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkInputDialog* inputdialogStruct, GdkDevice* arg1, InputDialog inputDialog)",
"line" : 200}
,
{
"name" : "onEnableDeviceListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GdkDevice*, InputDialog)[]",
"line" : 208}
,
{
"name" : "addOnEnableDevice",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GdkDevice*, InputDialog) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted when the user changes the\n mode of a device from GDK_MODE_DISABLED to a\n GDK_MODE_SCREEN or GDK_MODE_WINDOW.\n\t \n",
"line" : 214}
,
{
"name" : "callBackEnableDevice",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkInputDialog* inputdialogStruct, GdkDevice* arg1, InputDialog inputDialog)",
"line" : 229}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "InputDialog()",
"comment" : "\n Warning\n gtk_input_dialog_new has been deprecated since version 2.20 and should not be used in newly-written code. Don't use this widget anymore.\n Creates a new GtkInputDialog.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 244}
]
}
]
}
,
{
"name" : "gtk.Invisible",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Invisible.d",
"members" : [
{
"name" : "Invisible",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkInvisible widget is used internally in GTK+, and is probably not\n very useful for application developers.\n It is used for reliable pointer grabs and selection handling in the code\n for drag-and-drop.\n \n",
"line" : 77,
"base" : "Widget",
"members" : [
{
"name" : "gtkInvisible",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkInvisible*",
"comment" : " the main Gtk struct \n",
"line" : 81}
,
{
"name" : "getInvisibleStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkInvisible*()",
"line" : 84}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 91}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Invisible(GtkInvisible* gtkInvisible)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 99}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 117}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Invisible()",
"comment" : "\n\t \n\n Creates a new GtkInvisible.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 130}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Invisible(Screen screen)",
"comment" : "\n Creates a new GtkInvisible object for a specified screen\n Since 2.2\n Params:\n screen = a GdkScreen which identifies on which\n the new GtkInvisible will be created.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 149}
,
{
"name" : "setScreen",
"kind" : "function",
"protection" : "public",
"type" : "void(Screen screen)",
"comment" : "\n Sets the GdkScreen where the GtkInvisible object will be displayed.\n Since 2.2\n Params:\n screen = a GdkScreen.\n\t \n",
"line" : 166}
,
{
"name" : "getScreen",
"kind" : "function",
"protection" : "public",
"type" : "Screen()",
"comment" : "\n Returns the GdkScreen object associated with invisible\n Since 2.2\n Returns: the associated GdkScreen. [transfer none]\n\t \n",
"line" : 177}
]
}
]
}
,
{
"name" : "gtk.Item",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Item.d",
"members" : [
{
"name" : "Item",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkItem widget is an abstract base class for GtkMenuItem, GtkListItem\n and GtkTreeItem.\n GtkItem is deprecated and will be removed in GTK+ 3.\n \n",
"line" : 74,
"base" : "Bin",
"members" : [
{
"name" : "gtkItem",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkItem*",
"comment" : " the main Gtk struct \n",
"line" : 78}
,
{
"name" : "getItemStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkItem*()",
"line" : 81}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 88}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Item(GtkItem* gtkItem)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 96}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 114}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 122}
,
{
"name" : "onDeselectListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Item)[]",
"line" : 124}
,
{
"name" : "addOnDeselect",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Item) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when the item is deselected.\n\t \n",
"line" : 128}
,
{
"name" : "callBackDeselect",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkItem* itemStruct, Item item)",
"line" : 143}
,
{
"name" : "onSelectListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Item)[]",
"line" : 151}
,
{
"name" : "addOnSelect",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Item) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when the item is selected.\n\t \n",
"line" : 155}
,
{
"name" : "callBackSelect",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkItem* itemStruct, Item item)",
"line" : 170}
,
{
"name" : "onToggleListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Item)[]",
"line" : 178}
,
{
"name" : "addOnToggle",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Item) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when the item is toggled.\n\t \n",
"line" : 182}
,
{
"name" : "callBackToggle",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkItem* itemStruct, Item item)",
"line" : 197}
,
{
"name" : "select",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_item_select has been deprecated since version 2.22 and should not be used in newly-written code. Use gtk_menu_item_select() instead\n Emits the \"select\" signal on the given item.\n\t \n",
"line" : 211}
,
{
"name" : "deselect",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_item_deselect has been deprecated since version 2.22 and should not be used in newly-written code. Use gtk_menu_item_deselect() instead\n Emits the \"deselect\" signal on the given item.\n\t \n",
"line" : 222}
,
{
"name" : "toggle",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_item_toggle has been deprecated since version 2.22 and should not be used in newly-written code. This function will be removed in GTK+ 3\n Emits the \"toggle\" signal on the given item.\n\t \n",
"line" : 233}
]
}
]
}
,
{
"name" : "gtk.ItemFactory",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/ItemFactory.d",
"members" : [
{
"name" : "ItemFactory",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n As of GTK+ 2.4, GtkItemFactory has been deprecated in favour of GtkUIManager.\n \n",
"line" : 80,
"base" : "ObjectGtk",
"members" : [
{
"name" : "gtkItemFactory",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkItemFactory*",
"comment" : " the main Gtk struct \n",
"line" : 84}
,
{
"name" : "getItemFactoryStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkItemFactory*()",
"line" : 87}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 94}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ItemFactory(GtkItemFactory* gtkItemFactory)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 102}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 120}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ItemFactory(GType containerType, string path, AccelGroup accelGroup)",
"comment" : "\n\t \n\n Warning\n gtk_item_factory_new has been deprecated since version 2.4 and should not be used in newly-written code. Use GtkUIManager instead.\n Creates a new GtkItemFactory.\n Beware that the returned object does not have a floating reference.\n Params:\n containerType = the kind of menu to create; can be\n GTK_TYPE_MENU_BAR, GTK_TYPE_MENU or GTK_TYPE_OPTION_MENU\n path = the factory path of the new item factory, a string of the form\n \"<name>\"\n accelGroup = a GtkAccelGroup to which the accelerators for the\n menu items will be added, or NULL to create a new one. [allow-none]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 143}
,
{
"name" : "construct",
"kind" : "function",
"protection" : "public",
"type" : "void(GType containerType, string path, AccelGroup accelGroup)",
"comment" : "\n Warning\n gtk_item_factory_construct has been deprecated since version 2.4 and should not be used in newly-written code. Use GtkUIManager instead.\n Initializes an item factory.\n Params:\n containerType = the kind of menu to create; can be\n GTK_TYPE_MENU_BAR, GTK_TYPE_MENU or GTK_TYPE_OPTION_MENU\n path = the factory path of ifactory, a string of the form\n \"<name>\"\n accelGroup = a GtkAccelGroup to which the accelerators for the\n menu items will be added, or NULL to create a new one\n\t \n",
"line" : 166}
,
{
"name" : "addForeign",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget accelWidget, string fullPath, AccelGroup accelGroup, uint keyval, GdkModifierType modifiers)",
"comment" : "\n Warning\n gtk_item_factory_add_foreign has been deprecated since version 2.4 and should not be used in newly-written code. The recommended API for this purpose are the functions\n gtk_menu_item_set_accel_path() and gtk_widget_set_accel_path(); don't\n use gtk_item_factory_add_foreign() in new code, since it is likely to\n be removed in the future.\n Installs an accelerator for accel_widget in accel_group, that causes\n the ::activate signal to be emitted if the accelerator is activated.\n This function can be used to make widgets participate in the accel\n saving\/restoring functionality provided by gtk_accel_map_save() and\n gtk_accel_map_load(), even if they haven't been created by an item\n factory.\n Params:\n accelWidget = widget to install an accelerator on\n fullPath = the full path for the accel_widget\n accelGroup = the accelerator group to install the accelerator in\n keyval = key value of the accelerator\n modifiers = modifier combination of the accelerator\n\t \n",
"line" : 191}
,
{
"name" : "fromWidget",
"kind" : "function",
"protection" : "public",
"type" : "ItemFactory(Widget widget)",
"comment" : "\n Warning\n gtk_item_factory_from_widget has been deprecated since version 2.4 and should not be used in newly-written code. Use GtkUIManager instead.\n Obtains the item factory from which a widget was created.\n Params:\n widget = a widget\n Returns: the item factory from which widget was created, or NULL. [allow-none]\n\t \n",
"line" : 205}
,
{
"name" : "pathFromWidget",
"kind" : "function",
"protection" : "public",
"type" : "string(Widget widget)",
"comment" : "\n Warning\n gtk_item_factory_path_from_widget has been deprecated since version 2.4 and should not be used in newly-written code. Use GtkUIManager instead.\n If widget has been created by an item factory, returns the full path\n to it. (The full path of a widget is the concatenation of the factory\n path specified in gtk_item_factory_new() with the path specified in the\n GtkItemFactoryEntry from which the widget was created.)\n Params:\n widget = a widget\n Returns: the full path to widget if it has been created by an item factory, NULL otherwise. This value is owned by GTK+ and must not be modified or freed.\n\t \n",
"line" : 227}
,
{
"name" : "getItem",
"kind" : "function",
"protection" : "public",
"type" : "Widget(string path)",
"comment" : "\n Warning\n gtk_item_factory_get_item has been deprecated since version 2.4 and should not be used in newly-written code. Use GtkUIManager instead.\n Obtains the menu item which corresponds to path.\n If the widget corresponding to path is a menu item which opens a\n submenu, then the item is returned. If you are interested in the submenu,\n use gtk_item_factory_get_widget() instead.\n Params:\n path = the path to the menu item\n Returns: the menu item for the given path, or NULL if path doesn't lead to a menu item. [allow-none]\n\t \n",
"line" : 244}
,
{
"name" : "getWidget",
"kind" : "function",
"protection" : "public",
"type" : "Widget(string path)",
"comment" : "\n Warning\n gtk_item_factory_get_widget has been deprecated since version 2.4 and should not be used in newly-written code. Use GtkUIManager instead.\n Obtains the widget which corresponds to path.\n If the widget corresponding to path is a menu item which opens a\n submenu, then the submenu is returned. If you are interested in the menu\n item, use gtk_item_factory_get_item() instead.\n Params:\n path = the path to the widget\n Returns: the widget for the given path, or NULL if path doesn't lead to a widget. [allow-none]\n\t \n",
"line" : 266}
,
{
"name" : "getWidgetByAction",
"kind" : "function",
"protection" : "public",
"type" : "Widget(uint action)",
"comment" : "\n Warning\n gtk_item_factory_get_widget_by_action has been deprecated since version 2.4 and should not be used in newly-written code. Use GtkUIManager instead.\n Obtains the widget which was constructed from the GtkItemFactoryEntry\n with the given action.\n If there are multiple items with the same action, the result is\n undefined.\n Params:\n action = an action as specified in the callback_action field\n of GtkItemFactoryEntry\n Returns: the widget which corresponds to the given action, or NULL if no widget was found. [allow-none]\n\t \n",
"line" : 289}
,
{
"name" : "getItemByAction",
"kind" : "function",
"protection" : "public",
"type" : "Widget(uint action)",
"comment" : "\n Warning\n gtk_item_factory_get_item_by_action has been deprecated since version 2.4 and should not be used in newly-written code. Use GtkUIManager instead.\n Obtains the menu item which was constructed from the first\n GtkItemFactoryEntry with the given action.\n Params:\n action = an action as specified in the callback_action field\n of GtkItemFactoryEntry\n Returns: the menu item which corresponds to the given action, or NULL if no menu item was found. [allow-none]\n\t \n",
"line" : 310}
,
{
"name" : "createItem",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkItemFactoryEntry* entry, void* callbackData, uint callbackType)",
"comment" : "\n Warning\n gtk_item_factory_create_item has been deprecated since version 2.4 and should not be used in newly-written code. Use GtkUIManager instead.\n Creates an item for entry.\n Params:\n entry = the GtkItemFactoryEntry to create an item for\n callbackData = data passed to the callback function of entry\n callbackType = 1 if the callback function of entry is of type\n GtkItemFactoryCallback1, 2 if it is of type GtkItemFactoryCallback2\n\t \n",
"line" : 331}
,
{
"name" : "createItems",
"kind" : "function",
"protection" : "public",
"type" : "void(uint nEntries, GtkItemFactoryEntry* entries, void* callbackData)",
"comment" : "\n Warning\n gtk_item_factory_create_items has been deprecated since version 2.4 and should not be used in newly-written code. Use GtkUIManager instead.\n Creates the menu items from the entries.\n Params:\n nEntries = the length of entries\n entries = an array of GtkItemFactoryEntrys whose callback members\n must by of type GtkItemFactoryCallback1\n callbackData = data passed to the callback functions of all entries\n\t \n",
"line" : 347}
,
{
"name" : "createItemsAc",
"kind" : "function",
"protection" : "public",
"type" : "void(uint nEntries, GtkItemFactoryEntry* entries, void* callbackData, uint callbackType)",
"comment" : "\n Warning\n gtk_item_factory_create_items_ac has been deprecated since version 2.4 and should not be used in newly-written code. Use GtkUIManager instead.\n Creates the menu items from the entries.\n Params:\n nEntries = the length of entries\n entries = an array of GtkItemFactoryEntrys\n callbackData = data passed to the callback functions of all entries\n callbackType = 1 if the callback functions in entries are of type\n GtkItemFactoryCallback1, 2 if they are of type GtkItemFactoryCallback2\n\t \n",
"line" : 364}
,
{
"name" : "deleteItem",
"kind" : "function",
"protection" : "public",
"type" : "void(string path)",
"comment" : "\n Warning\n gtk_item_factory_delete_item has been deprecated since version 2.4 and should not be used in newly-written code. Use GtkUIManager instead.\n Deletes the menu item which was created for path by the given\n item factory.\n Params:\n path = a path\n\t \n",
"line" : 378}
,
{
"name" : "deleteEntry",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkItemFactoryEntry* entry)",
"comment" : "\n Warning\n gtk_item_factory_delete_entry has been deprecated since version 2.4 and should not be used in newly-written code. Use GtkUIManager instead.\n Deletes the menu item which was created from entry by the given\n item factory.\n Params:\n entry = a GtkItemFactoryEntry\n\t \n",
"line" : 392}
,
{
"name" : "deleteEntries",
"kind" : "function",
"protection" : "public",
"type" : "void(uint nEntries, GtkItemFactoryEntry* entries)",
"comment" : "\n Warning\n gtk_item_factory_delete_entries has been deprecated since version 2.4 and should not be used in newly-written code. Use GtkUIManager instead.\n Deletes the menu items which were created from the entries by the given\n item factory.\n Params:\n nEntries = the length of entries\n entries = an array of GtkItemFactoryEntrys\n\t \n",
"line" : 407}
,
{
"name" : "popup",
"kind" : "function",
"protection" : "public",
"type" : "void(uint x, uint y, uint mouseButton, uint time)",
"comment" : "\n Warning\n gtk_item_factory_popup has been deprecated since version 2.4 and should not be used in newly-written code. Use GtkUIManager instead.\n Pops up the menu constructed from the item factory at (x, y).\n The mouse_button parameter should be the mouse button pressed to initiate\n the menu popup. If the menu popup was initiated by something other than\n a mouse button press, such as a mouse button release or a keypress,\n mouse_button should be 0.\n The time_ parameter should be the time stamp of the event that\n initiated the popup. If such an event is not available, use\n gtk_get_current_event_time() instead.\n The operation of the mouse_button and the time_ parameter is the same\n as the button and activation_time parameters for gtk_menu_popup().\n Params:\n x = the x position\n y = the y position\n mouseButton = the mouse button which was pressed to initiate the popup\n time = the time at which the activation event occurred\n\t \n",
"line" : 432}
,
{
"name" : "popupWithData",
"kind" : "function",
"protection" : "public",
"type" : "void(void* popupData, extern (C) void function(void* cbData) destroy, uint x, uint y, uint mouseButton, uint time)",
"comment" : "\n Warning\n gtk_item_factory_popup_with_data has been deprecated since version 2.4 and should not be used in newly-written code. Use GtkUIManager instead.\n Pops up the menu constructed from the item factory at (x, y). Callbacks\n can access the popup_data while the menu is posted via\n gtk_item_factory_popup_data() and gtk_item_factory_popup_data_from_widget().\n The mouse_button parameter should be the mouse button pressed to initiate\n the menu popup. If the menu popup was initiated by something other than\n a mouse button press, such as a mouse button release or a keypress,\n mouse_button should be 0.\n The time_ parameter should be the time stamp of the event that\n initiated the popup. If such an event is not available, use\n gtk_get_current_event_time() instead.\n The operation of the mouse_button and the time_ parameters is the same\n as the button and activation_time parameters for gtk_menu_popup().\n Params:\n popupData = data available for callbacks while the menu is posted\n destroy = a GDestroyNotify function to be called on popup_data when\n the menu is unposted\n x = the x position\n y = the y position\n mouseButton = the mouse button which was pressed to initiate the popup\n time = the time at which the activation event occurred\n\t \n",
"line" : 462}
,
{
"name" : "popupData",
"kind" : "function",
"protection" : "public",
"type" : "void*()",
"comment" : "\n Warning\n gtk_item_factory_popup_data has been deprecated since version 2.4 and should not be used in newly-written code. Use GtkUIManager instead.\n Obtains the popup_data which was passed to\n gtk_item_factory_popup_with_data(). This data is available until the menu\n is popped down again.\n Returns: popup_data associated with ifactory\n\t \n",
"line" : 476}
,
{
"name" : "popupDataFromWidget",
"kind" : "function",
"protection" : "public",
"type" : "void*(Widget widget)",
"comment" : "\n Warning\n gtk_item_factory_popup_data_from_widget has been deprecated since version 2.4 and should not be used in newly-written code. Use GtkUIManager instead.\n Obtains the popup_data which was passed to\n gtk_item_factory_popup_with_data(). This data is available until the menu\n is popped down again.\n Params:\n widget = a widget\n Returns: popup_data associated with the item factory from which widget was created, or NULL if widget wasn't created by an item factory\n\t \n",
"line" : 492}
,
{
"name" : "fromPath",
"kind" : "function",
"protection" : "public",
"type" : "ItemFactory(string path)",
"comment" : "\n Warning\n gtk_item_factory_from_path has been deprecated since version 2.4 and should not be used in newly-written code. Use GtkUIManager instead.\n Finds an item factory which has been constructed using the\n \"<name>\" prefix of path as the path argument\n for gtk_item_factory_new().\n Params:\n path = a string starting with a factory path of the form\n \"<name>\"\n Returns: the GtkItemFactory created for the given factory path, or NULL. [allow-none]\n\t \n",
"line" : 509}
,
{
"name" : "itemFactoriesPathDelete",
"kind" : "function",
"protection" : "public",
"type" : "void(string ifactoryPath, string path)",
"comment" : "\n Warning\n gtk_item_factories_path_delete has been deprecated since version 2.4 and should not be used in newly-written code. Use GtkUIManager instead.\n Deletes all widgets constructed from the specified path.\n Params:\n ifactoryPath = a factory path to prepend to path. May be NULL if path\n starts with a factory path\n path = a path\n\t \n",
"line" : 529}
,
{
"name" : "setTranslateFunc",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) char* function(char*, void*) func, void* data, extern (C) void function(void* cbData) notify)",
"comment" : "\n Warning\n gtk_item_factory_set_translate_func has been deprecated since version 2.4 and should not be used in newly-written code. Use GtkUIManager instead.\n Sets a function to be used for translating the path elements before they\n are displayed.\n Params:\n func = the GtkTranslateFunc function to be used to translate path elements\n data = data to pass to func and notify\n notify = a GDestroyNotify function to be called when ifactory is\n destroyed and when the translation function is changed again\n\t \n",
"line" : 546}
]
}
]
}
,
{
"name" : "gtk.Label",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Label.d",
"members" : [
{
"name" : "Label",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkLabel widget displays a small amount of text. As the name\n implies, most labels are used to label another widget such as a\n GtkButton, a GtkMenuItem, or a GtkOptionMenu.\n GtkLabel as GtkBuildable\n The GtkLabel implementation of the GtkBuildable interface supports a\n custom <attributes> element, which supports any number of <attribute>\n elements. the <attribute> element has attributes named name, value,\n start and end and allows you to specify PangoAttribute values for this label.\n $(DDOC_COMMENT example)\n The start and end attributes specify the range of characters to which the\n Pango attribute applies. If start and end are not specified, the attribute is\n applied to the whole text. Note that specifying ranges does not make much\n sense with translatable attributes. Use markup embedded in the translatable\n content instead.\n <hr>\n Mnemonics\n Labels may contain mnemonics. Mnemonics are\n underlined characters in the label, used for keyboard navigation.\n Mnemonics are created by providing a string with an underscore before\n the mnemonic character, such as \"_File\", to the\n functions gtk_label_new_with_mnemonic() or\n gtk_label_set_text_with_mnemonic().\n Mnemonics automatically activate any activatable widget the label is\n inside, such as a GtkButton; if the label is not inside the\n mnemonic's target widget, you have to tell the label about the target\n using gtk_label_set_mnemonic_widget(). Here's a simple example where\n the label is inside a button:\n $(DDOC_COMMENT example)\n There's a convenience function to create buttons with a mnemonic label\n already inside:\n $(DDOC_COMMENT example)\n To create a mnemonic for a widget alongside the label, such as a\n GtkEntry, you have to point the label at the entry with\n gtk_label_set_mnemonic_widget():\n $(DDOC_COMMENT example)\n <hr>\n Markup (styled text)\n To make it easy to format text in a label (changing colors, fonts,\n etc.), label text can be provided in a simple markup format.\n Here's how to create a label with a small font:\n $(DDOC_COMMENT example)\n (See complete documentation of available\n tags in the Pango manual.)\n The markup passed to gtk_label_set_markup() must be valid; for example,\n literal <\/>\/ characters must be escaped as lt;,\n gt;, and amp;. If you pass text obtained from the user, file,\n or a network to gtk_label_set_markup(), you'll want to escape it with\n g_markup_escape_text() or g_markup_printf_escaped().\n Markup strings are just a convenient way to set the PangoAttrList on\n a label; gtk_label_set_attributes() may be a simpler way to set\n attributes in some cases. Be careful though; PangoAttrList tends to\n cause internationalization problems, unless you're applying attributes\n to the entire string (i.e. unless you set the range of each attribute\n to [0, G_MAXINT)). The reason is that specifying the start_index and\n end_index for a PangoAttribute requires knowledge of the exact string\n being displayed, so translations will cause problems.\n <hr>\n Selectable labels\n Labels can be made selectable with gtk_label_set_selectable().\n Selectable labels allow the user to copy the label contents to\n the clipboard. Only labels that contain useful-to-copy information\n — such as error messages — should be made selectable.\n <hr>\n Text layout\n A label can contain any number of paragraphs, but will have\n performance problems if it contains more than a small number.\n Paragraphs are separated by newlines or other paragraph separators\n understood by Pango.\n Labels can automatically wrap text if you call\n gtk_label_set_line_wrap().\n gtk_label_set_justify() sets how the lines in a label align\n with one another. If you want to set how the label as a whole\n aligns in its available space, see gtk_misc_set_alignment().\n <hr>\n Links\n Since 2.18, GTK+ supports markup for clickable hyperlinks in addition\n to regular Pango markup. The markup for links is borrowed from HTML, using the\n a with href and title attributes. GTK+ renders links similar to the\n way they appear in web browsers, with colored, underlined text. The title\n attribute is displayed as a tooltip on the link. An example looks like this:\n $(DDOC_COMMENT example)\n It is possible to implement custom handling for links and their tooltips with\n the \"activate-link\" signal and the gtk_label_get_current_uri() function.\n \n",
"line" : 167,
"base" : "Misc",
"members" : [
{
"name" : "gtkLabel",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkLabel*",
"comment" : " the main Gtk struct \n",
"line" : 171}
,
{
"name" : "getLabelStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkLabel*()",
"line" : 174}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 181}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Label(GtkLabel* gtkLabel)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 189}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 207}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Label(string str, bool mnemonic = true)",
"comment" : "\n Creates a new GtkLabel, containing the text in str.\n If characters in str are preceded by an underscore, they are\n underlined. If you need a literal underscore character in a label, use\n '__' (two underscores). The first underlined character represents a\n keyboard accelerator called a mnemonic. The mnemonic key can be used\n to activate another widget, chosen automatically, or explicitly using\n gtk_label_set_mnemonic_widget().\n If gtk_label_set_mnemonic_widget()\n is not called, then the first activatable ancestor of the GtkLabel\n will be chosen as the mnemonic widget. For instance, if the\n label is inside a button or menu item, the button or menu item will\n automatically become the mnemonic widget and be activated by\n the mnemonic.\n Params:\n  str = The text of the label, with an underscore in front of the\n  mnemonic character\n  mnemonic = when false uses the literal text passed in without mnemonic\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 233}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 258}
,
{
"name" : "onActivateCurrentLinkListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Label)[]",
"line" : 260}
,
{
"name" : "addOnActivateCurrentLink",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Label) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n A keybinding signal\n which gets emitted when the user activates a link in the label.\n Applications may also emit the signal with g_signal_emit_by_name()\n if they need to control activation of URIs programmatically.\n The default bindings for this signal are all forms of the Enter key.\n Since 2.18\n\t \n",
"line" : 269}
,
{
"name" : "callBackActivateCurrentLink",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkLabel* labelStruct, Label label)",
"line" : 284}
,
{
"name" : "onActivateLinkListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(string, Label)[]",
"line" : 292}
,
{
"name" : "addOnActivateLink",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(string, Label) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The signal which gets emitted to activate a URI.\n Applications may connect to it to override the default behaviour,\n which is to call gtk_show_uri().\n TRUE if the link has been activated\n Since 2.18\n\t \n",
"line" : 300}
,
{
"name" : "callBackActivateLink",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkLabel* labelStruct, char* uri, Label label)",
"line" : 315}
,
{
"name" : "onCopyClipboardListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Label)[]",
"line" : 328}
,
{
"name" : "addOnCopyClipboard",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Label) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::copy-clipboard signal is a\n keybinding signal\n which gets emitted to copy the selection to the clipboard.\n The default binding for this signal is Ctrl-c.\n\t \n",
"line" : 335}
,
{
"name" : "callBackCopyClipboard",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkLabel* labelStruct, Label label)",
"line" : 350}
,
{
"name" : "onMoveCursorListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkMovementStep, int, int, Label)[]",
"line" : 358}
,
{
"name" : "addOnMoveCursor",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkMovementStep, int, int, Label) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::move-cursor signal is a\n keybinding signal\n which gets emitted when the user initiates a cursor movement.\n If the cursor is not visible in entry, this signal causes\n the viewport to be moved instead.\n Applications should not connect to it, but may emit it with\n g_signal_emit_by_name() if they need to control the cursor\n programmatically.\n The default bindings for this signal come in two variants,\n the variant with the Shift modifier extends the selection,\n the variant without the Shift modifer does not.\n There are too many key combinations to list them all here.\n Arrow keys move by individual characters\/lines\n Ctrl-arrow key combinations move by words\/paragraphs\n Home\/End keys move to the ends of the buffer\n TRUE if the move should extend the selection\n\t \n",
"line" : 377}
,
{
"name" : "callBackMoveCursor",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkLabel* entryStruct, GtkMovementStep step, int count, int extendSelection, Label label)",
"line" : 392}
,
{
"name" : "onPopulatePopupListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkMenu*, Label)[]",
"line" : 400}
,
{
"name" : "addOnPopulatePopup",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkMenu*, Label) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::populate-popup signal gets emitted before showing the\n context menu of the label. Note that only selectable labels\n have context menus.\n If you need to add items to the context menu, connect\n to this signal and append your menuitems to the menu.\n\t \n",
"line" : 408}
,
{
"name" : "callBackPopulatePopup",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkLabel* labelStruct, GtkMenu* menu, Label label)",
"line" : 423}
,
{
"name" : "setText",
"kind" : "function",
"protection" : "public",
"type" : "void(string str)",
"comment" : "\n Sets the text within the GtkLabel widget. It overwrites any text that\n was there before.\n This will also clear any previously set mnemonic accelerators.\n Params:\n str = The text you want to set\n\t \n",
"line" : 439}
,
{
"name" : "setAttributes",
"kind" : "function",
"protection" : "public",
"type" : "void(PgAttributeList attrs)",
"comment" : "\n Sets a PangoAttrList; the attributes in the list are applied to the\n label text.\n Note\n The attributes set with this function will be applied\n and merged with any other attributes previously effected by way\n of the \"use-underline\" or \"use-markup\" properties.\n While it is not recommended to mix markup strings with manually set\n attributes, if you must; know that the attributes will be applied\n to the label after the markup string is parsed.\n Params:\n attrs = a PangoAttrList\n\t \n",
"line" : 458}
,
{
"name" : "setMarkup",
"kind" : "function",
"protection" : "public",
"type" : "void(string str)",
"comment" : "\n Parses str which is marked up with the Pango text markup language, setting the\n label's text and attribute list based on the parse results. If the str is\n external data, you may need to escape it with g_markup_escape_text() or\n Params:\n str = a markup string (see Pango markup format)\n\t \n",
"line" : 471}
,
{
"name" : "setMarkupWithMnemonic",
"kind" : "function",
"protection" : "public",
"type" : "void(string str)",
"comment" : "\n Parses str which is marked up with the Pango text markup language,\n setting the label's text and attribute list based on the parse results.\n If characters in str are preceded by an underscore, they are underlined\n indicating that they represent a keyboard accelerator called a mnemonic.\n The mnemonic key can be used to activate another widget, chosen\n automatically, or explicitly using gtk_label_set_mnemonic_widget().\n Params:\n str = a markup string (see Pango markup format)\n\t \n",
"line" : 487}
,
{
"name" : "setPattern",
"kind" : "function",
"protection" : "public",
"type" : "void(string pattern)",
"comment" : "\n The pattern of underlines you want under the existing text within the\n GtkLabel widget. For example if the current text of the label says\n \"FooBarBaz\" passing a pattern of \"___ ___\" will underline\n \"Foo\" and \"Baz\" but not \"Bar\".\n Params:\n pattern = The pattern as described above.\n\t \n",
"line" : 501}
,
{
"name" : "setJustify",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkJustification jtype)",
"comment" : "\n Sets the alignment of the lines in the text of the label relative to\n each other. GTK_JUSTIFY_LEFT is the default value when the\n widget is first created with gtk_label_new(). If you instead want\n to set the alignment of the label as a whole, use\n gtk_misc_set_alignment() instead. gtk_label_set_justify() has no\n effect on labels containing only a single line.\n Params:\n jtype = a GtkJustification\n\t \n",
"line" : 517}
,
{
"name" : "setEllipsize",
"kind" : "function",
"protection" : "public",
"type" : "void(PangoEllipsizeMode mode)",
"comment" : "\n Sets the mode used to ellipsize (add an ellipsis: \"...\") to the text\n if there is not enough space to render the entire string.\n Since 2.6\n Params:\n mode = a PangoEllipsizeMode\n\t \n",
"line" : 530}
,
{
"name" : "setWidthChars",
"kind" : "function",
"protection" : "public",
"type" : "void(int nChars)",
"comment" : "\n Sets the desired width in characters of label to n_chars.\n Since 2.6\n Params:\n nChars = the new desired width, in characters.\n\t \n",
"line" : 542}
,
{
"name" : "setMaxWidthChars",
"kind" : "function",
"protection" : "public",
"type" : "void(int nChars)",
"comment" : "\n Sets the desired maximum width in characters of label to n_chars.\n Since 2.6\n Params:\n nChars = the new desired maximum width, in characters.\n\t \n",
"line" : 554}
,
{
"name" : "get",
"kind" : "function",
"protection" : "public",
"type" : "void(out string str)",
"comment" : "\n Warning\n gtk_label_get is deprecated and should not be used in newly-written code. Use gtk_label_get_text() instead.\n Gets the current string of text within the GtkLabel and writes it to\n the given str argument. It does not make a copy of this string so you\n must not write to it.\n Params:\n str = The reference to the pointer you want to point to the text.\n\t \n",
"line" : 569}
,
{
"name" : "parseUline",
"kind" : "function",
"protection" : "public",
"type" : "uint(string string)",
"comment" : "\n Warning\n gtk_label_parse_uline is deprecated and should not be used in newly-written code. Use gtk_label_set_use_underline() instead.\n Parses the given string for underscores and converts the next\n character to an underlined character. The last character that\n was underlined will have its lower-cased accelerator keyval returned (i.e.\n \"_File\" would return the keyval for \"f\". This is\n probably only used within the GTK+ library itself for menu items and such.\n Params:\n string = The string you want to parse for underlines.\n Returns: The lowercase keyval of the last character underlined.\n\t \n",
"line" : 591}
,
{
"name" : "setLineWrap",
"kind" : "function",
"protection" : "public",
"type" : "void(int wrap)",
"comment" : "\n Toggles line wrapping within the GtkLabel widget. TRUE makes it break\n lines if text exceeds the widget's size. FALSE lets the text get cut off\n by the edge of the widget if it exceeds the widget size.\n Note that setting line wrapping to TRUE does not make the label\n wrap at its parent container's width, because GTK+ widgets\n conceptually can't make their requisition depend on the parent\n container's size. For a label that wraps at a specific position,\n set the label's width using gtk_widget_set_size_request().\n Params:\n wrap = the setting\n\t \n",
"line" : 609}
,
{
"name" : "setLineWrapMode",
"kind" : "function",
"protection" : "public",
"type" : "void(PangoWrapMode wrapMode)",
"comment" : "\n If line wrapping is on (see gtk_label_set_line_wrap()) this controls how\n the line wrapping is done. The default is PANGO_WRAP_WORD which means\n wrap on word boundaries.\n Since 2.10\n Params:\n wrapMode = the line wrapping mode\n\t \n",
"line" : 623}
,
{
"name" : "getLayoutOffsets",
"kind" : "function",
"protection" : "public",
"type" : "void(out int x, out int y)",
"comment" : "\n Obtains the coordinates where the label will draw the PangoLayout\n representing the text in the label; useful to convert mouse events\n into coordinates inside the PangoLayout, e.g. to take some action\n if some part of the label is clicked. Of course you will need to\n create a GtkEventBox to receive the events, and pack the label\n inside it, since labels are a GTK_NO_WINDOW widget. Remember\n when using the PangoLayout functions you need to convert to\n and from pixels using PANGO_PIXELS() or PANGO_SCALE.\n Params:\n x = location to store X offset of layout, or NULL. [out][allow-none]\n y = location to store Y offset of layout, or NULL. [out][allow-none]\n\t \n",
"line" : 642}
,
{
"name" : "getMnemonicKeyval",
"kind" : "function",
"protection" : "public",
"type" : "uint()",
"comment" : "\n If the label has been set so that it has an mnemonic key this function\n returns the keyval used for the mnemonic accelerator. If there is no\n mnemonic set up it returns GDK_VoidSymbol.\n Returns: GDK keyval usable for accelerators, or GDK_VoidSymbol\n\t \n",
"line" : 654}
,
{
"name" : "getSelectable",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value set by gtk_label_set_selectable().\n Returns: TRUE if the user can copy text from the label\n\t \n",
"line" : 664}
,
{
"name" : "getText",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Fetches the text from a label widget, as displayed on the\n screen. This does not include any embedded underlines\n indicating mnemonics or Pango markup. (See gtk_label_get_label())\n Returns: the text in the label widget. This is the internal string used by the label, and must not be modified.\n\t \n",
"line" : 676}
,
{
"name" : "selectRegion",
"kind" : "function",
"protection" : "public",
"type" : "void(int startOffset, int endOffset)",
"comment" : "\n Selects a range of characters in the label, if the label is selectable.\n See gtk_label_set_selectable(). If the label is not selectable,\n this function has no effect. If start_offset or\n end_offset are -1, then the end of the label will be substituted.\n Params:\n startOffset = start offset (in characters not bytes)\n endOffset = end offset (in characters not bytes)\n\t \n",
"line" : 691}
,
{
"name" : "setMnemonicWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget)",
"comment" : "\n If the label has been set so that it has an mnemonic key (using\n i.e. gtk_label_set_markup_with_mnemonic(),\n gtk_label_set_text_with_mnemonic(), gtk_label_new_with_mnemonic()\n or the \"use_underline\" property) the label can be associated with a\n widget that is the target of the mnemonic. When the label is inside\n a widget (like a GtkButton or a GtkNotebook tab) it is\n automatically associated with the correct widget, but sometimes\n (i.e. when the target is a GtkEntry next to the label) you need to\n set it explicitly using this function.\n The target widget will be accelerated by emitting the\n GtkWidget::mnemonic-activate signal on it. The default handler for\n this signal will activate the widget if there are no mnemonic collisions\n and toggle focus between the colliding widgets otherwise.\n Params:\n widget = the target GtkWidget. [allow-none]\n\t \n",
"line" : 714}
,
{
"name" : "setSelectable",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n Selectable labels allow the user to select text from the label, for\n copy-and-paste.\n Params:\n setting = TRUE to allow selecting text in the label\n\t \n",
"line" : 726}
,
{
"name" : "setTextWithMnemonic",
"kind" : "function",
"protection" : "public",
"type" : "void(string str)",
"comment" : "\n Sets the label's text from the string str.\n If characters in str are preceded by an underscore, they are underlined\n indicating that they represent a keyboard accelerator called a mnemonic.\n The mnemonic key can be used to activate another widget, chosen\n automatically, or explicitly using gtk_label_set_mnemonic_widget().\n Params:\n str = a string\n\t \n",
"line" : 741}
,
{
"name" : "getAttributes",
"kind" : "function",
"protection" : "public",
"type" : "PgAttributeList()",
"comment" : "\n Gets the attribute list that was set on the label using\n gtk_label_set_attributes(), if any. This function does\n not reflect attributes that come from the labels markup\n (see gtk_label_set_markup()). If you want to get the\n effective attributes for the label, use\n pango_layout_get_attribute (gtk_label_get_layout (label)).\n Returns: the attribute list, or NULL if none was set. [transfer none]\n\t \n",
"line" : 756}
,
{
"name" : "getJustify",
"kind" : "function",
"protection" : "public",
"type" : "GtkJustification()",
"comment" : "\n Returns the justification of the label. See gtk_label_set_justify().\n Returns: GtkJustification\n\t \n",
"line" : 771}
,
{
"name" : "getEllipsize",
"kind" : "function",
"protection" : "public",
"type" : "PangoEllipsizeMode()",
"comment" : "\n Returns the ellipsizing position of the label. See gtk_label_set_ellipsize().\n Since 2.6\n Returns: PangoEllipsizeMode\n\t \n",
"line" : 782}
,
{
"name" : "getWidthChars",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Retrieves the desired width of label, in characters. See\n gtk_label_set_width_chars().\n Since 2.6\n Returns: the width of the label in characters.\n\t \n",
"line" : 794}
,
{
"name" : "getMaxWidthChars",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Retrieves the desired maximum width of label, in characters. See\n gtk_label_set_width_chars().\n Since 2.6\n Returns: the maximum width of the label in characters.\n\t \n",
"line" : 806}
,
{
"name" : "getLabel",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Fetches the text from a label widget including any embedded\n underlines indicating mnemonics and Pango markup. (See\n gtk_label_get_text()).\n Returns: the text of the label widget. This string is owned by the widget and must not be modified or freed.\n\t \n",
"line" : 818}
,
{
"name" : "getLayout",
"kind" : "function",
"protection" : "public",
"type" : "PgLayout()",
"comment" : "\n Gets the PangoLayout used to display the label.\n The layout is useful to e.g. convert text positions to\n pixel positions, in combination with gtk_label_get_layout_offsets().\n The returned layout is owned by the label so need not be\n freed by the caller.\n Returns: the PangoLayout for this label. [transfer none]\n\t \n",
"line" : 832}
,
{
"name" : "getLineWrap",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether lines in the label are automatically wrapped.\n See gtk_label_set_line_wrap().\n Returns: TRUE if the lines of the label are automatically wrapped.\n\t \n",
"line" : 848}
,
{
"name" : "getLineWrapMode",
"kind" : "function",
"protection" : "public",
"type" : "PangoWrapMode()",
"comment" : "\n Returns line wrap mode used by the label. See gtk_label_set_line_wrap_mode().\n Since 2.10\n Returns: TRUE if the lines of the label are automatically wrapped.\n\t \n",
"line" : 859}
,
{
"name" : "getMnemonicWidget",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Retrieves the target of the mnemonic (keyboard shortcut) of this\n label. See gtk_label_set_mnemonic_widget().\n Returns: the target of the label's mnemonic, or NULL if none has been set and the default algorithm will be used. [transfer none]\n\t \n",
"line" : 870}
,
{
"name" : "getSelectionBounds",
"kind" : "function",
"protection" : "public",
"type" : "int(out int start, out int end)",
"comment" : "\n Gets the selected range of characters in the label, returning TRUE\n if there's a selection.\n Params:\n start = return location for start of selection, as a character offset. [out]\n end = return location for end of selection, as a character offset. [out]\n Returns: TRUE if selection is non-empty\n\t \n",
"line" : 889}
,
{
"name" : "getUseMarkup",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the label's text is interpreted as marked up with\n the Pango text markup\n language. See gtk_label_set_use_markup().\n Returns: TRUE if the label's text will be parsed for markup.\n\t \n",
"line" : 901}
,
{
"name" : "getUseUnderline",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether an embedded underline in the label indicates a\n mnemonic. See gtk_label_set_use_underline().\n Returns: TRUE whether an embedded underline in the label indicates the mnemonic accelerator keys.\n\t \n",
"line" : 912}
,
{
"name" : "getSingleLineMode",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the label is in single line mode.\n Since 2.6\n Returns: TRUE when the label is in single line mode.\n\t \n",
"line" : 923}
,
{
"name" : "getAngle",
"kind" : "function",
"protection" : "public",
"type" : "double()",
"comment" : "\n Gets the angle of rotation for the label. See\n gtk_label_set_angle().\n Since 2.6\n Returns: the angle of rotation for the label\n\t \n",
"line" : 935}
,
{
"name" : "setLabel",
"kind" : "function",
"protection" : "public",
"type" : "void(string str)",
"comment" : "\n Sets the text of the label. The label is interpreted as\n including embedded underlines and\/or Pango markup depending\n on the values of the \"use-underline\"\" and\n \"use-markup\" properties.\n Params:\n str = the new text to set for the label\n\t \n",
"line" : 949}
,
{
"name" : "setUseMarkup",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n Sets whether the text of the label contains markup in Pango's text markup\n language. See gtk_label_set_markup().\n Params:\n setting = TRUE if the label's text should be parsed for markup.\n\t \n",
"line" : 961}
,
{
"name" : "setUseUnderline",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n If true, an underline in the text indicates the next character should be\n used for the mnemonic accelerator key.\n Params:\n setting = TRUE if underlines in the text indicate mnemonics\n\t \n",
"line" : 973}
,
{
"name" : "setSingleLineMode",
"kind" : "function",
"protection" : "public",
"type" : "void(int singleLineMode)",
"comment" : "\n Sets whether the label is in single line mode.\n Since 2.6\n Params:\n singleLineMode = TRUE if the label should be in single line mode\n\t \n",
"line" : 985}
,
{
"name" : "setAngle",
"kind" : "function",
"protection" : "public",
"type" : "void(double angle)",
"comment" : "\n Sets the angle of rotation for the label. An angle of 90 reads from\n from bottom to top, an angle of 270, from top to bottom. The angle\n setting for the label is ignored if the label is selectable,\n wrapped, or ellipsized.\n Since 2.6\n Params:\n angle = the angle that the baseline of the label makes with\n the horizontal, in degrees, measured counterclockwise\n\t \n",
"line" : 1001}
,
{
"name" : "getCurrentUri",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns the URI for the currently active link in the label.\n The active link is the one under the mouse pointer or, in a\n selectable label, the link in which the text cursor is currently\n positioned.\n This function is intended for use in a \"activate-link\" handler\n or for use in a \"query-tooltip\" handler.\n Since 2.18\n Returns: the currently active URI. The string is owned by GTK+ and must not be freed or modified.\n\t \n",
"line" : 1017}
,
{
"name" : "setTrackVisitedLinks",
"kind" : "function",
"protection" : "public",
"type" : "void(int trackLinks)",
"comment" : "\n Sets whether the label should keep track of clicked\n links (and use a different color for them).\n Since 2.18\n Params:\n trackLinks = TRUE to track visited links\n\t \n",
"line" : 1030}
,
{
"name" : "getTrackVisitedLinks",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the label is currently keeping track\n of clicked links.\n Since 2.18\n Returns: TRUE if clicked links are remembered\n\t \n",
"line" : 1042}
]
}
]
}
,
{
"name" : "gtk.Layout",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Layout.d",
"members" : [
{
"name" : "Layout",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkLayout is similar to GtkDrawingArea in that it's a \"blank slate\"\n and doesn't do anything but paint a blank background by default. It's\n different in that it supports scrolling natively (you can add it to a\n GtkScrolledWindow), and it can contain child widgets, since it's a\n GtkContainer. However if you're just going to draw, a GtkDrawingArea\n is a better choice since it has lower overhead.\n When handling expose events on a GtkLayout, you must draw to\n GTK_LAYOUT (layout)->bin_window, rather than to\n GTK_WIDGET (layout)->window, as you would for a drawing\n area.\n \n",
"line" : 90,
"base" : "Container",
"members" : [
{
"name" : "gtkLayout",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkLayout*",
"comment" : " the main Gtk struct \n",
"line" : 94}
,
{
"name" : "getLayoutStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkLayout*()",
"line" : 97}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 104}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Layout(GtkLayout* gtkLayout)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 112}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 130}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 138}
,
{
"name" : "onSetScrollAdjustmentsListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Adjustment, Adjustment, Layout)[]",
"line" : 140}
,
{
"name" : "addOnSetScrollAdjustments",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Adjustment, Adjustment, Layout) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Set the scroll adjustments for the layout. Usually scrolled containers\n like GtkScrolledWindow will emit this signal to connect two instances\n of GtkScrollbar to the scroll directions of the GtkLayout.\n See Also\n GtkDrawingArea, GtkScrolledWindow\n\t \n",
"line" : 148}
,
{
"name" : "callBackSetScrollAdjustments",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkLayout* horizontalStruct, GtkAdjustment* vertical, GtkAdjustment* arg2, Layout layout)",
"line" : 163}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Layout(Adjustment hadjustment, Adjustment vadjustment)",
"comment" : "\n Creates a new GtkLayout. Unless you have a specific adjustment\n you'd like the layout to use for scrolling, pass NULL for\n hadjustment and vadjustment.\n Params:\n hadjustment = horizontal scroll adjustment, or NULL. [allow-none]\n vadjustment = vertical scroll adjustment, or NULL. [allow-none]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 181}
,
{
"name" : "put",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget childWidget, int x, int y)",
"comment" : "\n Adds child_widget to layout, at position (x,y).\n layout becomes the new parent container of child_widget.\n Params:\n childWidget = child widget\n x = X position of child widget\n y = Y position of child widget\n\t \n",
"line" : 200}
,
{
"name" : "move",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget childWidget, int x, int y)",
"comment" : "\n Moves a current child of layout to a new position.\n Params:\n childWidget = a current child of layout\n x = X position to move to\n y = Y position to move to\n\t \n",
"line" : 213}
,
{
"name" : "setSize",
"kind" : "function",
"protection" : "public",
"type" : "void(uint width, uint height)",
"comment" : "\n Sets the size of the scrollable area of the layout.\n Params:\n width = width of entire scrollable area\n height = height of entire scrollable area\n\t \n",
"line" : 225}
,
{
"name" : "getSize",
"kind" : "function",
"protection" : "public",
"type" : "void(out uint width, out uint height)",
"comment" : "\n Gets the size that has been set on the layout, and that determines\n the total extents of the layout's scrollbar area. See\n gtk_layout_set_size().\n Params:\n width = location to store the width set on\n layout, or NULL. [out][allow-none]\n height = location to store the height set on\n layout, or NULL. [out][allow-none]\n\t \n",
"line" : 241}
,
{
"name" : "freeze",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_layout_freeze is deprecated and should not be used in newly-written code.\n This is a deprecated function, it doesn't do anything useful.\n\t \n",
"line" : 252}
,
{
"name" : "thaw",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_layout_thaw is deprecated and should not be used in newly-written code.\n This is a deprecated function, it doesn't do anything useful.\n\t \n",
"line" : 263}
,
{
"name" : "getHadjustment",
"kind" : "function",
"protection" : "public",
"type" : "Adjustment()",
"comment" : "\n This function should only be called after the layout has been\n placed in a GtkScrolledWindow or otherwise configured for\n scrolling. It returns the GtkAdjustment used for communication\n between the horizontal scrollbar and layout.\n See GtkScrolledWindow, GtkScrollbar, GtkAdjustment for details.\n Returns: horizontal scroll adjustment. [transfer none]\n\t \n",
"line" : 277}
,
{
"name" : "getVadjustment",
"kind" : "function",
"protection" : "public",
"type" : "Adjustment()",
"comment" : "\n This function should only be called after the layout has been\n placed in a GtkScrolledWindow or otherwise configured for\n scrolling. It returns the GtkAdjustment used for communication\n between the vertical scrollbar and layout.\n See GtkScrolledWindow, GtkScrollbar, GtkAdjustment for details.\n Returns: vertical scroll adjustment. [transfer none]\n\t \n",
"line" : 296}
,
{
"name" : "setHadjustment",
"kind" : "function",
"protection" : "public",
"type" : "void(Adjustment adjustment)",
"comment" : "\n Sets the horizontal scroll adjustment for the layout.\n See GtkScrolledWindow, GtkScrollbar, GtkAdjustment for details.\n Params:\n adjustment = new scroll adjustment. [allow-none]\n\t \n",
"line" : 313}
,
{
"name" : "setVadjustment",
"kind" : "function",
"protection" : "public",
"type" : "void(Adjustment adjustment)",
"comment" : "\n Sets the vertical scroll adjustment for the layout.\n See GtkScrolledWindow, GtkScrollbar, GtkAdjustment for details.\n Params:\n adjustment = new scroll adjustment. [allow-none]\n\t \n",
"line" : 325}
,
{
"name" : "getBinWindow",
"kind" : "function",
"protection" : "public",
"type" : "Window()",
"comment" : "\n Retrieve the bin window of the layout used for drawing operations.\n Since 2.14\n Returns: a GdkWindow. [transfer none]\n\t \n",
"line" : 336}
]
}
]
}
,
{
"name" : "gtk.LinkButton",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/LinkButton.d",
"members" : [
{
"name" : "LinkButton",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkLinkButton is a GtkButton with a hyperlink, similar to the one\n used by web browsers, which triggers an action when clicked. It is useful\n to show quick links to resources.\n A link button is created by calling either gtk_link_button_new() or\n gtk_link_button_new_with_label(). If using the former, the URI you pass\n to the constructor is used as a label for the widget.\n The URI bound to a GtkLinkButton can be set specifically using\n gtk_link_button_set_uri(), and retrieved using gtk_link_button_get_uri().\n GtkLinkButton offers a global hook, which is called when the used clicks\n on it: see gtk_link_button_set_uri_hook().\n GtkLinkButton was added in GTK+ 2.10.\n \n",
"line" : 85,
"base" : "Button",
"members" : [
{
"name" : "gtkLinkButton",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkLinkButton*",
"comment" : " the main Gtk struct \n",
"line" : 89}
,
{
"name" : "getLinkButtonStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkLinkButton*()",
"line" : 92}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 99}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "LinkButton(GtkLinkButton* gtkLinkButton)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 107}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 125}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "LinkButton(string uri)",
"comment" : "\n\t \n\n Creates a new GtkLinkButton with the URI as its text.\n Since 2.10\n Params:\n uri = a valid URI\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 141}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "LinkButton(string uri, string label)",
"comment" : "\n Creates a new GtkLinkButton containing a label.\n Since 2.10\n Params:\n uri = a valid URI\n label = the text of the button. [allow-none]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 160}
,
{
"name" : "getUri",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Retrieves the URI set using gtk_link_button_set_uri().\n Since 2.10\n Returns: a valid URI. The returned string is owned by the link button and should not be modified or freed.\n\t \n",
"line" : 176}
,
{
"name" : "setUri",
"kind" : "function",
"protection" : "public",
"type" : "void(string uri)",
"comment" : "\n Sets uri as the URI where the GtkLinkButton points. As a side-effect\n this unsets the 'visited' state of the button.\n Since 2.10\n Params:\n uri = a valid URI\n\t \n",
"line" : 189}
,
{
"name" : "setUriHook",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void function(GtkLinkButton*, char*, void*)(extern (C) void function(GtkLinkButton*, char*, void*) func, void* data, extern (C) void function(void* cbData) destroy)",
"comment" : "\n Warning\n gtk_link_button_set_uri_hook has been deprecated since version 2.24 and should not be used in newly-written code. Use the \"clicked\" signal instead\n Sets func as the function that should be invoked every time a user clicks\n a GtkLinkButton. This function is called before every callback registered\n for the \"clicked\" signal.\n If no uri hook has been set, GTK+ defaults to calling gtk_show_uri().\n Since 2.10\n Params:\n func = a function called each time a GtkLinkButton is clicked, or NULL. [allow-none]\n data = user data to be passed to func, or NULL. [allow-none]\n destroy = a GDestroyNotify that gets called when data is no longer needed, or NULL. [allow-none]\n Returns: the previously set hook function.\n\t \n",
"line" : 209}
,
{
"name" : "getVisited",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Retrieves the 'visited' state of the URI where the GtkLinkButton\n points. The button becomes visited when it is clicked. If the URI\n is changed on the button, the 'visited' state is unset again.\n The state may also be changed using gtk_link_button_set_visited().\n Since 2.14\n Returns: TRUE if the link has been visited, FALSE otherwise\n\t \n",
"line" : 223}
,
{
"name" : "setVisited",
"kind" : "function",
"protection" : "public",
"type" : "void(int visited)",
"comment" : "\n Sets the 'visited' state of the URI where the GtkLinkButton\n points. See gtk_link_button_get_visited() for more details.\n Since 2.14\n Params:\n visited = the new 'visited' state\n\t \n",
"line" : 236}
]
}
]
}
,
{
"name" : "gtk.ListStore",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/ListStore.d",
"members" : [
{
"name" : "ListStore",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkListStore object is a list model for use with a GtkTreeView\n widget. It implements the GtkTreeModel interface, and consequentialy,\n can use all of the methods available there. It also implements the\n GtkTreeSortable interface so it can be sorted by the view.\n Finally, it also implements the tree drag and\n drop interfaces.\n The GtkListStore can accept most GObject types as a column type, though\n it can't accept all custom types. Internally, it will keep a copy of\n data passed in (such as a string or a boxed pointer). Columns that\n accept GObjects are handled a little differently. The\n GtkListStore will keep a reference to the object instead of copying the\n value. As a result, if the object is modified, it is up to the\n application writer to call gtk_tree_model_row_changed to emit the\n \"row_changed\" signal. This most commonly affects lists with\n GdkPixbufs stored.\n $(DDOC_COMMENT example)\n Performance Considerations\n Internally, the GtkListStore was implemented with a linked list with a\n tail pointer prior to GTK+ 2.6. As a result, it was fast at data\n insertion and deletion, and not fast at random data access. The\n GtkListStore sets the GTK_TREE_MODEL_ITERS_PERSIST flag, which means\n that GtkTreeIters can be cached while the row exists. Thus, if\n access to a particular row is needed often and your code is expected to\n run on older versions of GTK+, it is worth keeping the iter around.\n It is important to note that only the methods\n gtk_list_store_insert_with_values() and gtk_list_store_insert_with_valuesv()\n are atomic, in the sense that the row is being appended to the store and the\n values filled in in a single operation with regard to GtkTreeModel signaling.\n In contrast, using e.g. gtk_list_store_append() and then gtk_list_store_set()\n will first create a row, which triggers the \"row-inserted\" signal\n on GtkListStore. The row, however, is still empty, and any signal handler\n connecting to \"row-inserted\" on this particular store should be prepared\n for the situation that the row might be empty. This is especially important\n if you are wrapping the GtkListStore inside a GtkTreeModelFilter and are\n using a GtkTreeModelFilterVisibleFunc. Using any of the non-atomic operations\n to append rows to the GtkListStore will cause the\n GtkTreeModelFilterVisibleFunc to be visited with an empty row first; the\n function must be prepared for that.\n <hr>\n GtkListStore as GtkBuildable\n The GtkListStore implementation of the GtkBuildable interface allows\n to specify the model columns with a <columns> element that may\n contain multiple <column> elements, each specifying one model\n column. The \"type\" attribute specifies the data type for the column.\n Additionally, it is possible to specify content for the list store\n in the UI definition, with the <data> element. It can contain\n multiple <row> elements, each specifying to content for one\n row of the list model. Inside a <row>, the <col> elements\n specify the content for individual cells.\n Note that it is probably more common to define your models\n in the code, and one might consider it a layering violation\n to specify the content of a list store in a UI definition,\n data, not presentation,\n and common wisdom is to separate the two, as far as possible.\n $(DDOC_COMMENT example)\n \n",
"line" : 160,
"base" : "ObjectG",
"interfaces" : [
"BuildableIF",
"TreeModelIF",
"TreeDragSourceIF",
"TreeDragDestIF",
"TreeSortableIF"],
"members" : [
{
"name" : "gtkListStore",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkListStore*",
"comment" : " the main Gtk struct \n",
"line" : 164}
,
{
"name" : "getListStoreStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkListStore*()",
"line" : 167}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 174}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ListStore(GtkListStore* gtkListStore)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 182}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 200}
,
{
"name" : "createIter",
"kind" : "function",
"protection" : "public",
"type" : "TreeIter()",
"comment" : "\n Creates a top level iteractor.\n I don't think lists have but the top level iteractor\n\t \n",
"line" : 225}
,
{
"name" : "set",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, int[] columns, char*[] values)",
"comment" : "\n sets the values for one row\n Params:\n  iter = the row iteractor\n  columns = an arrays with the columns to set\n  values = an arrays with the values\n\t \n",
"line" : 239}
,
{
"name" : "set",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, int[] columns, string[] values)",
"comment" : " \n",
"line" : 254}
,
{
"name" : "setValue",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, int column, string value)",
"comment" : " \n",
"line" : 269}
,
{
"name" : "setValue",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, int column, int value)",
"comment" : " \n",
"line" : 277}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ListStore(GType[] types)",
"comment" : "\n\t \n\n Non-vararg creation function. Used primarily by language bindings.\n Params:\n types = an array of GType types for the columns, from first to last. [array length=n_columns]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 292}
,
{
"name" : "setColumnTypes",
"kind" : "function",
"protection" : "public",
"type" : "void(GType[] types)",
"comment" : "\n This function is meant primarily for GObjects that inherit from GtkListStore,\n and should only be used when constructing a new GtkListStore. It will not\n function after a row has been added, or a method on the GtkTreeModel\n interface is called.\n Params:\n types = An array length n of GTypes. [array length=n_columns]\n\t \n",
"line" : 311}
,
{
"name" : "setValist",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, void* varArgs)",
"comment" : "\n See gtk_list_store_set(); this version takes a va_list for use by language\n bindings.\n Params:\n iter = A valid GtkTreeIter for the row being modified\n varArgs = va_list of column\/value pairs\n\t \n",
"line" : 324}
,
{
"name" : "setValue",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, int column, Value value)",
"comment" : "\n Sets the data in the cell specified by iter and column.\n The type of value must be convertible to the type of the\n column.\n Params:\n iter = A valid GtkTreeIter for the row being modified\n column = column number to modify\n value = new value for the cell\n\t \n",
"line" : 339}
,
{
"name" : "setValuesv",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, int[] columns, GValue[] values)",
"comment" : "\n A variant of gtk_list_store_set_valist() which\n takes the columns and values as two arrays, instead of\n varargs. This function is mainly intended for\n language-bindings and in case the number of columns to\n change is not known until run-time.\n Since 2.12\n Params:\n iter = A valid GtkTreeIter for the row being modified\n columns = an array of column numbers. [array length=n_values]\n values = an array of GValues. [array length=n_values]\n\t \n",
"line" : 357}
,
{
"name" : "remove",
"kind" : "function",
"protection" : "public",
"type" : "int(TreeIter iter)",
"comment" : "\n Removes the given row from the list store. After being removed,\n iter is set to be the next valid row, or invalidated if it pointed\n to the last row in list_store.\n Params:\n iter = A valid GtkTreeIter\n Returns: TRUE if iter is valid, FALSE if not.\n\t \n",
"line" : 371}
,
{
"name" : "insert",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, int position)",
"comment" : "\n Creates a new row at position. iter will be changed to point to this new\n row. If position is larger than the number of rows on the list, then the\n new row will be appended to the list. The row will be empty after this\n function is called. To fill in values, you need to call\n gtk_list_store_set() or gtk_list_store_set_value().\n Params:\n iter = An unset GtkTreeIter to set to the new row. [out]\n position = position to insert the new row\n\t \n",
"line" : 387}
,
{
"name" : "insertBefore",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, TreeIter sibling)",
"comment" : "\n Inserts a new row before sibling. If sibling is NULL, then the row will\n be appended to the end of the list. iter will be changed to point to this\n new row. The row will be empty after this function is called. To fill in\n values, you need to call gtk_list_store_set() or gtk_list_store_set_value().\n Params:\n iter = An unset GtkTreeIter to set to the new row. [out]\n sibling = A valid GtkTreeIter, or NULL. [allow-none]\n\t \n",
"line" : 402}
,
{
"name" : "insertAfter",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, TreeIter sibling)",
"comment" : "\n Inserts a new row after sibling. If sibling is NULL, then the row will be\n prepended to the beginning of the list. iter will be changed to point to\n this new row. The row will be empty after this function is called. To fill\n in values, you need to call gtk_list_store_set() or gtk_list_store_set_value().\n Params:\n iter = An unset GtkTreeIter to set to the new row. [out]\n sibling = A valid GtkTreeIter, or NULL. [allow-none]\n\t \n",
"line" : 417}
,
{
"name" : "insertWithValuesv",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, int position, int[] columns, GValue[] values)",
"comment" : "\n A variant of gtk_list_store_insert_with_values() which\n takes the columns and values as two arrays, instead of\n varargs. This function is mainly intended for\n language-bindings.\n Since 2.6\n Params:\n iter = An unset GtkTreeIter to set to the new row, or NULL. [out][allow-none]\n position = position to insert the new row\n columns = an array of column numbers. [array length=n_values]\n values = an array of GValues. [array length=n_values]\n\t \n",
"line" : 435}
,
{
"name" : "prepend",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter)",
"comment" : "\n Prepends a new row to list_store. iter will be changed to point to this new\n row. The row will be empty after this function is called. To fill in\n values, you need to call gtk_list_store_set() or gtk_list_store_set_value().\n Params:\n iter = An unset GtkTreeIter to set to the prepend row. [out]\n\t \n",
"line" : 448}
,
{
"name" : "append",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter)",
"comment" : "\n Appends a new row to list_store. iter will be changed to point to this new\n row. The row will be empty after this function is called. To fill in\n values, you need to call gtk_list_store_set() or gtk_list_store_set_value().\n Params:\n iter = An unset GtkTreeIter to set to the appended row. [out]\n\t \n",
"line" : 461}
,
{
"name" : "clear",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Removes all rows from the list store.\n\t \n",
"line" : 470}
,
{
"name" : "iterIsValid",
"kind" : "function",
"protection" : "public",
"type" : "int(TreeIter iter)",
"comment" : "\n Warning\n This function is slow. Only use it for debugging and\/or testing\n purposes.\n Checks if the given iter is a valid iter for this GtkListStore.\n Since 2.2\n Params:\n iter = A GtkTreeIter.\n Returns: TRUE if the iter is valid, FALSE if the iter is invalid.\n\t \n",
"line" : 486}
,
{
"name" : "reorder",
"kind" : "function",
"protection" : "public",
"type" : "void(int[] newOrder)",
"comment" : "\n Reorders store to follow the order indicated by new_order. Note that\n this function only works with unsorted stores.\n Since 2.2\n Params:\n newOrder = an array of integers mapping the new position of each child\n to its old position before the re-ordering,\n i.e. new_order[newpos] = oldpos. [array]\n\t \n",
"line" : 501}
,
{
"name" : "swap",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter a, TreeIter b)",
"comment" : "\n Swaps a and b in store. Note that this function only works with\n unsorted stores.\n Since 2.2\n Params:\n a = A GtkTreeIter.\n b = Another GtkTreeIter.\n\t \n",
"line" : 515}
,
{
"name" : "moveBefore",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, TreeIter position)",
"comment" : "\n Moves iter in store to the position before position. Note that this\n function only works with unsorted stores. If position is NULL, iter\n will be moved to the end of the list.\n Since 2.2\n Params:\n iter = A GtkTreeIter.\n position = A GtkTreeIter, or NULL. [allow-none]\n\t \n",
"line" : 530}
,
{
"name" : "moveAfter",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, TreeIter position)",
"comment" : "\n Moves iter in store to the position after position. Note that this\n function only works with unsorted stores. If position is NULL, iter\n will be moved to the start of the list.\n Since 2.2\n Params:\n iter = A GtkTreeIter.\n position = A GtkTreeIter or NULL. [allow-none]\n\t \n",
"line" : 545}
]
}
]
}
,
{
"name" : "gtk.Main",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Main.d",
"members" : [
{
"name" : "Main",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n Before using GTK+, you need to initialize it; initialization connects\n to the window system display, and parses some standard command line\n arguments. The gtk_init() function initializes GTK+. gtk_init() exits\n the application if errors occur; to avoid this, use gtk_init_check().\n gtk_init_check() allows you to recover from a failed GTK+\n initialization - you might start up your application in text mode instead.\n Like all GUI toolkits, GTK+ uses an event-driven programming\n model. When the user is doing nothing, GTK+ sits in the\n main loop and waits for input. If the user\n performs some action - say, a mouse click - then the main loop \"wakes\n up\" and delivers an event to GTK+. GTK+ forwards the event to one or\n more widgets.\n When widgets receive an event, they frequently emit one or more\n signals. Signals notify your program that\n \"something interesting happened\" by invoking functions you've\n connected to the signal with g_signal_connect(). Functions connected\n to a signal are often termed callbacks.\n When your callbacks are invoked, you would typically take some action\n - for example, when an Open button is clicked you might display a\n GtkFileSelectionDialog. After a callback finishes, GTK+ will return\n to the main loop and await more user input.\n $(DDOC_COMMENT example)\n It's OK to use the GLib main loop directly instead of gtk_main(),\n though it involves slightly more typing. See GMainLoop in the GLib\n documentation.\n \n",
"line" : 123,
"base" : "Object",
"members" : [
{
"name" : "init",
"kind" : "function",
"protection" : "public",
"type" : "void(string[] args)",
"comment" : "\n Call this function before using any other GTK+ functions in your GUI applications.\n\t \n",
"line" : 128}
,
{
"name" : "initMultiThread",
"kind" : "function",
"protection" : "public",
"type" : "void(string[] args)",
"comment" : "\n This initiates GtkD to supports multi threaded programs.\n read full documantation at http:\/\/gtk.org\/faq\/#AEN482\n from the FAQ:\n \"There is a single global lock that you must acquire with\n gdk_threads_enter() before making any GDK calls,\n and release with gdk_threads_leave() afterwards throughout your code.\"\n This is to be used on any call to GDK not executed from the main thread.\n\t \n",
"line" : 149}
,
{
"name" : "setLocale",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n\t \n\n Warning\n gtk_set_locale has been deprecated since version 2.24 and should not be used in newly-written code. Use setlocale() directly\n Initializes internationalization support for GTK+. gtk_init()\n automatically does this, so there is typically no point\n in calling this function.\n If you are calling this function because you changed the locale\n after GTK+ is was initialized, then calling this function\n may help a bit. (Note, however, that changing the locale\n after GTK+ is initialized may produce inconsistent results and\n is not really supported.)\n In detail - sets the current locale according to the\n program environment. This is the same as calling the C library function\n setlocale (LC_ALL, \"\") but also takes care of the\n locale specific setup of the windowing system used by GDK.\n Returns: a string corresponding to the locale set, typically in the form lang_COUNTRY, where lang is an ISO-639 language code, and COUNTRY is an ISO-3166 country code. On Unix, this form matches the result of the setlocale(); it is also used on other machines, such as Windows, where the C library returns a different result. The string is owned by GTK+ and should not be modified or freed.\n\t \n",
"line" : 177}
,
{
"name" : "disableSetlocale",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Prevents gtk_init(), gtk_init_check(), gtk_init_with_args() and\n gtk_parse_args() from automatically\n calling setlocale (LC_ALL, \"\"). You would\n want to use this function if you wanted to set the locale for\n your program to something other than the user's locale, or if\n you wanted to set different values for different locale categories.\n Most programs should not need to call this function.\n\t \n",
"line" : 192}
,
{
"name" : "getDefaultLanguage",
"kind" : "function",
"protection" : "public",
"type" : "PgLanguage()",
"comment" : "\n Returns the PangoLanguage for the default language currently in\n effect. (Note that this can change over the life of an\n application.) The default language is derived from the current\n locale. It determines, for example, whether GTK+ uses the\n right-to-left or left-to-right text direction.\n This function is equivalent to pango_language_get_default(). See\n that function for details.\n Returns: the default language as a PangoLanguage, must not be freed\n\t \n",
"line" : 208}
,
{
"name" : "parseArgs",
"kind" : "function",
"protection" : "public",
"type" : "int(ref string[] argv)",
"comment" : "\n Parses command line arguments, and initializes global\n attributes of GTK+, but does not actually open a connection\n to a display. (See gdk_display_open(), gdk_get_display_arg_name())\n Any arguments used by GTK+ or GDK are removed from the array and\n argc and argv are updated accordingly.\n There is no need to call this function explicitely if you are using\n gtk_init(), or gtk_init_check().\n Params:\n argv = a pointer to the array of\n command line arguments. [array length=argc][inout]\n Returns: TRUE if initialization succeeded, otherwise FALSE.\n\t \n",
"line" : 232}
,
{
"name" : "init",
"kind" : "function",
"protection" : "public",
"type" : "void(int* argc, char*** argv)",
"comment" : "\n Call this function before using any other GTK+ functions in your GUI\n applications. It will initialize everything needed to operate the\n toolkit and parses some standard command line options.\n argc and argv are adjusted accordingly so your own code will\n never see those standard arguments.\n Since 2.18, GTK+ calls signal (SIGPIPE, SIG_IGN)\n during initialization, to ignore SIGPIPE signals, since these are\n almost never wanted in graphical applications. If you do need to\n handle SIGPIPE for some reason, reset the handler after gtk_init(),\n but notice that other libraries (e.g. libdbus or gvfs) might do\n similar things.\n Note\n Params:\n argc = Address of the argc parameter of\n your main() function. Changed if any arguments were handled. [inout]\n argv = Address of the\n argv parameter of main(). Any options\n understood by GTK+ are stripped before return. [array length=argc][inout][allow-none]\n\t \n",
"line" : 268}
,
{
"name" : "initCheck",
"kind" : "function",
"protection" : "public",
"type" : "int(ref string[] argv)",
"comment" : "\n This function does the same work as gtk_init() with only\n a single change: It does not terminate the program if the GUI can't be\n initialized. Instead it returns FALSE on failure.\n This way the application can fall back to some other means of communication\n with the user - for example a curses or command line interface.\n Params:\n argv = Address of the argv parameter of main().\n Any parameters understood by gtk_init() are stripped before return. [array length=argc][inout][allow-none]\n Returns: TRUE if the GUI has been successfully initialized, FALSE otherwise.\n\t \n",
"line" : 285}
,
{
"name" : "initWithArgs",
"kind" : "function",
"protection" : "public",
"type" : "int(ref string[] argv, string parameterString, GOptionEntry[] entries, string translationDomain)",
"comment" : "\n This function does the same work as gtk_init_check().\n Additionally, it allows you to add your own commandline options,\n and it automatically generates nicely formatted\n --help output. Note that your program will\n be terminated after writing out the help output.\n Since 2.6\n Params:\n argv = a pointer to the array of\n command line arguments. [inout][array length=argc]\n parameterString = a string which is displayed in\n the first line of --help output, after\n programname [OPTION...]\n entries = a NULL-terminated array\n of GOptionEntrys describing the options of your program. [array zero-terminated=1]\n translationDomain = a translation domain to use for translating\n the --help output for the options in entries\n with gettext(), or NULL\n Returns: TRUE if the GUI has been successfully initialized, FALSE otherwise.\n Throws: GException on failure.\n\t \n",
"line" : 322}
,
{
"name" : "getOptionGroup",
"kind" : "function",
"protection" : "public",
"type" : "GOptionGroup*(int openDefaultDisplay)",
"comment" : "\n Returns a GOptionGroup for the commandline arguments recognized\n by GTK+ and GDK. You should add this group to your GOptionContext\n with g_option_context_add_group(), if you are using\n g_option_context_parse() to parse your commandline arguments.\n Since 2.6\n Params:\n openDefaultDisplay = whether to open the default display\n when parsing the commandline arguments\n Returns: a GOptionGroup for the commandline arguments recognized by GTK+\n\t \n",
"line" : 355}
,
{
"name" : "exit",
"kind" : "function",
"protection" : "public",
"type" : "void(int errorCode)",
"comment" : "\n Warning\n gtk_exit is deprecated and should not be used in newly-written code. Use the standard exit() function instead.\n Terminates the program and returns the given exit code to the caller.\n This function will shut down the GUI and free all resources allocated\n for GTK+.\n Params:\n errorCode = Return value to pass to the caller. This is dependent on the\n target system but at least on Unix systems 0 means success.\n\t \n",
"line" : 371}
,
{
"name" : "eventsPending",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Checks if any events are pending. This can be used to update the GUI\n and invoke timeouts etc. while doing some time intensive computation.\n $(DDOC_COMMENT example)\n Returns: TRUE if any events are pending, FALSE otherwise.\n\t \n",
"line" : 383}
,
{
"name" : "run",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Runs the main loop until gtk_main_quit() is called. You can nest calls to\n gtk_main(). In that case gtk_main_quit() will make the innermost invocation\n of the main loop return.\n\t \n",
"line" : 394}
,
{
"name" : "level",
"kind" : "function",
"protection" : "public",
"type" : "uint()",
"comment" : "\n Asks for the current nesting level of the main loop. This can be useful\n when calling gtk_quit_add().\n Returns: the nesting level of the current invocation of the main loop.\n\t \n",
"line" : 405}
,
{
"name" : "quit",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Makes the innermost invocation of the main loop return when it regains\n control.\n\t \n",
"line" : 415}
,
{
"name" : "iteration",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Runs a single iteration of the mainloop. If no events are waiting to be\n processed GTK+ will block until the next event is noticed. If you don't\n want to block look at gtk_main_iteration_do() or check if any events are\n pending with gtk_events_pending() first.\n Returns: TRUE if gtk_main_quit() has been called for the innermost mainloop.\n\t \n",
"line" : 428}
,
{
"name" : "iterationDo",
"kind" : "function",
"protection" : "public",
"type" : "int(int blocking)",
"comment" : "\n Runs a single iteration of the mainloop. If no events are available either\n return or block dependent on the value of blocking.\n Params:\n blocking = TRUE if you want GTK+ to block if no events are pending.\n Returns: TRUE if gtk_main_quit() has been called for the innermost mainloop.\n\t \n",
"line" : 441}
,
{
"name" : "doEvent",
"kind" : "function",
"protection" : "public",
"type" : "void(Event event)",
"comment" : "\n Processes a single GDK event. This is public only to allow filtering of events\n between GDK and GTK+. You will not usually need to call this function directly.\n While you should not call this function directly, you might want to know\n how exactly events are handled. So here is what this function does with\n Params:\n event = An event to process (normally) passed by GDK.\n\t \n",
"line" : 455}
,
{
"name" : "grabAdd",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget)",
"comment" : "\n Makes widget the current grabbed widget. This means that interaction with\n other widgets in the same application is blocked and mouse as well as\n keyboard events are delivered to this widget.\n If widget is not sensitive, it is not set as the current grabbed\n widget and this function does nothing.\n Params:\n widget = The widget that grabs keyboard and pointer events.\n\t \n",
"line" : 470}
,
{
"name" : "grabGetCurrent",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Queries the current grab of the default window group.\n Queries the current grab of the default window group.\n Returns: The widget which currently has the grab or NULL if no grab is active. [transfer none]\n\t \n",
"line" : 481}
,
{
"name" : "grabRemove",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget)",
"comment" : "\n Removes the grab from the given widget. You have to pair calls to gtk_grab_add()\n and gtk_grab_remove().\n If widget does not have the grab, this function does nothing.\n Params:\n widget = The widget which gives up the grab.\n\t \n",
"line" : 499}
,
{
"name" : "initAdd",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) int function(void*) funct, void* data)",
"comment" : "\n Warning\n gtk_init_add is deprecated and should not be used in newly-written code. This function is going to be removed in GTK+ 3.0\n Registers a function to be called when the mainloop is started.\n Params:\n data = Data to pass to that function.\n\t \n",
"line" : 512}
,
{
"name" : "quitAddDestroy",
"kind" : "function",
"protection" : "public",
"type" : "void(uint mainLevel, ObjectGtk object)",
"comment" : "\n Warning\n gtk_quit_add_destroy is deprecated and should not be used in newly-written code. This function is going to be removed in GTK+ 3.0\n Trigger destruction of object in case the mainloop at level main_level\n is quit.\n Params:\n mainLevel = Level of the mainloop which shall trigger the destruction.\n object = Object to be destroyed.\n\t \n",
"line" : 527}
,
{
"name" : "quitAdd",
"kind" : "function",
"protection" : "public",
"type" : "uint(uint mainLevel, extern (C) int function(void*) funct, void* data)",
"comment" : "\n Warning\n gtk_quit_add is deprecated and should not be used in newly-written code. This function is going to be removed in GTK+ 3.0\n Registers a function to be called when an instance of the mainloop is left.\n Params:\n mainLevel = Level at which termination the function shall be called. You\n can pass 0 here to have the function run at the termination of the current\n mainloop.\n data = Pointer to pass when calling function.\n Returns: A handle for this quit handler (you need this for gtk_quit_remove()) or 0 if you passed a NULL pointer in function.\n\t \n",
"line" : 544}
,
{
"name" : "quitAddFull",
"kind" : "function",
"protection" : "public",
"type" : "uint(uint mainLevel, extern (C) int function(void*) funct, extern (C) void function(GtkObject*, void*, uint, GtkArg*) marshal, void* data, extern (C) void function(void* cbData) destroy)",
"comment" : "\n Warning\n gtk_quit_add_full is deprecated and should not be used in newly-written code. This function is going to be removed in GTK+ 3.0\n Registers a function to be called when an instance of the mainloop is left.\n In comparison to gtk_quit_add() this function adds the possibility to\n pass a marshaller and a function to be called when the quit handler is freed.\n The former can be used to run interpreted code instead of a compiled function\n while the latter can be used to free the information stored in data (while\n you can do this in function as well)... So this function will mostly be\n used by GTK+ wrappers for languages other than C.\n Params:\n mainLevel = Level at which termination the function shall be called. You\n can pass 0 here to have the function run at the termination of the current\n mainloop.\n marshal = The marshaller to be used. If this is non-NULL, function is\n ignored.\n data = Pointer to pass when calling function.\n destroy = Function to call to destruct data. Gets data as argument.\n Returns: A handle for this quit handler (you need this for gtk_quit_remove()) or 0 if you passed a NULL pointer in function.\n\t \n",
"line" : 570}
,
{
"name" : "quitRemove",
"kind" : "function",
"protection" : "public",
"type" : "void(uint quitHandlerId)",
"comment" : "\n Warning\n gtk_quit_remove is deprecated and should not be used in newly-written code. This function is going to be removed in GTK+ 3.0\n Removes a quit handler by its identifier.\n Params:\n quitHandlerId = Identifier for the handler returned when installing it.\n\t \n",
"line" : 583}
,
{
"name" : "quitRemoveByData",
"kind" : "function",
"protection" : "public",
"type" : "void(void* data)",
"comment" : "\n Warning\n gtk_quit_remove_by_data is deprecated and should not be used in newly-written code. This function is going to be removed in GTK+ 3.0\n Removes a quit handler identified by its data field.\n Params:\n data = The pointer passed as data to gtk_quit_add() or gtk_quit_add_full().\n\t \n",
"line" : 596}
,
{
"name" : "inputAddFull",
"kind" : "function",
"protection" : "public",
"type" : "uint(int source, GdkInputCondition condition, extern (C) void function(void*, int, GdkInputCondition) funct, extern (C) void function(GtkObject*, void*, uint, GtkArg*) marshal, void* data, extern (C) void function(void* cbData) destroy)",
"comment" : "\n Warning\n gtk_input_add_full has been deprecated since version 2.4 and should not be used in newly-written code. Use g_io_add_watch_full() instead.\n Registers a function to be called when a condition becomes true\n on a file descriptor.\n Params:\n source = a file descriptor.\n condition = the condition.\n marshal = The marshaller to use instead of the function (if non-NULL).\n data = callback data passed to function.\n destroy = callback function to call with data when the input\n handler is removed, or NULL.\n Returns: A unique id for the event source; to be used with gtk_input_remove().\n\t \n",
"line" : 616}
,
{
"name" : "inputRemove",
"kind" : "function",
"protection" : "public",
"type" : "void(uint inputHandlerId)",
"comment" : "\n Warning\n gtk_input_remove has been deprecated since version 2.4 and should not be used in newly-written code. Use g_source_remove() instead.\n Removes the function with the given id.\n Params:\n inputHandlerId = Identifies the function to remove.\n\t \n",
"line" : 629}
,
{
"name" : "keySnooperInstall",
"kind" : "function",
"protection" : "public",
"type" : "uint(extern (C) int function(GtkWidget*, GdkEventKey*, void*) snooper, void* funcData)",
"comment" : "\n Installs a key snooper function, which will get called on all key events\n before delivering them normally.\n Params:\n snooper = a GtkKeySnoopFunc.\n funcData = data to pass to snooper.\n Returns: a unique id for this key snooper for use with gtk_key_snooper_remove().\n\t \n",
"line" : 643}
,
{
"name" : "keySnooperRemove",
"kind" : "function",
"protection" : "public",
"type" : "void(uint snooperHandlerId)",
"comment" : "\n Removes the key snooper function with the given id.\n Params:\n snooperHandlerId = Identifies the key snooper to remove.\n\t \n",
"line" : 654}
,
{
"name" : "getCurrentEvent",
"kind" : "function",
"protection" : "public",
"type" : "Event()",
"comment" : "\n Obtains a copy of the event currently being processed by GTK+. For\n example, if you get a \"clicked\" signal from GtkButton, the current\n event will be the GdkEventButton that triggered the \"clicked\"\n signal. The returned event must be freed with gdk_event_free().\n If there is no current event, the function returns NULL.\n Returns: a copy of the current event, or NULL if no current event. [transfer full]\n\t \n",
"line" : 668}
,
{
"name" : "getCurrentEventTime",
"kind" : "function",
"protection" : "public",
"type" : "uint()",
"comment" : "\n If there is a current event and it has a timestamp, return that\n timestamp, otherwise return GDK_CURRENT_TIME.\n Returns: the timestamp from the current event, or GDK_CURRENT_TIME.\n\t \n",
"line" : 684}
,
{
"name" : "getCurrentEventState",
"kind" : "function",
"protection" : "public",
"type" : "int(out GdkModifierType state)",
"comment" : "\n If there is a current event and it has a state field, place\n that state field in state and return TRUE, otherwise return\n FALSE.\n Params:\n state = a location to store the state of the current event. [out]\n Returns: TRUE if there was a current event and it had a state field\n\t \n",
"line" : 698}
,
{
"name" : "getEventWidget",
"kind" : "function",
"protection" : "public",
"type" : "Widget(Event event)",
"comment" : "\n If event is NULL or the event was not associated with any widget,\n returns NULL, otherwise returns the widget that received the event\n originally.\n Params:\n event = a GdkEvent\n Returns: the widget that originally received event, or NULL. [transfer none]\n\t \n",
"line" : 712}
,
{
"name" : "propagateEvent",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, Event event)",
"comment" : "\n Sends an event to a widget, propagating the event to parent widgets\n if the event remains unhandled. Events received by GTK+ from GDK\n normally begin in gtk_main_do_event(). Depending on the type of\n event, existence of modal dialogs, grabs, etc., the event may be\n propagated; if so, this function is used. gtk_propagate_event()\n calls gtk_widget_event() on each widget it decides to send the\n event to. So gtk_widget_event() is the lowest-level function; it\n simply emits the \"event\" and possibly an event-specific signal on a\n widget. gtk_propagate_event() is a bit higher-level, and\n gtk_main_do_event() is the highest level.\n All that said, you most likely don't want to use any of these\n functions; synthesizing events is rarely needed. Consider asking on\n the mailing list for better ways to achieve your goals. For\n example, use gdk_window_invalidate_rect() or\n gtk_widget_queue_draw() instead of making up expose events.\n Params:\n widget = a GtkWidget\n event = an event\n\t \n",
"line" : 743}
]
}
]
}
,
{
"name" : "gtk.MainWindow",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/MainWindow.d",
"members" : [
{
"name" : "MainWindow",
"kind" : "class",
"protection" : "public",
"comment" : "\n A top Level window that will stop the main event cycle when it's closed.\n Closing the last of the windows of class \"MainWindow\" will end the application.\n \n",
"line" : 75,
"base" : "Window",
"members" : [
{
"name" : "countTotalMainWindows",
"kind" : "variable",
"protection" : "private",
"type" : "int",
"line" : 78}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "MainWindow(string title)",
"comment" : "\n Creates a new MainWindow with a title\n\t \n",
"line" : 83}
,
{
"name" : "windowDelete",
"kind" : "function",
"protection" : "protected",
"type" : "bool(Event event, Widget widget)",
"comment" : "\n Executed when the user tries to close the window\n Returns: true to refuse to close the window\n\t \n",
"line" : 95}
,
{
"name" : "exit",
"kind" : "function",
"protection" : "protected",
"type" : "bool(int code, bool force)",
"comment" : "\n Allows the application to close and decide if it can exit\n Params:\n  code = the code reason to exit\n  force = if true the application must expect to be closed even against it's will\n Returns: false to refuse to exit\n\t \n",
"line" : 114}
]
}
]
}
,
{
"name" : "gtk.MenuBar",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/MenuBar.d",
"members" : [
{
"name" : "MenuBar",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkMenuBar is a subclass of GtkMenuShell which contains one to many GtkMenuItem. The result is a standard menu bar which can hold many menu items. GtkMenuBar allows for a shadow type to be set for aesthetic purposes. The shadow types are defined in the gtk_menu_bar_set_shadow_type function.\n \n",
"line" : 79,
"base" : "MenuShell",
"members" : [
{
"name" : "gtkMenuBar",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkMenuBar*",
"comment" : " the main Gtk struct \n",
"line" : 83}
,
{
"name" : "getMenuBarStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkMenuBar*()",
"line" : 86}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 93}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "MenuBar(GtkMenuBar* gtkMenuBar)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 101}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 119}
,
{
"name" : "append",
"kind" : "function",
"protection" : "public",
"type" : "Menu(string label, bool rightJustify = false)",
"comment" : " \n",
"line" : 126}
,
{
"name" : "append",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget)",
"comment" : " \n",
"line" : 137}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "MenuBar()",
"comment" : "\n\t \n\n Creates the new GtkMenuBar\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 149}
,
{
"name" : "setPackDirection",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkPackDirection packDir)",
"comment" : "\n Sets how items should be packed inside a menubar.\n Since 2.8\n Params:\n packDir = a new GtkPackDirection\n\t \n",
"line" : 166}
,
{
"name" : "getPackDirection",
"kind" : "function",
"protection" : "public",
"type" : "GtkPackDirection()",
"comment" : "\n Retrieves the current pack direction of the menubar.\n See gtk_menu_bar_set_pack_direction().\n Since 2.8\n Returns: the pack direction\n\t \n",
"line" : 178}
,
{
"name" : "setChildPackDirection",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkPackDirection childPackDir)",
"comment" : "\n Sets how widgets should be packed inside the children of a menubar.\n Since 2.8\n Params:\n childPackDir = a new GtkPackDirection\n\t \n",
"line" : 190}
,
{
"name" : "getChildPackDirection",
"kind" : "function",
"protection" : "public",
"type" : "GtkPackDirection()",
"comment" : "\n Retrieves the current child pack direction of the menubar.\n See gtk_menu_bar_set_child_pack_direction().\n Since 2.8\n Returns: the child pack direction\n\t \n",
"line" : 202}
]
}
]
}
,
{
"name" : "gtk.Menu",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Menu.d",
"members" : [
{
"name" : "Menu",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkMenu is a GtkMenuShell that implements a drop down menu consisting of\n a list of GtkMenuItem objects which can be navigated and activated by the\n user to perform application functions.\n A GtkMenu is most commonly dropped down by activating a GtkMenuItem in a\n GtkMenuBar or popped up by activating a GtkMenuItem in another GtkMenu.\n A GtkMenu can also be popped up by activating a GtkOptionMenu.\n Other composite widgets such as the GtkNotebook can pop up a GtkMenu\n as well.\n Applications can display a GtkMenu as a popup menu by calling the\n gtk_menu_popup() function. The example below shows how an application\n can pop up a menu when the 3rd mouse button is pressed.\n $(DDOC_COMMENT example)\n $(DDOC_COMMENT example)\n \n",
"line" : 100,
"base" : "MenuShell",
"members" : [
{
"name" : "gtkMenu",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkMenu*",
"comment" : " the main Gtk struct \n",
"line" : 104}
,
{
"name" : "getMenuStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkMenu*()",
"line" : 107}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 114}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Menu(GtkMenu* gtkMenu)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 122}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 140}
,
{
"name" : "popup",
"kind" : "function",
"protection" : "public",
"type" : "void(uint button, uint activateTime)",
"comment" : "\n Popups up this menu\n Params:\n  button = you can pass a button number here\n  activateTime = you can pass the time from an event here\n\t \n",
"line" : 152}
,
{
"name" : "appendSubmenu",
"kind" : "function",
"protection" : "public",
"type" : "Menu(string label)",
"comment" : "\n Creates and append a submenu to this menu.\n This menu item that actualy has the sub menu is also created.\n Params:\n  label = the sub menu item label\n Returns: the new menu\n\t \n",
"line" : 164}
,
{
"name" : "appendSubmenu",
"kind" : "function",
"protection" : "public",
"type" : "void(string label, Menu submenu)",
"comment" : " \n",
"line" : 174}
,
{
"name" : "prependSubmenu",
"kind" : "function",
"protection" : "public",
"type" : "Menu(string label)",
"comment" : " \n",
"line" : 182}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 193}
,
{
"name" : "onMoveScrollListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkScrollType, Menu)[]",
"line" : 195}
,
{
"name" : "addOnMoveScroll",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkScrollType, Menu) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 198}
,
{
"name" : "callBackMoveScroll",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkMenu* menuStruct, GtkScrollType arg1, Menu menu)",
"line" : 213}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Menu()",
"comment" : "\n Creates a new GtkMenu.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 226}
,
{
"name" : "setScreen",
"kind" : "function",
"protection" : "public",
"type" : "void(Screen screen)",
"comment" : "\n Sets the GdkScreen on which the menu will be displayed.\n Since 2.2\n Params:\n screen = a GdkScreen, or NULL if the screen should be\n determined by the widget the menu is attached to. [allow-none]\n\t \n",
"line" : 244}
,
{
"name" : "reorderChild",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, int position)",
"comment" : "\n Moves a GtkMenuItem to a new position within the GtkMenu.\n Params:\n child = the GtkMenuItem to move.\n position = the new position to place child. Positions are numbered from\n 0 to n-1.\n\t \n",
"line" : 257}
,
{
"name" : "attach",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, uint leftAttach, uint rightAttach, uint topAttach, uint bottomAttach)",
"comment" : "\n Adds a new GtkMenuItem to a (table) menu. The number of 'cells' that\n an item will occupy is specified by left_attach, right_attach,\n top_attach and bottom_attach. These each represent the leftmost,\n rightmost, uppermost and lower column and row numbers of the table.\n (Columns and rows are indexed from zero).\n Note that this function is not related to gtk_menu_detach().\n Since 2.4\n Params:\n child = a GtkMenuItem.\n leftAttach = The column number to attach the left side of the item to.\n rightAttach = The column number to attach the right side of the item to.\n topAttach = The row number to attach the top of the item to.\n bottomAttach = The row number to attach the bottom of the item to.\n\t \n",
"line" : 278}
,
{
"name" : "popup",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget parentMenuShell, Widget parentMenuItem, extern (C) void function(GtkMenu*, int*, int*, int*, void*) func, void* data, uint button, uint activateTime)",
"comment" : "\n Displays a menu and makes it available for selection. Applications can use\n this function to display context-sensitive menus, and will typically supply\n NULL for the parent_menu_shell, parent_menu_item, func and data\n parameters. The default menu positioning function will position the menu\n at the current mouse cursor position.\n The button parameter should be the mouse button pressed to initiate\n the menu popup. If the menu popup was initiated by something other than\n a mouse button press, such as a mouse button release or a keypress,\n button should be 0.\n The activate_time parameter is used to conflict-resolve initiation of\n concurrent requests for mouse\/keyboard grab requests. To function\n properly, this needs to be the time stamp of the user event (such as\n a mouse click or key press) that caused the initiation of the popup.\n Only if no such event is available, gtk_get_current_event_time() can\n be used instead.\n Params:\n parentMenuShell = the menu shell containing the triggering menu item, or NULL. [allow-none]\n parentMenuItem = the menu item whose activation triggered the popup, or NULL. [allow-none]\n func = a user supplied function used to position the menu, or NULL. [allow-none]\n data = user supplied data to be passed to func. [allow-none]\n button = the mouse button which was pressed to initiate the event.\n activateTime = the time at which the activation event occurred.\n\t \n",
"line" : 308}
,
{
"name" : "setAccelGroup",
"kind" : "function",
"protection" : "public",
"type" : "void(AccelGroup accelGroup)",
"comment" : "\n Set the GtkAccelGroup which holds global accelerators for the menu.\n This accelerator group needs to also be added to all windows that\n this menu is being used in with gtk_window_add_accel_group(), in order\n for those windows to support all the accelerators contained in this group.\n Params:\n accelGroup = . [allow-none]\n\t \n",
"line" : 322}
,
{
"name" : "getAccelGroup",
"kind" : "function",
"protection" : "public",
"type" : "AccelGroup()",
"comment" : "\n Gets the GtkAccelGroup which holds global accelerators for the\n menu. See gtk_menu_set_accel_group().\n Gets the GtkAccelGroup which holds global accelerators for the menu.\n See gtk_menu_set_accel_group().\n Returns: the GtkAccelGroup associated with the menu. [transfer none]\n\t \n",
"line" : 335}
,
{
"name" : "setAccelPath",
"kind" : "function",
"protection" : "public",
"type" : "void(string accelPath)",
"comment" : "\n Sets an accelerator path for this menu from which accelerator paths\n for its immediate children, its menu items, can be constructed.\n The main purpose of this function is to spare the programmer the\n inconvenience of having to call gtk_menu_item_set_accel_path() on\n each menu item that should support runtime user changable accelerators.\n Instead, by just calling gtk_menu_set_accel_path() on their parent,\n each menu item of this menu, that contains a label describing its purpose,\n automatically gets an accel path assigned. For example, a menu containing\n menu items \"New\" and \"Exit\", will, after\n gtk_menu_set_accel_path (menu, \"<Gnumeric-Sheet>\/File\");\n Params:\n accelPath = a valid accelerator path. [allow-none]\n\t \n",
"line" : 360}
,
{
"name" : "getAccelPath",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Retrieves the accelerator path set on the menu.\n Since 2.14\n Returns: the accelerator path set on the menu.\n\t \n",
"line" : 371}
,
{
"name" : "setTitle",
"kind" : "function",
"protection" : "public",
"type" : "void(string title)",
"comment" : "\n Sets the title string for the menu. The title is displayed when the menu\n is shown as a tearoff menu. If title is NULL, the menu will see if it is\n attached to a parent menu item, and if so it will try to use the same text as\n that menu item's label.\n Params:\n title = a string containing the title for the menu.\n\t \n",
"line" : 385}
,
{
"name" : "getTitle",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns the title of the menu. See gtk_menu_set_title().\n Returns: the title of the menu, or NULL if the menu has no title set on it. This string is owned by the widget and should not be modified or freed.\n\t \n",
"line" : 395}
,
{
"name" : "setMonitor",
"kind" : "function",
"protection" : "public",
"type" : "void(int monitorNum)",
"comment" : "\n Informs GTK+ on which monitor a menu should be popped up.\n See gdk_screen_get_monitor_geometry().\n This function should be called from a GtkMenuPositionFunc if the\n menu should not appear on the same monitor as the pointer. This\n information can't be reliably inferred from the coordinates returned\n by a GtkMenuPositionFunc, since, for very long menus, these coordinates\n may extend beyond the monitor boundaries or even the screen boundaries.\n Since 2.4\n Params:\n monitorNum = the number of the monitor on which the menu should\n be popped up\n\t \n",
"line" : 414}
,
{
"name" : "getMonitor",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Retrieves the number of the monitor on which to show the menu.\n Since 2.14\n Returns: the number of the monitor on which the menu should be popped up or -1, if no monitor has been set\n\t \n",
"line" : 425}
,
{
"name" : "getTearoffState",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the menu is torn off. See\n gtk_menu_set_tearoff_state().\n Returns: TRUE if the menu is currently torn off.\n\t \n",
"line" : 436}
,
{
"name" : "setReserveToggleSize",
"kind" : "function",
"protection" : "public",
"type" : "void(int reserveToggleSize)",
"comment" : "\n Sets whether the menu should reserve space for drawing toggles\n or icons, regardless of their actual presence.\n Since 2.18\n Params:\n reserveToggleSize = whether to reserve size for toggles\n\t \n",
"line" : 449}
,
{
"name" : "getReserveToggleSize",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the menu reserves space for toggles and\n icons, regardless of their actual presence.\n Since 2.18\n Returns: Whether the menu reserves toggle space\n\t \n",
"line" : 461}
,
{
"name" : "popdown",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Removes the menu from the screen.\n\t \n",
"line" : 470}
,
{
"name" : "reposition",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Repositions the menu according to its position function.\n\t \n",
"line" : 479}
,
{
"name" : "getActive",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Returns the selected menu item from the menu. This is used by the\n GtkOptionMenu.\n Returns the selected menu item from the menu. This is used by the\n GtkOptionMenu.\n Returns: the GtkMenuItem that was last selected in the menu. If a selection has not yet been made, the first menu item is selected. [transfer none]\n\t \n",
"line" : 492}
,
{
"name" : "setActive",
"kind" : "function",
"protection" : "public",
"type" : "void(uint index)",
"comment" : "\n Selects the specified menu item within the menu. This is used by the\n GtkOptionMenu and should not be used by anyone else.\n Params:\n index = the index of the menu item to select. Index values are from\n 0 to n-1.\n\t \n",
"line" : 510}
,
{
"name" : "setTearoffState",
"kind" : "function",
"protection" : "public",
"type" : "void(int tornOff)",
"comment" : "\n Changes the tearoff state of the menu. A menu is normally displayed\n as drop down menu which persists as long as the menu is active. It can\n also be displayed as a tearoff menu which persists until it is closed\n or reattached.\n Params:\n tornOff = If TRUE, menu is displayed as a tearoff menu.\n\t \n",
"line" : 524}
,
{
"name" : "attachToWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget attachWidget, extern (C) void function(GtkWidget*, GtkMenu*) detacher)",
"comment" : "\n Attaches the menu to the widget and provides a callback function that will\n be invoked when the menu calls gtk_menu_detach() during its destruction.\n Params:\n attachWidget = the GtkWidget that the menu will be attached to.\n detacher = the user supplied callback function that will be called when\n the menu calls gtk_menu_detach().\n\t \n",
"line" : 538}
,
{
"name" : "detach",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Detaches the menu from the widget to which it had been attached.\n This function will call the callback function, detacher, provided\n when the gtk_menu_attach_to_widget() function was called.\n\t \n",
"line" : 549}
,
{
"name" : "getAttachWidget",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Returns the GtkWidget that the menu is attached to.\n Returns the GtkWidget that the menu is attached to.\n Returns: the GtkWidget that the menu is attached to. [transfer none]\n\t \n",
"line" : 560}
,
{
"name" : "getForAttachWidget",
"kind" : "function",
"protection" : "public",
"type" : "ListG(Widget widget)",
"comment" : "\n Returns a list of the menus which are attached to this widget.\n This list is owned by GTK+ and must not be modified.\n Since 2.6\n Params:\n widget = a GtkWidget\n Returns: the list of menus attached to his widget. [element-type GtkWidget][transfer none]\n\t \n",
"line" : 579}
]
}
]
}
,
{
"name" : "gtk.MenuItem",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/MenuItem.d",
"members" : [
{
"name" : "MenuItem",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkMenuItem widget and the derived widgets are the only valid\n childs for menus. Their function is to correctly handle highlighting,\n alignment, events and submenus.\n As it derives from GtkBin it can hold any valid child widget, altough\n only a few are really useful.\n GtkMenuItem as GtkBuildable\n The GtkMenuItem implementation of the GtkBuildable interface\n supports adding a submenu by specifying \"submenu\" as the \"type\"\n attribute of a <child> element.\n $(DDOC_COMMENT example)\n \n",
"line" : 98,
"base" : "Item",
"interfaces" : [
"ActivatableIF"],
"members" : [
{
"name" : "gtkMenuItem",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkMenuItem*",
"comment" : " the main Gtk struct \n",
"line" : 102}
,
{
"name" : "getMenuItemStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkMenuItem*()",
"line" : 105}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 112}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "MenuItem(GtkMenuItem* gtkMenuItem)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 120}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 138}
,
{
"name" : "actionLabel",
"kind" : "variable",
"protection" : "private",
"type" : "string",
"comment" : " store the action code passed in by the applcation \n",
"line" : 145}
,
{
"name" : "getActionName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : " Gets the application set action code \n",
"line" : 151}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "MenuItem(string label, void delegate(MenuItem) dlg, string action)",
"comment" : "\n Creates a new menu item with a label and a listener and a action.\n used for backward compatibily with DUI.\n\t \n",
"line" : 164}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "MenuItem(void delegate(MenuItem) dlg, string label, string action, bool mnemonic = true, AccelGroup accelGroup = null, char accelKey = '\\x00', GdkModifierType modifierType = cast(GdkModifierType)4, GtkAccelFlags accelFlags = cast(GtkAccelFlags)1)",
"comment" : "\n Creates a new Item associated with a \"activate\" delegate and with a action code\n and optionally accelGroup\n\t \n",
"line" : 177}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "MenuItem(void delegate(MenuItem) dlg, string label, bool mnemonic = true)",
"comment" : "\n Creates a new Item associated with a \"activate\" delegate\n\t \n",
"line" : 199}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "MenuItem(string label, bool mnemonic = true)",
"comment" : "\n Creates a new GtkMenuItem whose child is a GtkLabel.\n Params:\n  label = the text for the label\n  mnemonic = if true the label\n  will be created using gtk_label_new_with_mnemonic(), so underscores\n  in label indicate the mnemonic for the menu item.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 214}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 241}
,
{
"name" : "onActivateListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(MenuItem)[]",
"line" : 243}
,
{
"name" : "addOnActivate",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(MenuItem) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when the item is activated.\n\t \n",
"line" : 247}
,
{
"name" : "callBackActivate",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkMenuItem* menuitemStruct, MenuItem menuItem)",
"line" : 262}
,
{
"name" : "onActivateItemListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(MenuItem)[]",
"line" : 270}
,
{
"name" : "addOnActivateItem",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(MenuItem) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when the item is activated, but also if the menu item has a\n submenu. For normal applications, the relevant signal is \"activate\".\n\t \n",
"line" : 275}
,
{
"name" : "callBackActivateItem",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkMenuItem* menuitemStruct, MenuItem menuItem)",
"line" : 290}
,
{
"name" : "onToggleSizeAllocateListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(int, MenuItem)[]",
"line" : 298}
,
{
"name" : "addOnToggleSizeAllocate",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(int, MenuItem) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 301}
,
{
"name" : "callBackToggleSizeAllocate",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkMenuItem* menuitemStruct, int arg1, MenuItem menuItem)",
"line" : 316}
,
{
"name" : "onToggleSizeRequestListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(void*, MenuItem)[]",
"line" : 324}
,
{
"name" : "addOnToggleSizeRequest",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(void*, MenuItem) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n See Also\n GtkBin\n for how to handle the child.\n GtkItem\n is the abstract class for all sorts of items.\n GtkMenuShell\n is always the parent of GtkMenuItem.\n\t \n",
"line" : 334}
,
{
"name" : "callBackToggleSizeRequest",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkMenuItem* menuitemStruct, void* arg1, MenuItem menuItem)",
"line" : 349}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "MenuItem()",
"comment" : "\n Creates a new GtkMenuItem.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 362}
,
{
"name" : "setRightJustified",
"kind" : "function",
"protection" : "public",
"type" : "void(int rightJustified)",
"comment" : "\n Sets whether the menu item appears justified at the right\n side of a menu bar. This was traditionally done for \"Help\" menu\n items, but is now considered a bad idea. (If the widget\n layout is reversed for a right-to-left language like Hebrew\n or Arabic, right-justified-menu-items appear at the left.)\n Params:\n rightJustified = if TRUE the menu item will appear at the\n far right if added to a menu bar.\n\t \n",
"line" : 383}
,
{
"name" : "getRightJustified",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets whether the menu item appears justified at the right\n side of the menu bar.\n Returns: TRUE if the menu item will appear at the far right if added to a menu bar.\n\t \n",
"line" : 394}
,
{
"name" : "getLabel",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Sets text on the menu_item label\n Since 2.16\n Returns: The text in the menu_item label. This is the internal string used by the label, and must not be modified.\n\t \n",
"line" : 405}
,
{
"name" : "setLabel",
"kind" : "function",
"protection" : "public",
"type" : "void(string label)",
"comment" : "\n Sets text on the menu_item label\n Since 2.16\n Params:\n label = the text you want to set\n\t \n",
"line" : 417}
,
{
"name" : "getUseUnderline",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Checks if an underline in the text indicates the next character should be\n used for the mnemonic accelerator key.\n Since 2.16\n Returns: TRUE if an embedded underline in the label indicates the mnemonic accelerator key.\n\t \n",
"line" : 429}
,
{
"name" : "setUseUnderline",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n If true, an underline in the text indicates the next character should be\n used for the mnemonic accelerator key.\n Since 2.16\n Params:\n setting = TRUE if underlines in the text indicate mnemonics\n\t \n",
"line" : 442}
,
{
"name" : "setSubmenu",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget submenu)",
"comment" : "\n Sets or replaces the menu item's submenu, or removes it when a NULL\n submenu is passed.\n Params:\n submenu = the submenu, or NULL. [allow-none]\n\t \n",
"line" : 454}
,
{
"name" : "getSubmenu",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Gets the submenu underneath this menu item, if any.\n See gtk_menu_item_set_submenu().\n Returns: submenu for this menu item, or NULL if none. [transfer none]\n\t \n",
"line" : 465}
,
{
"name" : "removeSubmenu",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_menu_item_remove_submenu has been deprecated since version 2.12 and should not be used in newly-written code. gtk_menu_item_remove_submenu() is deprecated and\n  should not be used in newly written code. Use\n  gtk_menu_item_set_submenu() instead.\n Removes the widget's submenu.\n\t \n",
"line" : 483}
,
{
"name" : "setAccelPath",
"kind" : "function",
"protection" : "public",
"type" : "void(string accelPath)",
"comment" : "\n Set the accelerator path on menu_item, through which runtime changes of the\n menu item's accelerator caused by the user can be identified and saved to\n persistant storage (see gtk_accel_map_save() on this).\n To setup a default accelerator for this menu item, call\n gtk_accel_map_add_entry() with the same accel_path.\n See also gtk_accel_map_add_entry() on the specifics of accelerator paths,\n and gtk_menu_set_accel_path() for a more convenient variant of this function.\n This function is basically a convenience wrapper that handles calling\n gtk_widget_set_accel_path() with the appropriate accelerator group for\n the menu item.\n Note that you do need to set an accelerator on the parent menu with\n gtk_menu_set_accel_group() for this to work.\n Note that accel_path string will be stored in a GQuark. Therefore, if you\n pass a static string, you can save some memory by interning it first with\n g_intern_static_string().\n Params:\n accelPath = accelerator path, corresponding to this menu item's\n functionality, or NULL to unset the current path. [allow-none]\n\t \n",
"line" : 509}
,
{
"name" : "getAccelPath",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Retrieve the accelerator path that was previously set on menu_item.\n See gtk_menu_item_set_accel_path() for details.\n Since 2.14\n Returns: the accelerator path corresponding to this menu item's functionality, or NULL if not set\n\t \n",
"line" : 521}
,
{
"name" : "select",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Emits the \"select\" signal on the given item. Behaves exactly like\n gtk_item_select.\n\t \n",
"line" : 531}
,
{
"name" : "deselect",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Emits the \"deselect\" signal on the given item. Behaves exactly like\n gtk_item_deselect.\n\t \n",
"line" : 541}
,
{
"name" : "itemActivate",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Emits the \"activate\" signal on the given item\n\t \n",
"line" : 550}
,
{
"name" : "toggleSizeRequest",
"kind" : "function",
"protection" : "public",
"type" : "void(int* requisition)",
"comment" : "\n Emits the \"toggle_size_request\" signal on the given item.\n Params:\n requisition = the requisition to use as signal data.\n\t \n",
"line" : 561}
,
{
"name" : "toggleSizeAllocate",
"kind" : "function",
"protection" : "public",
"type" : "void(int allocation)",
"comment" : "\n Emits the \"toggle_size_allocate\" signal on the given item.\n Params:\n allocation = the allocation to use as signal data.\n\t \n",
"line" : 572}
]
}
]
}
,
{
"name" : "gtk.MenuShell",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/MenuShell.d",
"members" : [
{
"name" : "MenuShell",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkMenuShell is the abstract base class used to derive the\n GtkMenu and GtkMenuBar subclasses.\n A GtkMenuShell is a container of GtkMenuItem objects arranged in a\n list which can be navigated, selected, and activated by the user to perform\n application functions. A GtkMenuItem can have a submenu associated with it,\n allowing for nested hierarchical menus.\n \n",
"line" : 80,
"base" : "Container",
"members" : [
{
"name" : "gtkMenuShell",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkMenuShell*",
"comment" : " the main Gtk struct \n",
"line" : 84}
,
{
"name" : "getMenuShellStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkMenuShell*()",
"line" : 87}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 94}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "MenuShell(GtkMenuShell* gtkMenuShell)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 102}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 120}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 128}
,
{
"name" : "onActivateCurrentListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(int, MenuShell)[]",
"line" : 130}
,
{
"name" : "addOnActivateCurrent",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(int, MenuShell) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n An action signal that activates the current menu item within the menu\n shell.\n\t \n",
"line" : 135}
,
{
"name" : "callBackActivateCurrent",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkMenuShell* menushellStruct, int arg1, MenuShell menuShell)",
"line" : 150}
,
{
"name" : "onCancelListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(MenuShell)[]",
"line" : 158}
,
{
"name" : "addOnCancel",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(MenuShell) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n An action signal which cancels the selection within the menu shell.\n Causes the GtkMenuShell::selection-done signal to be emitted.\n\t \n",
"line" : 163}
,
{
"name" : "callBackCancel",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkMenuShell* menushellStruct, MenuShell menuShell)",
"line" : 178}
,
{
"name" : "onCycleFocusListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkDirectionType, MenuShell)[]",
"line" : 186}
,
{
"name" : "addOnCycleFocus",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkDirectionType, MenuShell) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 189}
,
{
"name" : "callBackCycleFocus",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkMenuShell* menushellStruct, GtkDirectionType arg1, MenuShell menuShell)",
"line" : 204}
,
{
"name" : "onDeactivateListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(MenuShell)[]",
"line" : 212}
,
{
"name" : "addOnDeactivate",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(MenuShell) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted when a menu shell is deactivated.\n\t \n",
"line" : 216}
,
{
"name" : "callBackDeactivate",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkMenuShell* menushellStruct, MenuShell menuShell)",
"line" : 231}
,
{
"name" : "onMoveCurrentListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkMenuDirectionType, MenuShell)[]",
"line" : 239}
,
{
"name" : "addOnMoveCurrent",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkMenuDirectionType, MenuShell) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n An action signal which moves the current menu item in the direction\n specified by direction.\n\t \n",
"line" : 244}
,
{
"name" : "callBackMoveCurrent",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkMenuShell* menushellStruct, GtkMenuDirectionType arg1, MenuShell menuShell)",
"line" : 259}
,
{
"name" : "onMoveSelectedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(int, MenuShell)[]",
"line" : 267}
,
{
"name" : "addOnMoveSelected",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(int, MenuShell) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::move-selected signal is emitted to move the selection to\n another item.\n TRUE to stop the signal emission, FALSE to continue\n Since 2.12\n\t \n",
"line" : 274}
,
{
"name" : "callBackMoveSelected",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkMenuShell* menuShellStruct, int distance, MenuShell menuShell)",
"line" : 289}
,
{
"name" : "onSelectionDoneListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(MenuShell)[]",
"line" : 302}
,
{
"name" : "addOnSelectionDone",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(MenuShell) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted when a selection has been completed within a menu\n shell.\n\t \n",
"line" : 307}
,
{
"name" : "callBackSelectionDone",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkMenuShell* menushellStruct, MenuShell menuShell)",
"line" : 322}
,
{
"name" : "append",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child)",
"comment" : "\n Adds a new GtkMenuItem to the end of the menu shell's item list.\n Params:\n child = The GtkMenuItem to add.\n\t \n",
"line" : 336}
,
{
"name" : "prepend",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child)",
"comment" : "\n Adds a new GtkMenuItem to the beginning of the menu shell's item list.\n Params:\n child = The GtkMenuItem to add.\n\t \n",
"line" : 347}
,
{
"name" : "insert",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, int position)",
"comment" : "\n Adds a new GtkMenuItem to the menu shell's item list at the position\n indicated by position.\n Params:\n child = The GtkMenuItem to add.\n position = The position in the item list where child is added.\n Positions are numbered from 0 to n-1.\n\t \n",
"line" : 361}
,
{
"name" : "deactivate",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Deactivates the menu shell. Typically this results in the menu shell\n being erased from the screen.\n\t \n",
"line" : 371}
,
{
"name" : "selectItem",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget menuItem)",
"comment" : "\n Selects the menu item from the menu shell.\n Params:\n menuItem = The GtkMenuItem to select.\n\t \n",
"line" : 382}
,
{
"name" : "selectFirst",
"kind" : "function",
"protection" : "public",
"type" : "void(int searchSensitive)",
"comment" : "\n Select the first visible or selectable child of the menu shell;\n don't select tearoff items unless the only item is a tearoff\n item.\n Since 2.2\n Params:\n searchSensitive = if TRUE, search for the first selectable\n menu item, otherwise select nothing if\n the first item isn't sensitive. This\n should be FALSE if the menu is being\n popped up initially.\n\t \n",
"line" : 400}
,
{
"name" : "deselect",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Deselects the currently selected item from the menu shell, if any.\n\t \n",
"line" : 409}
,
{
"name" : "activateItem",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget menuItem, int forceDeactivate)",
"comment" : "\n Activates the menu item within the menu shell.\n Params:\n menuItem = The GtkMenuItem to activate.\n forceDeactivate = If TRUE, force the deactivation of the menu shell\n after the menu item is activated.\n\t \n",
"line" : 422}
,
{
"name" : "cancel",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Cancels the selection within the menu shell.\n Since 2.4\n\t \n",
"line" : 432}
,
{
"name" : "setTakeFocus",
"kind" : "function",
"protection" : "public",
"type" : "void(int takeFocus)",
"comment" : "\n If take_focus is TRUE (the default) the menu shell will take the keyboard\n focus so that it will receive all keyboard events which is needed to enable\n keyboard navigation in menus.\n Setting take_focus to FALSE is useful only for special applications\n like virtual keyboard implementations which should not take keyboard\n focus.\n The take_focus state of a menu or menu bar is automatically propagated\n to submenus whenever a submenu is popped up, so you don't have to worry\n about recursively setting it for your entire menu hierarchy. Only when\n programmatically picking a submenu and popping it up manually, the\n take_focus property of the submenu needs to be set explicitely.\n Since 2.8\n Params:\n takeFocus = TRUE if the menu shell should take the keyboard focus on popup.\n\t \n",
"line" : 454}
,
{
"name" : "getTakeFocus",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns TRUE if the menu shell will take the keyboard focus on popup.\n Since 2.8\n Returns: TRUE if the menu shell will take the keyboard focus on popup.\n\t \n",
"line" : 465}
]
}
]
}
,
{
"name" : "gtk.MenuToolButton",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/MenuToolButton.d",
"members" : [
{
"name" : "MenuToolButton",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n  A GtkMenuToolButton is a GtkToolItem that contains a button and\n  a small additional button with an arrow. When clicked, the arrow\n  button pops up a dropdown menu.\n  Use gtk_menu_tool_button_new() to create a new\n  GtkMenuToolButton. Use gtk_menu_tool_button_new_from_stock() to\n  create a new GtkMenuToolButton containing a stock item.\n GtkMenuToolButton as GtkBuildable\n The GtkMenuToolButton implementation of the GtkBuildable interface\n supports adding a menu by specifying \"menu\" as the \"type\"\n attribute of a <child> element.\n $(DDOC_COMMENT example)\n \n",
"line" : 98,
"base" : "ToolButton",
"members" : [
{
"name" : "gtkMenuToolButton",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkMenuToolButton*",
"comment" : " the main Gtk struct \n",
"line" : 102}
,
{
"name" : "getMenuToolButtonStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkMenuToolButton*()",
"line" : 105}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 112}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "MenuToolButton(GtkMenuToolButton* gtkMenuToolButton)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 120}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 138}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "MenuToolButton(Widget iconWidget, string label)",
"comment" : "\n Creates a new GtkMenuToolButton using icon_widget as icon and\n label as label.\n Since 2.6\n Params:\n  iconWidget = a widget that will be used as icon widget, or NULL\n  label = a string that will be used as label, or NULL\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 153}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "MenuToolButton(StockID stockId)",
"comment" : "\n Creates a new GtkMenuToolButton.\n The new GtkMenuToolButton will contain an icon and label from\n the stock item indicated by stockID.\n Since 2.6\n Params:\n stockID = the name of a stock item\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 176}
,
{
"name" : "getMenu",
"kind" : "function",
"protection" : "public",
"type" : "Menu()",
"comment" : "\n Gets the GtkMenu associated with GtkMenuToolButton.\n Since 2.6\n Params:\n  button = a GtkMenuToolButton\n Returns:\n  the GtkMenu associated with GtkMenuToolButton\n\t \n",
"line" : 198}
,
{
"name" : "setArrowTooltip",
"kind" : "function",
"protection" : "public",
"type" : "void(string tipText, string tipPrivate)",
"comment" : "\n Sets the toolTip for the arrow\n Deprecated: Since 2.12 use Widget.setArrowTooltipText() or Widget.setArrowTooltipMarkup()\n Params:\n    \ttipText =\n    \ttipPrivate =\n\t \n",
"line" : 216}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 229}
,
{
"name" : "onShowMenuListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(MenuToolButton)[]",
"line" : 231}
,
{
"name" : "addOnShowMenu",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(MenuToolButton) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::show-menu signal is emitted before the menu is shown.\n It can be used to populate the menu on demand, using\n gtk_menu_tool_button_get_menu().\n Note that even if you populate the menu dynamically in this way,\n you must set an empty menu on the GtkMenuToolButton beforehand,\n since the arrow is made insensitive if the menu is not set.\n See Also\n\n GtkToolbar, GtkToolButton\n The toolbar widget\n  The parent class of GtkMenuToolButton. The properties\n  \"label_widget\", \"label\", \"icon_widget\", and \"stock_id\" on\n  GtkToolButton determine the label and icon used on\n  GtkMenuToolButtons.\n\n\t \n",
"line" : 249}
,
{
"name" : "callBackShowMenu",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkMenuToolButton* buttonStruct, MenuToolButton menuToolButton)",
"line" : 264}
,
{
"name" : "setMenu",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget menu)",
"comment" : "\n Sets the GtkMenu that is popped up when the user clicks on the arrow.\n If menu is NULL, the arrow button becomes insensitive.\n Since 2.6\n Params:\n menu = the GtkMenu associated with GtkMenuToolButton\n\t \n",
"line" : 280}
,
{
"name" : "setArrowTooltip",
"kind" : "function",
"protection" : "public",
"type" : "void(Tooltips tooltips, string tipText, string tipPrivate)",
"comment" : "\n Warning\n gtk_menu_tool_button_set_arrow_tooltip has been deprecated since version 2.12 and should not be used in newly-written code. Use gtk_menu_tool_button_set_arrow_tooltip_text()\n instead.\n Sets the GtkTooltips object to be used for arrow button which\n pops up the menu. See gtk_tool_item_set_tooltip() for setting\n a tooltip on the whole GtkMenuToolButton.\n Since 2.6\n Params:\n tooltips = the GtkTooltips object to be used\n tipText = text to be used as tooltip text for tool_item. [allow-none]\n tipPrivate = text to be used as private tooltip text. [allow-none]\n\t \n",
"line" : 299}
,
{
"name" : "setArrowTooltipText",
"kind" : "function",
"protection" : "public",
"type" : "void(string text)",
"comment" : "\n Sets the tooltip text to be used as tooltip for the arrow button which\n pops up the menu. See gtk_tool_item_set_tooltip() for setting a tooltip\n on the whole GtkMenuToolButton.\n Since 2.12\n Params:\n text = text to be used as tooltip text for button's arrow button\n\t \n",
"line" : 313}
,
{
"name" : "setArrowTooltipMarkup",
"kind" : "function",
"protection" : "public",
"type" : "void(string markup)",
"comment" : "\n Sets the tooltip markup text to be used as tooltip for the arrow button\n which pops up the menu. See gtk_tool_item_set_tooltip() for setting a\n tooltip on the whole GtkMenuToolButton.\n Since 2.12\n Params:\n markup = markup text to be used as tooltip text for button's arrow button\n\t \n",
"line" : 327}
]
}
]
}
,
{
"name" : "gtk.MessageDialog",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/MessageDialog.d",
"members" : [
{
"name" : "MessageDialog",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkMessageDialog presents a dialog with an image representing the type of\n message (Error, Question, etc.) alongside some message text. It's simply a\n convenience widget; you could construct the equivalent of GtkMessageDialog\n from GtkDialog without too much effort, but GtkMessageDialog saves typing.\n The easiest way to do a modal message dialog is to use gtk_dialog_run(), though\n you can also pass in the GTK_DIALOG_MODAL flag, gtk_dialog_run() automatically\n makes the dialog modal and waits for the user to respond to it. gtk_dialog_run()\n returns when any dialog button is clicked.\n $(DDOC_COMMENT example)\n You might do a non-modal GtkMessageDialog as follows:\n $(DDOC_COMMENT example)\n GtkMessageDialog as GtkBuildable\n The GtkMessageDialog implementation of the GtkBuildable interface exposes\n the message area as an internal child with the name \"message_area\".\n \n",
"line" : 96,
"base" : "Dialog",
"members" : [
{
"name" : "gtkMessageDialog",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkMessageDialog*",
"comment" : " the main Gtk struct \n",
"line" : 100}
,
{
"name" : "getMessageDialogStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkMessageDialog*()",
"line" : 103}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 110}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "MessageDialog(GtkMessageDialog* gtkMessageDialog)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 118}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 136}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "MessageDialog(Window parent, GtkDialogFlags flags, GtkMessageType type, GtkButtonsType buttons, string messageFormat, string message = null)",
"comment" : "\n Creates a new message dialog, which is a simple dialog with an icon\n indicating the dialog type (error, warning, etc.) and some text the\n user may want to see. When the user clicks a button a \"response\"\n signal is emitted with response IDs from GtkResponseType. See\n GtkDialog for more details.\n Params:\n    \tparent = transient parent, or NULL for none\n    \tflags = flags\n    \ttype = type of message\n    \tbuttons= set of buttons to use\n    \tmessageFormat = printf()-style format string, or NULL\n    \tmessage = the message - should be null, any formatting should be done prior to call this constructor\n  arguments for message_format\n Returns:\n  a new GtkMessageDialog\n\t \n",
"line" : 159}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "MessageDialog(Window parent, GtkDialogFlags flags, GtkMessageType type, GtkButtonsType buttons, bool markup, string messageFormat, string message = null)",
"comment" : "\n Creates a new message dialog, which is a simple dialog with an icon\n indicating the dialog type (error, warning, etc.) and some text which\n is marked up with the Pango text markup language.\n When the user clicks a button a \"response\" signal is emitted with\n response IDs from GtkResponseType. See GtkDialog for more details.\n\n If Markup is true special XML characters in the printf() arguments passed to this\n function will automatically be escaped as necessary.\n (See g_markup_printf_escaped() for how this is implemented.)\n Usually this is what you want, but if you have an existing\n Pango markup string that you want to use literally as the\n label, then you need to use gtk_message_dialog_set_markup()\n instead, since you can't pass the markup string either\n as the format (it might contain '%' characters) or as a string\n argument.\n Since 2.4\n Examples:\n --------------------\n  GtkWidget *dialog;\n  dialog = gtk_message_dialog_new (main_application_window,\n  GTK_DIALOG_DESTROY_WITH_PARENT,\n  GTK_MESSAGE_ERROR,\n  GTK_BUTTONS_CLOSE,\n  NULL);\n  gtk_message_dialog_set_markup (GTK_MESSAGE_DIALOG (dialog),\n  markup);\n --------------------\n Params:\n  parent = transient parent, or NULL for none\n  flags = flags\n  type = type of message\n  buttons = set of buttons to use\n  messageFormat = printf()-style format string, or NULL\n  message = the message - should be null, any formatting should be done prior to call this constructor\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 201}
,
{
"name" : "getMessageArea",
"kind" : "function",
"protection" : "public",
"type" : "VBox()",
"comment" : "\n Since 2.22\n Returns: A GtkVBox corresponding to the \"message area\" in the message_dialog. This is the box where the dialog's primary and secondary labels are packed. You can add your own extra content to that box and it will appear below those labels, on the right side of the dialog's image (or on the left for right-to-left languages). See gtk_dialog_get_content_area() for the corresponding function in the parent GtkDialog.\n\t \n",
"line" : 244}
,
{
"name" : "setMarkup",
"kind" : "function",
"protection" : "public",
"type" : "void(string str)",
"comment" : "\n\t \n\n Sets the text of the message dialog to be str, which is marked\n up with the Pango text markup\n language.\n Since 2.4\n Params:\n str = markup string (see Pango markup format)\n\t \n",
"line" : 266}
,
{
"name" : "setImage",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget image)",
"comment" : "\n Sets the dialog's image to image.\n Since 2.10\n Params:\n image = the image\n\t \n",
"line" : 278}
,
{
"name" : "getImage",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Gets the dialog's image.\n Since 2.14\n Returns: the dialog's image. [transfer none]\n\t \n",
"line" : 289}
]
}
]
}
,
{
"name" : "gtk.Misc",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Misc.d",
"members" : [
{
"name" : "Misc",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkMisc widget is an abstract widget which is not useful itself, but\n is used to derive subclasses which have alignment and padding attributes.\n The horizontal and vertical padding attributes allows extra space to be\n added around the widget.\n The horizontal and vertical alignment attributes enable the widget to be\n positioned within its allocated area. Note that if the widget is added to\n a container in such a way that it expands automatically to fill its\n allocated area, the alignment settings will not alter the widgets position.\n \n",
"line" : 77,
"base" : "Widget",
"members" : [
{
"name" : "gtkMisc",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkMisc*",
"comment" : " the main Gtk struct \n",
"line" : 81}
,
{
"name" : "getMiscStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkMisc*()",
"line" : 84}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 91}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Misc(GtkMisc* gtkMisc)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 99}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 117}
,
{
"name" : "setAlignment",
"kind" : "function",
"protection" : "public",
"type" : "void(float xalign, float yalign)",
"comment" : "\n\t \n\n Sets the alignment of the widget.\n Params:\n xalign = the horizontal alignment, from 0 (left) to 1 (right).\n yalign = the vertical alignment, from 0 (top) to 1 (bottom).\n\t \n",
"line" : 132}
,
{
"name" : "setPadding",
"kind" : "function",
"protection" : "public",
"type" : "void(int xpad, int ypad)",
"comment" : "\n Sets the amount of space to add around the widget.\n Params:\n xpad = the amount of space to add on the left and right of the widget,\n in pixels.\n ypad = the amount of space to add on the top and bottom of the widget,\n in pixels.\n\t \n",
"line" : 146}
,
{
"name" : "getAlignment",
"kind" : "function",
"protection" : "public",
"type" : "void(out float xalign, out float yalign)",
"comment" : "\n Gets the X and Y alignment of the widget within its allocation.\n See gtk_misc_set_alignment().\n Params:\n xalign = location to store X alignment of misc, or NULL. [out][allow-none]\n yalign = location to store Y alignment of misc, or NULL. [out][allow-none]\n\t \n",
"line" : 159}
,
{
"name" : "getPadding",
"kind" : "function",
"protection" : "public",
"type" : "void(out int xpad, out int ypad)",
"comment" : "\n Gets the padding in the X and Y directions of the widget.\n See gtk_misc_set_padding().\n Params:\n xpad = location to store padding in the X\n direction, or NULL. [out][allow-none]\n ypad = location to store padding in the Y\n direction, or NULL. [out][allow-none]\n\t \n",
"line" : 174}
]
}
]
}
,
{
"name" : "gtk.MountOperation",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/MountOperation.d",
"members" : [
{
"name" : "MountOperation",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The functions and objects described here make working with GTK+ and\n GIO more convenient.\n GtkMountOperation is needed when mounting volumes:\n It is an implementation of GMountOperation that can be used with\n GIO functions for mounting volumes such as\n g_file_mount_enclosing_volume(), g_file_mount_mountable(),\n g_volume_mount(), g_mount_unmount_with_operation() and others.\n When necessary, GtkMountOperation shows dialogs to ask for\n passwords, questions or show processes blocking unmount.\n gtk_show_uri() is a convenient way to launch applications for URIs.\n Another object that is worth mentioning in this context is\n GdkAppLaunchContext, which provides visual feedback when lauching\n applications.\n \n",
"line" : 95,
"base" : "MountOperation",
"members" : [
{
"name" : "gtkMountOperation",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkMountOperation*",
"comment" : " the main Gtk struct \n",
"line" : 99}
,
{
"name" : "getGtkMountOperationStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkMountOperation*()",
"line" : 102}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 109}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "MountOperation(GtkMountOperation* gtkMountOperation)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 117}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 135}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "MountOperation(Window parent)",
"comment" : "\n\t \n\n Creates a new GtkMountOperation\n Since 2.14\n Params:\n parent = transient parent of the window, or NULL. [allow-none]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 151}
,
{
"name" : "isShowing",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the GtkMountOperation is currently displaying\n a window.\n Since 2.14\n Returns: TRUE if op is currently displaying a window\n\t \n",
"line" : 168}
,
{
"name" : "setParent",
"kind" : "function",
"protection" : "public",
"type" : "void(Window parent)",
"comment" : "\n Sets the transient parent for windows shown by the\n GtkMountOperation.\n Since 2.14\n Params:\n parent = transient parent of the window, or NULL. [allow-none]\n\t \n",
"line" : 181}
,
{
"name" : "getParent",
"kind" : "function",
"protection" : "public",
"type" : "Window()",
"comment" : "\n Gets the transient parent used by the GtkMountOperation\n Since 2.14\n Returns: the transient parent for windows shown by op. [transfer none]\n\t \n",
"line" : 192}
,
{
"name" : "setScreen",
"kind" : "function",
"protection" : "public",
"type" : "void(Screen screen)",
"comment" : "\n Sets the screen to show windows of the GtkMountOperation on.\n Since 2.14\n Params:\n screen = a GdkScreen\n\t \n",
"line" : 209}
,
{
"name" : "getScreen",
"kind" : "function",
"protection" : "public",
"type" : "Screen()",
"comment" : "\n Gets the screen on which windows of the GtkMountOperation\n will be shown.\n Since 2.14\n Returns: the screen on which windows of op are shown. [transfer none]\n\t \n",
"line" : 221}
,
{
"name" : "showUri",
"kind" : "function",
"protection" : "public",
"type" : "int(Screen screen, string uri, uint timestamp)",
"comment" : "\n This is a convenience function for launching the default application\n to show the uri. The uri must be of a form understood by GIO (i.e. you\n need to install gvfs to get support for uri schemes such as http:\/\/\n or ftp:\/\/, as only local files are handled by GIO itself).\n Typical examples are\n file:\/\/\/home\/gnome\/pict.jpg\n http:\/\/www.gnome.org\n mailto:me@gnome.org\n Ideally the timestamp is taken from the event triggering\n the gtk_show_uri() call. If timestamp is not known you can take\n GDK_CURRENT_TIME.\n This function can be used as a replacement for gnome_vfs_url_show()\n and gnome_url_show().\n Since 2.14\n Params:\n screen = screen to show the uri on or NULL for the default screen. [allow-none]\n uri = the uri to show\n timestamp = a timestamp to prevent focus stealing.\n Returns: TRUE on success, FALSE on error.\n Throws: GException on failure.\n\t \n",
"line" : 254}
]
}
]
}
,
{
"name" : "gtk.Notebook",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Notebook.d",
"members" : [
{
"name" : "Notebook",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkNotebook widget is a GtkContainer whose children are pages that\n can be switched between using tab labels along one edge.\n There are many configuration options for GtkNotebook. Among other\n things, you can choose on which edge the tabs appear\n (see gtk_notebook_set_tab_pos()), whether, if there are too many\n tabs to fit the notebook should be made bigger or scrolling\n arrows added (see gtk_notebook_set_scrollable), and whether there\n will be a popup menu allowing the users to switch pages.\n (see gtk_notebook_popup_enable(), gtk_notebook_popup_disable())\n GtkNotebook as GtkBuildable\n The GtkNoteboopk implementation of the GtkBuildable interface\n supports placing children into tabs by specifying \"tab\" as the\n \"type\" attribute of a <child> element. Note that the content\n of the tab must be created before the tab can be filled.\n A tab child can be specified without specifying a <child>\n type attribute.\n To add a child widget in the notebooks action area, specify\n \"action-start\" or \"action-end\" as the \"type\" attribute of the <child>\n element.\n $(DDOC_COMMENT example)\n \n",
"line" : 98,
"base" : "Container",
"members" : [
{
"name" : "gtkNotebook",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkNotebook*",
"comment" : " the main Gtk struct \n",
"line" : 102}
,
{
"name" : "getNotebookStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkNotebook*()",
"line" : 105}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 112}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Notebook(GtkNotebook* gtkNotebook)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 120}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 138}
,
{
"name" : "GtkNotebookTab",
"kind" : "enum",
"protection" : "public",
"comment" : " The GtkNotebookTab is not documented \n",
"line" : 146,
"base" : "int",
"members" : [
{
"name" : "GTK_NOTEBOOK_TAB_FIRST",
"kind" : "enum member",
"protection" : "public",
"line" : 147}
,
{
"name" : "GTK_NOTEBOOK_TAB_LAST",
"kind" : "enum member",
"protection" : "public",
"line" : 148}
]
}
,
{
"name" : "NotebookTab",
"kind" : "alias",
"protection" : "public",
"type" : "GtkNotebookTab",
"line" : 150}
,
{
"name" : "appendPage",
"kind" : "function",
"protection" : "public",
"type" : "int(Widget child, string tabLabel)",
"comment" : "\n Append a page with a widget and a text for a label\n\t \n",
"line" : 155}
,
{
"name" : "setCurrentPage",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child)",
"comment" : " \n",
"line" : 161}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 168}
,
{
"name" : "onChangeCurrentPageListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(int, Notebook)[]",
"line" : 170}
,
{
"name" : "addOnChangeCurrentPage",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(int, Notebook) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 173}
,
{
"name" : "callBackChangeCurrentPage",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkNotebook* notebookStruct, int arg1, Notebook notebook)",
"line" : 188}
,
{
"name" : "onCreateWindowListeners",
"kind" : "variable",
"protection" : "public",
"type" : "GtkNotebook* delegate(Widget, int, int, Notebook)[]",
"line" : 201}
,
{
"name" : "addOnCreateWindow",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkNotebook* delegate(Widget, int, int, Notebook) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::create-window signal is emitted when a detachable\n tab is dropped on the root window.\n A handler for this signal can create a window containing\n a notebook where the tab will be attached. It is also\n responsible for moving\/resizing the window and adding the\n necessary properties to the notebook (e.g. the\n \"group\" ).\n The default handler uses the global window creation hook,\n if one has been set with gtk_notebook_set_window_creation_hook().\n Since 2.12\n\t \n",
"line" : 214}
,
{
"name" : "callBackCreateWindow",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkNotebook* notebookStruct, GtkWidget* page, int x, int y, Notebook notebook)",
"line" : 229}
,
{
"name" : "onFocusTabListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GtkNotebookTab, Notebook)[]",
"line" : 237}
,
{
"name" : "addOnFocusTab",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GtkNotebookTab, Notebook) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 240}
,
{
"name" : "callBackFocusTab",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkNotebook* notebookStruct, GtkNotebookTab arg1, Notebook notebook)",
"line" : 255}
,
{
"name" : "onMoveFocusOutListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkDirectionType, Notebook)[]",
"line" : 268}
,
{
"name" : "addOnMoveFocusOut",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkDirectionType, Notebook) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 271}
,
{
"name" : "callBackMoveFocusOut",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkNotebook* notebookStruct, GtkDirectionType arg1, Notebook notebook)",
"line" : 286}
,
{
"name" : "onPageAddedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Widget, uint, Notebook)[]",
"line" : 294}
,
{
"name" : "addOnPageAdded",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Widget, uint, Notebook) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n the ::page-added signal is emitted in the notebook\n right after a page is added to the notebook.\n Since 2.10\n\t \n",
"line" : 300}
,
{
"name" : "callBackPageAdded",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkNotebook* notebookStruct, GtkWidget* child, uint pageNum, Notebook notebook)",
"line" : 315}
,
{
"name" : "onPageRemovedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Widget, uint, Notebook)[]",
"line" : 323}
,
{
"name" : "addOnPageRemoved",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Widget, uint, Notebook) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n the ::page-removed signal is emitted in the notebook\n right after a page is removed from the notebook.\n Since 2.10\n\t \n",
"line" : 329}
,
{
"name" : "callBackPageRemoved",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkNotebook* notebookStruct, GtkWidget* child, uint pageNum, Notebook notebook)",
"line" : 344}
,
{
"name" : "onPageReorderedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Widget, uint, Notebook)[]",
"line" : 352}
,
{
"name" : "addOnPageReordered",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Widget, uint, Notebook) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n the ::page-reordered signal is emitted in the notebook\n right after a page has been reordered.\n Since 2.10\n\t \n",
"line" : 358}
,
{
"name" : "callBackPageReordered",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkNotebook* notebookStruct, GtkWidget* child, uint pageNum, Notebook notebook)",
"line" : 373}
,
{
"name" : "onReorderTabListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GtkDirectionType, int, Notebook)[]",
"line" : 381}
,
{
"name" : "addOnReorderTab",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GtkDirectionType, int, Notebook) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 384}
,
{
"name" : "callBackReorderTab",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkNotebook* notebookStruct, GtkDirectionType arg1, int arg2, Notebook notebook)",
"line" : 399}
,
{
"name" : "onSelectPageListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(int, Notebook)[]",
"line" : 412}
,
{
"name" : "addOnSelectPage",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(int, Notebook) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 415}
,
{
"name" : "callBackSelectPage",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkNotebook* notebookStruct, int arg1, Notebook notebook)",
"line" : 430}
,
{
"name" : "onSwitchPageListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(void*, uint, Notebook)[]",
"line" : 443}
,
{
"name" : "addOnSwitchPage",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(void*, uint, Notebook) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when the user or a function changes the current page.\n See Also\n GtkContainer\n For functions that apply to every GtkContainer\n\t \n",
"line" : 450}
,
{
"name" : "callBackSwitchPage",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkNotebook* notebookStruct, void* arg1, uint arg2, Notebook notebook)",
"line" : 465}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Notebook()",
"comment" : "\n Creates a new GtkNotebook widget with no pages.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 478}
,
{
"name" : "appendPage",
"kind" : "function",
"protection" : "public",
"type" : "int(Widget child, Widget tabLabel)",
"comment" : "\n Appends a page to notebook.\n Params:\n child = the GtkWidget to use as the contents of the page.\n tabLabel = the GtkWidget to be used as the label for the page,\n or NULL to use the default label, 'page N'. [allow-none]\n Returns: the index (starting from 0) of the appended page in the notebook, or -1 if function fails\n\t \n",
"line" : 497}
,
{
"name" : "appendPageMenu",
"kind" : "function",
"protection" : "public",
"type" : "int(Widget child, Widget tabLabel, Widget menuLabel)",
"comment" : "\n Appends a page to notebook, specifying the widget to use as the\n label in the popup menu.\n Params:\n child = the GtkWidget to use as the contents of the page.\n tabLabel = the GtkWidget to be used as the label for the page,\n or NULL to use the default label, 'page N'. [allow-none]\n menuLabel = the widget to use as a label for the page-switch\n menu, if that is enabled. If NULL, and tab_label\n is a GtkLabel or NULL, then the menu label will be\n a newly created label with the same text as tab_label;\n If tab_label is not a GtkLabel, menu_label must be\n specified if the page-switch menu is to be used. [allow-none]\n Returns: the index (starting from 0) of the appended page in the notebook, or -1 if function fails\n\t \n",
"line" : 518}
,
{
"name" : "prependPage",
"kind" : "function",
"protection" : "public",
"type" : "int(Widget child, Widget tabLabel)",
"comment" : "\n Prepends a page to notebook.\n Params:\n child = the GtkWidget to use as the contents of the page.\n tabLabel = the GtkWidget to be used as the label for the page,\n or NULL to use the default label, 'page N'. [allow-none]\n Returns: the index (starting from 0) of the prepended page in the notebook, or -1 if function fails\n\t \n",
"line" : 532}
,
{
"name" : "prependPageMenu",
"kind" : "function",
"protection" : "public",
"type" : "int(Widget child, Widget tabLabel, Widget menuLabel)",
"comment" : "\n Prepends a page to notebook, specifying the widget to use as the\n label in the popup menu.\n Params:\n child = the GtkWidget to use as the contents of the page.\n tabLabel = the GtkWidget to be used as the label for the page,\n or NULL to use the default label, 'page N'. [allow-none]\n menuLabel = the widget to use as a label for the page-switch\n menu, if that is enabled. If NULL, and tab_label\n is a GtkLabel or NULL, then the menu label will be\n a newly created label with the same text as tab_label;\n If tab_label is not a GtkLabel, menu_label must be\n specified if the page-switch menu is to be used. [allow-none]\n Returns: the index (starting from 0) of the prepended page in the notebook, or -1 if function fails\n\t \n",
"line" : 553}
,
{
"name" : "insertPage",
"kind" : "function",
"protection" : "public",
"type" : "int(Widget child, Widget tabLabel, int position)",
"comment" : "\n Insert a page into notebook at the given position.\n Params:\n child = the GtkWidget to use as the contents of the page.\n tabLabel = the GtkWidget to be used as the label for the page,\n or NULL to use the default label, 'page N'. [allow-none]\n position = the index (starting at 0) at which to insert the page,\n or -1 to append the page after all other pages.\n Returns: the index (starting from 0) of the inserted page in the notebook, or -1 if function fails\n\t \n",
"line" : 569}
,
{
"name" : "insertPageMenu",
"kind" : "function",
"protection" : "public",
"type" : "int(Widget child, Widget tabLabel, Widget menuLabel, int position)",
"comment" : "\n Insert a page into notebook at the given position, specifying\n the widget to use as the label in the popup menu.\n Params:\n child = the GtkWidget to use as the contents of the page.\n tabLabel = the GtkWidget to be used as the label for the page,\n or NULL to use the default label, 'page N'. [allow-none]\n menuLabel = the widget to use as a label for the page-switch\n menu, if that is enabled. If NULL, and tab_label\n is a GtkLabel or NULL, then the menu label will be\n a newly created label with the same text as tab_label;\n If tab_label is not a GtkLabel, menu_label must be\n specified if the page-switch menu is to be used. [allow-none]\n position = the index (starting at 0) at which to insert the page,\n or -1 to append the page after all other pages.\n Returns: the index (starting from 0) of the inserted page in the notebook\n\t \n",
"line" : 592}
,
{
"name" : "removePage",
"kind" : "function",
"protection" : "public",
"type" : "void(int pageNum)",
"comment" : "\n Removes a page from the notebook given its index\n in the notebook.\n Params:\n pageNum = the index of a notebook page, starting\n from 0. If -1, the last page will\n be removed.\n\t \n",
"line" : 606}
,
{
"name" : "pageNum",
"kind" : "function",
"protection" : "public",
"type" : "int(Widget child)",
"comment" : "\n Finds the index of the page which contains the given child\n widget.\n Params:\n child = a GtkWidget\n Returns: the index of the page containing child, or -1 if child is not in the notebook.\n\t \n",
"line" : 619}
,
{
"name" : "nextPage",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Switches to the next page. Nothing happens if the current page is\n the last page.\n\t \n",
"line" : 629}
,
{
"name" : "prevPage",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Switches to the previous page. Nothing happens if the current page\n is the first page.\n\t \n",
"line" : 639}
,
{
"name" : "reorderChild",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, int position)",
"comment" : "\n Reorders the page containing child, so that it appears in position\n position. If position is greater than or equal to the number of\n children in the list or negative, child will be moved to the end\n of the list.\n Params:\n child = the child to move\n position = the new position, or -1 to move to the end\n\t \n",
"line" : 654}
,
{
"name" : "setTabPos",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkPositionType pos)",
"comment" : "\n Sets the edge at which the tabs for switching pages in the\n notebook are drawn.\n Params:\n pos = the edge to draw the tabs at.\n\t \n",
"line" : 666}
,
{
"name" : "setShowTabs",
"kind" : "function",
"protection" : "public",
"type" : "void(int showTabs)",
"comment" : "\n Sets whether to show the tabs for the notebook or not.\n Params:\n showTabs = TRUE if the tabs should be shown.\n\t \n",
"line" : 677}
,
{
"name" : "setShowBorder",
"kind" : "function",
"protection" : "public",
"type" : "void(int showBorder)",
"comment" : "\n Sets whether a bevel will be drawn around the notebook pages.\n This only has a visual effect when the tabs are not shown.\n See gtk_notebook_set_show_tabs().\n Params:\n showBorder = TRUE if a bevel should be drawn around the notebook.\n\t \n",
"line" : 690}
,
{
"name" : "setScrollable",
"kind" : "function",
"protection" : "public",
"type" : "void(int scrollable)",
"comment" : "\n Sets whether the tab label area will have arrows for scrolling if\n there are too many tabs to fit in the area.\n Params:\n scrollable = TRUE if scroll arrows should be added\n\t \n",
"line" : 702}
,
{
"name" : "setTabBorder",
"kind" : "function",
"protection" : "public",
"type" : "void(uint borderWidth)",
"comment" : "\n Warning\n gtk_notebook_set_tab_border is deprecated and should not be used in newly-written code.\n Sets the width the border around the tab labels\n in a notebook. This is equivalent to calling\n gtk_notebook_set_tab_hborder (notebook, border_width) followed\n by gtk_notebook_set_tab_vborder (notebook, border_width).\n Params:\n borderWidth = width of the border around the tab labels.\n\t \n",
"line" : 718}
,
{
"name" : "popupEnable",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Enables the popup menu: if the user clicks with the right mouse button on\n the tab labels, a menu with all the pages will be popped up.\n\t \n",
"line" : 728}
,
{
"name" : "popupDisable",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Disables the popup menu.\n\t \n",
"line" : 737}
,
{
"name" : "getCurrentPage",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the page number of the current page.\n Returns: the index (starting from 0) of the current page in the notebook. If the notebook has no pages, then -1 will be returned.\n\t \n",
"line" : 747}
,
{
"name" : "getMenuLabel",
"kind" : "function",
"protection" : "public",
"type" : "Widget(Widget child)",
"comment" : "\n Retrieves the menu label widget of the page containing child.\n Params:\n child = a widget contained in a page of notebook\n Returns: the menu label, or NULL if the notebook page does not have a menu label other than the default (the tab label). [transfer none]\n\t \n",
"line" : 759}
,
{
"name" : "getNthPage",
"kind" : "function",
"protection" : "public",
"type" : "Widget(int pageNum)",
"comment" : "\n Returns the child widget contained in page number page_num.\n Params:\n pageNum = the index of a page in the notebook, or -1\n to get the last page.\n Returns: the child widget, or NULL if page_num is out of bounds. [transfer none]\n\t \n",
"line" : 777}
,
{
"name" : "getNPages",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the number of pages in a notebook.\n Since 2.2\n Returns: the number of pages in the notebook.\n\t \n",
"line" : 793}
,
{
"name" : "getTabLabel",
"kind" : "function",
"protection" : "public",
"type" : "Widget(Widget child)",
"comment" : "\n Returns the tab label widget for the page child. NULL is returned\n if child is not in notebook or if no tab label has specifically\n been set for child.\n Params:\n child = the page\n Returns: the tab label. [transfer none]\n\t \n",
"line" : 807}
,
{
"name" : "queryTabLabelPacking",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, out int expand, out int fill, out GtkPackType packType)",
"comment" : "\n Warning\n gtk_notebook_query_tab_label_packing has been deprecated since version 2.20 and should not be used in newly-written code. Modify the \"tab-expand\" and\n  \"tab-fill\" child properties instead.\n Query the packing attributes for the tab label of the page\n containing child.\n Params:\n child = the page\n expand = location to store the expand value (or NULL)\n fill = location to store the fill value (or NULL)\n packType = location to store the pack_type (or NULL)\n\t \n",
"line" : 830}
,
{
"name" : "setHomogeneousTabs",
"kind" : "function",
"protection" : "public",
"type" : "void(int homogeneous)",
"comment" : "\n Warning\n gtk_notebook_set_homogeneous_tabs is deprecated and should not be used in newly-written code.\n Sets whether the tabs must have all the same size or not.\n Params:\n homogeneous = TRUE if all tabs should be the same size.\n\t \n",
"line" : 843}
,
{
"name" : "setMenuLabel",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, Widget menuLabel)",
"comment" : "\n Changes the menu label for the page containing child.\n Params:\n child = the child widget\n menuLabel = the menu label, or NULL for default. [allow-none]\n\t \n",
"line" : 855}
,
{
"name" : "setMenuLabelText",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, string menuText)",
"comment" : "\n Creates a new label and sets it as the menu label of child.\n Params:\n child = the child widget\n menuText = the label text\n\t \n",
"line" : 867}
,
{
"name" : "setTabHborder",
"kind" : "function",
"protection" : "public",
"type" : "void(uint tabHborder)",
"comment" : "\n Warning\n gtk_notebook_set_tab_hborder is deprecated and should not be used in newly-written code.\n Sets the width of the horizontal border of tab labels.\n Params:\n tabHborder = width of the horizontal border of tab labels.\n\t \n",
"line" : 880}
,
{
"name" : "setTabLabel",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, Widget tabLabel)",
"comment" : "\n Changes the tab label for child. If NULL is specified\n for tab_label, then the page will have the label 'page N'.\n Params:\n child = the page\n tabLabel = the tab label widget to use, or NULL for default tab\n label. [allow-none]\n\t \n",
"line" : 894}
,
{
"name" : "setTabLabelPacking",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, int expand, int fill, GtkPackType packType)",
"comment" : "\n Warning\n gtk_notebook_set_tab_label_packing has been deprecated since version 2.20 and should not be used in newly-written code. Modify the \"tab-expand\" and\n  \"tab-fill\" child properties instead.\n  Modifying the packing of the tab label is a deprecated feature and\n  shouldn't be done anymore.\n Sets the packing parameters for the tab label of the page\n containing child. See gtk_box_pack_start() for the exact meaning\n of the parameters.\n Params:\n child = the child widget\n expand = whether to expand the tab label or not\n fill = whether the tab label should fill the allocated area or not\n packType = the position of the tab label\n\t \n",
"line" : 915}
,
{
"name" : "setTabLabelText",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, string tabText)",
"comment" : "\n Creates a new label and sets it as the tab label for the page\n containing child.\n Params:\n child = the page\n tabText = the label text\n\t \n",
"line" : 928}
,
{
"name" : "setTabVborder",
"kind" : "function",
"protection" : "public",
"type" : "void(uint tabVborder)",
"comment" : "\n Warning\n gtk_notebook_set_tab_vborder is deprecated and should not be used in newly-written code.\n Sets the width of the vertical border of tab labels.\n Params:\n tabVborder = width of the vertical border of tab labels.\n\t \n",
"line" : 941}
,
{
"name" : "setTabReorderable",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, int reorderable)",
"comment" : "\n Sets whether the notebook tab can be reordered\n via drag and drop or not.\n Since 2.10\n Params:\n child = a child GtkWidget\n reorderable = whether the tab is reorderable or not.\n\t \n",
"line" : 955}
,
{
"name" : "setTabDetachable",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, int detachable)",
"comment" : "\n Sets whether the tab can be detached from notebook to another\n notebook or widget.\n Note that 2 notebooks must share a common group identificator\n (see gtk_notebook_set_group_id()) to allow automatic tabs\n interchange between them.\n If you want a widget to interact with a notebook through DnD\n (i.e.: accept dragged tabs from it) it must be set as a drop\n destination and accept the target \"GTK_NOTEBOOK_TAB\". The notebook\n will fill the selection with a GtkWidget** pointing to the child\n widget that corresponds to the dropped tab.\n $(DDOC_COMMENT example)\n If you want a notebook to accept drags from other widgets,\n you will have to set your own DnD code to do it.\n Since 2.10\n Params:\n child = a child GtkWidget\n detachable = whether the tab is detachable or not\n\t \n",
"line" : 980}
,
{
"name" : "getMenuLabelText",
"kind" : "function",
"protection" : "public",
"type" : "string(Widget child)",
"comment" : "\n Retrieves the text of the menu label for the page containing\n  child.\n Params:\n child = the child widget of a page of the notebook.\n Returns: the text of the tab label, or NULL if the widget does not have a menu label other than the default menu label, or the menu label widget is not a GtkLabel. The string is owned by the widget and must not be freed.\n\t \n",
"line" : 993}
,
{
"name" : "getScrollable",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the tab label area has arrows for scrolling. See\n gtk_notebook_set_scrollable().\n Returns: TRUE if arrows for scrolling are present\n\t \n",
"line" : 1004}
,
{
"name" : "getShowBorder",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether a bevel will be drawn around the notebook pages. See\n gtk_notebook_set_show_border().\n Returns: TRUE if the bevel is drawn\n\t \n",
"line" : 1015}
,
{
"name" : "getShowTabs",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the tabs of the notebook are shown. See\n gtk_notebook_set_show_tabs().\n Returns: TRUE if the tabs are shown\n\t \n",
"line" : 1026}
,
{
"name" : "getTabLabelText",
"kind" : "function",
"protection" : "public",
"type" : "string(Widget child)",
"comment" : "\n Retrieves the text of the tab label for the page containing\n  child.\n Params:\n child = a widget contained in a page of notebook\n Returns: the text of the tab label, or NULL if the tab label widget is not a GtkLabel. The string is owned by the widget and must not be freed.\n\t \n",
"line" : 1039}
,
{
"name" : "getTabPos",
"kind" : "function",
"protection" : "public",
"type" : "GtkPositionType()",
"comment" : "\n Gets the edge at which the tabs for switching pages in the\n notebook are drawn.\n Returns: the edge at which the tabs are drawn\n\t \n",
"line" : 1050}
,
{
"name" : "getTabReorderable",
"kind" : "function",
"protection" : "public",
"type" : "int(Widget child)",
"comment" : "\n Gets whether the tab can be reordered via drag and drop or not.\n Since 2.10\n Params:\n child = a child GtkWidget\n Returns: TRUE if the tab is reorderable.\n\t \n",
"line" : 1063}
,
{
"name" : "getTabDetachable",
"kind" : "function",
"protection" : "public",
"type" : "int(Widget child)",
"comment" : "\n Returns whether the tab contents can be detached from notebook.\n Since 2.10\n Params:\n child = a child GtkWidget\n Returns: TRUE if the tab is detachable.\n\t \n",
"line" : 1076}
,
{
"name" : "getTabHborder",
"kind" : "function",
"protection" : "public",
"type" : "ushort()",
"comment" : "\n Returns the horizontal width of a tab border.\n Since 2.22\n Returns: horizontal width of a tab border\n\t \n",
"line" : 1087}
,
{
"name" : "getTabVborder",
"kind" : "function",
"protection" : "public",
"type" : "ushort()",
"comment" : "\n Returns the vertical width of a tab border.\n Since 2.22\n Returns: vertical width of a tab border\n\t \n",
"line" : 1098}
,
{
"name" : "setCurrentPage",
"kind" : "function",
"protection" : "public",
"type" : "void(int pageNum)",
"comment" : "\n Switches to the page number page_num.\n Note that due to historical reasons, GtkNotebook refuses\n to switch to a page unless the child widget is visible.\n Therefore, it is recommended to show child widgets before\n adding them to a notebook.\n Params:\n pageNum = index of the page to switch to, starting from 0.\n If negative, the last page will be used. If greater\n than the number of pages in the notebook, nothing\n will be done.\n\t \n",
"line" : 1116}
,
{
"name" : "setGroupId",
"kind" : "function",
"protection" : "public",
"type" : "void(int groupId)",
"comment" : "\n Warning\n gtk_notebook_set_group_id has been deprecated since version 2.12 and should not be used in newly-written code. use gtk_notebook_set_group_name() instead.\n Sets an group identificator for notebook, notebooks sharing\n the same group identificator will be able to exchange tabs\n via drag and drop. A notebook with group identificator -1 will\n not be able to exchange tabs with any other notebook.\n Since 2.10\n Params:\n groupId = a group identificator, or -1 to unset it\n\t \n",
"line" : 1133}
,
{
"name" : "getGroupId",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Warning\n gtk_notebook_get_group_id has been deprecated since version 2.12 and should not be used in newly-written code. use gtk_notebook_get_group_name() instead.\n Gets the current group identificator for notebook.\n Since 2.10\n Returns: the group identificator, or -1 if none is set.\n\t \n",
"line" : 1146}
,
{
"name" : "setGroup",
"kind" : "function",
"protection" : "public",
"type" : "void(void* group)",
"comment" : "\n Warning\n gtk_notebook_set_group has been deprecated since version 2.24 and should not be used in newly-written code. Use gtk_notebook_set_group_name() instead\n Sets a group identificator pointer for notebook, notebooks sharing\n the same group identificator pointer will be able to exchange tabs\n via drag and drop. A notebook with a NULL group identificator will\n not be able to exchange tabs with any other notebook.\n Since 2.12\n Params:\n group = a pointer to identify the notebook group, or NULL to unset it. [allow-none]\n\t \n",
"line" : 1163}
,
{
"name" : "getGroup",
"kind" : "function",
"protection" : "public",
"type" : "void*()",
"comment" : "\n Warning\n gtk_notebook_get_group has been deprecated since version 2.24 and should not be used in newly-written code. Use gtk_notebook_get_group_name() instead\n Gets the current group identificator pointer for notebook.\n Since 2.12\n Returns: the group identificator, or NULL if none is set. [transfer none]\n\t \n",
"line" : 1176}
,
{
"name" : "setGroupName",
"kind" : "function",
"protection" : "public",
"type" : "void(string groupName)",
"comment" : "\n Sets a group name for notebook.\n Notebooks with the same name will be able to exchange tabs\n via drag and drop. A notebook with a NULL group name will\n not be able to exchange tabs with any other notebook.\n Since 2.24\n\t \n",
"line" : 1189}
,
{
"name" : "getGroupName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the current group name for notebook.\n Note that this funtion can emphasis not be used\n together with gtk_notebook_set_group() or\n gtk_notebook_set_group_id().\n Since 2.24\n Returns: the group name, or NULL if none is set. [transfer none]\n\t \n",
"line" : 1203}
,
{
"name" : "setActionWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, GtkPackType packType)",
"comment" : "\n Sets widget as one of the action widgets. Depending on the pack type\n the widget will be placed before or after the tabs. You can use\n a GtkBox if you need to pack more than one widget on the same side.\n Note that action widgets are \"internal\" children of the notebook and thus\n not included in the list returned from gtk_container_foreach().\n Since 2.20\n Params:\n widget = a GtkWidget\n packType = pack type of the action widget\n\t \n",
"line" : 1220}
,
{
"name" : "getActionWidget",
"kind" : "function",
"protection" : "public",
"type" : "Widget(GtkPackType packType)",
"comment" : "\n Gets one of the action widgets. See gtk_notebook_set_action_widget().\n Since 2.20\n Params:\n packType = pack type of the action widget to receive\n Returns: The action widget with the given pack_type or NULL when this action widget has not been set. [transfer none]\n\t \n",
"line" : 1233}
,
{
"name" : "setWindowCreationHook",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) GtkNotebook* function(GtkNotebook*, GtkWidget*, int, int, void*) func, void* data, extern (C) void function(void* cbData) destroy)",
"comment" : "\n Warning\n gtk_notebook_set_window_creation_hook has been deprecated since version 2.24 and should not be used in newly-written code. Use the \"create-window\" signal instead\n Installs a global function used to create a window\n when a detached tab is dropped in an empty area.\n Since 2.10\n Params:\n func = the GtkNotebookWindowCreationFunc, or NULL. [allow-none]\n data = user data for func\n destroy = Destroy notifier for data, or NULL. [allow-none]\n\t \n",
"line" : 1255}
]
}
]
}
,
{
"name" : "gtk.ObjectGtk",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/ObjectGtk.d",
"members" : [
{
"name" : "ObjectGtk",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n Description\n GtkObject is the base class for all widgets, and for a few\n non-widget objects such as GtkAdjustment. GtkObject predates\n GObject; non-widgets that derive from GtkObject rather than\n GObject do so for backward compatibility reasons.\n GtkObjects are created with a \"floating\" reference count.\n This means that the initial reference is not owned by anyone. Calling\n g_object_unref() on a newly-created GtkObject is incorrect, the floating\n reference has to be removed first. This can be done by anyone at any time,\n by calling g_object_ref_sink() to convert the floating reference into a\n regular reference. g_object_ref_sink() returns a new reference if an object\n is already sunk (has no floating reference).\n When you add a widget to its parent container, the parent container\n will do this:\n $(DDOC_COMMENT example)\n This means that the container now owns a reference to the child widget\n and the child widget has no floating reference.\n The purpose of the floating reference is to keep the child widget alive\n until you add it to a parent container:\n $(DDOC_COMMENT example)\n GtkWindow is a special case, because GTK+ itself will ref\/sink it on creation.\n That is, after calling gtk_window_new(), the GtkWindow will have one\n reference which is owned by GTK+, and no floating references.\n One more factor comes into play: the \"destroy\" signal, emitted by the\n gtk_object_destroy() method. The \"destroy\" signal asks all code owning a\n reference to an object to release said reference. So, for example, if you call\n gtk_object_destroy() on a GtkWindow, GTK+ will release the reference count that\n it owns; if you call gtk_object_destroy() on a GtkButton, then the button will\n be removed from its parent container and the parent container will release its\n reference to the button. Because these references are released, calling\n gtk_object_destroy() should result in freeing all memory associated with an\n object, unless some buggy code fails to release its references in response to\n the \"destroy\" signal. Freeing memory (referred to as\n finalization only happens if the reference count reaches\n zero.\n Some simple rules for handling GtkObject:\n Never call g_object_unref() unless you have previously called g_object_ref(),\n even if you created the GtkObject. (Note: this is not\n true for GObject; for GObject, the creator of the object owns a reference.)\n Call gtk_object_destroy() to get rid of most objects in most cases.\n In particular, widgets are almost always destroyed in this way.\n  Because of the floating reference count, you don't need to\n worry about reference counting for widgets and toplevel windows, unless you\n explicitly call g_object_ref() yourself.\n \n",
"line" : 126,
"base" : "ObjectG",
"members" : [
{
"name" : "gtkObject",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkObject*",
"comment" : " the main Gtk struct \n",
"line" : 130}
,
{
"name" : "getObjectGtkStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkObject*()",
"line" : 133}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 140}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ObjectGtk(GtkObject* gtkObject)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 148}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 166}
,
{
"name" : "getId",
"kind" : "function",
"protection" : "public",
"type" : "string(StockID id)",
"comment" : " \n",
"line" : 173}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 180}
,
{
"name" : "onDestroyListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(ObjectGtk)[]",
"line" : 182}
,
{
"name" : "addOnDestroy",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(ObjectGtk) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Signals that all holders of a reference to the GtkObject should release\n the reference that they hold. May result in finalization of the object\n if all references are released.\n See Also\n GObject\n\t \n",
"line" : 190}
,
{
"name" : "callBackDestroy",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkObject* objectStruct, ObjectGtk objectGtk)",
"line" : 205}
,
{
"name" : "sink",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_object_sink has been deprecated since version 2.10 and should not be used in newly-written code. Use g_object_ref_sink() instead\n Removes the floating reference from a GtkObject, if it exists;\n otherwise does nothing. See the GtkObject overview documentation at\n the top of the page.\n\t \n",
"line" : 221}
,
{
"name" : "weakref",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) void function(void* cbData) notify, void* data)",
"comment" : "\n Warning\n gtk_object_weakref is deprecated and should not be used in newly-written code. Use g_object_weak_ref() instead.\n Adds a weak reference callback to an object. Weak references are used for notification when an object is\n finalized. They are called \"weak references\" because they allow you to safely\n hold a pointer to an object without calling g_object_ref() (g_object_ref() adds\n a strong reference, that is, forces the object to stay alive).\n Params:\n notify = callback to invoke before the object is freed.\n data = extra data to pass to notify.\n\t \n",
"line" : 238}
,
{
"name" : "weakunref",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) void function(void* cbData) notify, void* data)",
"comment" : "\n Warning\n gtk_object_weakunref is deprecated and should not be used in newly-written code. Use g_object_weak_unref() instead.\n Removes a weak reference callback to an object.\n Params:\n notify = callback to search for.\n data = data to search for.\n\t \n",
"line" : 252}
,
{
"name" : "destroy",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_object_destroy has been deprecated since version 2.24 and should not be used in newly-written code. Use gtk_widget_destroy() instead (if object is a widget)\n Emits the \"destroy\" signal notifying all reference holders that they should\n release the GtkObject. See the overview documentation at the top of the\n page for more details.\n The memory for the object itself won't be deleted until\n its reference count actually drops to 0; gtk_object_destroy() merely asks\n reference holders to release their references, it does not free the object.\n\t \n",
"line" : 268}
,
{
"name" : "removeNoNotify",
"kind" : "function",
"protection" : "public",
"type" : "void(string key)",
"comment" : "\n Warning\n gtk_object_remove_no_notify is deprecated and should not be used in newly-written code. Use g_object_steal_data() instead.\n Remove a specified datum from the object's data associations (the object_data),\n without invoking the association's destroy handler.\n Just like gtk_object_remove_data() except that any destroy handler\n will be ignored.\n Therefore this only affects data set using gtk_object_set_data_full().\n Params:\n key = name of the key for that association.\n\t \n",
"line" : 285}
,
{
"name" : "setUserData",
"kind" : "function",
"protection" : "public",
"type" : "void(void* data)",
"comment" : "\n Warning\n gtk_object_set_user_data is deprecated and should not be used in newly-written code. Use g_object_set_data() instead.\n For convenience, every object offers a generic user data\n pointer. This function sets it.\n Params:\n data = the new value for the user data.\n\t \n",
"line" : 299}
,
{
"name" : "getUserData",
"kind" : "function",
"protection" : "public",
"type" : "void*()",
"comment" : "\n Warning\n gtk_object_get_user_data is deprecated and should not be used in newly-written code. Use g_object_get_data() instead.\n Get the object's user data pointer.\n This is intended to be a pointer for your convenience in\n writing applications.\n Returns: the user data field for object.\n\t \n",
"line" : 313}
,
{
"name" : "addArgType",
"kind" : "function",
"protection" : "public",
"type" : "void(string argName, GType argType, uint argFlags, uint argId)",
"comment" : "\n Warning\n gtk_object_add_arg_type is deprecated and should not be used in newly-written code.\n Deprecated in favor of the GObject property system including GParamSpec.\n Add a new type of argument to an object class.\n Usually this is called when registering a new type of object.\n Params:\n argName = fully qualify object name, for example GtkObject::user_data.\n argType = type of the argument.\n argFlags = bitwise-OR of the GtkArgFlags enum. (Whether the argument is\n settable or gettable, whether it is set when the object is constructed.)\n argId = an internal number, passed in from here to the \"set_arg\" and\n \"get_arg\" handlers of the object.\n\t \n",
"line" : 333}
,
{
"name" : "setDataById",
"kind" : "function",
"protection" : "public",
"type" : "void(uint dataId, void* data)",
"comment" : "\n Warning\n gtk_object_set_data_by_id is deprecated and should not be used in newly-written code. Use g_object_set_qdata() instead.\n Just like gtk_object_set_data() except that it takes\n a GQuark instead of a string, so it is slightly faster.\n Use gtk_object_data_try_key() and gtk_object_data_force_id()\n to get an id from a string.\n Params:\n dataId = quark of the key.\n data = data to associate with that key.\n\t \n",
"line" : 350}
,
{
"name" : "setDataByIdFull",
"kind" : "function",
"protection" : "public",
"type" : "void(uint dataId, void* data, extern (C) void function(void* cbData) destroy)",
"comment" : "\n Warning\n gtk_object_set_data_by_id_full is deprecated and should not be used in newly-written code. Use g_object_set_qdata_full() instead.\n Just like gtk_object_set_data_full() except that it takes\n a GQuark instead of a string, so it is slightly faster.\n Use gtk_object_data_try_key() and gtk_object_data_force_id()\n to get an id from a string.\n Params:\n dataId = quark of the key.\n data = data to associate with that key.\n destroy = function to call when the association is destroyed.\n\t \n",
"line" : 368}
,
{
"name" : "getDataById",
"kind" : "function",
"protection" : "public",
"type" : "void*(uint dataId)",
"comment" : "\n Warning\n gtk_object_get_data_by_id is deprecated and should not be used in newly-written code. Use g_object_get_qdata() instead.\n Just like gtk_object_get_data() except that it takes\n a GQuark instead of a string, so it is slightly faster.\n Use gtk_object_data_try_key() and gtk_object_data_force_id()\n to get an id from a string.\n Params:\n dataId = quark of the key.\n Returns: the data if found, or NULL if no such data exists.\n\t \n",
"line" : 385}
,
{
"name" : "removeDataById",
"kind" : "function",
"protection" : "public",
"type" : "void(uint dataId)",
"comment" : "\n Warning\n gtk_object_remove_data_by_id is deprecated and should not be used in newly-written code. Use g_object_set_qdata() with data of NULL instead.\n Just like gtk_object_remove_data() except that it takes\n a GQuark instead of a string, so it is slightly faster.\n Remove a specified datum from the object's data associations.\n Subsequent calls to gtk_object_get_data() will return NULL.\n Use gtk_object_data_try_key() and gtk_object_data_force_id()\n to get an id from a string.\n Params:\n dataId = quark of the key.\n\t \n",
"line" : 403}
,
{
"name" : "removeNoNotifyById",
"kind" : "function",
"protection" : "public",
"type" : "void(uint keyId)",
"comment" : "\n Warning\n gtk_object_remove_no_notify_by_id is deprecated and should not be used in newly-written code. Use g_object_steal_qdata() instead.\n Just like gtk_object_remove_no_notify() except that it takes\n a GQuark instead of a string, so it is slightly faster.\n Use gtk_object_data_try_key() and gtk_object_data_force_id()\n to get an id from a string.\n Params:\n keyId = quark of the key.\n\t \n",
"line" : 419}
]
}
]
}
,
{
"name" : "gtk.OffscreenWindow",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/OffscreenWindow.d",
"members" : [
{
"name" : "OffscreenWindow",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkOffscreenWindow is strictly intended to be used for obtaining\n snapshots of widgets that are not part of a normal widget hierarchy.\n It differs from gtk_widget_get_snapshot() in that the widget you\n want to get a snapshot of need not be displayed on the user's screen\n as a part of a widget hierarchy. However, since GtkOffscreenWindow\n is a toplevel widget you cannot obtain snapshots of a full window\n with it since you cannot pack a toplevel widget in another toplevel.\n The idea is to take a widget and manually set the state of it,\n add it to a GtkOffscreenWindow and then retrieve the snapshot\n as a GdkPixmap or GdkPixbuf.\n GtkOffscreenWindow derives from GtkWindow only as an implementation\n detail. Applications should not use any API specific to GtkWindow\n to operate on this object. It should be treated as a GtkBin that\n has no parent widget.\n When contained offscreen widgets are redrawn, GtkOffscreenWindow\n will emit a \"damage-event\" signal.\n \n",
"line" : 93,
"base" : "Window",
"members" : [
{
"name" : "gtkOffscreenWindow",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkOffscreenWindow*",
"comment" : " the main Gtk struct \n",
"line" : 97}
,
{
"name" : "getOffscreenWindowStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkOffscreenWindow*()",
"line" : 100}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 107}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "OffscreenWindow(GtkOffscreenWindow* gtkOffscreenWindow)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 115}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 133}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "OffscreenWindow()",
"comment" : "\n\t \n\n Creates a toplevel container widget that is used to retrieve\n snapshots of widgets without showing them on the screen. For\n widgets that are on the screen and part of a normal widget\n hierarchy, gtk_widget_get_snapshot() can be used instead.\n Since 2.20\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 150}
,
{
"name" : "getPixmap",
"kind" : "function",
"protection" : "public",
"type" : "Pixmap()",
"comment" : "\n Retrieves a snapshot of the contained widget in the form of\n a GdkPixmap. If you need to keep this around over window\n resizes then you should add a reference to it.\n Since 2.20\n Returns: A GdkPixmap pointer to the offscreen pixmap, or NULL. [transfer none]\n\t \n",
"line" : 168}
,
{
"name" : "getPixbuf",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf()",
"comment" : "\n Retrieves a snapshot of the contained widget in the form of\n a GdkPixbuf. This is a new pixbuf with a reference count of 1,\n and the application should unreference it once it is no longer\n needed.\n Since 2.20\n Returns: A GdkPixbuf pointer, or NULL. [transfer full]\n\t \n",
"line" : 187}
]
}
]
}
,
{
"name" : "gtk.OrientableIF",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/OrientableIF.d",
"members" : [
{
"name" : "OrientableIF",
"kind" : "interface",
"protection" : "public",
"comment" : "\n Description\n The GtkOrientable interface is implemented by all widgets that can be\n oriented horizontally or vertically. Historically, such widgets have been\n realized as subclasses of a common base class (e.g GtkBox\/GtkHBox\/GtkVBox\n and GtkScale\/GtkHScale\/GtkVScale). GtkOrientable is more flexible in that\n it allows the orientation to be changed at runtime, allowing the widgets\n to 'flip'.\n GtkOrientable was introduced in GTK+ 2.16.\n \n",
"line" : 75,
"members" : [
{
"name" : "getOrientableTStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkOrientable*()",
"line" : 78}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 81}
,
{
"name" : "getOrientation",
"kind" : "function",
"protection" : "public",
"type" : "GtkOrientation()",
"comment" : "\n\t \n\n Retrieves the orientation of the orientable.\n Since 2.16\n Returns: the orientation of the orientable.\n\t \n",
"line" : 92}
,
{
"name" : "setOrientation",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkOrientation orientation)",
"comment" : "\n Sets the orientation of the orientable.\n Since 2.16\n Params:\n orientation = the orientable's new orientation.\n\t \n",
"line" : 100}
]
}
]
}
,
{
"name" : "gtk.OrientableT",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/OrientableT.d",
"members" : [
{
"name" : "OrientableT(TStruct)",
"kind" : "template",
"protection" : "public",
"comment" : "\n Description\n The GtkOrientable interface is implemented by all widgets that can be\n oriented horizontally or vertically. Historically, such widgets have been\n realized as subclasses of a common base class (e.g GtkBox\/GtkHBox\/GtkVBox\n and GtkScale\/GtkHScale\/GtkVScale). GtkOrientable is more flexible in that\n it allows the orientation to be changed at runtime, allowing the widgets\n to 'flip'.\n GtkOrientable was introduced in GTK+ 2.16.\n \n",
"line" : 75,
"members" : [
{
"name" : "gtkOrientable",
"kind" : "variable",
"type" : "GtkOrientable*",
"comment" : " the main Gtk struct \n",
"line" : 79}
,
{
"name" : "getOrientableTStruct",
"kind" : "function",
"type" : "GtkOrientable*()",
"line" : 82}
,
{
"name" : "getOrientation",
"kind" : "function",
"type" : "GtkOrientation()",
"comment" : "\n\t \n\n Retrieves the orientation of the orientable.\n Since 2.16\n Returns: the orientation of the orientable.\n\t \n",
"line" : 96}
,
{
"name" : "setOrientation",
"kind" : "function",
"type" : "void(GtkOrientation orientation)",
"comment" : "\n Sets the orientation of the orientable.\n Since 2.16\n Params:\n orientation = the orientable's new orientation.\n\t \n",
"line" : 108}
]
}
]
}
,
{
"name" : "gtk.PageSetup",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/PageSetup.d",
"members" : [
{
"name" : "PageSetup",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkPageSetup object stores the page size, orientation and margins.\n The idea is that you can get one of these from the page setup dialog\n and then pass it to the GtkPrintOperation when printing.\n The benefit of splitting this out of the GtkPrintSettings is that\n these affect the actual layout of the page, and thus need to be set\n long before user prints.\n The margins specified in this object are the \"print margins\", i.e. the\n parts of the page that the printer cannot print on. These are different\n from the layout margins that a word processor uses; they are typically\n used to determine the minimal size for the layout\n margins.\n To obtain a GtkPageSetup use gtk_page_setup_new()\n to get the defaults, or use gtk_print_run_page_setup_dialog() to show\n the page setup dialog and receive the resulting page setup.\n $(DDOC_COMMENT example)\n Printing support was added in GTK+ 2.10.\n \n",
"line" : 98,
"base" : "ObjectG",
"members" : [
{
"name" : "gtkPageSetup",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkPageSetup*",
"comment" : " the main Gtk struct \n",
"line" : 102}
,
{
"name" : "getPageSetupStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkPageSetup*()",
"line" : 105}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 112}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "PageSetup(GtkPageSetup* gtkPageSetup)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 120}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 138}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "PageSetup()",
"comment" : "\n\t \n\n Creates a new GtkPageSetup.\n Since 2.10\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 152}
,
{
"name" : "copy",
"kind" : "function",
"protection" : "public",
"type" : "PageSetup()",
"comment" : "\n Copies a GtkPageSetup.\n Since 2.10\n Returns: a copy of other. [transfer full]\n\t \n",
"line" : 168}
,
{
"name" : "getOrientation",
"kind" : "function",
"protection" : "public",
"type" : "GtkPageOrientation()",
"comment" : "\n Gets the page orientation of the GtkPageSetup.\n Since 2.10\n Returns: the page orientation\n\t \n",
"line" : 184}
,
{
"name" : "setOrientation",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkPageOrientation orientation)",
"comment" : "\n Sets the page orientation of the GtkPageSetup.\n Since 2.10\n Params:\n orientation = a GtkPageOrientation value\n\t \n",
"line" : 196}
,
{
"name" : "getPaperSize",
"kind" : "function",
"protection" : "public",
"type" : "PaperSize()",
"comment" : "\n Gets the paper size of the GtkPageSetup.\n Since 2.10\n Returns: the paper size\n\t \n",
"line" : 207}
,
{
"name" : "setPaperSize",
"kind" : "function",
"protection" : "public",
"type" : "void(PaperSize size)",
"comment" : "\n Sets the paper size of the GtkPageSetup without\n changing the margins. See\n gtk_page_setup_set_paper_size_and_default_margins().\n Since 2.10\n Params:\n size = a GtkPaperSize\n\t \n",
"line" : 226}
,
{
"name" : "getTopMargin",
"kind" : "function",
"protection" : "public",
"type" : "double(GtkUnit unit)",
"comment" : "\n Gets the top margin in units of unit.\n Since 2.10\n Params:\n unit = the unit for the return value\n Returns: the top margin\n\t \n",
"line" : 239}
,
{
"name" : "setTopMargin",
"kind" : "function",
"protection" : "public",
"type" : "void(double margin, GtkUnit unit)",
"comment" : "\n Sets the top margin of the GtkPageSetup.\n Since 2.10\n Params:\n margin = the new top margin in units of unit\n unit = the units for margin\n\t \n",
"line" : 252}
,
{
"name" : "getBottomMargin",
"kind" : "function",
"protection" : "public",
"type" : "double(GtkUnit unit)",
"comment" : "\n Gets the bottom margin in units of unit.\n Since 2.10\n Params:\n unit = the unit for the return value\n Returns: the bottom margin\n\t \n",
"line" : 265}
,
{
"name" : "setBottomMargin",
"kind" : "function",
"protection" : "public",
"type" : "void(double margin, GtkUnit unit)",
"comment" : "\n Sets the bottom margin of the GtkPageSetup.\n Since 2.10\n Params:\n margin = the new bottom margin in units of unit\n unit = the units for margin\n\t \n",
"line" : 278}
,
{
"name" : "getLeftMargin",
"kind" : "function",
"protection" : "public",
"type" : "double(GtkUnit unit)",
"comment" : "\n Gets the left margin in units of unit.\n Since 2.10\n Params:\n unit = the unit for the return value\n Returns: the left margin\n\t \n",
"line" : 291}
,
{
"name" : "setLeftMargin",
"kind" : "function",
"protection" : "public",
"type" : "void(double margin, GtkUnit unit)",
"comment" : "\n Sets the left margin of the GtkPageSetup.\n Since 2.10\n Params:\n margin = the new left margin in units of unit\n unit = the units for margin\n\t \n",
"line" : 304}
,
{
"name" : "getRightMargin",
"kind" : "function",
"protection" : "public",
"type" : "double(GtkUnit unit)",
"comment" : "\n Gets the right margin in units of unit.\n Since 2.10\n Params:\n unit = the unit for the return value\n Returns: the right margin\n\t \n",
"line" : 317}
,
{
"name" : "setRightMargin",
"kind" : "function",
"protection" : "public",
"type" : "void(double margin, GtkUnit unit)",
"comment" : "\n Sets the right margin of the GtkPageSetup.\n Since 2.10\n Params:\n margin = the new right margin in units of unit\n unit = the units for margin\n\t \n",
"line" : 330}
,
{
"name" : "setPaperSizeAndDefaultMargins",
"kind" : "function",
"protection" : "public",
"type" : "void(PaperSize size)",
"comment" : "\n Sets the paper size of the GtkPageSetup and modifies\n the margins according to the new paper size.\n Since 2.10\n Params:\n size = a GtkPaperSize\n\t \n",
"line" : 343}
,
{
"name" : "getPaperWidth",
"kind" : "function",
"protection" : "public",
"type" : "double(GtkUnit unit)",
"comment" : "\n Returns the paper width in units of unit.\n Note that this function takes orientation, but\n not margins into consideration.\n See gtk_page_setup_get_page_width().\n Since 2.10\n Params:\n unit = the unit for the return value\n Returns: the paper width.\n\t \n",
"line" : 359}
,
{
"name" : "getPaperHeight",
"kind" : "function",
"protection" : "public",
"type" : "double(GtkUnit unit)",
"comment" : "\n Returns the paper height in units of unit.\n Note that this function takes orientation, but\n not margins into consideration.\n See gtk_page_setup_get_page_height().\n Since 2.10\n Params:\n unit = the unit for the return value\n Returns: the paper height.\n\t \n",
"line" : 375}
,
{
"name" : "getPageWidth",
"kind" : "function",
"protection" : "public",
"type" : "double(GtkUnit unit)",
"comment" : "\n Returns the page width in units of unit.\n Note that this function takes orientation and\n margins into consideration.\n See gtk_page_setup_get_paper_width().\n Since 2.10\n Params:\n unit = the unit for the return value\n Returns: the page width.\n\t \n",
"line" : 391}
,
{
"name" : "getPageHeight",
"kind" : "function",
"protection" : "public",
"type" : "double(GtkUnit unit)",
"comment" : "\n Returns the page height in units of unit.\n Note that this function takes orientation and\n margins into consideration.\n See gtk_page_setup_get_paper_height().\n Since 2.10\n Params:\n unit = the unit for the return value\n Returns: the page height.\n\t \n",
"line" : 407}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "PageSetup(string fileName)",
"comment" : "\n Reads the page setup from the file file_name. Returns a\n new GtkPageSetup object with the restored page setup,\n or NULL if an error occurred. See gtk_page_setup_to_file().\n Since 2.12\n Params:\n fileName = the filename to read the page setup from\n Throws: GException on failure.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 423}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "PageSetup(KeyFile keyFile, string groupName)",
"comment" : "\n Reads the page setup from the group group_name in the key file\n key_file. Returns a new GtkPageSetup object with the restored\n page setup, or NULL if an error occurred.\n Since 2.12\n Params:\n keyFile = the GKeyFile to retrieve the page_setup from\n groupName = the name of the group in the key_file to read, or NULL\n to use the default name \"Page Setup\". [allow-none]\n Throws: GException on failure.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 454}
,
{
"name" : "loadFile",
"kind" : "function",
"protection" : "public",
"type" : "int(string fileName)",
"comment" : "\n Reads the page setup from the file file_name.\n See gtk_page_setup_to_file().\n Since 2.14\n Params:\n fileName = the filename to read the page setup from\n Returns: TRUE on success\n Throws: GException on failure.\n\t \n",
"line" : 482}
,
{
"name" : "loadKeyFile",
"kind" : "function",
"protection" : "public",
"type" : "int(KeyFile keyFile, string groupName)",
"comment" : "\n Reads the page setup from the group group_name in the key file\n key_file.\n Since 2.14\n Params:\n keyFile = the GKeyFile to retrieve the page_setup from\n groupName = the name of the group in the key_file to read, or NULL\n to use the default name \"Page Setup\". [allow-none]\n Returns: TRUE on success\n Throws: GException on failure.\n\t \n",
"line" : 508}
,
{
"name" : "toFile",
"kind" : "function",
"protection" : "public",
"type" : "int(string fileName)",
"comment" : "\n This function saves the information from setup to file_name.\n Since 2.12\n Params:\n fileName = the file to save to\n Returns: TRUE on success\n Throws: GException on failure.\n\t \n",
"line" : 531}
,
{
"name" : "toKeyFile",
"kind" : "function",
"protection" : "public",
"type" : "void(KeyFile keyFile, string groupName)",
"comment" : "\n This function adds the page setup from setup to key_file.\n Since 2.12\n Params:\n keyFile = the GKeyFile to save the page setup to\n groupName = the group to add the settings to in key_file,\n or NULL to use the default name \"Page Setup\"\n\t \n",
"line" : 554}
]
}
]
}
,
{
"name" : "gtk.PageSetupUnixDialog",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/PageSetupUnixDialog.d",
"members" : [
{
"name" : "PageSetupUnixDialog",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkPageSetupUnixDialog implements a page setup dialog for platforms\n which don't provide a native page setup dialog, like Unix. It can\n be used very much like any other GTK+ dialog, at the cost of\n the portability offered by the high-level printing API\n Printing support was added in GTK+ 2.10.\n \n",
"line" : 88,
"base" : "Dialog",
"members" : [
{
"name" : "gtkPageSetupUnixDialog",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkPageSetupUnixDialog*",
"comment" : " the main Gtk struct \n",
"line" : 92}
,
{
"name" : "getPageSetupUnixDialogStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkPageSetupUnixDialog*()",
"line" : 95}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 102}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "PageSetupUnixDialog(GtkPageSetupUnixDialog* gtkPageSetupUnixDialog)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 110}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 128}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "PageSetupUnixDialog(string title, Window parent)",
"comment" : "\n\t \n\n Creates a new page setup dialog.\n Since 2.10\n Params:\n title = the title of the dialog, or NULL. [allow-none]\n parent = transient parent of the dialog, or NULL. [allow-none]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 145}
,
{
"name" : "setPageSetup",
"kind" : "function",
"protection" : "public",
"type" : "void(PageSetup pageSetup)",
"comment" : "\n Sets the GtkPageSetup from which the page setup\n dialog takes its values.\n Since 2.10\n Params:\n pageSetup = a GtkPageSetup\n\t \n",
"line" : 163}
,
{
"name" : "getPageSetup",
"kind" : "function",
"protection" : "public",
"type" : "PageSetup()",
"comment" : "\n Gets the currently selected page setup from the dialog.\n Since 2.10\n Returns: the current page setup. [transfer none]\n\t \n",
"line" : 174}
,
{
"name" : "setPrintSettings",
"kind" : "function",
"protection" : "public",
"type" : "void(PrintSettings printSettings)",
"comment" : "\n Sets the GtkPrintSettings from which the page setup dialog\n takes its values.\n Since 2.10\n Params:\n printSettings = a GtkPrintSettings\n\t \n",
"line" : 192}
,
{
"name" : "getPrintSettings",
"kind" : "function",
"protection" : "public",
"type" : "PrintSettings()",
"comment" : "\n Gets the current print settings from the dialog.\n Since 2.10\n Returns: the current print settings. [transfer none]\n\t \n",
"line" : 203}
]
}
]
}
,
{
"name" : "gtk.Paned",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Paned.d",
"members" : [
{
"name" : "Paned",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkPaned is the base class for widgets with two panes,\n arranged either horizontally (GtkHPaned) or\n vertically (GtkVPaned). Child widgets are\n added to the panes of the widget with\n gtk_paned_pack1() and gtk_paned_pack2(). The division\n beween the two children is set by default from the\n size requests of the children, but it can be adjusted\n by the user.\n A paned widget draws a separator between the two\n child widgets and a small handle that the user\n can drag to adjust the division. It does not\n draw any relief around the children or around\n the separator. (The space in which the separator\n is called the gutter.) Often, it is useful\n to put each child inside a GtkFrame with the\n shadow type set to GTK_SHADOW_IN so that the\n gutter appears as a ridge. No separator is drawn\n if one of the children is missing.\n Each child has two options that can be set,\n resize and shrink. If resize is true, then when the\n GtkPaned is resized, that child will expand\n or shrink along with the paned widget. If shrink\n is true, then when that child can be made smaller\n than its requisition by the user. Setting shrink\n to FALSE allows the application to set a minimum\n size. If resize is false for both children, then\n this is treated as if resize is true for both\n children.\n The application can set the position of the slider\n as if it were set by the user, by calling\n gtk_paned_set_position().\n $(DDOC_COMMENT example)\n \n",
"line" : 114,
"base" : "Container",
"interfaces" : [
"OrientableIF"],
"members" : [
{
"name" : "gtkPaned",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkPaned*",
"comment" : " the main Gtk struct \n",
"line" : 118}
,
{
"name" : "getPanedStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkPaned*()",
"line" : 121}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 128}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Paned(GtkPaned* gtkPaned)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 136}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 154}
,
{
"name" : "add",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child1, Widget child2)",
"comment" : " \n",
"line" : 164}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 172}
,
{
"name" : "onAcceptPositionListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(Paned)[]",
"line" : 174}
,
{
"name" : "addOnAcceptPosition",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(Paned) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::accept-position signal is a\n keybinding signal\n which gets emitted to accept the current position of the handle when\n moving it using key bindings.\n The default binding for this signal is Return or Space.\n Since 2.0\n\t \n",
"line" : 183}
,
{
"name" : "callBackAcceptPosition",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkPaned* widgetStruct, Paned paned)",
"line" : 198}
,
{
"name" : "onCancelPositionListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(Paned)[]",
"line" : 211}
,
{
"name" : "addOnCancelPosition",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(Paned) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::cancel-position signal is a\n keybinding signal\n which gets emitted to cancel moving the position of the handle using key\n bindings. The position of the handle will be reset to the value prior to\n moving it.\n The default binding for this signal is Escape.\n Since 2.0\n\t \n",
"line" : 221}
,
{
"name" : "callBackCancelPosition",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkPaned* widgetStruct, Paned paned)",
"line" : 236}
,
{
"name" : "onCycleChildFocusListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(int, Paned)[]",
"line" : 249}
,
{
"name" : "addOnCycleChildFocus",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(int, Paned) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::cycle-child-focus signal is a\n keybinding signal\n which gets emitted to cycle the focus between the children of the paned.\n The default binding is f6.\n Since 2.0\n\t \n",
"line" : 257}
,
{
"name" : "callBackCycleChildFocus",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkPaned* widgetStruct, int reversed, Paned paned)",
"line" : 272}
,
{
"name" : "onCycleHandleFocusListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(int, Paned)[]",
"line" : 285}
,
{
"name" : "addOnCycleHandleFocus",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(int, Paned) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::cycle-handle-focus signal is a\n keybinding signal\n which gets emitted to cycle whether the paned should grab focus to allow\n the user to change position of the handle by using key bindings.\n The default binding for this signal is f8.\n Since 2.0\n\t \n",
"line" : 294}
,
{
"name" : "callBackCycleHandleFocus",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkPaned* widgetStruct, int reversed, Paned paned)",
"line" : 309}
,
{
"name" : "onMoveHandleListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GtkScrollType, Paned)[]",
"line" : 322}
,
{
"name" : "addOnMoveHandle",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GtkScrollType, Paned) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::move-handle signal is a\n keybinding signal\n which gets emitted to move the handle when the user is using key bindings\n to move it.\n Since 2.0\n\t \n",
"line" : 330}
,
{
"name" : "callBackMoveHandle",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkPaned* widgetStruct, GtkScrollType scrollType, Paned paned)",
"line" : 345}
,
{
"name" : "onToggleHandleFocusListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(Paned)[]",
"line" : 358}
,
{
"name" : "addOnToggleHandleFocus",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(Paned) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::toggle-handle-focus is a\n keybinding signal\n which gets emitted to accept the current position of the handle and then\n move focus to the next widget in the focus chain.\n The default binding is Tab.\n Since 2.0\n\t \n",
"line" : 367}
,
{
"name" : "callBackToggleHandleFocus",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkPaned* widgetStruct, Paned paned)",
"line" : 382}
,
{
"name" : "add1",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child)",
"comment" : "\n Adds a child to the top or left pane with\n default parameters. This is equivalent\n to gtk_paned_pack1 (paned, child, FALSE, TRUE).\n Params:\n child = the child to add\n\t \n",
"line" : 403}
,
{
"name" : "add2",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child)",
"comment" : "\n Adds a child to the bottom or right pane with default\n parameters. This is equivalent to\n gtk_paned_pack2 (paned, child, TRUE, TRUE).\n Params:\n child = the child to add\n\t \n",
"line" : 416}
,
{
"name" : "pack1",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, int resize, int shrink)",
"comment" : "\n Adds a child to the top or left pane.\n Params:\n child = the child to add\n resize = should this child expand when the paned widget is resized.\n shrink = can this child be made smaller than its requisition.\n\t \n",
"line" : 429}
,
{
"name" : "pack2",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, int resize, int shrink)",
"comment" : "\n Adds a child to the bottom or right pane.\n Params:\n child = the child to add\n resize = should this child expand when the paned widget is resized.\n shrink = can this child be made smaller than its requisition.\n\t \n",
"line" : 442}
,
{
"name" : "getChild1",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Obtains the first child of the paned widget.\n Since 2.4\n Returns: first child, or NULL if it is not set. [transfer none]\n\t \n",
"line" : 453}
,
{
"name" : "getChild2",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Obtains the second child of the paned widget.\n Since 2.4\n Returns: second child, or NULL if it is not set. [transfer none]\n\t \n",
"line" : 469}
,
{
"name" : "setPosition",
"kind" : "function",
"protection" : "public",
"type" : "void(int position)",
"comment" : "\n Sets the position of the divider between the two panes.\n Params:\n position = pixel position of divider, a negative value means that the position\n is unset.\n\t \n",
"line" : 486}
,
{
"name" : "getPosition",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Obtains the position of the divider between the two panes.\n Returns: position of the divider\n\t \n",
"line" : 496}
,
{
"name" : "getHandleWindow",
"kind" : "function",
"protection" : "public",
"type" : "Window()",
"comment" : "\n Returns the GdkWindow of the handle. This function is\n useful when handling button or motion events because it\n enables the callback to distinguish between the window\n of the paned, a child and the handle.\n Since 2.20\n Returns: the paned's handle window. [transfer none]\n\t \n",
"line" : 510}
]
}
]
}
,
{
"name" : "gtk.PaperSize",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/PaperSize.d",
"members" : [
{
"name" : "PaperSize",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkPaperSize handles paper sizes. It uses the standard called\n \"PWG 5101.1-2002 PWG: Standard for Media Standardized Names\"\n to name the paper sizes (and to get the data for the page sizes).\n In addition to standard paper sizes, GtkPaperSize allows to\n construct custom paper sizes with arbitrary dimensions.\n The GtkPaperSize object stores not only the dimensions (width\n and height) of a paper size and its name, it also provides\n default print margins.\n Printing support has been added in GTK+ 2.10.\n \n",
"line" : 91,
"base" : "Boxed",
"members" : [
{
"name" : "gtkPaperSize",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkPaperSize*",
"comment" : " the main Gtk struct \n",
"line" : 95}
,
{
"name" : "getPaperSizeStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkPaperSize*()",
"line" : 98}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 105}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "PaperSize(GtkPaperSize* gtkPaperSize)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 113}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "PaperSize(string name)",
"comment" : "\n\t \n\n Creates a new GtkPaperSize object by parsing a\n PWG 5101.1-2002\n paper name.\n If name is NULL, the default paper size is returned,\n see gtk_paper_size_get_default().\n Since 2.10\n Params:\n name = a paper size name, or NULL. [allow-none]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 137}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "PaperSize(string ppdName, string ppdDisplayName, double width, double height)",
"comment" : "\n Creates a new GtkPaperSize object by using\n PPD information.\n If ppd_name is not a recognized PPD paper name,\n ppd_display_name, width and height are used to\n construct a custom GtkPaperSize object.\n Since 2.10\n Params:\n ppdName = a PPD paper name\n ppdDisplayName = the corresponding human-readable name\n width = the paper width, in points\n height = the paper height in points\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 162}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "PaperSize(string name, string displayName, double width, double height, GtkUnit unit)",
"comment" : "\n Creates a new GtkPaperSize object with the\n given parameters.\n Since 2.10\n Params:\n name = the paper name\n displayName = the human-readable name\n width = the paper width, in units of unit\n height = the paper height, in units of unit\n unit = the unit for width and height\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 185}
,
{
"name" : "copy",
"kind" : "function",
"protection" : "public",
"type" : "PaperSize()",
"comment" : "\n Copies an existing GtkPaperSize.\n Since 2.10\n Returns: a copy of other\n\t \n",
"line" : 201}
,
{
"name" : "free",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Free the given GtkPaperSize object.\n Since 2.10\n\t \n",
"line" : 216}
,
{
"name" : "isEqual",
"kind" : "function",
"protection" : "public",
"type" : "int(PaperSize size2)",
"comment" : "\n Compares two GtkPaperSize objects.\n Since 2.10\n Params:\n size2 = another GtkPaperSize object\n Returns: TRUE, if size1 and size2 represent the same paper size\n\t \n",
"line" : 229}
,
{
"name" : "getPaperSizes",
"kind" : "function",
"protection" : "public",
"type" : "ListG(int includeCustom)",
"comment" : "\n Creates a list of known paper sizes.\n Since 2.12\n Params:\n includeCustom = whether to include custom paper sizes\n as defined in the page setup dialog\n Returns: a newly allocated list of newly allocated GtkPaperSize objects. [element-type GtkPaperSize][transfer full]\n\t \n",
"line" : 243}
,
{
"name" : "getName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the name of the GtkPaperSize.\n Since 2.10\n Returns: the name of size\n\t \n",
"line" : 259}
,
{
"name" : "getDisplayName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the human-readable name of the GtkPaperSize.\n Since 2.10\n Returns: the human-readable name of size\n\t \n",
"line" : 270}
,
{
"name" : "getPpdName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the PPD name of the GtkPaperSize, which\n may be NULL.\n Since 2.10\n Returns: the PPD name of size\n\t \n",
"line" : 282}
,
{
"name" : "getWidth",
"kind" : "function",
"protection" : "public",
"type" : "double(GtkUnit unit)",
"comment" : "\n Gets the paper width of the GtkPaperSize, in\n units of unit.\n Since 2.10\n Params:\n unit = the unit for the return value\n Returns: the paper width\n\t \n",
"line" : 296}
,
{
"name" : "getHeight",
"kind" : "function",
"protection" : "public",
"type" : "double(GtkUnit unit)",
"comment" : "\n Gets the paper height of the GtkPaperSize, in\n units of unit.\n Since 2.10\n Params:\n unit = the unit for the return value\n Returns: the paper height\n\t \n",
"line" : 310}
,
{
"name" : "isCustom",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns TRUE if size is not a standard paper size.\n Returns: whether size is a custom paper size.\n\t \n",
"line" : 320}
,
{
"name" : "setSize",
"kind" : "function",
"protection" : "public",
"type" : "void(double width, double height, GtkUnit unit)",
"comment" : "\n Changes the dimensions of a size to width x height.\n Since 2.10\n Params:\n width = the new width in units of unit\n height = the new height in units of unit\n unit = the unit for width and height\n\t \n",
"line" : 334}
,
{
"name" : "getDefaultTopMargin",
"kind" : "function",
"protection" : "public",
"type" : "double(GtkUnit unit)",
"comment" : "\n Gets the default top margin for the GtkPaperSize.\n Since 2.10\n Params:\n unit = the unit for the return value\n Returns: the default top margin\n\t \n",
"line" : 347}
,
{
"name" : "getDefaultBottomMargin",
"kind" : "function",
"protection" : "public",
"type" : "double(GtkUnit unit)",
"comment" : "\n Gets the default bottom margin for the GtkPaperSize.\n Since 2.10\n Params:\n unit = the unit for the return value\n Returns: the default bottom margin\n\t \n",
"line" : 360}
,
{
"name" : "getDefaultLeftMargin",
"kind" : "function",
"protection" : "public",
"type" : "double(GtkUnit unit)",
"comment" : "\n Gets the default left margin for the GtkPaperSize.\n Since 2.10\n Params:\n unit = the unit for the return value\n Returns: the default left margin\n\t \n",
"line" : 373}
,
{
"name" : "getDefaultRightMargin",
"kind" : "function",
"protection" : "public",
"type" : "double(GtkUnit unit)",
"comment" : "\n Gets the default right margin for the GtkPaperSize.\n Since 2.10\n Params:\n unit = the unit for the return value\n Returns: the default right margin\n\t \n",
"line" : 386}
,
{
"name" : "getDefault",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns the name of the default paper size, which\n depends on the current locale.\n Since 2.10\n Returns: the name of the default paper size. The string is owned by GTK+ and should not be modified.\n\t \n",
"line" : 398}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "PaperSize(KeyFile keyFile, string groupName)",
"comment" : "\n Reads a paper size from the group group_name in the key file\n key_file.\n Since 2.12\n Params:\n keyFile = the GKeyFile to retrieve the papersize from\n groupName = the name ofthe group in the key file to read,\n or NULL to read the first group\n Throws: GException on failure.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 415}
,
{
"name" : "toKeyFile",
"kind" : "function",
"protection" : "public",
"type" : "void(KeyFile keyFile, string groupName)",
"comment" : "\n This function adds the paper size from size to key_file.\n Since 2.12\n Params:\n keyFile = the GKeyFile to save the paper size to\n groupName = the group to add the settings to in key_file\n\t \n",
"line" : 441}
]
}
]
}
,
{
"name" : "gtk.Plug",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Plug.d",
"members" : [
{
"name" : "Plug",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n Together with GtkSocket, GtkPlug provides the ability\n to embed widgets from one process into another process\n in a fashion that is transparent to the user. One\n process creates a GtkSocket widget and passes the\n ID of that widget's window to the other process,\n which then creates a GtkPlug with that window ID.\n Any widgets contained in the GtkPlug then will appear\n inside the first application's window.\n Note\n The GtkPlug and GtkSocket widgets are currently not available\n on all platforms supported by GTK+.\n \n",
"line" : 85,
"base" : "Window",
"members" : [
{
"name" : "gtkPlug",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkPlug*",
"comment" : " the main Gtk struct \n",
"line" : 89}
,
{
"name" : "getPlugStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkPlug*()",
"line" : 92}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 99}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Plug(GtkPlug* gtkPlug)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 107}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 125}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 133}
,
{
"name" : "onEmbeddedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Plug)[]",
"line" : 135}
,
{
"name" : "addOnEmbedded",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Plug) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Gets emitted when the plug becomes embedded in a socket.\n See Also\n GtkSocket\n\t \n",
"line" : 141}
,
{
"name" : "callBackEmbedded",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkPlug* plugStruct, Plug plug)",
"line" : 156}
,
{
"name" : "construct",
"kind" : "function",
"protection" : "public",
"type" : "void(void* socketId)",
"comment" : "\n Finish the initialization of plug for a given GtkSocket identified by\n socket_id. This function will generally only be used by classes deriving from GtkPlug.\n Params:\n socketId = the XID of the socket's window.\n\t \n",
"line" : 171}
,
{
"name" : "constructForDisplay",
"kind" : "function",
"protection" : "public",
"type" : "void(Display display, void* socketId)",
"comment" : "\n Finish the initialization of plug for a given GtkSocket identified by\n socket_id which is currently displayed on display.\n This function will generally only be used by classes deriving from GtkPlug.\n Since 2.2\n Params:\n display = the GdkDisplay associated with socket_id's\n GtkSocket.\n socketId = the XID of the socket's window.\n\t \n",
"line" : 187}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Plug(void* socketId)",
"comment" : "\n Creates a new plug widget inside the GtkSocket identified\n by socket_id. If socket_id is 0, the plug is left \"unplugged\" and\n can later be plugged into a GtkSocket by gtk_socket_add_id().\n Params:\n socketId = the window ID of the socket, or 0.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 201}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Plug(Display display, void* socketId)",
"comment" : "\n Create a new plug widget inside the GtkSocket identified by socket_id.\n Since 2.2\n Params:\n display = the GdkDisplay on which socket_id is displayed\n socketId = the XID of the socket's window.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 220}
,
{
"name" : "getId",
"kind" : "function",
"protection" : "public",
"type" : "void*()",
"comment" : "\n Gets the window ID of a GtkPlug widget, which can then\n be used to embed this window inside another window, for\n instance with gtk_socket_add_id().\n Returns: the window ID for the plug\n\t \n",
"line" : 237}
,
{
"name" : "getEmbedded",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether the plug is embedded in a socket.\n Since 2.14\n Returns: TRUE if the plug is embedded in a socket\n\t \n",
"line" : 248}
,
{
"name" : "getSocketWindow",
"kind" : "function",
"protection" : "public",
"type" : "GdkWindow*()",
"comment" : "\n Retrieves the socket the plug is embedded in.\n Since 2.14\n Returns: the window of the socket, or NULL. [transfer none]\n\t \n",
"line" : 259}
]
}
]
}
,
{
"name" : "gtk.PopupBox",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/PopupBox.d",
"members" : [
{
"name" : "PopupBox",
"kind" : "class",
"protection" : "public",
"comment" : "\n \n",
"line" : 70,
"base" : "Object",
"members" : [
{
"name" : "information",
"kind" : "function",
"protection" : "public",
"type" : "void(string message, string title)",
"comment" : "\n Create an information popup dialog.\n Params:\n  message = The message to show on the dialog\n  title = The title of the dialog\n\t \n",
"line" : 78}
,
{
"name" : "information",
"kind" : "function",
"protection" : "public",
"type" : "void(Window parent, string message, string title)",
"comment" : "\n Create an information popup dialog.\n Params:\n  parent = The parent window of this popup dialog\n  message = The message to show on the dialog\n  title = The title of the dialog\n\t \n",
"line" : 90}
,
{
"name" : "error",
"kind" : "function",
"protection" : "public",
"type" : "void(string message, string title)",
"comment" : "\n Create an error popup dialog.\n Params:\n  message = The message to show on the dialog\n  title = The title of the dialog\n\t \n",
"line" : 109}
,
{
"name" : "error",
"kind" : "function",
"protection" : "public",
"type" : "void(Window parent, string message, string title)",
"comment" : "\n Create an error popup dialog.\n Params:\n  parent = The parent window of this popup dialog\n  message = The message to show on the dialog\n  title = The title of the dialog\n\t \n",
"line" : 121}
,
{
"name" : "yesNo",
"kind" : "function",
"protection" : "public",
"type" : "bool(string message, string title)",
"comment" : "\n Create an 'yes' or 'no' popup dialog.\n Params:\n  message = The message to show on the dialog\n  title = The title of the dialog\n\t \n",
"line" : 141}
,
{
"name" : "yesNo",
"kind" : "function",
"protection" : "public",
"type" : "bool(Window parent, string message, string title)",
"comment" : "\n Create an 'yes' or 'no' popup dialog.\n Params:\n  parent = The parent window of this popup dialog\n  message = The message to show on the dialog\n  title = The title of the dialog\n\t \n",
"line" : 153}
,
{
"name" : "yesNoCancel",
"kind" : "function",
"protection" : "public",
"type" : "GtkResponseType(string message, string title)",
"comment" : "\n Create an 'yes', 'no' or 'cancel' popup dialog.\n Params:\n  message = The message to show on the dialog\n  title = The title of the dialog\n\t \n",
"line" : 175}
,
{
"name" : "yesNoCancel",
"kind" : "function",
"protection" : "public",
"type" : "GtkResponseType(Window parent, string message, string title)",
"comment" : "\n Create an 'yes', 'no' or 'cancel' popup dialog.\n Params:\n  parent = The parent window of this popup dialog\n  message = The message to show on the dialog\n  title = The title of the dialog\n\t \n",
"line" : 187}
]
}
]
}
,
{
"name" : "gtk.PrintContext",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/PrintContext.d",
"members" : [
{
"name" : "PrintContext",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkPrintContext encapsulates context information that is required when\n drawing pages for printing, such as the cairo context and important\n parameters like page size and resolution. It also lets you easily\n create PangoLayout and PangoContext objects that match the font metrics\n of the cairo surface.\n GtkPrintContext objects gets passed to the ::begin-print, ::end-print,\n ::request-page-setup and ::draw-page signals on the GtkPrintOperation.\n $(DDOC_COMMENT example)\n Printing support was added in GTK+ 2.10.\n \n",
"line" : 93,
"base" : "ObjectG",
"members" : [
{
"name" : "gtkPrintContext",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkPrintContext*",
"comment" : " the main Gtk struct \n",
"line" : 97}
,
{
"name" : "getPrintContextStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkPrintContext*()",
"line" : 100}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 107}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "PrintContext(GtkPrintContext* gtkPrintContext)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 115}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 133}
,
{
"name" : "getCairoContext",
"kind" : "function",
"protection" : "public",
"type" : "Context()",
"comment" : "\n\t \n\n Obtains the cairo context that is associated with the\n GtkPrintContext.\n Since 2.10\n Returns: the cairo context of context. [transfer none]\n\t \n",
"line" : 148}
,
{
"name" : "setCairoContext",
"kind" : "function",
"protection" : "public",
"type" : "void(Context cr, double dpiX, double dpiY)",
"comment" : "\n Sets a new cairo context on a print context.\n This function is intended to be used when implementing\n an internal print preview, it is not needed for printing,\n since GTK+ itself creates a suitable cairo context in that\n case.\n Since 2.10\n Params:\n cr = the cairo context\n dpiX = the horizontal resolution to use with cr\n dpiY = the vertical resolution to use with cr\n\t \n",
"line" : 171}
,
{
"name" : "getPageSetup",
"kind" : "function",
"protection" : "public",
"type" : "PageSetup()",
"comment" : "\n Obtains the GtkPageSetup that determines the page\n dimensions of the GtkPrintContext.\n Since 2.10\n Returns: the page setup of context. [transfer none]\n\t \n",
"line" : 183}
,
{
"name" : "getWidth",
"kind" : "function",
"protection" : "public",
"type" : "double()",
"comment" : "\n Obtains the width of the GtkPrintContext, in pixels.\n Since 2.10\n Returns: the width of context\n\t \n",
"line" : 199}
,
{
"name" : "getHeight",
"kind" : "function",
"protection" : "public",
"type" : "double()",
"comment" : "\n Obtains the height of the GtkPrintContext, in pixels.\n Since 2.10\n Returns: the height of context\n\t \n",
"line" : 210}
,
{
"name" : "getDpiX",
"kind" : "function",
"protection" : "public",
"type" : "double()",
"comment" : "\n Obtains the horizontal resolution of the GtkPrintContext,\n in dots per inch.\n Since 2.10\n Returns: the horizontal resolution of context\n\t \n",
"line" : 222}
,
{
"name" : "getDpiY",
"kind" : "function",
"protection" : "public",
"type" : "double()",
"comment" : "\n Obtains the vertical resolution of the GtkPrintContext,\n in dots per inch.\n Since 2.10\n Returns: the vertical resolution of context\n\t \n",
"line" : 234}
,
{
"name" : "getPangoFontmap",
"kind" : "function",
"protection" : "public",
"type" : "PgFontMap()",
"comment" : "\n Returns a PangoFontMap that is suitable for use\n with the GtkPrintContext.\n Since 2.10\n Returns: the font map of context. [transfer none]\n\t \n",
"line" : 246}
,
{
"name" : "createPangoContext",
"kind" : "function",
"protection" : "public",
"type" : "PgContext()",
"comment" : "\n Creates a new PangoContext that can be used with the\n GtkPrintContext.\n Since 2.10\n Returns: a new Pango context for context. [transfer full]\n\t \n",
"line" : 263}
,
{
"name" : "createPangoLayout",
"kind" : "function",
"protection" : "public",
"type" : "PgLayout()",
"comment" : "\n Creates a new PangoLayout that is suitable for use\n with the GtkPrintContext.\n Since 2.10\n Returns: a new Pango layout for context. [transfer full]\n\t \n",
"line" : 280}
,
{
"name" : "getHardMargins",
"kind" : "function",
"protection" : "public",
"type" : "int(out double top, out double bottom, out double left, out double right)",
"comment" : "\n Obtains the hardware printer margins of the GtkPrintContext, in units.\n Since 2.20\n Params:\n top = top hardware printer margin. [out]\n bottom = bottom hardware printer margin. [out]\n left = left hardware printer margin. [out]\n right = right hardware printer margin. [out]\n Returns: TRUE if the hard margins were retrieved\n\t \n",
"line" : 301}
]
}
]
}
,
{
"name" : "gtk.Printer",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Printer.d",
"members" : [
{
"name" : "Printer",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkPrinter object represents a printer. You only need to\n deal directly with printers if you use the non-portable\n GtkPrintUnixDialog API.\n A GtkPrinter allows to get status information about the printer,\n such as its description, its location, the number of queued jobs,\n etc. Most importantly, a GtkPrinter object can be used to create\n a GtkPrintJob object, which lets you print to the printer.\n Printing support was added in GTK+ 2.10.\n \n",
"line" : 88,
"base" : "ObjectG",
"members" : [
{
"name" : "gtkPrinter",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkPrinter*",
"comment" : " the main Gtk struct \n",
"line" : 92}
,
{
"name" : "getPrinterStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkPrinter*()",
"line" : 95}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 102}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Printer(GtkPrinter* gtkPrinter)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 110}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 128}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 136}
,
{
"name" : "onDetailsAcquiredListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(int, Printer)[]",
"line" : 138}
,
{
"name" : "addOnDetailsAcquired",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(int, Printer) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Gets emitted in response to a request for detailed information\n about a printer from the print backend. The success parameter\n indicates if the information was actually obtained.\n TRUE if the details were successfully acquired\n Since 2.10\n\t \n",
"line" : 146}
,
{
"name" : "callBackDetailsAcquired",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkPrinter* printerStruct, int success, Printer printer)",
"line" : 161}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Printer(string name, GtkPrintBackend* backend, int virtual)",
"comment" : "\n Creates a new GtkPrinter.\n Since 2.10\n Params:\n name = the name of the printer\n backend = a GtkPrintBackend\n virtual = whether the printer is virtual\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 179}
,
{
"name" : "getBackend",
"kind" : "function",
"protection" : "public",
"type" : "GtkPrintBackend*()",
"comment" : "\n Returns the backend of the printer.\n Since 2.10\n Returns: the backend of printer. [transfer none]\n\t \n",
"line" : 195}
,
{
"name" : "getName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns the name of the printer.\n Since 2.10\n Returns: the name of printer\n\t \n",
"line" : 206}
,
{
"name" : "getStateMessage",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns the state message describing the current state\n of the printer.\n Since 2.10\n Returns: the state message of printer\n\t \n",
"line" : 218}
,
{
"name" : "getDescription",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the description of the printer.\n Since 2.10\n Returns: the description of printer\n\t \n",
"line" : 229}
,
{
"name" : "getLocation",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns a description of the location of the printer.\n Since 2.10\n Returns: the location of printer\n\t \n",
"line" : 240}
,
{
"name" : "getIconName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the name of the icon to use for the printer.\n Since 2.10\n Returns: the icon name for printer\n\t \n",
"line" : 251}
,
{
"name" : "getJobCount",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the number of jobs currently queued on the printer.\n Since 2.10\n Returns: the number of jobs on printer\n\t \n",
"line" : 262}
,
{
"name" : "isActive",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the printer is currently active (i.e.\n accepts new jobs).\n Since 2.10\n Returns: TRUE if printer is active\n\t \n",
"line" : 274}
,
{
"name" : "isPaused",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the printer is currently paused.\n A paused printer still accepts jobs, but it is not\n printing them.\n Since 2.14\n Returns: TRUE if printer is paused\n\t \n",
"line" : 287}
,
{
"name" : "isAcceptingJobs",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the printer is accepting jobs\n Since 2.14\n Returns: TRUE if printer is accepting jobs\n\t \n",
"line" : 298}
,
{
"name" : "isVirtual",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the printer is virtual (i.e. does not\n represent actual printer hardware, but something like\n a CUPS class).\n Since 2.10\n Returns: TRUE if printer is virtual\n\t \n",
"line" : 311}
,
{
"name" : "isDefault",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the printer is the default printer.\n Since 2.10\n Returns: TRUE if printer is the default\n\t \n",
"line" : 322}
,
{
"name" : "acceptsPs",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the printer accepts input in\n PostScript format.\n Since 2.10\n Returns: TRUE if printer accepts PostScript\n\t \n",
"line" : 334}
,
{
"name" : "acceptsPdf",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the printer accepts input in\n PDF format.\n Since 2.10\n Returns: TRUE if printer accepts PDF\n\t \n",
"line" : 346}
,
{
"name" : "listPapers",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Lists all the paper sizes printer supports.\n This will return and empty list unless the printer's details are\n available, see gtk_printer_has_details() and gtk_printer_request_details().\n Since 2.12\n Returns: a newly allocated list of newly allocated GtkPageSetup s. [element-type GtkPageSetup][transfer full]\n\t \n",
"line" : 359}
,
{
"name" : "compare",
"kind" : "function",
"protection" : "public",
"type" : "int(Printer b)",
"comment" : "\n Compares two printers.\n Since 2.10\n Params:\n a = a GtkPrinter\n b = another GtkPrinter\n Returns: 0 if the printer match, a negative value if a < b, or a positive value if a > b\n\t \n",
"line" : 378}
,
{
"name" : "hasDetails",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the printer details are available.\n Since 2.12\n Returns: TRUE if printer details are available\n\t \n",
"line" : 389}
,
{
"name" : "requestDetails",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Requests the printer details. When the details are available,\n the \"details-acquired\" signal will be emitted on printer.\n Since 2.12\n\t \n",
"line" : 400}
,
{
"name" : "getCapabilities",
"kind" : "function",
"protection" : "public",
"type" : "GtkPrintCapabilities()",
"comment" : "\n Returns the printer's capabilities.\n This is useful when you're using GtkPrintUnixDialog's manual-capabilities\n setting and need to know which settings the printer can handle and which\n you must handle yourself.\n This will return 0 unless the printer's details are available, see\n gtk_printer_has_details() and gtk_printer_request_details().\n Since 2.12\n Returns: the printer's capabilities\n\t \n",
"line" : 416}
,
{
"name" : "getDefaultPageSize",
"kind" : "function",
"protection" : "public",
"type" : "PageSetup()",
"comment" : "\n Returns default page size of printer.\n Since 2.14\n Returns: a newly allocated GtkPageSetup with default page size of the printer.\n\t \n",
"line" : 427}
,
{
"name" : "getHardMargins",
"kind" : "function",
"protection" : "public",
"type" : "int(out double top, out double bottom, out double left, out double right)",
"comment" : "\n Retrieve the hard margins of printer, i.e. the margins that define\n the area at the borders of the paper that the printer cannot print to.\n Note: This will not succeed unless the printer's details are available,\n see gtk_printer_has_details() and gtk_printer_request_details().\n Since 2.20\n Params:\n top = a location to store the top margin in. [out]\n bottom = a location to store the bottom margin in. [out]\n left = a location to store the left margin in. [out]\n right = a location to store the right margin in. [out]\n Returns: TRUE iff the hard margins were retrieved\n\t \n",
"line" : 451}
,
{
"name" : "enumeratePrinters",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) int function(GtkPrinter*, void*) func, void* data, extern (C) void function(void* cbData) destroy, int wait)",
"comment" : "\n Calls a function for all GtkPrinters.\n If func returns TRUE, the enumeration is stopped.\n Since 2.10\n Params:\n func = a function to call for each printer\n data = user data to pass to func\n destroy = function to call if data is no longer needed\n wait = if TRUE, wait in a recursive mainloop until\n all printers are enumerated; otherwise return early\n\t \n",
"line" : 468}
]
}
]
}
,
{
"name" : "gtk.PrintJob",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/PrintJob.d",
"members" : [
{
"name" : "PrintJob",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkPrintJob object represents a job that is sent to a\n printer. You only need to deal directly with print jobs if\n you use the non-portable GtkPrintUnixDialog API.\n Use gtk_print_job_get_surface() to obtain the cairo surface\n onto which the pages must be drawn. Use gtk_print_job_send()\n to send the finished job to the printer. If you don't use cairo\n GtkPrintJob also supports printing of manually generated postscript,\n via gtk_print_job_set_source_file().\n Printing support was added in GTK+ 2.10.\n \n",
"line" : 98,
"base" : "ObjectG",
"members" : [
{
"name" : "gtkPrintJob",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkPrintJob*",
"comment" : " the main Gtk struct \n",
"line" : 102}
,
{
"name" : "getPrintJobStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkPrintJob*()",
"line" : 105}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 112}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "PrintJob(GtkPrintJob* gtkPrintJob)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 120}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 138}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 146}
,
{
"name" : "onStatusChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(PrintJob)[]",
"line" : 148}
,
{
"name" : "addOnStatusChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(PrintJob) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Gets emitted when the status of a job changes. The signal handler\n can use gtk_print_job_get_status() to obtain the new status.\n Since 2.10\n\t \n",
"line" : 154}
,
{
"name" : "callBackStatusChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkPrintJob* jobStruct, PrintJob printJob)",
"line" : 169}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "PrintJob(string title, Printer printer, PrintSettings settings, PageSetup pageSetup)",
"comment" : "\n Creates a new GtkPrintJob.\n Since 2.10\n Params:\n title = the job title\n printer = a GtkPrinter\n settings = a GtkPrintSettings\n pageSetup = a GtkPageSetup\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 188}
,
{
"name" : "getSettings",
"kind" : "function",
"protection" : "public",
"type" : "PrintSettings()",
"comment" : "\n Gets the GtkPrintSettings of the print job.\n Since 2.10\n Returns: the settings of job. [transfer none]\n\t \n",
"line" : 204}
,
{
"name" : "getPrinter",
"kind" : "function",
"protection" : "public",
"type" : "Printer()",
"comment" : "\n Gets the GtkPrinter of the print job.\n Since 2.10\n Returns: the printer of job. [transfer none]\n\t \n",
"line" : 220}
,
{
"name" : "getTitle",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the job title.\n Since 2.10\n Returns: the title of job\n\t \n",
"line" : 236}
,
{
"name" : "getStatus",
"kind" : "function",
"protection" : "public",
"type" : "GtkPrintStatus()",
"comment" : "\n Gets the status of the print job.\n Since 2.10\n Returns: the status of job\n\t \n",
"line" : 247}
,
{
"name" : "setSourceFile",
"kind" : "function",
"protection" : "public",
"type" : "int(string filename)",
"comment" : "\n Make the GtkPrintJob send an existing document to the\n printing system. The file can be in any format understood\n by the platforms printing system (typically PostScript,\n but on many platforms PDF may work too). See\n gtk_printer_accepts_pdf() and gtk_printer_accepts_ps().\n Since 2.10\n Params:\n filename = the file to be printed\n Returns: FALSE if an error occurred\n Throws: GException on failure.\n\t \n",
"line" : 265}
,
{
"name" : "getSurface",
"kind" : "function",
"protection" : "public",
"type" : "Surface()",
"comment" : "\n Gets a cairo surface onto which the pages of\n the print job should be rendered.\n Since 2.10\n Returns: the cairo surface of job. [transfer none]\n Throws: GException on failure.\n\t \n",
"line" : 287}
,
{
"name" : "send",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) void function(GtkPrintJob*, void*, GError*) callback, void* userData, extern (C) void function(void* cbData) dnotify)",
"comment" : "\n Sends the print job off to the printer.\n Since 2.10\n Params:\n callback = function to call when the job completes or an error occurs\n userData = user data that gets passed to callback\n dnotify = destroy notify for user_data\n\t \n",
"line" : 314}
,
{
"name" : "setTrackPrintStatus",
"kind" : "function",
"protection" : "public",
"type" : "void(int trackStatus)",
"comment" : "\n If track_status is TRUE, the print job will try to continue report\n on the status of the print job in the printer queues and printer. This\n can allow your application to show things like \"out of paper\" issues,\n and when the print job actually reaches the printer.\n This function is often implemented using some form of polling, so it should\n not be enabled unless needed.\n Since 2.10\n Params:\n trackStatus = TRUE to track status after printing\n\t \n",
"line" : 331}
,
{
"name" : "getTrackPrintStatus",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns wheter jobs will be tracked after printing.\n For details, see gtk_print_job_set_track_print_status().\n Since 2.10\n Returns: TRUE if print job status will be reported after printing\n\t \n",
"line" : 343}
]
}
]
}
,
{
"name" : "gtk.PrintOperation",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/PrintOperation.d",
"members" : [
{
"name" : "PrintOperation",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkPrintOperation is the high-level, portable printing API. It looks\n a bit different than other GTK+ dialogs such as the GtkFileChooser,\n since some platforms don't expose enough infrastructure to implement\n a good print dialog. On such platforms, GtkPrintOperation uses the\n native print dialog. On platforms which do not provide a native\n print dialog, GTK+ uses its own, see GtkPrintUnixDialog.\n The typical way to use the high-level printing API is to create a\n GtkPrintOperation object with gtk_print_operation_new() when the user\n selects to print. Then you set some properties on it, e.g. the page size,\n any GtkPrintSettings from previous print operations, the number of pages,\n the current page, etc.\n Then you start the print operation by calling gtk_print_operation_run().\n It will then show a dialog, let the user select a printer and options.\n When the user finished the dialog various signals will be emitted on the\n GtkPrintOperation, the main one being ::draw-page, which you are supposed\n to catch and render the page on the provided GtkPrintContext using Cairo.\n $(DDOC_COMMENT example)\n By default GtkPrintOperation uses an external application to do\n print preview. To implement a custom print preview, an application\n must connect to the preview signal. The functions\n gtk_print_operation_print_preview_render_page(),\n gtk_print_operation_preview_end_preview() and\n gtk_print_operation_preview_is_selected() are useful\n when implementing a print preview.\n Printing support was added in GTK+ 2.10.\n \n",
"line" : 124,
"base" : "ObjectG",
"interfaces" : [
"PrintOperationPreviewIF"],
"members" : [
{
"name" : "gtkPrintOperation",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkPrintOperation*",
"comment" : " the main Gtk struct \n",
"line" : 128}
,
{
"name" : "getPrintOperationStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkPrintOperation*()",
"line" : 131}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 138}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "PrintOperation(GtkPrintOperation* gtkPrintOperation)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 146}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 164}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 175}
,
{
"name" : "onBeginPrintListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(PrintContext, PrintOperation)[]",
"line" : 177}
,
{
"name" : "addOnBeginPrint",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(PrintContext, PrintOperation) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted after the user has finished changing print settings\n in the dialog, before the actual rendering starts.\n A typical use for ::begin-print is to use the parameters from the\n GtkPrintContext and paginate the document accordingly, and then\n set the number of pages with gtk_print_operation_set_n_pages().\n Since 2.10\n\t \n",
"line" : 186}
,
{
"name" : "callBackBeginPrint",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkPrintOperation* operationStruct, GtkPrintContext* context, PrintOperation printOperation)",
"line" : 201}
,
{
"name" : "onCreateCustomWidgetListeners",
"kind" : "variable",
"protection" : "public",
"type" : "GObject* delegate(PrintOperation)[]",
"line" : 209}
,
{
"name" : "addOnCreateCustomWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(GObject* delegate(PrintOperation) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when displaying the print dialog. If you return a\n widget in a handler for this signal it will be added to a custom\n tab in the print dialog. You typically return a container widget\n with multiple widgets in it.\n The print dialog owns the returned widget, and its lifetime is not\n controlled by the application. However, the widget is guaranteed\n to stay around until the \"custom-widget-apply\"\n signal is emitted on the operation. Then you can read out any\n information you need from the widgets.\n Since 2.10\n\t \n",
"line" : 222}
,
{
"name" : "callBackCreateCustomWidget",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkPrintOperation* operationStruct, PrintOperation printOperation)",
"line" : 237}
,
{
"name" : "onCustomWidgetApplyListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Widget, PrintOperation)[]",
"line" : 245}
,
{
"name" : "addOnCustomWidgetApply",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Widget, PrintOperation) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted right before \"begin-print\" if you added\n a custom widget in the \"create-custom-widget\" handler.\n When you get this signal you should read the information from the\n custom widgets, as the widgets are not guaraneed to be around at a\n later time.\n Since 2.10\n\t \n",
"line" : 254}
,
{
"name" : "callBackCustomWidgetApply",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkPrintOperation* operationStruct, GtkWidget* widget, PrintOperation printOperation)",
"line" : 269}
,
{
"name" : "onDoneListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkPrintOperationResult, PrintOperation)[]",
"line" : 277}
,
{
"name" : "addOnDone",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkPrintOperationResult, PrintOperation) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when the print operation run has finished doing\n everything required for printing.\n result gives you information about what happened during the run.\n If result is GTK_PRINT_OPERATION_RESULT_ERROR then you can call\n gtk_print_operation_get_error() for more information.\n If you enabled print status tracking then\n gtk_print_operation_is_finished() may still return FALSE\n after \"done\" was emitted.\n Since 2.10\n\t \n",
"line" : 289}
,
{
"name" : "callBackDone",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkPrintOperation* operationStruct, GtkPrintOperationResult result, PrintOperation printOperation)",
"line" : 304}
,
{
"name" : "onDrawPageListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(PrintContext, int, PrintOperation)[]",
"line" : 312}
,
{
"name" : "addOnDrawPage",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(PrintContext, int, PrintOperation) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted for every page that is printed. The signal handler\n must render the page_nr's page onto the cairo context obtained\n from context using gtk_print_context_get_cairo_context().\n $(DDOC_COMMENT example)\n Use gtk_print_operation_set_use_full_page() and\n gtk_print_operation_set_unit() before starting the print operation\n to set up the transformation of the cairo context according to your\n needs.\n Since 2.10\n\t \n",
"line" : 324}
,
{
"name" : "callBackDrawPage",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkPrintOperation* operationStruct, GtkPrintContext* context, int pageNr, PrintOperation printOperation)",
"line" : 339}
,
{
"name" : "onEndPrintListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(PrintContext, PrintOperation)[]",
"line" : 347}
,
{
"name" : "addOnEndPrint",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(PrintContext, PrintOperation) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted after all pages have been rendered.\n A handler for this signal can clean up any resources that have\n been allocated in the \"begin-print\" handler.\n Since 2.10\n\t \n",
"line" : 354}
,
{
"name" : "callBackEndPrint",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkPrintOperation* operationStruct, GtkPrintContext* context, PrintOperation printOperation)",
"line" : 369}
,
{
"name" : "onPaginateListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(PrintContext, PrintOperation)[]",
"line" : 377}
,
{
"name" : "addOnPaginate",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(PrintContext, PrintOperation) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted after the \"begin-print\" signal, but before\n the actual rendering starts. It keeps getting emitted until a connected\n signal handler returns TRUE.\n The ::paginate signal is intended to be used for paginating a document\n in small chunks, to avoid blocking the user interface for a long\n time. The signal handler should update the number of pages using\n gtk_print_operation_set_n_pages(), and return TRUE if the document\n has been completely paginated.\n If you don't need to do pagination in chunks, you can simply do\n it all in the ::begin-print handler, and set the number of pages\n from there.\n TRUE if pagination is complete\n Since 2.10\n\t \n",
"line" : 393}
,
{
"name" : "callBackPaginate",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkPrintOperation* operationStruct, GtkPrintContext* context, PrintOperation printOperation)",
"line" : 408}
,
{
"name" : "onPreviewListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GtkPrintOperationPreview*, PrintContext, Window, PrintOperation)[]",
"line" : 421}
,
{
"name" : "addOnPreview",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GtkPrintOperationPreview*, PrintContext, Window, PrintOperation) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Gets emitted when a preview is requested from the native dialog.\n The default handler for this signal uses an external viewer\n application to preview.\n To implement a custom print preview, an application must return\n TRUE from its handler for this signal. In order to use the\n provided context for the preview implementation, it must be\n given a suitable cairo context with gtk_print_context_set_cairo_context().\n The custom preview implementation can use\n gtk_print_operation_preview_is_selected() and\n gtk_print_operation_preview_render_page() to find pages which\n are selected for print and render them. The preview must be\n finished by calling gtk_print_operation_preview_end_preview()\n (typically in response to the user clicking a close button).\n TRUE if the listener wants to take over control of the preview\n Since 2.10\n\t \n",
"line" : 439}
,
{
"name" : "callBackPreview",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkPrintOperation* operationStruct, GtkPrintOperationPreview* preview, GtkPrintContext* context, GtkWindow* parent, PrintOperation printOperation)",
"line" : 454}
,
{
"name" : "onRequestPageSetupListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(PrintContext, int, PageSetup, PrintOperation)[]",
"line" : 467}
,
{
"name" : "addOnRequestPageSetup",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(PrintContext, int, PageSetup, PrintOperation) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted once for every page that is printed, to give\n the application a chance to modify the page setup. Any changes\n done to setup will be in force only for printing this page.\n Since 2.10\n\t \n",
"line" : 474}
,
{
"name" : "callBackRequestPageSetup",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkPrintOperation* operationStruct, GtkPrintContext* context, int pageNr, GtkPageSetup* setup, PrintOperation printOperation)",
"line" : 489}
,
{
"name" : "onStatusChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(PrintOperation)[]",
"line" : 497}
,
{
"name" : "addOnStatusChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(PrintOperation) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted at between the various phases of the print operation.\n See GtkPrintStatus for the phases that are being discriminated.\n Use gtk_print_operation_get_status() to find out the current\n status.\n Since 2.10\n\t \n",
"line" : 505}
,
{
"name" : "callBackStatusChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkPrintOperation* operationStruct, PrintOperation printOperation)",
"line" : 520}
,
{
"name" : "onUpdateCustomWidgetListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Widget, PageSetup, PrintSettings, PrintOperation)[]",
"line" : 528}
,
{
"name" : "addOnUpdateCustomWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Widget, PageSetup, PrintSettings, PrintOperation) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted after change of selected printer. The actual page setup and\n print settings are passed to the custom widget, which can actualize\n itself according to this change.\n Since 2.18\n\t \n",
"line" : 535}
,
{
"name" : "callBackUpdateCustomWidget",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkPrintOperation* operationStruct, GtkWidget* widget, GtkPageSetup* setup, GtkPrintSettings* settings, PrintOperation printOperation)",
"line" : 550}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "PrintOperation()",
"comment" : "\n Creates a new GtkPrintOperation.\n Since 2.10\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 564}
,
{
"name" : "setAllowAsync",
"kind" : "function",
"protection" : "public",
"type" : "void(int allowAsync)",
"comment" : "\n Sets whether the gtk_print_operation_run() may return\n before the print operation is completed. Note that\n some platforms may not allow asynchronous operation.\n Since 2.10\n Params:\n allowAsync = TRUE to allow asynchronous operation\n\t \n",
"line" : 583}
,
{
"name" : "getError",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Call this when the result of a print operation is\n GTK_PRINT_OPERATION_RESULT_ERROR, either as returned by\n gtk_print_operation_run(), or in the \"done\" signal\n handler. The returned GError will contain more details on what went wrong.\n Since 2.10\n\t \n",
"line" : 596}
,
{
"name" : "setDefaultPageSetup",
"kind" : "function",
"protection" : "public",
"type" : "void(PageSetup defaultPageSetup)",
"comment" : "\n Makes default_page_setup the default page setup for op.\n This page setup will be used by gtk_print_operation_run(),\n but it can be overridden on a per-page basis by connecting\n to the \"request-page-setup\" signal.\n Since 2.10\n Params:\n defaultPageSetup = a GtkPageSetup, or NULL. [allow-none]\n\t \n",
"line" : 619}
,
{
"name" : "getDefaultPageSetup",
"kind" : "function",
"protection" : "public",
"type" : "PageSetup()",
"comment" : "\n Returns the default page setup, see\n gtk_print_operation_set_default_page_setup().\n Since 2.10\n Returns: the default page setup. [transfer none]\n\t \n",
"line" : 631}
,
{
"name" : "setPrintSettings",
"kind" : "function",
"protection" : "public",
"type" : "void(PrintSettings printSettings)",
"comment" : "\n Sets the print settings for op. This is typically used to\n re-establish print settings from a previous print operation,\n see gtk_print_operation_run().\n Since 2.10\n Params:\n printSettings = GtkPrintSettings. [allow-none]\n\t \n",
"line" : 650}
,
{
"name" : "getPrintSettings",
"kind" : "function",
"protection" : "public",
"type" : "PrintSettings()",
"comment" : "\n Returns the current print settings.\n Note that the return value is NULL until either\n gtk_print_operation_set_print_settings() or\n gtk_print_operation_run() have been called.\n Since 2.10\n Returns: the current print settings of op. [transfer none]\n\t \n",
"line" : 664}
,
{
"name" : "setJobName",
"kind" : "function",
"protection" : "public",
"type" : "void(string jobName)",
"comment" : "\n Sets the name of the print job. The name is used to identify\n the job (e.g. in monitoring applications like eggcups).\n If you don't set a job name, GTK+ picks a default one by\n numbering successive print jobs.\n Since 2.10\n Params:\n jobName = a string that identifies the print job\n\t \n",
"line" : 684}
,
{
"name" : "setNPages",
"kind" : "function",
"protection" : "public",
"type" : "void(int nPages)",
"comment" : "\n Sets the number of pages in the document.\n This must be set to a positive number\n before the rendering starts. It may be set in a\n \"begin-print\" signal hander.\n Note that the page numbers passed to the\n \"request-page-setup\"\n and \"draw-page\" signals are 0-based, i.e. if\n the user chooses to print all pages, the last ::draw-page signal\n will be for page n_pages - 1.\n Since 2.10\n Params:\n nPages = the number of pages\n\t \n",
"line" : 704}
,
{
"name" : "getNPagesToPrint",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the number of pages that will be printed.\n Note that this value is set during print preparation phase\n (GTK_PRINT_STATUS_PREPARING), so this function should never be\n called before the data generation phase (GTK_PRINT_STATUS_GENERATING_DATA).\n You can connect to the \"status-changed\" signal\n and call gtk_print_operation_get_n_pages_to_print() when\n print status is GTK_PRINT_STATUS_GENERATING_DATA.\n This is typically used to track the progress of print operation.\n Since 2.18\n Returns: the number of pages that will be printed\n\t \n",
"line" : 722}
,
{
"name" : "setCurrentPage",
"kind" : "function",
"protection" : "public",
"type" : "void(int currentPage)",
"comment" : "\n Sets the current page.\n If this is called before gtk_print_operation_run(),\n the user will be able to select to print only the current page.\n Note that this only makes sense for pre-paginated documents.\n Since 2.10\n Params:\n currentPage = the current page, 0-based\n\t \n",
"line" : 737}
,
{
"name" : "setUseFullPage",
"kind" : "function",
"protection" : "public",
"type" : "void(int fullPage)",
"comment" : "\n If full_page is TRUE, the transformation for the cairo context\n obtained from GtkPrintContext puts the origin at the top left\n corner of the page (which may not be the top left corner of the\n sheet, depending on page orientation and the number of pages per\n sheet). Otherwise, the origin is at the top left corner of the\n imageable area (i.e. inside the margins).\n Since 2.10\n Params:\n fullPage = TRUE to set up the GtkPrintContext for the full page\n\t \n",
"line" : 754}
,
{
"name" : "setUnit",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkUnit unit)",
"comment" : "\n Sets up the transformation for the cairo context obtained from\n GtkPrintContext in such a way that distances are measured in\n units of unit.\n Since 2.10\n Params:\n unit = the unit to use\n\t \n",
"line" : 768}
,
{
"name" : "setExportFilename",
"kind" : "function",
"protection" : "public",
"type" : "void(string filename)",
"comment" : "\n Sets up the GtkPrintOperation to generate a file instead\n of showing the print dialog. The indended use of this function\n is for implementing \"Export to PDF\" actions. Currently, PDF\n is the only supported format.\n \"Print to PDF\" support is independent of this and is done\n by letting the user pick the \"Print to PDF\" item from the list\n of printers in the print dialog.\n Since 2.10\n Params:\n filename = the filename for the exported file\n\t \n",
"line" : 786}
,
{
"name" : "setShowProgress",
"kind" : "function",
"protection" : "public",
"type" : "void(int showProgress)",
"comment" : "\n If show_progress is TRUE, the print operation will show a\n progress dialog during the print operation.\n Since 2.10\n Params:\n showProgress = TRUE to show a progress dialog\n\t \n",
"line" : 799}
,
{
"name" : "setTrackPrintStatus",
"kind" : "function",
"protection" : "public",
"type" : "void(int trackStatus)",
"comment" : "\n If track_status is TRUE, the print operation will try to continue report\n on the status of the print job in the printer queues and printer. This\n can allow your application to show things like \"out of paper\" issues,\n and when the print job actually reaches the printer.\n This function is often implemented using some form of polling, so it should\n not be enabled unless needed.\n Since 2.10\n Params:\n trackStatus = TRUE to track status after printing\n\t \n",
"line" : 816}
,
{
"name" : "setCustomTabLabel",
"kind" : "function",
"protection" : "public",
"type" : "void(string label)",
"comment" : "\n Sets the label for the tab holding custom widgets.\n Since 2.10\n Params:\n label = the label to use, or NULL to use the default label. [allow-none]\n\t \n",
"line" : 828}
,
{
"name" : "run",
"kind" : "function",
"protection" : "public",
"type" : "GtkPrintOperationResult(GtkPrintOperationAction action, Window parent)",
"comment" : "\n Runs the print operation, by first letting the user modify\n print settings in the print dialog, and then print the document.\n Normally that this function does not return until the rendering of all\n pages is complete. You can connect to the\n \"status-changed\" signal on op to obtain some\n information about the progress of the print operation.\n Furthermore, it may use a recursive mainloop to show the print dialog.\n If you call gtk_print_operation_set_allow_async() or set the\n \"allow-async\" property the operation will run\n asynchronously if this is supported on the platform. The\n \"done\" signal will be emitted with the result of the\n operation when the it is done (i.e. when the dialog is canceled, or when\n the print succeeds or fails).\n $(DDOC_COMMENT example)\n Note that gtk_print_operation_run() can only be called once on a\n given GtkPrintOperation.\n Since 2.10\n Params:\n action = the action to start\n parent = Transient parent of the dialog. [allow-none]\n Returns: the result of the print operation. A return value of GTK_PRINT_OPERATION_RESULT_APPLY indicates that the printing was completed successfully. In this case, it is a good idea to obtain the used print settings with gtk_print_operation_get_print_settings() and store them for reuse with the next print operation. A value of GTK_PRINT_OPERATION_RESULT_IN_PROGRESS means the operation is running asynchronously, and will emit the \"done\" signal when done.\n Throws: GException on failure.\n\t \n",
"line" : 858}
,
{
"name" : "cancel",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Cancels a running print operation. This function may\n be called from a \"begin-print\",\n \"paginate\" or \"draw-page\"\n signal handler to stop the currently running print\n operation.\n Since 2.10\n\t \n",
"line" : 881}
,
{
"name" : "drawPageFinish",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Signalize that drawing of particular page is complete.\n It is called after completion of page drawing (e.g. drawing in another\n thread).\n If gtk_print_operation_set_defer_drawing() was called before, then this function\n has to be called by application. In another case it is called by the library\n itself.\n Since 2.16\n\t \n",
"line" : 896}
,
{
"name" : "setDeferDrawing",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Sets up the GtkPrintOperation to wait for calling of\n gtk_print_operation_draw_page_finish() from application. It can\n be used for drawing page in another thread.\n This function must be called in the callback of \"draw-page\" signal.\n Since 2.16\n\t \n",
"line" : 909}
,
{
"name" : "getStatus",
"kind" : "function",
"protection" : "public",
"type" : "GtkPrintStatus()",
"comment" : "\n Returns the status of the print operation.\n Also see gtk_print_operation_get_status_string().\n Since 2.10\n Returns: the status of the print operation\n\t \n",
"line" : 921}
,
{
"name" : "getStatusString",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns a string representation of the status of the\n print operation. The string is translated and suitable\n for displaying the print status e.g. in a GtkStatusbar.\n Use gtk_print_operation_get_status() to obtain a status\n value that is suitable for programmatic use.\n Since 2.10\n Returns: a string representation of the status of the print operation\n\t \n",
"line" : 936}
,
{
"name" : "isFinished",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n A convenience function to find out if the print operation\n is finished, either successfully (GTK_PRINT_STATUS_FINISHED)\n or unsuccessfully (GTK_PRINT_STATUS_FINISHED_ABORTED).\n Note: when you enable print status tracking the print operation\n can be in a non-finished state even after done has been called, as\n the operation status then tracks the print job status on the printer.\n Since 2.10\n Returns: TRUE, if the print operation is finished.\n\t \n",
"line" : 952}
,
{
"name" : "setSupportSelection",
"kind" : "function",
"protection" : "public",
"type" : "void(int supportSelection)",
"comment" : "\n Sets whether selection is supported by GtkPrintOperation.\n Since 2.18\n Params:\n supportSelection = TRUE to support selection\n\t \n",
"line" : 964}
,
{
"name" : "getSupportSelection",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value of \"support-selection\" property.\n Since 2.18\n Returns: whether the application supports print of selection\n\t \n",
"line" : 975}
,
{
"name" : "setHasSelection",
"kind" : "function",
"protection" : "public",
"type" : "void(int hasSelection)",
"comment" : "\n Sets whether there is a selection to print.\n Application has to set number of pages to which the selection\n will draw by gtk_print_operation_set_n_pages() in a callback of\n \"begin-print\".\n Since 2.18\n Params:\n hasSelection = TRUE indicates that a selection exists\n\t \n",
"line" : 990}
,
{
"name" : "getHasSelection",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value of \"has-selection\" property.\n Since 2.18\n Returns: whether there is a selection\n\t \n",
"line" : 1001}
,
{
"name" : "setEmbedPageSetup",
"kind" : "function",
"protection" : "public",
"type" : "void(int embed)",
"comment" : "\n Embed page size combo box and orientation combo box into page setup page.\n Selected page setup is stored as default page setup in GtkPrintOperation.\n Since 2.18\n Params:\n embed = TRUE to embed page setup selection in the GtkPrintDialog\n\t \n",
"line" : 1014}
,
{
"name" : "getEmbedPageSetup",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value of \"embed-page-setup\" property.\n Since 2.18\n Returns: whether page setup selection combos are embedded\n\t \n",
"line" : 1025}
,
{
"name" : "gtkPrintRunPageSetupDialog",
"kind" : "function",
"protection" : "public",
"type" : "PageSetup(Window parent, PageSetup pageSetup, PrintSettings settings)",
"comment" : "\n Runs a page setup dialog, letting the user modify the values from\n page_setup. If the user cancels the dialog, the returned GtkPageSetup\n is identical to the passed in page_setup, otherwise it contains the\n modifications done in the dialog.\n Note that this function may use a recursive mainloop to show the page\n setup dialog. See gtk_print_run_page_setup_dialog_async() if this is\n a problem.\n Since 2.10\n Params:\n parent = transient parent. [allow-none]\n pageSetup = an existing GtkPageSetup. [allow-none]\n settings = a GtkPrintSettings\n Returns: a new GtkPageSetup. [transfer full]\n\t \n",
"line" : 1046}
,
{
"name" : "gtkPrintRunPageSetupDialogAsync",
"kind" : "function",
"protection" : "public",
"type" : "void(Window parent, PageSetup pageSetup, PrintSettings settings, extern (C) void function(GtkPageSetup*, void*) doneCb, void* data)",
"comment" : "\n Runs a page setup dialog, letting the user modify the values from page_setup.\n In contrast to gtk_print_run_page_setup_dialog(), this function returns after\n showing the page setup dialog on platforms that support this, and calls done_cb\n from a signal handler for the ::response signal of the dialog.\n Since 2.10\n Params:\n parent = transient parent, or NULL. [allow-none]\n pageSetup = an existing GtkPageSetup, or NULL. [allow-none]\n settings = a GtkPrintSettings\n doneCb = a function to call when the user saves the modified page setup\n data = user data to pass to done_cb\n\t \n",
"line" : 1070}
]
}
]
}
,
{
"name" : "gtk.PrintOperationPreviewIF",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/PrintOperationPreviewIF.d",
"members" : [
{
"name" : "PrintOperationPreviewIF",
"kind" : "interface",
"protection" : "public",
"comment" : "\n Description\n GtkPrintOperation is the high-level, portable printing API. It looks\n a bit different than other GTK+ dialogs such as the GtkFileChooser,\n since some platforms don't expose enough infrastructure to implement\n a good print dialog. On such platforms, GtkPrintOperation uses the\n native print dialog. On platforms which do not provide a native\n print dialog, GTK+ uses its own, see GtkPrintUnixDialog.\n The typical way to use the high-level printing API is to create a\n GtkPrintOperation object with gtk_print_operation_new() when the user\n selects to print. Then you set some properties on it, e.g. the page size,\n any GtkPrintSettings from previous print operations, the number of pages,\n the current page, etc.\n Then you start the print operation by calling gtk_print_operation_run().\n It will then show a dialog, let the user select a printer and options.\n When the user finished the dialog various signals will be emitted on the\n GtkPrintOperation, the main one being ::draw-page, which you are supposed\n to catch and render the page on the provided GtkPrintContext using Cairo.\n $(DDOC_COMMENT example)\n By default GtkPrintOperation uses an external application to do\n print preview. To implement a custom print preview, an application\n must connect to the preview signal. The functions\n gtk_print_operation_print_preview_render_page(),\n gtk_print_operation_preview_end_preview() and\n gtk_print_operation_preview_is_selected() are useful\n when implementing a print preview.\n Printing support was added in GTK+ 2.10.\n \n",
"line" : 114,
"members" : [
{
"name" : "getPrintOperationPreviewTStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkPrintOperationPreview*()",
"line" : 117}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 120}
,
{
"name" : "onUpdateCustomWidgetListeners",
"kind" : "function",
"protection" : "public",
"type" : "void delegate(Widget, PageSetup, PrintSettings, PrintOperationPreviewIF)[]()",
"comment" : "\n\t \n",
"line" : 126}
,
{
"name" : "addOnUpdateCustomWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Widget, PageSetup, PrintSettings, PrintOperationPreviewIF) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted after change of selected printer. The actual page setup and\n print settings are passed to the custom widget, which can actualize\n itself according to this change.\n Since 2.18\n\t \n",
"line" : 133}
,
{
"name" : "onGotPageSizeListeners",
"kind" : "function",
"protection" : "public",
"type" : "void delegate(GtkPrintContext*, PageSetup, PrintOperationPreviewIF)[]()",
"line" : 134}
,
{
"name" : "addOnGotPageSize",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkPrintContext*, PageSetup, PrintOperationPreviewIF) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::got-page-size signal is emitted once for each page\n that gets rendered to the preview.\n A handler for this signal should update the context\n according to page_setup and set up a suitable cairo\n context, using gtk_print_context_set_cairo_context().\n\t \n",
"line" : 142}
,
{
"name" : "onReadyListeners",
"kind" : "function",
"protection" : "public",
"type" : "void delegate(GtkPrintContext*, PrintOperationPreviewIF)[]()",
"line" : 143}
,
{
"name" : "addOnReady",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkPrintContext*, PrintOperationPreviewIF) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::ready signal gets emitted once per preview operation,\n before the first page is rendered.\n A handler for this signal can be used for setup tasks.\n See Also\n GtkPrintContext, GtkPrintUnixDialog\n\t \n",
"line" : 151}
,
{
"name" : "endPreview",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Ends a preview.\n This function must be called to finish a custom print preview.\n Since 2.10\n\t \n",
"line" : 158}
,
{
"name" : "isSelected",
"kind" : "function",
"protection" : "public",
"type" : "int(int pageNr)",
"comment" : "\n Returns whether the given page is included in the set of pages that\n have been selected for printing.\n Since 2.10\n Params:\n pageNr = a page number\n Returns: TRUE if the page has been selected for printing\n\t \n",
"line" : 168}
,
{
"name" : "renderPage",
"kind" : "function",
"protection" : "public",
"type" : "void(int pageNr)",
"comment" : "\n Renders a page to the preview, using the print context that\n was passed to the \"preview\" handler together\n with preview.\n A custom iprint preview should use this function in its ::expose\n handler to render the currently selected page.\n Note that this function requires a suitable cairo context to\n be associated with the print context.\n Since 2.10\n Params:\n pageNr = the page to render\n\t \n",
"line" : 182}
]
}
]
}
,
{
"name" : "gtk.PrintOperationPreviewT",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/PrintOperationPreviewT.d",
"members" : [
{
"name" : "PrintOperationPreviewT(TStruct)",
"kind" : "template",
"protection" : "public",
"comment" : "\n Description\n GtkPrintOperation is the high-level, portable printing API. It looks\n a bit different than other GTK+ dialogs such as the GtkFileChooser,\n since some platforms don't expose enough infrastructure to implement\n a good print dialog. On such platforms, GtkPrintOperation uses the\n native print dialog. On platforms which do not provide a native\n print dialog, GTK+ uses its own, see GtkPrintUnixDialog.\n The typical way to use the high-level printing API is to create a\n GtkPrintOperation object with gtk_print_operation_new() when the user\n selects to print. Then you set some properties on it, e.g. the page size,\n any GtkPrintSettings from previous print operations, the number of pages,\n the current page, etc.\n Then you start the print operation by calling gtk_print_operation_run().\n It will then show a dialog, let the user select a printer and options.\n When the user finished the dialog various signals will be emitted on the\n GtkPrintOperation, the main one being ::draw-page, which you are supposed\n to catch and render the page on the provided GtkPrintContext using Cairo.\n $(DDOC_COMMENT example)\n By default GtkPrintOperation uses an external application to do\n print preview. To implement a custom print preview, an application\n must connect to the preview signal. The functions\n gtk_print_operation_print_preview_render_page(),\n gtk_print_operation_preview_end_preview() and\n gtk_print_operation_preview_is_selected() are useful\n when implementing a print preview.\n Printing support was added in GTK+ 2.10.\n \n",
"line" : 114,
"members" : [
{
"name" : "gtkPrintOperationPreview",
"kind" : "variable",
"type" : "GtkPrintOperationPreview*",
"comment" : " the main Gtk struct \n",
"line" : 118}
,
{
"name" : "getPrintOperationPreviewTStruct",
"kind" : "function",
"type" : "GtkPrintOperationPreview*()",
"line" : 121}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 129}
,
{
"name" : "_onUpdateCustomWidgetListeners",
"kind" : "variable",
"type" : "void delegate(Widget, PageSetup, PrintSettings, PrintOperationPreviewIF)[]",
"line" : 131}
,
{
"name" : "onUpdateCustomWidgetListeners",
"kind" : "function",
"type" : "void delegate(Widget, PageSetup, PrintSettings, PrintOperationPreviewIF)[]()",
"line" : 132}
,
{
"name" : "addOnUpdateCustomWidget",
"kind" : "function",
"type" : "void(void delegate(Widget, PageSetup, PrintSettings, PrintOperationPreviewIF) dlg, ConnectFlags connectFlags = cast(ConnectFlags)0)",
"comment" : "\n Emitted after change of selected printer. The actual page setup and\n print settings are passed to the custom widget, which can actualize\n itself according to this change.\n Since 2.18\n\t \n",
"line" : 142}
,
{
"name" : "callBackUpdateCustomWidget",
"kind" : "function",
"type" : "extern (C) void(GtkPrintOperation* operationStruct, GtkWidget* widget, GtkPageSetup* setup, GtkPrintSettings* settings, PrintOperationPreviewIF printOperationPreviewIF)",
"line" : 157}
,
{
"name" : "_onGotPageSizeListeners",
"kind" : "variable",
"type" : "void delegate(GtkPrintContext*, PageSetup, PrintOperationPreviewIF)[]",
"line" : 165}
,
{
"name" : "onGotPageSizeListeners",
"kind" : "function",
"type" : "void delegate(GtkPrintContext*, PageSetup, PrintOperationPreviewIF)[]()",
"line" : 166}
,
{
"name" : "addOnGotPageSize",
"kind" : "function",
"type" : "void(void delegate(GtkPrintContext*, PageSetup, PrintOperationPreviewIF) dlg, ConnectFlags connectFlags = cast(ConnectFlags)0)",
"comment" : "\n The ::got-page-size signal is emitted once for each page\n that gets rendered to the preview.\n A handler for this signal should update the context\n according to page_setup and set up a suitable cairo\n context, using gtk_print_context_set_cairo_context().\n\t \n",
"line" : 177}
,
{
"name" : "callBackGotPageSize",
"kind" : "function",
"type" : "extern (C) void(GtkPrintOperationPreview* previewStruct, GtkPrintContext* context, GtkPageSetup* pageSetup, PrintOperationPreviewIF printOperationPreviewIF)",
"line" : 192}
,
{
"name" : "_onReadyListeners",
"kind" : "variable",
"type" : "void delegate(GtkPrintContext*, PrintOperationPreviewIF)[]",
"line" : 200}
,
{
"name" : "onReadyListeners",
"kind" : "function",
"type" : "void delegate(GtkPrintContext*, PrintOperationPreviewIF)[]()",
"line" : 201}
,
{
"name" : "addOnReady",
"kind" : "function",
"type" : "void(void delegate(GtkPrintContext*, PrintOperationPreviewIF) dlg, ConnectFlags connectFlags = cast(ConnectFlags)0)",
"comment" : "\n The ::ready signal gets emitted once per preview operation,\n before the first page is rendered.\n A handler for this signal can be used for setup tasks.\n See Also\n GtkPrintContext, GtkPrintUnixDialog\n\t \n",
"line" : 212}
,
{
"name" : "callBackReady",
"kind" : "function",
"type" : "extern (C) void(GtkPrintOperationPreview* previewStruct, GtkPrintContext* context, PrintOperationPreviewIF printOperationPreviewIF)",
"line" : 227}
,
{
"name" : "endPreview",
"kind" : "function",
"type" : "void()",
"comment" : "\n Ends a preview.\n This function must be called to finish a custom print preview.\n Since 2.10\n\t \n",
"line" : 241}
,
{
"name" : "isSelected",
"kind" : "function",
"type" : "int(int pageNr)",
"comment" : "\n Returns whether the given page is included in the set of pages that\n have been selected for printing.\n Since 2.10\n Params:\n pageNr = a page number\n Returns: TRUE if the page has been selected for printing\n\t \n",
"line" : 255}
,
{
"name" : "renderPage",
"kind" : "function",
"type" : "void(int pageNr)",
"comment" : "\n Renders a page to the preview, using the print context that\n was passed to the \"preview\" handler together\n with preview.\n A custom iprint preview should use this function in its ::expose\n handler to render the currently selected page.\n Note that this function requires a suitable cairo context to\n be associated with the print context.\n Since 2.10\n Params:\n pageNr = the page to render\n\t \n",
"line" : 273}
]
}
]
}
,
{
"name" : "gtk.PrintSettings",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/PrintSettings.d",
"members" : [
{
"name" : "PrintSettings",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkPrintSettings object represents the settings of a print dialog in\n a system-independent way. The main use for this object is that once\n you've printed you can get a settings object that represents the settings\n the user chose, and the next time you print you can pass that object in so\n that the user doesn't have to re-set all his settings.\n Its also possible to enumerate the settings so that you can easily save\n the settings for the next time your app runs, or even store them in a\n document. The predefined keys try to use shared values as much as possible\n so that moving such a document between systems still works.\n Printing support was added in GTK+ 2.10.\n \n",
"line" : 92,
"base" : "ObjectG",
"members" : [
{
"name" : "gtkPrintSettings",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkPrintSettings*",
"comment" : " the main Gtk struct \n",
"line" : 96}
,
{
"name" : "getPrintSettingsStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkPrintSettings*()",
"line" : 99}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 106}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "PrintSettings(GtkPrintSettings* gtkPrintSettings)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 114}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 132}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "PrintSettings()",
"comment" : "\n\t \n\n Creates a new GtkPrintSettings object.\n Since 2.10\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 146}
,
{
"name" : "copy",
"kind" : "function",
"protection" : "public",
"type" : "PrintSettings()",
"comment" : "\n Copies a GtkPrintSettings object.\n Since 2.10\n Returns: a newly allocated copy of other. [transfer full]\n\t \n",
"line" : 162}
,
{
"name" : "hasKey",
"kind" : "function",
"protection" : "public",
"type" : "int(string key)",
"comment" : "\n Returns TRUE, if a value is associated with key.\n Since 2.10\n Params:\n key = a key\n Returns: TRUE, if key has a value\n\t \n",
"line" : 180}
,
{
"name" : "get",
"kind" : "function",
"protection" : "public",
"type" : "string(string key)",
"comment" : "\n Looks up the string value associated with key.\n Since 2.10\n Params:\n key = a key\n Returns: the string value for key\n\t \n",
"line" : 193}
,
{
"name" : "set",
"kind" : "function",
"protection" : "public",
"type" : "void(string key, string value)",
"comment" : "\n Associates value with key.\n Since 2.10\n Params:\n key = a key\n value = a string value, or NULL. [allow-none]\n\t \n",
"line" : 206}
,
{
"name" : "unset",
"kind" : "function",
"protection" : "public",
"type" : "void(string key)",
"comment" : "\n Removes any value associated with key.\n This has the same effect as setting the value to NULL.\n Since 2.10\n Params:\n key = a key\n\t \n",
"line" : 219}
,
{
"name" : "foreac",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) void function(char*, char*, void*) func, void* userData)",
"comment" : "\n Calls func for each key-value pair of settings.\n Since 2.10\n Params:\n func = the function to call. [scope call]\n userData = user data for func\n\t \n",
"line" : 232}
,
{
"name" : "getBool",
"kind" : "function",
"protection" : "public",
"type" : "int(string key)",
"comment" : "\n Returns the boolean represented by the value\n that is associated with key.\n The string \"true\" represents TRUE, any other\n string FALSE.\n Since 2.10\n Params:\n key = a key\n Returns: TRUE, if key maps to a true value.\n\t \n",
"line" : 248}
,
{
"name" : "setBool",
"kind" : "function",
"protection" : "public",
"type" : "void(string key, int value)",
"comment" : "\n Sets key to a boolean value.\n Since 2.10\n Params:\n key = a key\n value = a boolean\n\t \n",
"line" : 261}
,
{
"name" : "getDouble",
"kind" : "function",
"protection" : "public",
"type" : "double(string key)",
"comment" : "\n Returns the double value associated with key, or 0.\n Since 2.10\n Params:\n key = a key\n Returns: the double value of key\n\t \n",
"line" : 274}
,
{
"name" : "getDoubleWithDefault",
"kind" : "function",
"protection" : "public",
"type" : "double(string key, double def)",
"comment" : "\n Returns the floating point number represented by\n the value that is associated with key, or default_val\n if the value does not represent a floating point number.\n Floating point numbers are parsed with g_ascii_strtod().\n Since 2.10\n Params:\n key = a key\n def = the default value\n Returns: the floating point number associated with key\n\t \n",
"line" : 291}
,
{
"name" : "setDouble",
"kind" : "function",
"protection" : "public",
"type" : "void(string key, double value)",
"comment" : "\n Sets key to a double value.\n Since 2.10\n Params:\n key = a key\n value = a double value\n\t \n",
"line" : 304}
,
{
"name" : "getLength",
"kind" : "function",
"protection" : "public",
"type" : "double(string key, GtkUnit unit)",
"comment" : "\n Returns the value associated with key, interpreted\n as a length. The returned value is converted to units.\n Since 2.10\n Params:\n key = a key\n unit = the unit of the return value\n Returns: the length value of key, converted to unit\n\t \n",
"line" : 319}
,
{
"name" : "setLength",
"kind" : "function",
"protection" : "public",
"type" : "void(string key, double value, GtkUnit unit)",
"comment" : "\n Associates a length in units of unit with key.\n Since 2.10\n Params:\n key = a key\n value = a length\n unit = the unit of length\n\t \n",
"line" : 333}
,
{
"name" : "getInt",
"kind" : "function",
"protection" : "public",
"type" : "int(string key)",
"comment" : "\n Returns the integer value of key, or 0.\n Since 2.10\n Params:\n key = a key\n Returns: the integer value of key\n\t \n",
"line" : 346}
,
{
"name" : "getIntWithDefault",
"kind" : "function",
"protection" : "public",
"type" : "int(string key, int def)",
"comment" : "\n Returns the value of key, interpreted as\n an integer, or the default value.\n Since 2.10\n Params:\n key = a key\n def = the default value\n Returns: the integer value of key\n\t \n",
"line" : 361}
,
{
"name" : "setInt",
"kind" : "function",
"protection" : "public",
"type" : "void(string key, int value)",
"comment" : "\n Sets key to an integer value.\n Since 2.10\n Params:\n key = a key\n value = an integer\n\t \n",
"line" : 374}
,
{
"name" : "getPrinter",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Convenience function to obtain the value of\n GTK_PRINT_SETTINGS_PRINTER.\n Since 2.10\n Returns: the printer name\n\t \n",
"line" : 386}
,
{
"name" : "setPrinter",
"kind" : "function",
"protection" : "public",
"type" : "void(string printer)",
"comment" : "\n Convenience function to set GTK_PRINT_SETTINGS_PRINTER\n to printer.\n Since 2.10\n Params:\n printer = the printer name\n\t \n",
"line" : 399}
,
{
"name" : "getOrientation",
"kind" : "function",
"protection" : "public",
"type" : "GtkPageOrientation()",
"comment" : "\n Get the value of GTK_PRINT_SETTINGS_ORIENTATION,\n converted to a GtkPageOrientation.\n Since 2.10\n Returns: the orientation\n\t \n",
"line" : 411}
,
{
"name" : "setOrientation",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkPageOrientation orientation)",
"comment" : "\n Sets the value of GTK_PRINT_SETTINGS_ORIENTATION.\n Since 2.10\n Params:\n orientation = a page orientation\n\t \n",
"line" : 423}
,
{
"name" : "getPaperSize",
"kind" : "function",
"protection" : "public",
"type" : "PaperSize()",
"comment" : "\n Gets the value of GTK_PRINT_SETTINGS_PAPER_FORMAT,\n converted to a GtkPaperSize.\n Since 2.10\n Returns: the paper size\n\t \n",
"line" : 435}
,
{
"name" : "setPaperSize",
"kind" : "function",
"protection" : "public",
"type" : "void(PaperSize paperSize)",
"comment" : "\n Sets the value of GTK_PRINT_SETTINGS_PAPER_FORMAT,\n GTK_PRINT_SETTINGS_PAPER_WIDTH and\n GTK_PRINT_SETTINGS_PAPER_HEIGHT.\n Since 2.10\n Params:\n paperSize = a paper size\n\t \n",
"line" : 454}
,
{
"name" : "getPaperWidth",
"kind" : "function",
"protection" : "public",
"type" : "double(GtkUnit unit)",
"comment" : "\n Gets the value of GTK_PRINT_SETTINGS_PAPER_WIDTH,\n converted to unit.\n Since 2.10\n Params:\n unit = the unit for the return value\n Returns: the paper width, in units of unit\n\t \n",
"line" : 468}
,
{
"name" : "setPaperWidth",
"kind" : "function",
"protection" : "public",
"type" : "void(double width, GtkUnit unit)",
"comment" : "\n Sets the value of GTK_PRINT_SETTINGS_PAPER_WIDTH.\n Since 2.10\n Params:\n width = the paper width\n unit = the units of width\n\t \n",
"line" : 481}
,
{
"name" : "getPaperHeight",
"kind" : "function",
"protection" : "public",
"type" : "double(GtkUnit unit)",
"comment" : "\n Gets the value of GTK_PRINT_SETTINGS_PAPER_HEIGHT,\n converted to unit.\n Since 2.10\n Params:\n unit = the unit for the return value\n Returns: the paper height, in units of unit\n\t \n",
"line" : 495}
,
{
"name" : "setPaperHeight",
"kind" : "function",
"protection" : "public",
"type" : "void(double height, GtkUnit unit)",
"comment" : "\n Sets the value of GTK_PRINT_SETTINGS_PAPER_HEIGHT.\n Since 2.10\n Params:\n height = the paper height\n unit = the units of height\n\t \n",
"line" : 508}
,
{
"name" : "getUseColor",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value of GTK_PRINT_SETTINGS_USE_COLOR.\n Since 2.10\n Returns: whether to use color\n\t \n",
"line" : 519}
,
{
"name" : "setUseColor",
"kind" : "function",
"protection" : "public",
"type" : "void(int useColor)",
"comment" : "\n Sets the value of GTK_PRINT_SETTINGS_USE_COLOR.\n Since 2.10\n Params:\n useColor = whether to use color\n\t \n",
"line" : 531}
,
{
"name" : "getCollate",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value of GTK_PRINT_SETTINGS_COLLATE.\n Since 2.10\n Returns: whether to collate the printed pages\n\t \n",
"line" : 542}
,
{
"name" : "setCollate",
"kind" : "function",
"protection" : "public",
"type" : "void(int collate)",
"comment" : "\n Sets the value of GTK_PRINT_SETTINGS_COLLATE.\n Since 2.10\n Params:\n collate = whether to collate the output\n\t \n",
"line" : 554}
,
{
"name" : "getReverse",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value of GTK_PRINT_SETTINGS_REVERSE.\n Since 2.10\n Returns: whether to reverse the order of the printed pages\n\t \n",
"line" : 565}
,
{
"name" : "setReverse",
"kind" : "function",
"protection" : "public",
"type" : "void(int reverse)",
"comment" : "\n Sets the value of GTK_PRINT_SETTINGS_REVERSE.\n Since 2.10\n Params:\n reverse = whether to reverse the output\n\t \n",
"line" : 577}
,
{
"name" : "getDuplex",
"kind" : "function",
"protection" : "public",
"type" : "GtkPrintDuplex()",
"comment" : "\n Gets the value of GTK_PRINT_SETTINGS_DUPLEX.\n Since 2.10\n Returns: whether to print the output in duplex.\n\t \n",
"line" : 588}
,
{
"name" : "setDuplex",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkPrintDuplex duplex)",
"comment" : "\n Sets the value of GTK_PRINT_SETTINGS_DUPLEX.\n Since 2.10\n Params:\n duplex = a GtkPrintDuplex value\n\t \n",
"line" : 600}
,
{
"name" : "getQuality",
"kind" : "function",
"protection" : "public",
"type" : "GtkPrintQuality()",
"comment" : "\n Gets the value of GTK_PRINT_SETTINGS_QUALITY.\n Since 2.10\n Returns: the print quality\n\t \n",
"line" : 611}
,
{
"name" : "setQuality",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkPrintQuality quality)",
"comment" : "\n Sets the value of GTK_PRINT_SETTINGS_QUALITY.\n Since 2.10\n Params:\n quality = a GtkPrintQuality value\n\t \n",
"line" : 623}
,
{
"name" : "getNCopies",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value of GTK_PRINT_SETTINGS_N_COPIES.\n Since 2.10\n Returns: the number of copies to print\n\t \n",
"line" : 634}
,
{
"name" : "setNCopies",
"kind" : "function",
"protection" : "public",
"type" : "void(int numCopies)",
"comment" : "\n Sets the value of GTK_PRINT_SETTINGS_N_COPIES.\n Since 2.10\n Params:\n numCopies = the number of copies\n\t \n",
"line" : 646}
,
{
"name" : "getNumberUp",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value of GTK_PRINT_SETTINGS_NUMBER_UP.\n Since 2.10\n Returns: the number of pages per sheet\n\t \n",
"line" : 657}
,
{
"name" : "setNumberUp",
"kind" : "function",
"protection" : "public",
"type" : "void(int numberUp)",
"comment" : "\n Sets the value of GTK_PRINT_SETTINGS_NUMBER_UP.\n Since 2.10\n Params:\n numberUp = the number of pages per sheet\n\t \n",
"line" : 669}
,
{
"name" : "getNumberUpLayout",
"kind" : "function",
"protection" : "public",
"type" : "GtkNumberUpLayout()",
"comment" : "\n Gets the value of GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT.\n Since 2.14\n Returns: layout of page in number-up mode\n\t \n",
"line" : 680}
,
{
"name" : "setNumberUpLayout",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkNumberUpLayout numberUpLayout)",
"comment" : "\n Sets the value of GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT.\n Since 2.14\n Params:\n numberUpLayout = a GtkNumberUpLayout value\n\t \n",
"line" : 692}
,
{
"name" : "getResolution",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value of GTK_PRINT_SETTINGS_RESOLUTION.\n Since 2.10\n Returns: the resolution in dpi\n\t \n",
"line" : 703}
,
{
"name" : "setResolution",
"kind" : "function",
"protection" : "public",
"type" : "void(int resolution)",
"comment" : "\n Sets the values of GTK_PRINT_SETTINGS_RESOLUTION,\n GTK_PRINT_SETTINGS_RESOLUTION_X and\n GTK_PRINT_SETTINGS_RESOLUTION_Y.\n Since 2.10\n Params:\n resolution = the resolution in dpi\n\t \n",
"line" : 717}
,
{
"name" : "setResolutionXy",
"kind" : "function",
"protection" : "public",
"type" : "void(int resolutionX, int resolutionY)",
"comment" : "\n Sets the values of GTK_PRINT_SETTINGS_RESOLUTION,\n GTK_PRINT_SETTINGS_RESOLUTION_X and\n GTK_PRINT_SETTINGS_RESOLUTION_Y.\n Since 2.16\n Params:\n resolutionX = the horizontal resolution in dpi\n resolutionY = the vertical resolution in dpi\n\t \n",
"line" : 732}
,
{
"name" : "getResolutionX",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value of GTK_PRINT_SETTINGS_RESOLUTION_X.\n Since 2.16\n Returns: the horizontal resolution in dpi\n\t \n",
"line" : 743}
,
{
"name" : "getResolutionY",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value of GTK_PRINT_SETTINGS_RESOLUTION_Y.\n Since 2.16\n Returns: the vertical resolution in dpi\n\t \n",
"line" : 754}
,
{
"name" : "getPrinterLpi",
"kind" : "function",
"protection" : "public",
"type" : "double()",
"comment" : "\n Gets the value of GTK_PRINT_SETTINGS_PRINTER_LPI.\n Since 2.16\n Returns: the resolution in lpi (lines per inch)\n\t \n",
"line" : 765}
,
{
"name" : "setPrinterLpi",
"kind" : "function",
"protection" : "public",
"type" : "void(double lpi)",
"comment" : "\n Sets the value of GTK_PRINT_SETTINGS_PRINTER_LPI.\n Since 2.16\n Params:\n lpi = the resolution in lpi (lines per inch)\n\t \n",
"line" : 777}
,
{
"name" : "getScale",
"kind" : "function",
"protection" : "public",
"type" : "double()",
"comment" : "\n Gets the value of GTK_PRINT_SETTINGS_SCALE.\n Since 2.10\n Returns: the scale in percent\n\t \n",
"line" : 788}
,
{
"name" : "setScale",
"kind" : "function",
"protection" : "public",
"type" : "void(double scale)",
"comment" : "\n Sets the value of GTK_PRINT_SETTINGS_SCALE.\n Since 2.10\n Params:\n scale = the scale in percent\n\t \n",
"line" : 800}
,
{
"name" : "getPrintPages",
"kind" : "function",
"protection" : "public",
"type" : "GtkPrintPages()",
"comment" : "\n Gets the value of GTK_PRINT_SETTINGS_PRINT_PAGES.\n Since 2.10\n Returns: which pages to print\n\t \n",
"line" : 811}
,
{
"name" : "setPrintPages",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkPrintPages pages)",
"comment" : "\n Sets the value of GTK_PRINT_SETTINGS_PRINT_PAGES.\n Since 2.10\n Params:\n pages = a GtkPrintPages value\n\t \n",
"line" : 823}
,
{
"name" : "getPageRanges",
"kind" : "function",
"protection" : "public",
"type" : "GtkPageRange[]()",
"comment" : "\n Gets the value of GTK_PRINT_SETTINGS_PAGE_RANGES.\n Since 2.10\n Returns: an array of GtkPageRanges. Use g_free() to free the array when it is no longer needed. [array length=num_ranges][transfer full]\n\t \n",
"line" : 834}
,
{
"name" : "setPageRanges",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkPageRange[] pageRanges)",
"comment" : "\n Sets the value of GTK_PRINT_SETTINGS_PAGE_RANGES.\n Since 2.10\n Params:\n pageRanges = an array of GtkPageRanges. [array length=num_ranges]\n\t \n",
"line" : 848}
,
{
"name" : "getPageSet",
"kind" : "function",
"protection" : "public",
"type" : "GtkPageSet()",
"comment" : "\n Gets the value of GTK_PRINT_SETTINGS_PAGE_SET.\n Since 2.10\n Returns: the set of pages to print\n\t \n",
"line" : 859}
,
{
"name" : "setPageSet",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkPageSet pageSet)",
"comment" : "\n Sets the value of GTK_PRINT_SETTINGS_PAGE_SET.\n Since 2.10\n Params:\n pageSet = a GtkPageSet value\n\t \n",
"line" : 871}
,
{
"name" : "getDefaultSource",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the value of GTK_PRINT_SETTINGS_DEFAULT_SOURCE.\n Since 2.10\n Returns: the default source\n\t \n",
"line" : 882}
,
{
"name" : "setDefaultSource",
"kind" : "function",
"protection" : "public",
"type" : "void(string defaultSource)",
"comment" : "\n Sets the value of GTK_PRINT_SETTINGS_DEFAULT_SOURCE.\n Since 2.10\n Params:\n defaultSource = the default source\n\t \n",
"line" : 894}
,
{
"name" : "getMediaType",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the value of GTK_PRINT_SETTINGS_MEDIA_TYPE.\n The set of media types is defined in PWG 5101.1-2002 PWG.\n Since 2.10\n Returns: the media type\n\t \n",
"line" : 906}
,
{
"name" : "setMediaType",
"kind" : "function",
"protection" : "public",
"type" : "void(string mediaType)",
"comment" : "\n Sets the value of GTK_PRINT_SETTINGS_MEDIA_TYPE.\n The set of media types is defined in PWG 5101.1-2002 PWG.\n Since 2.10\n Params:\n mediaType = the media type\n\t \n",
"line" : 919}
,
{
"name" : "getDither",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the value of GTK_PRINT_SETTINGS_DITHER.\n Since 2.10\n Returns: the dithering that is used\n\t \n",
"line" : 930}
,
{
"name" : "setDither",
"kind" : "function",
"protection" : "public",
"type" : "void(string dither)",
"comment" : "\n Sets the value of GTK_PRINT_SETTINGS_DITHER.\n Since 2.10\n Params:\n dither = the dithering that is used\n\t \n",
"line" : 942}
,
{
"name" : "getFinishings",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the value of GTK_PRINT_SETTINGS_FINISHINGS.\n Since 2.10\n Returns: the finishings\n\t \n",
"line" : 953}
,
{
"name" : "setFinishings",
"kind" : "function",
"protection" : "public",
"type" : "void(string finishings)",
"comment" : "\n Sets the value of GTK_PRINT_SETTINGS_FINISHINGS.\n Since 2.10\n Params:\n finishings = the finishings\n\t \n",
"line" : 965}
,
{
"name" : "getOutputBin",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the value of GTK_PRINT_SETTINGS_OUTPUT_BIN.\n Since 2.10\n Returns: the output bin\n\t \n",
"line" : 976}
,
{
"name" : "setOutputBin",
"kind" : "function",
"protection" : "public",
"type" : "void(string outputBin)",
"comment" : "\n Sets the value of GTK_PRINT_SETTINGS_OUTPUT_BIN.\n Since 2.10\n Params:\n outputBin = the output bin\n\t \n",
"line" : 988}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "PrintSettings(string fileName)",
"comment" : "\n Reads the print settings from file_name. Returns a new GtkPrintSettings\n object with the restored settings, or NULL if an error occurred. If the\n file could not be loaded then error is set to either a GFileError or\n GKeyFileError. See gtk_print_settings_to_file().\n Since 2.12\n Params:\n fileName = the filename to read the settings from\n Throws: GException on failure.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 1005}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "PrintSettings(KeyFile keyFile, string groupName)",
"comment" : "\n Reads the print settings from the group group_name in key_file. Returns a\n new GtkPrintSettings object with the restored settings, or NULL if an\n error occurred. If the file could not be loaded then error is set to either\n a GFileError or GKeyFileError.\n Since 2.12\n Params:\n keyFile = the GKeyFile to retrieve the settings from\n groupName = the name of the group to use, or NULL to use\n the default \"Print Settings\". [allow-none]\n Throws: GException on failure.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 1037}
,
{
"name" : "loadFile",
"kind" : "function",
"protection" : "public",
"type" : "int(string fileName)",
"comment" : "\n Reads the print settings from file_name. If the file could not be loaded\n then error is set to either a GFileError or GKeyFileError.\n See gtk_print_settings_to_file().\n Since 2.14\n Params:\n fileName = the filename to read the settings from\n Returns: TRUE on success\n Throws: GException on failure.\n\t \n",
"line" : 1066}
,
{
"name" : "loadKeyFile",
"kind" : "function",
"protection" : "public",
"type" : "int(KeyFile keyFile, string groupName)",
"comment" : "\n Reads the print settings from the group group_name in key_file. If the\n file could not be loaded then error is set to either a GFileError or\n GKeyFileError.\n Since 2.14\n Params:\n keyFile = the GKeyFile to retrieve the settings from\n groupName = the name of the group to use, or NULL to use the default\n \"Print Settings\". [allow-none]\n Returns: TRUE on success\n Throws: GException on failure.\n\t \n",
"line" : 1093}
,
{
"name" : "toFile",
"kind" : "function",
"protection" : "public",
"type" : "int(string fileName)",
"comment" : "\n This function saves the print settings from settings to file_name. If the\n file could not be loaded then error is set to either a GFileError or\n GKeyFileError.\n Since 2.12\n Params:\n fileName = the file to save to\n Returns: TRUE on success\n Throws: GException on failure.\n\t \n",
"line" : 1118}
,
{
"name" : "toKeyFile",
"kind" : "function",
"protection" : "public",
"type" : "void(KeyFile keyFile, string groupName)",
"comment" : "\n This function adds the print settings from settings to key_file.\n Since 2.12\n Params:\n keyFile = the GKeyFile to save the print settings to\n groupName = the group to add the settings to in key_file, or\n NULL to use the default \"Print Settings\"\n\t \n",
"line" : 1141}
]
}
]
}
,
{
"name" : "gtk.PrintUnixDialog",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/PrintUnixDialog.d",
"members" : [
{
"name" : "PrintUnixDialog",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkPrintUnixDialog implements a print dialog for platforms\n which don't provide a native print dialog, like Unix. It can\n be used very much like any other GTK+ dialog, at the cost of\n the portability offered by the high-level printing API\n In order to print something with GtkPrintUnixDialog, you need\n to use gtk_print_unix_dialog_get_selected_printer() to obtain\n a GtkPrinter object and use it to construct a GtkPrintJob using\n gtk_print_job_new().\n GtkPrintUnixDialog uses the following response values:\n GTK_RESPONSE_OK\n for the \"Print\" button\n GTK_RESPONSE_APPLY\n for the \"Preview\" button\n GTK_RESPONSE_CANCEL\n for the \"Cancel\" button\n Printing support was added in GTK+ 2.10.\n GtkPrintUnixDialog as GtkBuildable\n The GtkPrintUnixDialog implementation of the GtkBuildable interface exposes its\n notebook internal children with the name \"notebook\".\n $(DDOC_COMMENT example)\n \n",
"line" : 108,
"base" : "Dialog",
"members" : [
{
"name" : "gtkPrintUnixDialog",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkPrintUnixDialog*",
"comment" : " the main Gtk struct \n",
"line" : 112}
,
{
"name" : "getPrintUnixDialogStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkPrintUnixDialog*()",
"line" : 115}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 122}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "PrintUnixDialog(GtkPrintUnixDialog* gtkPrintUnixDialog)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 130}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 148}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "PrintUnixDialog(string title, Window parent)",
"comment" : "\n\t \n\n Creates a new GtkPrintUnixDialog.\n Since 2.10\n Params:\n title = Title of the dialog, or NULL. [allow-none]\n parent = Transient parent of the dialog, or NULL. [allow-none]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 165}
,
{
"name" : "setPageSetup",
"kind" : "function",
"protection" : "public",
"type" : "void(PageSetup pageSetup)",
"comment" : "\n Sets the page setup of the GtkPrintUnixDialog.\n Since 2.10\n Params:\n pageSetup = a GtkPageSetup\n\t \n",
"line" : 182}
,
{
"name" : "getPageSetup",
"kind" : "function",
"protection" : "public",
"type" : "PageSetup()",
"comment" : "\n Gets the page setup that is used by the GtkPrintUnixDialog.\n Since 2.10\n Returns: the page setup of dialog. [transfer none]\n\t \n",
"line" : 193}
,
{
"name" : "setCurrentPage",
"kind" : "function",
"protection" : "public",
"type" : "void(int currentPage)",
"comment" : "\n Sets the current page number. If current_page is not -1, this enables\n the current page choice for the range of pages to print.\n Since 2.10\n Params:\n currentPage = the current page number.\n\t \n",
"line" : 211}
,
{
"name" : "getCurrentPage",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the current page of the GtkPrintDialog.\n Since 2.10\n Returns: the current page of dialog\n\t \n",
"line" : 222}
,
{
"name" : "setPrintSettings",
"kind" : "function",
"protection" : "public",
"type" : "void(PrintSettings settings)",
"comment" : "\n Sets the GtkPrintSettings for the GtkPrintUnixDialog. Typically,\n this is used to restore saved print settings from a previous print\n operation before the print dialog is shown.\n Since 2.10\n Params:\n settings = a GtkPrintSettings, or NULL. [allow-none]\n\t \n",
"line" : 236}
,
{
"name" : "getPrintSettings",
"kind" : "function",
"protection" : "public",
"type" : "PrintSettings()",
"comment" : "\n Gets a new GtkPrintSettings object that represents the\n current values in the print dialog. Note that this creates a\n new object, and you need to unref it\n if don't want to keep it.\n Since 2.10\n Returns: a new GtkPrintSettings object with the values from dialog\n\t \n",
"line" : 250}
,
{
"name" : "getSelectedPrinter",
"kind" : "function",
"protection" : "public",
"type" : "Printer()",
"comment" : "\n Gets the currently selected printer.\n Since 2.10\n Returns: the currently selected printer. [transfer none]\n\t \n",
"line" : 266}
,
{
"name" : "addCustomTab",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, Widget tabLabel)",
"comment" : "\n Adds a custom tab to the print dialog.\n Since 2.10\n Params:\n child = the widget to put in the custom tab\n tabLabel = the widget to use as tab label\n\t \n",
"line" : 284}
,
{
"name" : "setSupportSelection",
"kind" : "function",
"protection" : "public",
"type" : "void(int supportSelection)",
"comment" : "\n Sets whether the print dialog allows user to print a selection.\n Since 2.18\n Params:\n supportSelection = TRUE to allow print selection\n\t \n",
"line" : 296}
,
{
"name" : "getSupportSelection",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value of \"support-selection\" property.\n Since 2.18\n Returns: whether the application supports print of selection\n\t \n",
"line" : 307}
,
{
"name" : "setHasSelection",
"kind" : "function",
"protection" : "public",
"type" : "void(int hasSelection)",
"comment" : "\n Sets whether a selection exists.\n Since 2.18\n Params:\n hasSelection = TRUE indicates that a selection exists\n\t \n",
"line" : 319}
,
{
"name" : "getHasSelection",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value of \"has-selection\" property.\n Since 2.18\n Returns: whether there is a selection\n\t \n",
"line" : 330}
,
{
"name" : "setEmbedPageSetup",
"kind" : "function",
"protection" : "public",
"type" : "void(int embed)",
"comment" : "\n Embed page size combo box and orientation combo box into page setup page.\n Since 2.18\n Params:\n embed = embed page setup selection\n\t \n",
"line" : 342}
,
{
"name" : "getEmbedPageSetup",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value of \"embed-page-setup\" property.\n Since 2.18\n Returns: whether there is a selection\n\t \n",
"line" : 353}
,
{
"name" : "getPageSetupSet",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the page setup that is used by the GtkPrintUnixDialog.\n Since 2.18\n Returns: whether a page setup was set by user.\n\t \n",
"line" : 364}
,
{
"name" : "setManualCapabilities",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkPrintCapabilities capabilities)",
"comment" : "\n This lets you specify the printing capabilities your application\n supports. For instance, if you can handle scaling the output then\n you pass GTK_PRINT_CAPABILITY_SCALE. If you don't pass that, then\n the dialog will only let you select the scale if the printing\n system automatically handles scaling.\n Since 2.10\n Params:\n capabilities = the printing capabilities of your application\n\t \n",
"line" : 380}
,
{
"name" : "getManualCapabilities",
"kind" : "function",
"protection" : "public",
"type" : "GtkPrintCapabilities()",
"comment" : "\n Gets the value of \"manual-capabilities\" property.\n Since 2.18\n Returns: the printing capabilities\n\t \n",
"line" : 391}
]
}
]
}
,
{
"name" : "gtk.ProgressBar",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/ProgressBar.d",
"members" : [
{
"name" : "ProgressBar",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkProgressBar is typically used to display the progress of a long\n running operation. It provides a visual clue that processing\n is underway. The GtkProgressBar can be used in two different\n modes: percentage mode and activity mode.\n When an application can determine how much work needs to take place\n (e.g. read a fixed number of bytes from a file) and can monitor its\n progress, it can use the GtkProgressBar in percentage mode and the user\n sees a growing bar indicating the percentage of the work that has\n been completed. In this mode, the application is required to call\n gtk_progress_bar_set_fraction() periodically to update the progress bar.\n When an application has no accurate way of knowing the amount of work\n to do, it can use the GtkProgressBar in activity mode, which shows activity\n by a block moving back and forth within the progress area. In this mode,\n the application is required to call gtk_progress_bar_pulse() perodically\n to update the progress bar.\n There is quite a bit of flexibility provided to control the appearance\n of the GtkProgressBar. Functions are provided to control the\n orientation of the bar, optional text can be displayed along with\n the bar, and the step size used in activity mode can be set.\n Note\n The GtkProgressBar\/GtkProgress API in GTK 1.2 was bloated, needlessly complex\n and hard to use properly. Therefore GtkProgress has been deprecated\n completely and the GtkProgressBar API has been reduced to the following 10\n functions: gtk_progress_bar_new(), gtk_progress_bar_pulse(),\n gtk_progress_bar_set_text(), gtk_progress_bar_set_fraction(),\n gtk_progress_bar_set_pulse_step(), gtk_progress_bar_set_orientation(),\n gtk_progress_bar_get_text(), gtk_progress_bar_get_fraction(),\n gtk_progress_bar_get_pulse_step(), gtk_progress_bar_get_orientation().\n These have been grouped at the beginning of this section, followed by\n a large chunk of deprecated 1.2 compatibility functions.\n \n",
"line" : 104,
"base" : "Progress",
"members" : [
{
"name" : "gtkProgressBar",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkProgressBar*",
"comment" : " the main Gtk struct \n",
"line" : 108}
,
{
"name" : "getProgressBarStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkProgressBar*()",
"line" : 111}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 118}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ProgressBar(GtkProgressBar* gtkProgressBar)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 126}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 144}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ProgressBar()",
"comment" : "\n\t \n\n Creates a new GtkProgressBar.\n Creates a new GtkProgressBar.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 158}
,
{
"name" : "pulse",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Indicates that some progress is made, but you don't know how much.\n Causes the progress bar to enter \"activity mode,\" where a block\n bounces back and forth. Each call to gtk_progress_bar_pulse()\n causes the block to move by a little bit (the amount of movement\n per pulse is determined by gtk_progress_bar_set_pulse_step()).\n\t \n",
"line" : 176}
,
{
"name" : "setText",
"kind" : "function",
"protection" : "public",
"type" : "void(string text)",
"comment" : "\n Causes the given text to appear superimposed on the progress bar.\n Params:\n text = a UTF-8 string, or NULL. [allow-none]\n\t \n",
"line" : 187}
,
{
"name" : "setFraction",
"kind" : "function",
"protection" : "public",
"type" : "void(double fraction)",
"comment" : "\n Causes the progress bar to \"fill in\" the given fraction\n of the bar. The fraction should be between 0.0 and 1.0,\n inclusive.\n Params:\n fraction = fraction of the task that's been completed\n\t \n",
"line" : 200}
,
{
"name" : "setPulseStep",
"kind" : "function",
"protection" : "public",
"type" : "void(double fraction)",
"comment" : "\n Sets the fraction of total progress bar length to move the\n bouncing block for each call to gtk_progress_bar_pulse().\n Params:\n fraction = fraction between 0.0 and 1.0\n\t \n",
"line" : 212}
,
{
"name" : "setOrientation",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkProgressBarOrientation orientation)",
"comment" : "\n Causes the progress bar to switch to a different orientation\n (left-to-right, right-to-left, top-to-bottom, or bottom-to-top).\n Params:\n orientation = orientation of the progress bar\n\t \n",
"line" : 224}
,
{
"name" : "setEllipsize",
"kind" : "function",
"protection" : "public",
"type" : "void(PangoEllipsizeMode mode)",
"comment" : "\n Sets the mode used to ellipsize (add an ellipsis: \"...\") the text\n if there is not enough space to render the entire string.\n Since 2.6\n Params:\n mode = a PangoEllipsizeMode\n\t \n",
"line" : 237}
,
{
"name" : "getText",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Retrieves the text displayed superimposed on the progress bar,\n if any, otherwise NULL. The return value is a reference\n to the text, not a copy of it, so will become invalid\n if you change the text in the progress bar.\n Returns: text, or NULL; this string is owned by the widget and should not be modified or freed.\n\t \n",
"line" : 250}
,
{
"name" : "getFraction",
"kind" : "function",
"protection" : "public",
"type" : "double()",
"comment" : "\n Returns the current fraction of the task that's been completed.\n Returns: a fraction from 0.0 to 1.0\n\t \n",
"line" : 260}
,
{
"name" : "getPulseStep",
"kind" : "function",
"protection" : "public",
"type" : "double()",
"comment" : "\n Retrieves the pulse step set with gtk_progress_bar_set_pulse_step()\n Returns: a fraction from 0.0 to 1.0\n\t \n",
"line" : 270}
,
{
"name" : "getOrientation",
"kind" : "function",
"protection" : "public",
"type" : "GtkProgressBarOrientation()",
"comment" : "\n Retrieves the current progress bar orientation.\n Returns: orientation of the progress bar\n\t \n",
"line" : 280}
,
{
"name" : "getEllipsize",
"kind" : "function",
"protection" : "public",
"type" : "PangoEllipsizeMode()",
"comment" : "\n Returns the ellipsizing position of the progressbar.\n See gtk_progress_bar_set_ellipsize().\n Since 2.6\n Returns: PangoEllipsizeMode\n\t \n",
"line" : 292}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ProgressBar(Adjustment adjustment)",
"comment" : "\n Warning\n gtk_progress_bar_new_with_adjustment is deprecated and should not be used in newly-written code.\n Creates a new GtkProgressBar with an associated GtkAdjustment.\n Params:\n adjustment = . [allow-none]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 306}
,
{
"name" : "setBarStyle",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkProgressBarStyle style)",
"comment" : "\n Warning\n gtk_progress_bar_set_bar_style is deprecated and should not be used in newly-written code.\n Sets the style of the GtkProgressBar. The default style is\n GTK_PROGRESS_CONTINUOUS.\n Params:\n style = a GtkProgressBarStyle value indicating the desired style.\n\t \n",
"line" : 325}
,
{
"name" : "setDiscreteBlocks",
"kind" : "function",
"protection" : "public",
"type" : "void(uint blocks)",
"comment" : "\n Warning\n gtk_progress_bar_set_discrete_blocks is deprecated and should not be used in newly-written code.\n Sets the number of blocks that the progress bar is divided into\n when the style is GTK_PROGRESS_DISCRETE.\n Params:\n blocks = number of individual blocks making up the bar.\n\t \n",
"line" : 339}
,
{
"name" : "setActivityStep",
"kind" : "function",
"protection" : "public",
"type" : "void(uint step)",
"comment" : "\n Warning\n gtk_progress_bar_set_activity_step is deprecated and should not be used in newly-written code.\n Sets the step value used when the progress bar is in activity\n mode. The step is the amount by which the progress is incremented\n each iteration.\n Params:\n step = the amount which the progress is incremented in activity\n mode.\n\t \n",
"line" : 355}
,
{
"name" : "setActivityBlocks",
"kind" : "function",
"protection" : "public",
"type" : "void(uint blocks)",
"comment" : "\n Warning\n gtk_progress_bar_set_activity_blocks is deprecated and should not be used in newly-written code.\n Sets the number of blocks used when the progress bar is in activity\n mode. Larger numbers make the visible block smaller.\n Params:\n blocks = number of blocks which can fit within the progress bar area.\n\t \n",
"line" : 369}
,
{
"name" : "update",
"kind" : "function",
"protection" : "public",
"type" : "void(double percentage)",
"comment" : "\n Warning\n gtk_progress_bar_update is deprecated and should not be used in newly-written code.\n This function is deprecated. Please use gtk_progress_set_value() or\n gtk_progress_set_percentage() instead.\n Params:\n percentage = the new percent complete value.\n\t \n",
"line" : 383}
]
}
]
}
,
{
"name" : "gtk.Progress",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Progress.d",
"members" : [
{
"name" : "Progress",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkProgress is the abstract base class used to derive\n a GtkProgressBar which provides a visual representation of\n the progress of a long running operation.\n \n",
"line" : 77,
"base" : "Widget",
"members" : [
{
"name" : "gtkProgress",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkProgress*",
"comment" : " the main Gtk struct \n",
"line" : 81}
,
{
"name" : "getProgressStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkProgress*()",
"line" : 84}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 91}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Progress(GtkProgress* gtkProgress)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 99}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 117}
,
{
"name" : "setShowText",
"kind" : "function",
"protection" : "public",
"type" : "void(int showText)",
"comment" : "\n\t \n\n Warning\n gtk_progress_set_show_text is deprecated and should not be used in newly-written code.\n Controls whether progress text is shown.\n Params:\n showText = a boolean indicating whether the progress text\n is shown.\n\t \n",
"line" : 134}
,
{
"name" : "setTextAlignment",
"kind" : "function",
"protection" : "public",
"type" : "void(float xAlign, float yAlign)",
"comment" : "\n Warning\n gtk_progress_set_text_alignment is deprecated and should not be used in newly-written code.\n Controls the alignment of the text within the progress bar area.\n Params:\n xAlign = a number between 0.0 and 1.0 indicating the horizontal\n alignment of the progress text within the GtkProgress.\n yAlign = a number between 0.0 and 1.0 indicating the vertical\n alignment of the progress text within the GtkProgress.\n\t \n",
"line" : 150}
,
{
"name" : "setFormatString",
"kind" : "function",
"protection" : "public",
"type" : "void(string format)",
"comment" : "\n Warning\n gtk_progress_set_format_string is deprecated and should not be used in newly-written code.\n Sets a format string used to display text indicating the\n Params:\n format = a string used to display progress text, or NULL\n to restore to the default format.\n\t \n",
"line" : 164}
,
{
"name" : "setAdjustment",
"kind" : "function",
"protection" : "public",
"type" : "void(Adjustment adjustment)",
"comment" : "\n Warning\n gtk_progress_set_adjustment is deprecated and should not be used in newly-written code.\n Associates a GtkAdjustment with the GtkProgress. A GtkAdjustment\n is used to represent the upper and lower bounds and the step interval\n of the underlying value for which progress is shown.\n Params:\n adjustment = the GtkAdjustment to be associated with the GtkProgress.\n\t \n",
"line" : 179}
,
{
"name" : "setPercentage",
"kind" : "function",
"protection" : "public",
"type" : "void(double percentage)",
"comment" : "\n Warning\n gtk_progress_set_percentage is deprecated and should not be used in newly-written code.\n Sets the current percentage completion for the GtkProgress.\n Params:\n percentage = the percentage complete which must be between 0.0\n and 1.0.\n\t \n",
"line" : 193}
,
{
"name" : "setValue",
"kind" : "function",
"protection" : "public",
"type" : "void(double value)",
"comment" : "\n Warning\n gtk_progress_set_value is deprecated and should not be used in newly-written code.\n Sets the value within the GtkProgress to an absolute value.\n The value must be within the valid range of values for the\n underlying GtkAdjustment.\n Params:\n value = the value indicating the current completed amount.\n\t \n",
"line" : 208}
,
{
"name" : "getValue",
"kind" : "function",
"protection" : "public",
"type" : "double()",
"comment" : "\n Warning\n gtk_progress_get_value is deprecated and should not be used in newly-written code.\n Returns the current progress complete value.\n Returns: the current progress complete value.\n\t \n",
"line" : 220}
,
{
"name" : "setActivityMode",
"kind" : "function",
"protection" : "public",
"type" : "void(int activityMode)",
"comment" : "\n Warning\n gtk_progress_set_activity_mode is deprecated and should not be used in newly-written code.\n A GtkProgress can be in one of two different modes: percentage\n mode (the default) and activity mode. In activity mode, the\n progress is simply indicated as activity rather than as a percentage\n complete.\n Params:\n activityMode = a boolean, TRUE for activity mode.\n\t \n",
"line" : 236}
,
{
"name" : "getCurrentText",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Warning\n gtk_progress_get_current_text is deprecated and should not be used in newly-written code.\n Returns the current text associated with the GtkProgress. This\n text is the based on the underlying format string after any substitutions\n are made.\n Returns: the text indicating the current progress.\n\t \n",
"line" : 250}
,
{
"name" : "getTextFromValue",
"kind" : "function",
"protection" : "public",
"type" : "string(double value)",
"comment" : "\n Warning\n gtk_progress_get_text_from_value is deprecated and should not be used in newly-written code.\n Returns the text indicating the progress based on the supplied value.\n The current value for the GtkProgress remains unchanged.\n Params:\n value = an absolute progress value to use when formatting the progress text.\n Returns: a string indicating the progress.\n\t \n",
"line" : 265}
,
{
"name" : "getCurrentPercentage",
"kind" : "function",
"protection" : "public",
"type" : "double()",
"comment" : "\n Warning\n gtk_progress_get_current_percentage is deprecated and should not be used in newly-written code.\n Returns the current progress as a percentage.\n Returns: a number between 0.0 and 1.0 indicating the percentage complete.\n\t \n",
"line" : 277}
,
{
"name" : "getPercentageFromValue",
"kind" : "function",
"protection" : "public",
"type" : "double(double value)",
"comment" : "\n Warning\n gtk_progress_get_percentage_from_value is deprecated and should not be used in newly-written code.\n Returns the progress as a percentage calculated from the supplied\n absolute progress value.\n Params:\n value = an absolute progress value.\n Returns: a number between 0.0 and 1.0 indicating the percentage complete represented by value.\n\t \n",
"line" : 292}
,
{
"name" : "configure",
"kind" : "function",
"protection" : "public",
"type" : "void(double value, double min, double max)",
"comment" : "\n Warning\n gtk_progress_configure is deprecated and should not be used in newly-written code.\n Allows the configuration of the minimum, maximum, and current values for\n the GtkProgress.\n Params:\n value = the current progress value.\n min = the minimum progress value.\n max = the maximum progress value.\n\t \n",
"line" : 308}
]
}
]
}
,
{
"name" : "gtk.RadioAction",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/RadioAction.d",
"members" : [
{
"name" : "RadioAction",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkRadioAction is similar to GtkRadioMenuItem. A number of radio\n actions can be linked together so that only one may be active at any\n one time.\n \n",
"line" : 79,
"base" : "ToggleAction",
"members" : [
{
"name" : "gtkRadioAction",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkRadioAction*",
"comment" : " the main Gtk struct \n",
"line" : 83}
,
{
"name" : "getRadioActionStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkRadioAction*()",
"line" : 86}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 93}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RadioAction(GtkRadioAction* gtkRadioAction)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 101}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 119}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RadioAction(string name, string label, string tooltip, StockID stockId, int value)",
"comment" : "\n Creates a new GtkRadioAction object. To add the action to\n a GtkActionGroup and set the accelerator for the action,\n call gtk_action_group_add_action_with_accel().\n Since 2.4\n Params:\n name =  A unique name for the action\n label =  The label displayed in menu items and on buttons, or NULL\n tooltip =  A tooltip for this action, or NULL\n stockId =  The stock icon to display in widgets representing this\n  action, or NULL\n value =  The value which gtk_radio_action_get_current_value() should\n  return if this action is selected.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 140}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 147}
,
{
"name" : "onChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkRadioAction*, RadioAction)[]",
"line" : 149}
,
{
"name" : "addOnChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkRadioAction*, RadioAction) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::changed signal is emitted on every member of a radio group when the\n active member is changed. The signal gets emitted after the ::activate signals\n for the previous and current active members.\n Since 2.4\n\t \n",
"line" : 156}
,
{
"name" : "callBackChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkRadioAction* actionStruct, GtkRadioAction* current, RadioAction radioAction)",
"line" : 171}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RadioAction(string name, string label, string tooltip, string stockId, int value)",
"comment" : "\n Creates a new GtkRadioAction object. To add the action to\n a GtkActionGroup and set the accelerator for the action,\n call gtk_action_group_add_action_with_accel().\n Since 2.4\n Params:\n name = A unique name for the action\n label = The label displayed in menu items and on buttons, or NULL. [allow-none]\n tooltip = A tooltip for this action, or NULL. [allow-none]\n stockId = The stock icon to display in widgets representing this\n action, or NULL\n value = The value which gtk_radio_action_get_current_value() should\n return if this action is selected.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 195}
,
{
"name" : "getGroup",
"kind" : "function",
"protection" : "public",
"type" : "ListSG()",
"comment" : "\n Returns the list representing the radio group for this object.\n Note that the returned list is only valid until the next change\n to the group.\n Since 2.4\n Returns: the list representing the radio group for this object. [element-type GtkAction][transfer none]\n\t \n",
"line" : 213}
,
{
"name" : "setGroup",
"kind" : "function",
"protection" : "public",
"type" : "void(ListSG group)",
"comment" : "\n Sets the radio group for the radio action object.\n Since 2.4\n Params:\n group = a list representing a radio group\n\t \n",
"line" : 230}
,
{
"name" : "getCurrentValue",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Obtains the value property of the currently active member of\n the group to which action belongs.\n Since 2.4\n Returns: The value of the currently active group member\n\t \n",
"line" : 242}
,
{
"name" : "setCurrentValue",
"kind" : "function",
"protection" : "public",
"type" : "void(int currentValue)",
"comment" : "\n Sets the currently active group member to the member with value\n property current_value.\n Since 2.10\n Params:\n currentValue = the new value\n\t \n",
"line" : 255}
]
}
]
}
,
{
"name" : "gtk.RadioButton",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/RadioButton.d",
"members" : [
{
"name" : "RadioButton",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A single radio button performs the same basic function as a GtkCheckButton,\n as its position in the object hierarchy reflects. It is only when multiple\n radio buttons are grouped together that they become a different user\n interface component in their own right.\n Every radio button is a member of some group of radio buttons. When one is selected, all other\n radio buttons in the same group are deselected. A GtkRadioButton is one way\n of giving the user a choice from many options.\n Radio button widgets are created with gtk_radio_button_new(), passing NULL\n as the argument if this is the first radio button in a group. In subsequent\n calls, the group you wish to add this button to should be passed as an\n argument. Optionally, gtk_radio_button_new_with_label() can be used if you\n want a text label on the radio button.\n Alternatively, when adding widgets to an existing group of radio buttons,\n use gtk_radio_button_new_from_widget() with a GtkRadioButton that already\n has a group assigned to it. The convenience function\n gtk_radio_button_new_with_label_from_widget() is also provided.\n To retrieve the group a GtkRadioButton is assigned to, use\n gtk_radio_button_get_group().\n To remove a GtkRadioButton from one group and make it part of a new one, use gtk_radio_button_set_group().\n The group list does not need to be freed, as each GtkRadioButton will remove\n itself and its list item when it is destroyed.\n $(DDOC_COMMENT example)\n When an unselected button in the group is clicked the clicked button\n receives the \"toggled\" signal, as does the previously selected button.\n Inside the \"toggled\" handler, gtk_toggle_button_get_active() can be used\n to determine if the button has been selected or deselected.\n \n",
"line" : 107,
"base" : "CheckButton",
"members" : [
{
"name" : "gtkRadioButton",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkRadioButton*",
"comment" : " the main Gtk struct \n",
"line" : 111}
,
{
"name" : "getRadioButtonStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkRadioButton*()",
"line" : 114}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 121}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RadioButton(GtkRadioButton* gtkRadioButton)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 129}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 147}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RadioButton(ListSG group, string label, bool mnemonic = true)",
"comment" : "\n Creates a new RadioButton with a text label.\n Params:\n  group = an existing radio button group.\n  label = the text label to display next to the radio button.\n  mnemonic = if true the label will be created using\n  gtk_label_new_with_mnemonic(), so underscores in label indicate the\n  mnemonic for the button.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 163}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RadioButton(RadioButton radioButton, string label, bool mnemonic = true)",
"comment" : "\n Creates a new RadioButton with a text label, adding it to the same group\n as group.\n Params:\n  radioButton = an existing RadioButton.\n  label = a text string to display next to the radio button.\n  mnemonic = if true the label\n  will be created using gtk_label_new_with_mnemonic(), so underscores\n  in label indicate the mnemonic for the button.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 201}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RadioButton(string label, bool mnemonic = true)",
"comment" : "\n Creates a new RadioButton with a text label,\n and creates a new group.\n Params:\n  label = a text string to display next to the radio button.\n  mnemonic = if true the label\n  will be created using gtk_label_new_with_mnemonic(), so underscores\n  in label indicate the mnemonic for the button.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 238}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 245}
,
{
"name" : "onGroupChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(RadioButton)[]",
"line" : 247}
,
{
"name" : "addOnGroupChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(RadioButton) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when the group of radio buttons that a radio button belongs\n to changes. This is emitted when a radio button switches from\n being alone to being part of a group of 2 or more buttons, or\n vice-versa, and when a button is moved from one group of 2 or\n more buttons to a different one, but not when the composition\n of the group that a button belongs to changes.\n Since 2.4\n See Also\n GtkOptionMenu\n Another way of offering the user a single choice from\n many.\n\t \n",
"line" : 261}
,
{
"name" : "callBackGroupChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkRadioButton* styleStruct, RadioButton radioButton)",
"line" : 276}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RadioButton(ListSG group)",
"comment" : "\n Creates a new GtkRadioButton. To be of any practical value, a widget should\n then be packed into the radio button.\n Creates a new GtkRadioButton. To be of any practical value, a widget should\n then be packed into the radio button.\n Params:\n group = an existing radio button group, or NULL if you are\n creating a new group. [allow-none]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 295}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RadioButton(RadioButton radioGroupMember)",
"comment" : "\n Creates a new GtkRadioButton, adding it to the same group as\n radio_group_member. As with gtk_radio_button_new(), a widget\n should be packed into the radio button.\n Creates a new GtkRadioButton, adding it to the same group as radio_group_member.\n As with gtk_radio_button_new(), a widget should be packed into the radio button.\n Params:\n radioGroupMember = an existing GtkRadioButton. [allow-none]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 316}
,
{
"name" : "setGroup",
"kind" : "function",
"protection" : "public",
"type" : "void(ListSG group)",
"comment" : "\n Sets a GtkRadioButton's group. It should be noted that this does not change\n the layout of your interface in any way, so if you are changing the group,\n it is likely you will need to re-arrange the user interface to reflect these\n changes.\n Sets a GtkRadioButton's group. It should be noted that this does not change\n the layout of your interface in any way, so if you are changing the group,\n it is likely you will need to re-arrange the user interface to reflect these\n changes.\n Params:\n group = an existing radio\n button group, such as one returned from gtk_radio_button_get_group(). [transfer none][element-type GtkRadioButton]\n\t \n",
"line" : 340}
,
{
"name" : "getGroup",
"kind" : "function",
"protection" : "public",
"type" : "ListSG()",
"comment" : "\n Retrieves the group assigned to a radio button.\n Returns: a linked list containing all the radio buttons in the same group as radio_button. The returned list is owned by the radio button and must not be modified or freed. [element-type GtkRadioButton][transfer none]\n\t \n",
"line" : 350}
]
}
]
}
,
{
"name" : "gtk.RadioMenuItem",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/RadioMenuItem.d",
"members" : [
{
"name" : "RadioMenuItem",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A radio menu item is a check menu item that belongs to a group. At each\n instant exactly one of the radio menu items from a group is selected.\n The group list does not need to be freed, as each GtkRadioMenuItem will\n remove itself and its list item when it is destroyed.\n The correct way to create a group of radio menu items is approximatively\n this:\n $(DDOC_COMMENT example)\n \n",
"line" : 88,
"base" : "CheckMenuItem",
"members" : [
{
"name" : "gtkRadioMenuItem",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkRadioMenuItem*",
"comment" : " the main Gtk struct \n",
"line" : 92}
,
{
"name" : "getRadioMenuItemStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkRadioMenuItem*()",
"line" : 95}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 102}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RadioMenuItem(GtkRadioMenuItem* gtkRadioMenuItem)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 110}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 128}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RadioMenuItem(RadioMenuItem radioMenuItem, string label, bool mnemonic = true)",
"comment" : "\n Creates a new GtkRadioMenuItem whose child is a simple GtkLabel.\n The new GtkRadioMenuItem is added to the same group as group.\n If mnemonic is true the label will be\n created using gtk_label_new_with_mnemonic(), so underscores in label\n indicate the mnemonic for the menu item.\n Since 2.4\n Params:\n  group = an existing GtkRadioMenuItem\n  label = the text for the label\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 146}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RadioMenuItem(ListSG group, string label, bool mnemonic = true)",
"comment" : "\n Creates a new GtkRadioMenuItem whose child is a simple GtkLabel.\n Params:\n  group = the group to which the radio menu item is to be attached\n  label = the text for the label\n  mnemonic = if true the label\n  will be created using gtk_label_new_with_mnemonic(), so underscores\n  in label indicate the mnemonic for the menu item.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 181}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 208}
,
{
"name" : "onGroupChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(RadioMenuItem)[]",
"line" : 210}
,
{
"name" : "addOnGroupChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(RadioMenuItem) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n See Also\n GtkMenuItem\n because a radio menu item is a menu item.\n GtkCheckMenuItem\n to know how to handle the check.\n\t \n",
"line" : 218}
,
{
"name" : "callBackGroupChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkRadioMenuItem* radiomenuitemStruct, RadioMenuItem radioMenuItem)",
"line" : 233}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RadioMenuItem(ListSG group)",
"comment" : "\n Creates a new GtkRadioMenuItem.\n Params:\n group = the group to which the radio menu item is to be attached\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 248}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RadioMenuItem(RadioMenuItem group)",
"comment" : "\n Creates a new GtkRadioMenuItem adding it to the same group as group.\n Since 2.4\n Params:\n group = An existing GtkRadioMenuItem\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 266}
,
{
"name" : "setGroup",
"kind" : "function",
"protection" : "public",
"type" : "void(ListSG group)",
"comment" : "\n Sets the group of a radio menu item, or changes it.\n Params:\n group = the new group.\n\t \n",
"line" : 282}
,
{
"name" : "getGroup",
"kind" : "function",
"protection" : "public",
"type" : "ListSG()",
"comment" : "\n Returns the group to which the radio menu item belongs, as a GList of\n GtkRadioMenuItem. The list belongs to GTK+ and should not be freed.\n Returns the group to which the radio menu item belongs, as a GList of\n GtkRadioMenuItem. The list belongs to GTK+ and should not be freed.\n Returns: the group of radio_menu_item. [transfer none]\n\t \n",
"line" : 295}
]
}
]
}
,
{
"name" : "gtk.RadioToolButton",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/RadioToolButton.d",
"members" : [
{
"name" : "RadioToolButton",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkRadioToolButton is a GtkToolItem that contains a radio button,\n that is, a button that is part of a group of toggle buttons where only\n one button can be active at a time.\n Use gtk_radio_tool_button_new() to create a new\n GtkRadioToolButton. use gtk_radio_tool_button_new_from_widget() to\n create a new GtkRadioToolButton that is part of the same group as an\n existing GtkRadioToolButton. Use\n gtk_radio_tool_button_new_from_stock() or\n gtk_radio_tool_button_new_from_widget_with_stock() to create a new\n GtkRAdioToolButton containing a stock item.\n \n",
"line" : 88,
"base" : "ToggleToolButton",
"members" : [
{
"name" : "gtkRadioToolButton",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkRadioToolButton*",
"comment" : " the main Gtk struct \n",
"line" : 92}
,
{
"name" : "getRadioToolButtonStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkRadioToolButton*()",
"line" : 95}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 102}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RadioToolButton(GtkRadioToolButton* gtkRadioToolButton)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 110}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 128}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RadioToolButton(ListSG group)",
"comment" : "\n\t \n\n Creates a new GtkRadioToolButton, adding it to group.\n Since 2.4\n Params:\n group = An existing radio button group, or NULL if you are creating a new group. [allow-none]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 144}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RadioToolButton(ListSG group, string stockId)",
"comment" : "\n Creates a new GtkRadioToolButton, adding it to group.\n The new GtkRadioToolButton will contain an icon and label from the\n stock item indicated by stock_id.\n Since 2.4\n Params:\n group = an existing radio button group, or NULL if you are creating a new group. [allow-none]\n stockId = the name of a stock item\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 165}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RadioToolButton(RadioToolButton group)",
"comment" : "\n Creates a new GtkRadioToolButton adding it to the same group as gruup\n Since 2.4\n Params:\n group = An existing GtkRadioToolButton\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 183}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RadioToolButton(RadioToolButton group, string stockId)",
"comment" : "\n Creates a new GtkRadioToolButton adding it to the same group as group.\n The new GtkRadioToolButton will contain an icon and label from the\n stock item indicated by stock_id.\n Since 2.4\n Params:\n group = An existing GtkRadioToolButton.\n stockId = the name of a stock item\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 204}
,
{
"name" : "getGroup",
"kind" : "function",
"protection" : "public",
"type" : "ListSG()",
"comment" : "\n Returns the radio button group button belongs to.\n Since 2.4\n Returns: The group button belongs to. [transfer none]\n\t \n",
"line" : 220}
,
{
"name" : "setGroup",
"kind" : "function",
"protection" : "public",
"type" : "void(ListSG group)",
"comment" : "\n Adds button to group, removing it from the group it belonged to before.\n Since 2.4\n Params:\n group = an existing radio button group\n\t \n",
"line" : 237}
]
}
]
}
,
{
"name" : "gtk.Range",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Range.d",
"members" : [
{
"name" : "Range",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkRange is the common base class for widgets which visualize an\n adjustment, e.g scales or scrollbars.\n Apart from signals for monitoring the parameters of the adjustment,\n GtkRange provides properties and methods for influencing the sensitivity\n of the \"steppers\". It also provides properties and methods for setting a\n \"fill level\" on range widgets. See gtk_range_set_fill_level().\n \n",
"line" : 88,
"base" : "Widget",
"interfaces" : [
"OrientableIF"],
"members" : [
{
"name" : "gtkRange",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkRange*",
"comment" : " the main Gtk struct \n",
"line" : 92}
,
{
"name" : "getRangeStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkRange*()",
"line" : 95}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 102}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Range(GtkRange* gtkRange)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 110}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 128}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 139}
,
{
"name" : "onAdjustBoundsListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(double, Range)[]",
"line" : 141}
,
{
"name" : "addOnAdjustBounds",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(double, Range) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 144}
,
{
"name" : "callBackAdjustBounds",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkRange* rangeStruct, double arg1, Range range)",
"line" : 159}
,
{
"name" : "onChangeValueListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GtkScrollType, double, Range)[]",
"line" : 167}
,
{
"name" : "addOnChangeValue",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GtkScrollType, double, Range) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::change-value signal is emitted when a scroll action is\n performed on a range. It allows an application to determine the\n type of scroll event that occurred and the resultant new value.\n The application can handle the event itself and return TRUE to\n prevent further processing. Or, by returning FALSE, it can pass\n the event to other handlers until the default GTK+ handler is\n reached.\n The value parameter is unrounded. An application that overrides\n the ::change-value signal is responsible for clamping the value to\n the desired number of decimal digits; the default GTK+ handler\n clamps the value based on \"round_digits\".\n It is not possible to use delayed update policies in an overridden\n ::change-value handler.\n TRUE to prevent other handlers from being invoked for the\n signal, FALSE to propagate the signal further\n Since 2.6\n\t \n",
"line" : 186}
,
{
"name" : "callBackChangeValue",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkRange* rangeStruct, GtkScrollType scroll, double value, Range range)",
"line" : 201}
,
{
"name" : "onMoveSliderListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkScrollType, Range)[]",
"line" : 214}
,
{
"name" : "addOnMoveSlider",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkScrollType, Range) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Virtual function that moves the slider. Used for keybindings.\n\t \n",
"line" : 218}
,
{
"name" : "callBackMoveSlider",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkRange* rangeStruct, GtkScrollType step, Range range)",
"line" : 233}
,
{
"name" : "onValueChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Range)[]",
"line" : 241}
,
{
"name" : "addOnValueChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Range) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when the range value changes.\n\t \n",
"line" : 245}
,
{
"name" : "callBackValueChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkRange* rangeStruct, Range range)",
"line" : 260}
,
{
"name" : "getFillLevel",
"kind" : "function",
"protection" : "public",
"type" : "double()",
"comment" : "\n Gets the current position of the fill level indicator.\n Since 2.12\n Returns: The current fill level\n\t \n",
"line" : 274}
,
{
"name" : "getRestrictToFillLevel",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets whether the range is restricted to the fill level.\n Since 2.12\n Returns: TRUE if range is restricted to the fill level.\n\t \n",
"line" : 285}
,
{
"name" : "getShowFillLevel",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets whether the range displays the fill level graphically.\n Since 2.12\n Returns: TRUE if range shows the fill level.\n\t \n",
"line" : 296}
,
{
"name" : "setFillLevel",
"kind" : "function",
"protection" : "public",
"type" : "void(double fillLevel)",
"comment" : "\n Set the new position of the fill level indicator.\n The \"fill level\" is probably best described by its most prominent\n use case, which is an indicator for the amount of pre-buffering in\n a streaming media player. In that use case, the value of the range\n would indicate the current play position, and the fill level would\n be the position up to which the file\/stream has been downloaded.\n This amount of prebuffering can be displayed on the range's trough\n and is themeable separately from the trough. To enable fill level\n display, use gtk_range_set_show_fill_level(). The range defaults\n to not showing the fill level.\n Additionally, it's possible to restrict the range's slider position\n to values which are smaller than the fill level. This is controller\n by gtk_range_set_restrict_to_fill_level() and is by default\n enabled.\n Since 2.12\n Params:\n fillLevel = the new position of the fill level indicator\n\t \n",
"line" : 321}
,
{
"name" : "setRestrictToFillLevel",
"kind" : "function",
"protection" : "public",
"type" : "void(int restrictToFillLevel)",
"comment" : "\n Sets whether the slider is restricted to the fill level. See\n gtk_range_set_fill_level() for a general description of the fill\n level concept.\n Since 2.12\n Params:\n restrictToFillLevel = Whether the fill level restricts slider movement.\n\t \n",
"line" : 335}
,
{
"name" : "setShowFillLevel",
"kind" : "function",
"protection" : "public",
"type" : "void(int showFillLevel)",
"comment" : "\n Sets whether a graphical fill level is show on the trough. See\n gtk_range_set_fill_level() for a general description of the fill\n level concept.\n Since 2.12\n Params:\n showFillLevel = Whether a fill level indicator graphics is shown.\n\t \n",
"line" : 349}
,
{
"name" : "getAdjustment",
"kind" : "function",
"protection" : "public",
"type" : "Adjustment()",
"comment" : "\n Get the GtkAdjustment which is the \"model\" object for GtkRange.\n See gtk_range_set_adjustment() for details.\n The return value does not have a reference added, so should not\n be unreferenced.\n Returns: a GtkAdjustment. [transfer none]\n\t \n",
"line" : 362}
,
{
"name" : "setUpdatePolicy",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkUpdateType policy)",
"comment" : "\n Warning\n gtk_range_set_update_policy has been deprecated since version 2.24 and should not be used in newly-written code. There is no replacement. If you require delayed\n  updates, you need to code it yourself.\n Sets the update policy for the range. GTK_UPDATE_CONTINUOUS means that\n anytime the range slider is moved, the range value will change and the\n value_changed signal will be emitted. GTK_UPDATE_DELAYED means that\n the value will be updated after a brief timeout where no slider motion\n occurs, so updates are spaced by a short time rather than\n continuous. GTK_UPDATE_DISCONTINUOUS means that the value will only\n be updated when the user releases the button and ends the slider\n drag operation.\n Params:\n policy = update policy\n\t \n",
"line" : 388}
,
{
"name" : "setAdjustment",
"kind" : "function",
"protection" : "public",
"type" : "void(Adjustment adjustment)",
"comment" : "\n Sets the adjustment to be used as the \"model\" object for this range\n widget. The adjustment indicates the current range value, the\n minimum and maximum range values, the step\/page increments used\n for keybindings and scrolling, and the page size. The page size\n is normally 0 for GtkScale and nonzero for GtkScrollbar, and\n indicates the size of the visible area of the widget being scrolled.\n The page size affects the size of the scrollbar slider.\n Params:\n adjustment = a GtkAdjustment\n\t \n",
"line" : 405}
,
{
"name" : "getInverted",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value set by gtk_range_set_inverted().\n Returns: TRUE if the range is inverted\n\t \n",
"line" : 415}
,
{
"name" : "setInverted",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n Ranges normally move from lower to higher values as the\n slider moves from top to bottom or left to right. Inverted\n ranges have higher values at the top or on the right rather than\n on the bottom or left.\n Params:\n setting = TRUE to invert the range\n\t \n",
"line" : 429}
,
{
"name" : "getUpdatePolicy",
"kind" : "function",
"protection" : "public",
"type" : "GtkUpdateType()",
"comment" : "\n Warning\n gtk_range_get_update_policy has been deprecated since version 2.24 and should not be used in newly-written code. There is no replacement. If you require delayed\n  updates, you need to code it yourself.\n Gets the update policy of range. See gtk_range_set_update_policy().\n Returns: the current update policy\n\t \n",
"line" : 442}
,
{
"name" : "setIncrements",
"kind" : "function",
"protection" : "public",
"type" : "void(double step, double page)",
"comment" : "\n Sets the step and page sizes for the range.\n The step size is used when the user clicks the GtkScrollbar\n arrows or moves GtkScale via arrow keys. The page size\n is used for example when moving via Page Up or Page Down keys.\n Params:\n step = step size\n page = page size\n\t \n",
"line" : 457}
,
{
"name" : "setRange",
"kind" : "function",
"protection" : "public",
"type" : "void(double min, double max)",
"comment" : "\n Sets the allowable values in the GtkRange, and clamps the range\n value to be between min and max. (If the range has a non-zero\n page size, it is clamped between min and max - page-size.)\n Params:\n min = minimum range value\n max = maximum range value\n\t \n",
"line" : 471}
,
{
"name" : "getValue",
"kind" : "function",
"protection" : "public",
"type" : "double()",
"comment" : "\n Gets the current value of the range.\n Returns: current value of the range.\n\t \n",
"line" : 481}
,
{
"name" : "setValue",
"kind" : "function",
"protection" : "public",
"type" : "void(double value)",
"comment" : "\n Sets the current value of the range; if the value is outside the\n minimum or maximum range values, it will be clamped to fit inside\n them. The range emits the \"value-changed\" signal if the\n value changes.\n Params:\n value = new value of the range\n\t \n",
"line" : 495}
,
{
"name" : "getRoundDigits",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the number of digits to round the value to when\n it changes. See \"change-value\".\n Since 2.24\n Returns: the number of digits to round to\n\t \n",
"line" : 507}
,
{
"name" : "setRoundDigits",
"kind" : "function",
"protection" : "public",
"type" : "void(int roundDigits)",
"comment" : "\n Sets the number of digits to round the value to when\n it changes. See \"change-value\".\n Since 2.24\n Params:\n roundDigits = the precision in digits, or -1\n\t \n",
"line" : 520}
,
{
"name" : "setLowerStepperSensitivity",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkSensitivityType sensitivity)",
"comment" : "\n Sets the sensitivity policy for the stepper that points to the\n 'lower' end of the GtkRange's adjustment.\n Since 2.10\n Params:\n sensitivity = the lower stepper's sensitivity policy.\n\t \n",
"line" : 533}
,
{
"name" : "getLowerStepperSensitivity",
"kind" : "function",
"protection" : "public",
"type" : "GtkSensitivityType()",
"comment" : "\n Gets the sensitivity policy for the stepper that points to the\n 'lower' end of the GtkRange's adjustment.\n Since 2.10\n Returns: The lower stepper's sensitivity policy.\n\t \n",
"line" : 545}
,
{
"name" : "setUpperStepperSensitivity",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkSensitivityType sensitivity)",
"comment" : "\n Sets the sensitivity policy for the stepper that points to the\n 'upper' end of the GtkRange's adjustment.\n Since 2.10\n Params:\n sensitivity = the upper stepper's sensitivity policy.\n\t \n",
"line" : 558}
,
{
"name" : "getUpperStepperSensitivity",
"kind" : "function",
"protection" : "public",
"type" : "GtkSensitivityType()",
"comment" : "\n Gets the sensitivity policy for the stepper that points to the\n 'upper' end of the GtkRange's adjustment.\n Since 2.10\n Returns: The upper stepper's sensitivity policy.\n\t \n",
"line" : 570}
,
{
"name" : "getFlippable",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value set by gtk_range_set_flippable().\n Since 2.18\n Returns: TRUE if the range is flippable\n\t \n",
"line" : 581}
,
{
"name" : "setFlippable",
"kind" : "function",
"protection" : "public",
"type" : "void(int flippable)",
"comment" : "\n If a range is flippable, it will switch its direction if it is\n horizontal and its direction is GTK_TEXT_DIR_RTL.\n See gtk_widget_get_direction().\n Since 2.18\n Params:\n flippable = TRUE to make the range flippable\n\t \n",
"line" : 595}
,
{
"name" : "getMinSliderSize",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n This function is useful mainly for GtkRange subclasses.\n See gtk_range_set_min_slider_size().\n Since 2.20\n Returns: The minimum size of the range's slider.\n\t \n",
"line" : 607}
,
{
"name" : "getRangeRect",
"kind" : "function",
"protection" : "public",
"type" : "void(Rectangle rangeRect)",
"comment" : "\n This function returns the area that contains the range's trough\n and its steppers, in widget->window coordinates.\n This function is useful mainly for GtkRange subclasses.\n Since 2.20\n Params:\n range = a GtkRange\n rangeRect = return location for the range rectangle. [out]\n\t \n",
"line" : 622}
,
{
"name" : "getSliderRange",
"kind" : "function",
"protection" : "public",
"type" : "void(out int sliderStart, out int sliderEnd)",
"comment" : "\n This function returns sliders range along the long dimension,\n in widget->window coordinates.\n This function is useful mainly for GtkRange subclasses.\n Since 2.20\n Params:\n sliderStart = return location for the slider's\n start, or NULL. [out][allow-none]\n sliderEnd = return location for the slider's\n end, or NULL. [out][allow-none]\n\t \n",
"line" : 639}
,
{
"name" : "getSliderSizeFixed",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n This function is useful mainly for GtkRange subclasses.\n See gtk_range_set_slider_size_fixed().\n Since 2.20\n Returns: whether the range's slider has a fixed size.\n\t \n",
"line" : 651}
,
{
"name" : "setMinSliderSize",
"kind" : "function",
"protection" : "public",
"type" : "void(int minSize)",
"comment" : "\n Sets the minimum size of the range's slider.\n This function is useful mainly for GtkRange subclasses.\n Since 2.20\n Params:\n minSize = The slider's minimum size\n\t \n",
"line" : 664}
,
{
"name" : "setSliderSizeFixed",
"kind" : "function",
"protection" : "public",
"type" : "void(int sizeFixed)",
"comment" : "\n Sets whether the range's slider has a fixed size, or a size that\n depends on it's adjustment's page size.\n This function is useful mainly for GtkRange subclasses.\n Since 2.20\n Params:\n sizeFixed = TRUE to make the slider size constant\n\t \n",
"line" : 678}
]
}
]
}
,
{
"name" : "gtk.RcStyle",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/RcStyle.d",
"members" : [
{
"name" : "RcStyle",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GTK+ provides resource file mechanism for configuring\n various aspects of the operation of a GTK+ program\n at runtime.\n Default files\n An application can cause GTK+ to parse a specific RC\n file by calling gtk_rc_parse(). In addition to this,\n certain files will be read at the end of gtk_init().\n Unless modified, the files looked for will be\n <SYSCONFDIR>\/gtk-2.0\/gtkrc\n and .gtkrc-2.0 in the users home directory.\n (<SYSCONFDIR> defaults to\n \/usr\/local\/etc. It can be changed with the\n --prefix or --sysconfdir options when\n configuring GTK+.) Note that although the filenames contain the version\n number 2.0, all 2.x versions of GTK+ look for these files.\n The set of these default files\n can be retrieved with gtk_rc_get_default_files()\n and modified with gtk_rc_add_default_file() and\n gtk_rc_set_default_files().\n Additionally, the GTK2_RC_FILES environment variable\n can be set to a G_SEARCHPATH_SEPARATOR_S-separated list of files\n in order to overwrite the set of default files at runtime.\n For each RC file, in addition to the file itself, GTK+ will look for\n a locale-specific file that will be parsed after the main file.\n For instance, if LANG is set to ja_JP.ujis,\n when loading the default file ~\/.gtkrc then GTK+ looks\n for ~\/.gtkrc.ja_JP and ~\/.gtkrc.ja,\n and parses the first of those that exists.\n <hr>\n Pathnames and patterns\n A resource file defines a number of styles and key bindings and\n attaches them to particular widgets. The attachment is done\n by the widget, widget_class,\n and class declarations. As an example\n of such a statement:\n $(DDOC_COMMENT example)\n attaches the style \"my-entry-class\" to all\n widgets whose widget path matches the\n pattern \"mywindow.*.GtkEntry\".\n That is, all GtkEntry widgets which are part of a GtkWindow named\n \"mywindow\".\n The patterns here are given in the standard shell glob syntax.\n The \"?\" wildcard matches any character, while\n \"*\" matches zero or more of any character.\n The three types of matching are against the widget path, the\n class path and the class hierarchy. Both the\n widget path and the class path consist of a \".\"\n separated list of all the parents of the widget and the widget itself\n from outermost to innermost. The difference is that in the widget path,\n the name assigned by gtk_widget_set_name() is used if present, otherwise\n the class name of the widget, while for the class path, the class name is\n always used.\n Since GTK+ 2.10, widget_class paths can also contain\n <classname> substrings, which are matching\n the class with the given name and any derived classes. For instance,\n $(DDOC_COMMENT example)\n will match GtkLabel widgets which are contained in any kind of menu item.\n So, if you have a GtkEntry named \"myentry\", inside of a\n horizontal box in a window named \"mywindow\", then the\n widget path is: \"mywindow.GtkHBox.myentry\"\n while the class path is: \"GtkWindow.GtkHBox.GtkEntry\".\n Matching against class is a little different. The pattern match is done\n against all class names in the widgets class hierarchy (not the layout\n hierarchy) in sequence, so the pattern:\n $(DDOC_COMMENT example)\n will match not just GtkButton widgets, but also GtkToggleButton and\n GtkCheckButton widgets, since those classes derive from GtkButton.\n Additionally, a priority can be specified for each pattern, and styles\n override other styles first by priority, then by pattern type and then\n by order of specification (later overrides earlier). The priorities\n that can be specified are (highest to lowest):\n highest\n rc\n theme\n application\n gtk\n lowest\n rc is the default for styles\n read from an RC file, theme\n is the default for styles read from theme RC files,\n application\n should be used for styles an application sets\n up, and gtk is used for styles\n that GTK+ creates internally.\n <hr>\n Optimizing RC Style Matches\n Everytime a widget is created and added to the layout hierarchy of a GtkWindow\n (\"anchored\" to be exact), a list of matching RC styles out of all RC styles read\n in so far is composed.\n For this, every RC style is matched against the widgets class path,\n the widgets name path and widgets inheritance hierarchy.\n As a consequence, significant slowdown can be caused by utilization of many\n RC styles and by using RC style patterns that are slow or complicated to match\n against a given widget.\n The following ordered list provides a number of advices (prioritized by\n effectiveness) to reduce the performance overhead associated with RC style\n matches:\n  Move RC styles for specific applications into RC files dedicated to those\n  applications and parse application specific RC files only from\n  applications that are affected by them.\n  This reduces the overall amount of RC styles that have to be considered\n  for a match across a group of applications.\n  Merge multiple styles which use the same matching rule, for instance:\n $(DDOC_COMMENT example)\n  is faster to match as:\n $(DDOC_COMMENT example)\n  Use of wildcards should be avoided, this can reduce the individual RC style\n  match to a single integer comparison in most cases.\n  To avoid complex recursive matching, specification of full class names\n  (for class matches) or full path names (for\n  widget and widget_class matches)\n  is to be preferred over shortened names\n  containing \"*\" or \"?\".\n  If at all necessary, wildcards should only be used at the tail or head\n  of a pattern. This reduces the match complexity to a string comparison\n  per RC style.\n  When using wildcards, use of \"?\" should be preferred\n  over \"*\". This can reduce the matching complexity from\n  O(n^2) to O(n). For example \"Gtk*Box\" can be turned into\n  \"Gtk?Box\" and will still match GtkHBox and GtkVBox.\n  The use of \"*\" wildcards should be restricted as much\n  as possible, because matching \"A*B*C*RestString\" can\n  result in matching complexities of O(n^2) worst case.\n <hr>\n Toplevel declarations\n An RC file is a text file which is composed of a sequence\n of declarations. '#' characters delimit comments and\n the portion of a line after a '#' is ignored when parsing\n an RC file.\n The possible toplevel declarations are:\n binding name\n  { ... }\n Declares a binding set.\n class pattern\n  [ style | binding ][ : priority ]\n  name\n Specifies a style or binding set for a particular\n  branch of the inheritance hierarchy.\n include filename\n Parses another file at this point. If\n  filename is not an absolute filename,\n  it is searched in the directories of the currently open RC files.\n GTK+ also tries to load a\n  locale-specific variant of\n  the included file.\n module_path path\n Sets a path (a list of directories separated\n  by colons) that will be searched for theme engines referenced in\n  RC files.\n pixmap_path path\n Sets a path (a list of directories separated\n  by colons) that will be searched for pixmaps referenced in\n  RC files.\n im_module_file pathname\n Sets the pathname for the IM modules file. Setting this from RC files\n  is deprecated; you should use the environment variable GTK_IM_MODULE_FILE\n  instead.\n style name [ =\n  parent ] { ... }\n Declares a style.\n widget pattern\n  [ style | binding ][ : priority ]\n  name\n Specifies a style or binding set for a particular\n  group of widgets by matching on the widget pathname.\n widget_class pattern\n  [ style | binding ][ : priority ]\n  name\n Specifies a style or binding set for a particular\n  group of widgets by matching on the class pathname.\n setting = value\n Specifies a value for a setting.\n  Note that settings in RC files are overwritten by system-wide settings\n  (which are managed by an XSettings manager on X11).\n <hr>\n Styles\n A RC style is specified by a style\n declaration in a RC file, and then bound to widgets\n with a widget, widget_class,\n or class declaration. All styles\n applying to a particular widget are composited together\n with widget declarations overriding\n widget_class declarations which, in\n turn, override class declarations.\n Within each type of declaration, later declarations override\n earlier ones.\n Within a style declaration, the possible\n elements are:\n bg[state] =\n  color\n  Sets the color used for the background of most widgets.\n fg[state] =\n  color\n  Sets the color used for the foreground of most widgets.\n base[state] =\n  color\n  Sets the color used for the background of widgets displaying\n  editable text. This color is used for the background\n  of, among others, GtkText, GtkEntry, GtkList, and GtkCList.\n text[state] =\n  color\n  Sets the color used for foreground of widgets using\n  base for the background color.\n xthickness =\n  number\n  Sets the xthickness, which is used for various horizontal padding\n  values in GTK+.\n ythickness =\n  number\n  Sets the ythickness, which is used for various vertical padding\n  values in GTK+.\n bg_pixmap[state] =\n  pixmap\n  Sets a background pixmap to be used in place of\n  the bg color (or for GtkText,\n  in place of the base color. The special\n  value \"<parent>\" may be used to indicate that the widget should\n  use the same background pixmap as its parent. The special value\n  \"<none>\" may be used to indicate no background pixmap.\n font = font\n  Starting with GTK+ 2.0, the \"font\" and \"fontset\"\n  declarations are ignored; use \"font_name\" declarations instead.\n fontset = font\n  Starting with GTK+ 2.0, the \"font\" and \"fontset\"\n  declarations are ignored; use \"font_name\" declarations instead.\n font_name = font\n  Sets the font for a widget. font must be\n  a Pango font name, e.g. \"Sans Italic 10\".\n  For details about Pango font names, see\n  pango_font_description_from_string().\n stock[\"stock-id\"] = { icon source specifications }\n  Defines the icon for a stock item.\n color[\"color-name\"] = color specification\n  Since 2.10, this element can be used to defines symbolic colors. See below for\n  the syntax of color specifications.\n engine \"engine\" { engine-specific\n settings }\n  Defines the engine to be used when drawing with this style.\n class::property = value\n  Sets a style property for a widget class.\n The colors and background pixmaps are specified as a function of the\n state of the widget. The states are:\n NORMAL\n  A color used for a widget in its normal state.\n ACTIVE\n  A variant of the NORMAL color used when the\n  widget is in the GTK_STATE_ACTIVE state, and also for\n  the trough of a ScrollBar, tabs of a NoteBook\n  other than the current tab and similar areas.\n  Frequently, this should be a darker variant\n  of the NORMAL color.\n PRELIGHT\n  A color used for widgets in the GTK_STATE_PRELIGHT state. This\n  state is the used for Buttons and MenuItems\n  that have the mouse cursor over them, and for\n  their children.\n SELECTED\n  A color used to highlight data selected by the user.\n  for instance, the selected items in a list widget, and the\n  selection in an editable widget.\n INSENSITIVE\n  A color used for the background of widgets that have\n  been set insensitive with gtk_widget_set_sensitive().\n Colors can be specified as a string containing a color name (GTK+ knows\n all names from the X color database \/usr\/lib\/X11\/rgb.txt),\n in one of the hexadecimal forms #rrrrggggbbbb,\n #rrrgggbbb, #rrggbb,\n or #rgb, where r,\n g and b are\n hex digits, or they can be specified as a triplet\n { r, g,\n b}, where r,\n g and b are either integers in\n the range 0-65535 or floats in the range 0.0-1.0.\n Since 2.10, colors can also be specified by refering to a symbolic color, as\n follows: @color-name, or by using expressions to combine\n colors. The following expressions are currently supported:\n mix (factor, color1, color2)\n  Computes a new color by mixing color1 and\n  color2. The factor\n  determines how close the new color is to color1.\n  A factor of 1.0 gives pure color1, a factor of\n  0.0 gives pure color2.\n shade (factor, color)\n  Computes a lighter or darker variant of color.\n  A factor of 1.0 leaves the color unchanged, smaller\n  factors yield darker colors, larger factors yield lighter colors.\n lighter (color)\n  This is an abbreviation for\n  shade (1.3, color).\n darker (color)\n  This is an abbreviation for\n  shade (0.7, color).\n Here are some examples of color expressions:\n $(DDOC_COMMENT example)\n In a stock definition, icon sources are specified as a\n 4-tuple of image filename or icon name, text direction, widget state, and size, in that\n order. Each icon source specifies an image filename or icon name to use with a given\n direction, state, and size. Filenames are specified as a string such\n as \"itemltr.png\", while icon names (looked up\n in the current icon theme), are specified with a leading\n @, such as @\"item-ltr\".\n The * character can be used as a\n wildcard, and if direction\/state\/size are omitted they default to\n *. So for example, the following specifies different icons to\n use for left-to-right and right-to-left languages:\n $(DDOC_COMMENT example)\n This could be abbreviated as follows:\n $(DDOC_COMMENT example)\n You can specify custom icons for specific sizes, as follows:\n $(DDOC_COMMENT example)\n The sizes that come with GTK+ itself are \"gtk-menu\",\n \"gtk-small-toolbar\", \"gtk-large-toolbar\",\n \"gtk-button\", \"gtk-dialog\". Applications\n can define other sizes.\n It's also possible to use custom icons for a given state, for example:\n $(DDOC_COMMENT example)\n When selecting an icon source to use, GTK+ will consider text direction most\n important, state second, and size third. It will select the best match based on\n those criteria. If an attribute matches exactly (e.g. you specified\n PRELIGHT or specified the size), GTK+ won't modify the image;\n if the attribute matches with a wildcard, GTK+ will scale or modify the image to\n match the state and size the user requested.\n <hr>\n Key bindings\n Key bindings allow the user to specify actions to be\n taken on particular key presses. The form of a binding\n set declaration is:\n $(DDOC_COMMENT example)\n key is a string consisting of a\n series of modifiers followed by the name of a key. The\n modifiers can be:\n <alt>\n <ctl>\n <control>\n <meta>\n <hyper>\n <super>\n <mod1>\n <mod2>\n <mod3>\n <mod4>\n <mod5>\n <release>\n <shft>\n <shift>\n <shft> is an alias for\n <shift>,\n <ctl> is an alias for\n <control>,\n  and\n <alt> is an alias for\n <mod1>.\n The action that is bound to the key is a sequence\n of signal names (strings) followed by parameters for\n each signal. The signals must be action signals.\n (See g_signal_new()). Each parameter can be\n a float, integer, string, or unquoted string\n representing an enumeration value. The types of\n the parameters specified must match the types of the\n parameters of the signal.\n Binding sets are connected to widgets in the same manner as styles,\n with one difference: Binding sets override other binding sets first\n by pattern type, then by priority and then by order of specification.\n The priorities that can be specified and their default values are the\n same as for styles.\n \n",
"line" : 453,
"base" : "ObjectG",
"members" : [
{
"name" : "gtkRcStyle",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkRcStyle*",
"comment" : " the main Gtk struct \n",
"line" : 457}
,
{
"name" : "getRcStyleStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkRcStyle*()",
"line" : 460}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 467}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RcStyle(GtkRcStyle* gtkRcStyle)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 475}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 493}
,
{
"name" : "scannerNew",
"kind" : "function",
"protection" : "public",
"type" : "ScannerG()",
"comment" : "\n\t \n\n Returns:\n\t \n",
"line" : 505}
,
{
"name" : "getStyle",
"kind" : "function",
"protection" : "public",
"type" : "Style(Widget widget)",
"comment" : "\n Finds all matching RC styles for a given widget,\n composites them together, and then creates a\n GtkStyle representing the composite appearance.\n (GTK+ actually keeps a cache of previously\n created styles, so a new style may not be\n created.)\n Params:\n widget = a GtkWidget\n Returns: the resulting style. No refcount is added to the returned style, so if you want to save this style around, you should add a reference yourself.\n\t \n",
"line" : 527}
,
{
"name" : "getStyleByPaths",
"kind" : "function",
"protection" : "public",
"type" : "Style(Settings settings, string widgetPath, string classPath, GType type)",
"comment" : "\n Creates up a GtkStyle from styles defined in a RC file by providing\n the raw components used in matching. This function may be useful\n when creating pseudo-widgets that should be themed like widgets but\n don't actually have corresponding GTK+ widgets. An example of this\n would be items inside a GNOME canvas widget.\n Params:\n settings = a GtkSettings object\n widgetPath = the widget path to use when looking up the style, or NULL\n  if no matching against the widget path should be done. [allow-none]\n classPath = the class path to use when looking up the style, or NULL\n  if no matching against the class path should be done. [allow-none]\n type = a type that will be used along with parent types of this type\n  when matching against class styles, or G_TYPE_NONE\n Returns: A style created by matching with the supplied paths, or NULL if nothing matching was specified and the default style should be used. The returned value is owned by GTK+ as part of an internal cache, so you must call g_object_ref() on the returned value if you want to keep a reference to it.\n\t \n",
"line" : 554}
,
{
"name" : "addWidgetNameStyle",
"kind" : "function",
"protection" : "public",
"type" : "void(string pattern)",
"comment" : "\n Warning\n gtk_rc_add_widget_name_style is deprecated and should not be used in newly-written code. Use gtk_rc_parse_string() with a suitable string instead.\n Adds a GtkRcStyle that will be looked up by a match against\n Params:\n pattern = the pattern\n\t \n",
"line" : 572}
,
{
"name" : "addWidgetClassStyle",
"kind" : "function",
"protection" : "public",
"type" : "void(string pattern)",
"comment" : "\n Warning\n gtk_rc_add_widget_class_style is deprecated and should not be used in newly-written code. Use gtk_rc_parse_string() with a suitable string instead.\n Adds a GtkRcStyle that will be looked up by a match against\n Params:\n pattern = the pattern\n\t \n",
"line" : 585}
,
{
"name" : "addClassStyle",
"kind" : "function",
"protection" : "public",
"type" : "void(string pattern)",
"comment" : "\n Warning\n gtk_rc_add_class_style is deprecated and should not be used in newly-written code. Use gtk_rc_parse_string() with a suitable string instead.\n Adds a GtkRcStyle that will be looked up by a matching against\n Params:\n pattern = the pattern\n\t \n",
"line" : 598}
,
{
"name" : "parse",
"kind" : "function",
"protection" : "public",
"type" : "void(string filename)",
"comment" : "\n Parses a given resource file.\n Params:\n filename = the filename of a file to parse. If filename is not absolute, it\n  is searched in the current directory.\n\t \n",
"line" : 610}
,
{
"name" : "parseString",
"kind" : "function",
"protection" : "public",
"type" : "void(string rcString)",
"comment" : "\n Parses resource information directly from a string.\n Params:\n rcString = a string to parse.\n\t \n",
"line" : 621}
,
{
"name" : "reparseAll",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n If the modification time on any previously read file for the\n default GtkSettings has changed, discard all style information\n and then reread all previously read RC files.\n Returns: TRUE if the files were reread.\n\t \n",
"line" : 633}
,
{
"name" : "reparseAllForSettings",
"kind" : "function",
"protection" : "public",
"type" : "int(Settings settings, int forceLoad)",
"comment" : "\n If the modification time on any previously read file\n for the given GtkSettings has changed, discard all style information\n and then reread all previously read RC files.\n Params:\n settings = a GtkSettings\n forceLoad = load whether or not anything changed\n Returns: TRUE if the files were reread.\n\t \n",
"line" : 648}
,
{
"name" : "resetStyles",
"kind" : "function",
"protection" : "public",
"type" : "void(Settings settings)",
"comment" : "\n This function recomputes the styles for all widgets that use a\n particular GtkSettings object. (There is one GtkSettings object\n per GdkScreen, see gtk_settings_get_for_screen()); It is useful\n when some global parameter has changed that affects the appearance\n of all widgets, because when a widget gets a new style, it will\n both redraw and recompute any cached information about its\n appearance. As an example, it is used when the default font size\n set by the operating system changes. Note that this function\n doesn't affect widgets that have a style set explicitely on them\n with gtk_widget_set_style().\n Since 2.4\n Params:\n settings = a GtkSettings\n\t \n",
"line" : 669}
,
{
"name" : "addDefaultFile",
"kind" : "function",
"protection" : "public",
"type" : "void(string filename)",
"comment" : "\n Adds a file to the list of files to be parsed at the\n end of gtk_init().\n Params:\n filename = the pathname to the file. If filename is not absolute, it\n  is searched in the current directory.\n\t \n",
"line" : 682}
,
{
"name" : "getDefaultFiles",
"kind" : "function",
"protection" : "public",
"type" : "string[]()",
"comment" : "\n Retrieves the current list of RC files that will be parsed\n at the end of gtk_init().\n Returns: A NULL-terminated array of filenames. This memory is owned by GTK+ and must not be freed by the application. If you want to store this information, you should make a copy.\n\t \n",
"line" : 693}
,
{
"name" : "setDefaultFiles",
"kind" : "function",
"protection" : "public",
"type" : "void(string[] filenames)",
"comment" : "\n Sets the list of files that GTK+ will read at the\n end of gtk_init().\n Params:\n filenames = A NULL-terminated list of filenames.\n\t \n",
"line" : 705}
,
{
"name" : "parseColor",
"kind" : "function",
"protection" : "public",
"type" : "uint(ScannerG scanner, Color color)",
"comment" : "\n Parses a color in the format expected\n in a RC file.\n Note that theme engines should use gtk_rc_parse_color_full() in\n order to support symbolic colors.\n Params:\n scanner = a GScanner\n color = a pointer to a GdkColor structure in which to store the result\n Returns: G_TOKEN_NONE if parsing succeeded, otherwise the token that was expected but not found\n\t \n",
"line" : 721}
,
{
"name" : "parseColorFull",
"kind" : "function",
"protection" : "public",
"type" : "uint(ScannerG scanner, RcStyle style, Color color)",
"comment" : "\n Parses a color in the format expected\n in a RC file. If style is not NULL, it will be consulted to resolve\n references to symbolic colors.\n Since 2.12\n Params:\n scanner = a GScanner\n style = a GtkRcStyle, or NULL. [allow-none]\n color = a pointer to a GdkColor structure in which to store the result\n Returns: G_TOKEN_NONE if parsing succeeded, otherwise the token that was expected but not found\n\t \n",
"line" : 738}
,
{
"name" : "parseState",
"kind" : "function",
"protection" : "public",
"type" : "uint(ScannerG scanner, out GtkStateType state)",
"comment" : "\n Parses a GtkStateType variable from the format expected\n in a RC file.\n Params:\n scanner = a GtkScanner (must be initialized for parsing an RC file)\n state = A pointer to a GtkStateType variable in which to\n store the result.\n Returns: G_TOKEN_NONE if parsing succeeded, otherwise the token that was expected but not found.\n\t \n",
"line" : 753}
,
{
"name" : "parsePriority",
"kind" : "function",
"protection" : "public",
"type" : "uint(ScannerG scanner, out GtkPathPriorityType priority)",
"comment" : "\n Parses a GtkPathPriorityType variable from the format expected\n in a RC file.\n Params:\n scanner = a GtkScanner (must be initialized for parsing an RC file)\n priority = A pointer to GtkPathPriorityType variable in which\n to store the result.\n Returns: G_TOKEN_NONE if parsing succeeded, otherwise the token that was expected but not found.\n\t \n",
"line" : 768}
,
{
"name" : "findModuleInPath",
"kind" : "function",
"protection" : "public",
"type" : "string(string moduleFile)",
"comment" : "\n Searches for a theme engine in the GTK+ search path. This function\n is not useful for applications and should not be used.\n Params:\n moduleFile = name of a theme engine\n Returns: The filename, if found (must be freed with g_free()), otherwise NULL.\n\t \n",
"line" : 781}
,
{
"name" : "findPixmapInPath",
"kind" : "function",
"protection" : "public",
"type" : "string(Settings settings, ScannerG scanner, string pixmapFile)",
"comment" : "\n Looks up a file in pixmap path for the specified GtkSettings.\n If the file is not found, it outputs a warning message using\n g_warning() and returns NULL.\n Params:\n settings = a GtkSettings\n scanner = Scanner used to get line number information for the\n  warning message, or NULL\n pixmapFile = name of the pixmap file to locate.\n Returns: the filename.\n\t \n",
"line" : 798}
,
{
"name" : "getModuleDir",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns a directory in which GTK+ looks for theme engines.\n For full information about the search for theme engines,\n see the docs for GTK_PATH in\n Running GTK+ Applications(3).\n Returns: the directory. (Must be freed with g_free())\n\t \n",
"line" : 811}
,
{
"name" : "getImModulePath",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Obtains the path in which to look for IM modules. See the documentation\n of the GTK_PATH\n environment variable for more details about looking up modules. This\n function is useful solely for utilities supplied with GTK+ and should\n not be used by applications under normal circumstances.\n Returns: a newly-allocated string containing the path in which to look for IM modules.\n\t \n",
"line" : 825}
,
{
"name" : "getImModuleFile",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Obtains the path to the IM modules file. See the documentation\n of the GTK_IM_MODULE_FILE\n environment variable for more details.\n Returns: a newly-allocated string containing the name of the file listing the IM modules available for loading\n\t \n",
"line" : 837}
,
{
"name" : "getThemeDir",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns the standard directory in which themes should\n be installed. (GTK+ does not actually use this directory\n itself.)\n Returns: The directory (must be freed with g_free()).\n\t \n",
"line" : 849}
,
{
"name" : "styleNew",
"kind" : "function",
"protection" : "public",
"type" : "RcStyle()",
"comment" : "\n Creates a new GtkRcStyle with no fields set and\n a reference count of 1.\n Returns: the newly-created GtkRcStyle\n\t \n",
"line" : 860}
,
{
"name" : "styleCopy",
"kind" : "function",
"protection" : "public",
"type" : "RcStyle()",
"comment" : "\n Makes a copy of the specified GtkRcStyle. This function\n will correctly copy an RC style that is a member of a class\n derived from GtkRcStyle.\n Returns: the resulting GtkRcStyle\n\t \n",
"line" : 877}
,
{
"name" : "styleRef",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_rc_style_ref is deprecated and should not be used in newly-written code. Use g_object_ref() instead\n Increments the reference count of a GtkRcStyle.\n\t \n",
"line" : 893}
,
{
"name" : "styleUnref",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_rc_style_unref is deprecated and should not be used in newly-written code. Use g_object_unref() instead\n Decrements the reference count of a GtkRcStyle and\n frees if the result is 0.\n\t \n",
"line" : 905}
]
}
]
}
,
{
"name" : "gtk.RecentAction",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/RecentAction.d",
"members" : [
{
"name" : "RecentAction",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkRecentAction represents a list of recently used files, which\n can be shown by widgets such as GtkRecentChooserDialog or\n GtkRecentChooserMenu.\n To construct a submenu showing recently used files, use a GtkRecentAction\n as the action for a <menuitem>. To construct a menu toolbutton showing\n the recently used files in the popup menu, use a GtkRecentAction as the\n action for a <toolitem> element.\n \n",
"line" : 83,
"base" : "Action",
"members" : [
{
"name" : "gtkRecentAction",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkRecentAction*",
"comment" : " the main Gtk struct \n",
"line" : 87}
,
{
"name" : "getRecentActionStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkRecentAction*()",
"line" : 90}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 97}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RecentAction(GtkRecentAction* gtkRecentAction)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 105}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 123}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RecentAction(string name, string label, string tooltip, StockID stockID)",
"comment" : "\n Creates a new GtkRecentAction object. To add the action to\n a GtkActionGroup and set the accelerator for the action,\n call gtk_action_group_add_action_with_accel().\n Since 2.12\n Params:\n name =  a unique name for the action\n label =  the label displayed in menu items and on buttons, or NULL\n tooltip =  a tooltip for the action, or NULL\n stockID =  the stock icon to display in widgets representing the\n  action, or NULL\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 142}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RecentAction(string name, string label, string tooltip, StockID stockID, RecentManager manager)",
"comment" : "\n Creates a new GtkRecentAction object. To add the action to\n a GtkActionGroup and set the accelerator for the action,\n call gtk_action_group_add_action_with_accel().\n Since 2.12\n Params:\n name =  a unique name for the action\n label =  the label displayed in menu items and on buttons, or NULL\n tooltip =  a tooltip for the action, or NULL\n stockID =  the stock icon to display in widgets representing the\n  action, or NULL\n manager =  a GtkRecentManager, or NULL for using the default\n  GtkRecentManager\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 168}
,
{
"name" : "getShowNumbers",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n\t \n\n Returns the value set by gtk_recent_chooser_menu_set_show_numbers().\n Since 2.12\n Returns: TRUE if numbers should be shown.\n\t \n",
"line" : 187}
,
{
"name" : "setShowNumbers",
"kind" : "function",
"protection" : "public",
"type" : "void(int showNumbers)",
"comment" : "\n Sets whether a number should be added to the items shown by the\n widgets representing action. The numbers are shown to provide\n a unique character for a mnemonic to be used inside the menu item's\n label. Only the first ten items get a number to avoid clashes.\n Since 2.12\n Params:\n showNumbers = TRUE if the shown items should be numbered\n\t \n",
"line" : 202}
]
}
]
}
,
{
"name" : "gtk.RecentChooserDialog",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/RecentChooserDialog.d",
"members" : [
{
"name" : "RecentChooserDialog",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkRecentChooserDialog is a dialog box suitable for displaying the recently\n used documents. This widgets works by putting a GtkRecentChooserWidget inside\n a GtkDialog. It exposes the GtkRecentChooserIface interface, so you can use\n all the GtkRecentChooser functions on the recent chooser dialog as well as\n those for GtkDialog.\n Note that GtkRecentChooserDialog does not have any methods of its own.\n Instead, you should use the functions that work on a GtkRecentChooser.\n $(DDOC_COMMENT example)\n Recently used files are supported since GTK+ 2.10.\n \n",
"line" : 96,
"base" : "Dialog",
"interfaces" : [
"RecentChooserIF"],
"members" : [
{
"name" : "gtkRecentChooserDialog",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkRecentChooserDialog*",
"comment" : " the main Gtk struct \n",
"line" : 100}
,
{
"name" : "getRecentChooserDialogStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkRecentChooserDialog*()",
"line" : 103}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 110}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RecentChooserDialog(GtkRecentChooserDialog* gtkRecentChooserDialog)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 118}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 136}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RecentChooserDialog(string title, Window parent, RecentManager manager, string[] buttonsText = null, GtkResponseType[] responses = null)",
"comment" : "\n Creates a new GtkRecentChooserDialog with a specified recent manager.\n This is useful if you have implemented your own recent manager, or if you\n have a customized instance of a GtkRecentManager object.\n Since 2.10\n Params:\n  title =  Title of the dialog, or null\n  parent =  Transient parent of the dialog, or null,\n  manager =  a GtkRecentManager, or null\n  buttonsText = text to go in the buttons\n  responses = response ID's for the buttons\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 158}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RecentChooserDialog(string title, Window parent, RecentManager manager, StockID[] stockIDs, GtkResponseType[] responses = null)",
"comment" : "\n Creates a new GtkRecentChooserDialog with a specified recent manager.\n This is useful if you have implemented your own recent manager, or if you\n have a customized instance of a GtkRecentManager object.\n Since 2.10\n Params:\n  title =  Title of the dialog, or null\n  parent =  Transient parent of the dialog, or null,\n  manager =  a GtkRecentManager, or null\n  stockIDs = stockIDs of the buttons\n  responses = response ID's for the buttons\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 183}
]
}
]
}
,
{
"name" : "gtk.RecentChooserIF",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/RecentChooserIF.d",
"members" : [
{
"name" : "RecentChooserIF",
"kind" : "interface",
"protection" : "public",
"comment" : "\n Description\n GtkRecentChooser is an interface that can be implemented by widgets\n displaying the list of recently used files. In GTK+, the main objects\n that implement this interface are GtkRecentChooserWidget,\n GtkRecentChooserDialog and GtkRecentChooserMenu.\n Recently used files are supported since GTK+ 2.10.\n \n",
"line" : 96,
"members" : [
{
"name" : "getRecentChooserTStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkRecentChooser*()",
"line" : 99}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 102}
,
{
"name" : "onItemActivatedListeners",
"kind" : "function",
"protection" : "public",
"type" : "void delegate(RecentChooserIF)[]()",
"comment" : "\n\t \n",
"line" : 108}
,
{
"name" : "addOnItemActivated",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(RecentChooserIF) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted when the user \"activates\" a recent item\n in the recent chooser. This can happen by double-clicking on an item\n in the recently used resources list, or by pressing\n Enter.\n Since 2.10\n\t \n",
"line" : 116}
,
{
"name" : "onSelectionChangedListeners",
"kind" : "function",
"protection" : "public",
"type" : "void delegate(RecentChooserIF)[]()",
"line" : 117}
,
{
"name" : "addOnSelectionChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(RecentChooserIF) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted when there is a change in the set of\n selected recently used resources. This can happen when a user\n modifies the selection with the mouse or the keyboard, or when\n explicitely calling functions to change the selection.\n Since 2.10\n See Also\n GtkRecentManager, GtkRecentChooserDialog, GtkRecentChooserWidget,\n GtkRecentChooserMenu\n\t \n",
"line" : 128}
,
{
"name" : "setShowPrivate",
"kind" : "function",
"protection" : "public",
"type" : "void(int showPrivate)",
"comment" : "\n Whether to show recently used resources marked registered as private.\n Since 2.10\n Params:\n showPrivate = TRUE to show private items, FALSE otherwise\n\t \n",
"line" : 136}
,
{
"name" : "getShowPrivate",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether chooser should display recently used resources\n registered as private.\n Since 2.10\n Returns: TRUE if the recent chooser should show private items, FALSE otherwise.\n\t \n",
"line" : 144}
,
{
"name" : "setShowNotFound",
"kind" : "function",
"protection" : "public",
"type" : "void(int showNotFound)",
"comment" : "\n Sets whether chooser should display the recently used resources that\n it didn't find. This only applies to local resources.\n Since 2.10\n Params:\n showNotFound = whether to show the local items we didn't find\n\t \n",
"line" : 153}
,
{
"name" : "getShowNotFound",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Retrieves whether chooser should show the recently used resources that\n were not found.\n Since 2.10\n Returns: TRUE if the resources not found should be displayed, and FALSE otheriwse.\n\t \n",
"line" : 161}
,
{
"name" : "setShowIcons",
"kind" : "function",
"protection" : "public",
"type" : "void(int showIcons)",
"comment" : "\n Sets whether chooser should show an icon near the resource when\n displaying it.\n Since 2.10\n Params:\n showIcons = whether to show an icon near the resource\n\t \n",
"line" : 170}
,
{
"name" : "getShowIcons",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Retrieves whether chooser should show an icon near the resource.\n Since 2.10\n Returns: TRUE if the icons should be displayed, FALSE otherwise.\n\t \n",
"line" : 177}
,
{
"name" : "setSelectMultiple",
"kind" : "function",
"protection" : "public",
"type" : "void(int selectMultiple)",
"comment" : "\n Sets whether chooser can select multiple items.\n Since 2.10\n Params:\n selectMultiple = TRUE if chooser can select more than one item\n\t \n",
"line" : 185}
,
{
"name" : "getSelectMultiple",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets whether chooser can select multiple items.\n Since 2.10\n Returns: TRUE if chooser can select more than one item.\n\t \n",
"line" : 192}
,
{
"name" : "setLocalOnly",
"kind" : "function",
"protection" : "public",
"type" : "void(int localOnly)",
"comment" : "\n Sets whether only local resources, that is resources using the file:\/\/ URI\n scheme, should be shown in the recently used resources selector. If\n local_only is TRUE (the default) then the shown resources are guaranteed\n to be accessible through the operating system native file system.\n Since 2.10\n Params:\n localOnly = TRUE if only local files can be shown\n\t \n",
"line" : 203}
,
{
"name" : "getLocalOnly",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets whether only local resources should be shown in the recently used\n resources selector. See gtk_recent_chooser_set_local_only()\n Since 2.10\n Returns: TRUE if only local resources should be shown.\n\t \n",
"line" : 211}
,
{
"name" : "setLimit",
"kind" : "function",
"protection" : "public",
"type" : "void(int limit)",
"comment" : "\n Sets the number of items that should be returned by\n gtk_recent_chooser_get_items() and gtk_recent_chooser_get_uris().\n Since 2.10\n Params:\n limit = a positive integer, or -1 for all items\n\t \n",
"line" : 220}
,
{
"name" : "getLimit",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the number of items returned by gtk_recent_chooser_get_items()\n and gtk_recent_chooser_get_uris().\n Since 2.10\n Returns: A positive integer, or -1 meaning that all items are returned.\n\t \n",
"line" : 228}
,
{
"name" : "setShowTips",
"kind" : "function",
"protection" : "public",
"type" : "void(int showTips)",
"comment" : "\n Sets whether to show a tooltips containing the full path of each\n recently used resource in a GtkRecentChooser widget.\n Since 2.10\n Params:\n showTips = TRUE if tooltips should be shown\n\t \n",
"line" : 237}
,
{
"name" : "getShowTips",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets whether chooser should display tooltips containing the full path\n of a recently user resource.\n Since 2.10\n Returns: TRUE if the recent chooser should show tooltips, FALSE otherwise.\n\t \n",
"line" : 245}
,
{
"name" : "recentChooserSetShowNumbers",
"kind" : "function",
"protection" : "public",
"type" : "void(int showNumbers)",
"comment" : "\n Warning\n gtk_recent_chooser_set_show_numbers has been deprecated since version 2.12 and should not be used in newly-written code. Use gtk_recent_chooser_menu_set_show_numbers() instead.\n Whether to show recently used resources prepended by a unique number.\n Since 2.10\n Params:\n showNumbers = TRUE to show numbers, FALSE otherwise\n\t \n",
"line" : 255}
,
{
"name" : "recentChooserGetShowNumbers",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Warning\n gtk_recent_chooser_get_show_numbers has been deprecated since version 2.12 and should not be used in newly-written code. use gtk_recent_chooser_menu_get_show_numbers() instead.\n Returns whether chooser should display recently used resources\n prepended by a unique number.\n Since 2.10\n Returns: TRUE if the recent chooser should show display numbers, FALSE otherwise.\n\t \n",
"line" : 265}
,
{
"name" : "setSortType",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkRecentSortType sortType)",
"comment" : "\n Changes the sorting order of the recently used resources list displayed by\n chooser.\n Since 2.10\n Params:\n sortType = sort order that the chooser should use\n\t \n",
"line" : 274}
,
{
"name" : "getSortType",
"kind" : "function",
"protection" : "public",
"type" : "GtkRecentSortType()",
"comment" : "\n Gets the value set by gtk_recent_chooser_set_sort_type().\n Since 2.10\n Returns: the sorting order of the chooser.\n\t \n",
"line" : 281}
,
{
"name" : "setSortFunc",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) int function(GtkRecentInfo*, GtkRecentInfo*, void*) sortFunc, void* sortData, extern (C) void function(void* cbData) dataDestroy)",
"comment" : "\n Sets the comparison function used when sorting to be sort_func. If\n the chooser has the sort type set to GTK_RECENT_SORT_CUSTOM then\n the chooser will sort using this function.\n To the comparison function will be passed two GtkRecentInfo structs and\n sort_data; sort_func should return a positive integer if the first\n item comes before the second, zero if the two items are equal and\n a negative integer if the first item comes after the second.\n Since 2.10\n Params:\n sortFunc = the comparison function\n sortData = user data to pass to sort_func, or NULL. [allow-none]\n dataDestroy = destroy notifier for sort_data, or NULL. [allow-none]\n\t \n",
"line" : 297}
,
{
"name" : "setCurrentUri",
"kind" : "function",
"protection" : "public",
"type" : "int(string uri)",
"comment" : "\n Sets uri as the current URI for chooser.\n Since 2.10\n Params:\n uri = a URI\n Returns: TRUE if the URI was found.\n Throws: GException on failure.\n\t \n",
"line" : 307}
,
{
"name" : "getCurrentUri",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the URI currently selected by chooser.\n Since 2.10\n Returns: a newly allocated string holding a URI.\n\t \n",
"line" : 314}
,
{
"name" : "getCurrentItem",
"kind" : "function",
"protection" : "public",
"type" : "RecentInfo()",
"comment" : "\n Gets the GtkRecentInfo currently selected by chooser.\n Since 2.10\n Returns: a GtkRecentInfo. Use gtk_recent_info_unref() when when you have finished using it.\n\t \n",
"line" : 321}
,
{
"name" : "selectUri",
"kind" : "function",
"protection" : "public",
"type" : "int(string uri)",
"comment" : "\n Selects uri inside chooser.\n Since 2.10\n Params:\n uri = a URI\n Returns: TRUE if uri was found.\n Throws: GException on failure.\n\t \n",
"line" : 331}
,
{
"name" : "unselectUri",
"kind" : "function",
"protection" : "public",
"type" : "void(string uri)",
"comment" : "\n Unselects uri inside chooser.\n Since 2.10\n Params:\n uri = a URI\n\t \n",
"line" : 339}
,
{
"name" : "selectAll",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Selects all the items inside chooser, if the chooser supports\n multiple selection.\n Since 2.10\n\t \n",
"line" : 346}
,
{
"name" : "unselectAll",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Unselects all the items inside chooser.\n Since 2.10\n\t \n",
"line" : 352}
,
{
"name" : "getItems",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Gets the list of recently used resources in form of GtkRecentInfo objects.\n The return value of this function is affected by the \"sort-type\" and\n \"limit\" properties of chooser.\n Since 2.10\n Returns: A newly allocated list of GtkRecentInfo objects. You should use gtk_recent_info_unref() on every item of the list, and then free the list itself using g_list_free(). [element-type GtkRecentInfo][transfer full]\n\t \n",
"line" : 361}
,
{
"name" : "getUris",
"kind" : "function",
"protection" : "public",
"type" : "string[]()",
"comment" : "\n Gets the URI of the recently used resources.\n The return value of this function is affected by the \"sort-type\" and \"limit\"\n properties of chooser.\n Since the returned array is NULL terminated, length may be NULL.\n Since 2.10\n Returns: A newly allocated, NULL-terminated array of strings. Use g_strfreev() to free it. [array length=length zero-terminated=1][transfer full]\n\t \n",
"line" : 371}
,
{
"name" : "addFilter",
"kind" : "function",
"protection" : "public",
"type" : "void(RecentFilter filter)",
"comment" : "\n Adds filter to the list of GtkRecentFilter objects held by chooser.\n If no previous filter objects were defined, this function will call\n gtk_recent_chooser_set_filter().\n Since 2.10\n Params:\n filter = a GtkRecentFilter\n\t \n",
"line" : 381}
,
{
"name" : "removeFilter",
"kind" : "function",
"protection" : "public",
"type" : "void(RecentFilter filter)",
"comment" : "\n Removes filter from the list of GtkRecentFilter objects held by chooser.\n Since 2.10\n Params:\n filter = a GtkRecentFilter\n\t \n",
"line" : 389}
,
{
"name" : "listFilters",
"kind" : "function",
"protection" : "public",
"type" : "ListSG()",
"comment" : "\n Gets the GtkRecentFilter objects held by chooser.\n Since 2.10\n Returns: A singly linked list of GtkRecentFilter objects. You should just free the returned list using g_slist_free(). [element-type GtkRecentFilter][transfer container]\n\t \n",
"line" : 396}
,
{
"name" : "setFilter",
"kind" : "function",
"protection" : "public",
"type" : "void(RecentFilter filter)",
"comment" : "\n Sets filter as the current GtkRecentFilter object used by chooser\n to affect the displayed recently used resources.\n Since 2.10\n Params:\n filter = a GtkRecentFilter\n\t \n",
"line" : 405}
,
{
"name" : "getFilter",
"kind" : "function",
"protection" : "public",
"type" : "RecentFilter()",
"comment" : "\n Gets the GtkRecentFilter object currently used by chooser to affect\n the display of the recently used resources.\n Since 2.10\n Returns: a GtkRecentFilter object. [transfer none]\n\t \n",
"line" : 413}
]
}
]
}
,
{
"name" : "gtk.RecentChooserMenu",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/RecentChooserMenu.d",
"members" : [
{
"name" : "RecentChooserMenu",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkRecentChooserMenu is a widget suitable for displaying recently used files\n inside a menu. It can be used to set a sub-menu of a GtkMenuItem using\n gtk_menu_item_set_submenu(), or as the menu of a GtkMenuToolButton.\n Note that GtkRecentChooserMenu does not have any methods of its own. Instead,\n you should use the functions that work on a GtkRecentChooser.\n Note also that GtkRecentChooserMenu does not support multiple filters, as it\n has no way to let the user choose between them as the GtkRecentChooserWidget\n and GtkRecentChooserDialog widgets do. Thus using gtk_recent_chooser_add_filter()\n on a GtkRecentChooserMenu widget will yield the same effects as using\n gtk_recent_chooser_set_filter(), replacing any currently set filter\n with the supplied filter; gtk_recent_chooser_remove_filter() will remove\n any currently set GtkRecentFilter object and will unset the current filter;\n gtk_recent_chooser_list_filters() will return a list containing a single\n GtkRecentFilter object.\n Recently used files are supported since GTK+ 2.10.\n \n",
"line" : 102,
"base" : "Menu",
"interfaces" : [
"ActivatableIF",
"RecentChooserIF"],
"members" : [
{
"name" : "gtkRecentChooserMenu",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkRecentChooserMenu*",
"comment" : " the main Gtk struct \n",
"line" : 106}
,
{
"name" : "getRecentChooserMenuStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkRecentChooserMenu*()",
"line" : 109}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 116}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RecentChooserMenu(GtkRecentChooserMenu* gtkRecentChooserMenu)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 124}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 142}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RecentChooserMenu()",
"comment" : "\n\t \n\n Creates a new GtkRecentChooserMenu widget.\n This kind of widget shows the list of recently used resources as\n a menu, each item as a menu item. Each item inside the menu might\n have an icon, representing its MIME type, and a number, for mnemonic\n access.\n This widget implements the GtkRecentChooser interface.\n This widget creates its own GtkRecentManager object. See the\n gtk_recent_chooser_menu_new_for_manager() function to know how to create\n a GtkRecentChooserMenu widget bound to another GtkRecentManager object.\n Since 2.10\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 170}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RecentChooserMenu(RecentManager manager)",
"comment" : "\n Creates a new GtkRecentChooserMenu widget using manager as\n the underlying recently used resources manager.\n This is useful if you have implemented your own recent manager,\n or if you have a customized instance of a GtkRecentManager\n object or if you wish to share a common GtkRecentManager object\n among multiple GtkRecentChooser widgets.\n Since 2.10\n Params:\n manager = a GtkRecentManager\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 193}
,
{
"name" : "getShowNumbers",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the value set by gtk_recent_chooser_menu_set_show_numbers().\n Since 2.10\n Returns: TRUE if numbers should be shown.\n\t \n",
"line" : 209}
,
{
"name" : "setShowNumbers",
"kind" : "function",
"protection" : "public",
"type" : "void(int showNumbers)",
"comment" : "\n Sets whether a number should be added to the items of menu. The\n numbers are shown to provide a unique character for a mnemonic to\n be used inside ten menu item's label. Only the first the items\n get a number to avoid clashes.\n Since 2.10\n Params:\n showNumbers = whether to show numbers\n\t \n",
"line" : 224}
]
}
]
}
,
{
"name" : "gtk.RecentChooserT",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/RecentChooserT.d",
"members" : [
{
"name" : "RecentChooserT(TStruct)",
"kind" : "template",
"protection" : "public",
"comment" : "\n Description\n GtkRecentChooser is an interface that can be implemented by widgets\n displaying the list of recently used files. In GTK+, the main objects\n that implement this interface are GtkRecentChooserWidget,\n GtkRecentChooserDialog and GtkRecentChooserMenu.\n Recently used files are supported since GTK+ 2.10.\n \n",
"line" : 96,
"members" : [
{
"name" : "gtkRecentChooser",
"kind" : "variable",
"type" : "GtkRecentChooser*",
"comment" : " the main Gtk struct \n",
"line" : 100}
,
{
"name" : "getRecentChooserTStruct",
"kind" : "function",
"type" : "GtkRecentChooser*()",
"line" : 103}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 111}
,
{
"name" : "_onItemActivatedListeners",
"kind" : "variable",
"type" : "void delegate(RecentChooserIF)[]",
"line" : 113}
,
{
"name" : "onItemActivatedListeners",
"kind" : "function",
"type" : "void delegate(RecentChooserIF)[]()",
"line" : 114}
,
{
"name" : "addOnItemActivated",
"kind" : "function",
"type" : "void(void delegate(RecentChooserIF) dlg, ConnectFlags connectFlags = cast(ConnectFlags)0)",
"comment" : "\n This signal is emitted when the user \"activates\" a recent item\n in the recent chooser. This can happen by double-clicking on an item\n in the recently used resources list, or by pressing\n Enter.\n Since 2.10\n\t \n",
"line" : 125}
,
{
"name" : "callBackItemActivated",
"kind" : "function",
"type" : "extern (C) void(GtkRecentChooser* chooserStruct, RecentChooserIF recentChooserIF)",
"line" : 140}
,
{
"name" : "_onSelectionChangedListeners",
"kind" : "variable",
"type" : "void delegate(RecentChooserIF)[]",
"line" : 148}
,
{
"name" : "onSelectionChangedListeners",
"kind" : "function",
"type" : "void delegate(RecentChooserIF)[]()",
"line" : 149}
,
{
"name" : "addOnSelectionChanged",
"kind" : "function",
"type" : "void(void delegate(RecentChooserIF) dlg, ConnectFlags connectFlags = cast(ConnectFlags)0)",
"comment" : "\n This signal is emitted when there is a change in the set of\n selected recently used resources. This can happen when a user\n modifies the selection with the mouse or the keyboard, or when\n explicitely calling functions to change the selection.\n Since 2.10\n See Also\n GtkRecentManager, GtkRecentChooserDialog, GtkRecentChooserWidget,\n GtkRecentChooserMenu\n\t \n",
"line" : 163}
,
{
"name" : "callBackSelectionChanged",
"kind" : "function",
"type" : "extern (C) void(GtkRecentChooser* chooserStruct, RecentChooserIF recentChooserIF)",
"line" : 178}
,
{
"name" : "setShowPrivate",
"kind" : "function",
"type" : "void(int showPrivate)",
"comment" : "\n Whether to show recently used resources marked registered as private.\n Since 2.10\n Params:\n showPrivate = TRUE to show private items, FALSE otherwise\n\t \n",
"line" : 193}
,
{
"name" : "getShowPrivate",
"kind" : "function",
"type" : "int()",
"comment" : "\n Returns whether chooser should display recently used resources\n registered as private.\n Since 2.10\n Returns: TRUE if the recent chooser should show private items, FALSE otherwise.\n\t \n",
"line" : 205}
,
{
"name" : "setShowNotFound",
"kind" : "function",
"type" : "void(int showNotFound)",
"comment" : "\n Sets whether chooser should display the recently used resources that\n it didn't find. This only applies to local resources.\n Since 2.10\n Params:\n showNotFound = whether to show the local items we didn't find\n\t \n",
"line" : 218}
,
{
"name" : "getShowNotFound",
"kind" : "function",
"type" : "int()",
"comment" : "\n Retrieves whether chooser should show the recently used resources that\n were not found.\n Since 2.10\n Returns: TRUE if the resources not found should be displayed, and FALSE otheriwse.\n\t \n",
"line" : 230}
,
{
"name" : "setShowIcons",
"kind" : "function",
"type" : "void(int showIcons)",
"comment" : "\n Sets whether chooser should show an icon near the resource when\n displaying it.\n Since 2.10\n Params:\n showIcons = whether to show an icon near the resource\n\t \n",
"line" : 243}
,
{
"name" : "getShowIcons",
"kind" : "function",
"type" : "int()",
"comment" : "\n Retrieves whether chooser should show an icon near the resource.\n Since 2.10\n Returns: TRUE if the icons should be displayed, FALSE otherwise.\n\t \n",
"line" : 254}
,
{
"name" : "setSelectMultiple",
"kind" : "function",
"type" : "void(int selectMultiple)",
"comment" : "\n Sets whether chooser can select multiple items.\n Since 2.10\n Params:\n selectMultiple = TRUE if chooser can select more than one item\n\t \n",
"line" : 266}
,
{
"name" : "getSelectMultiple",
"kind" : "function",
"type" : "int()",
"comment" : "\n Gets whether chooser can select multiple items.\n Since 2.10\n Returns: TRUE if chooser can select more than one item.\n\t \n",
"line" : 277}
,
{
"name" : "setLocalOnly",
"kind" : "function",
"type" : "void(int localOnly)",
"comment" : "\n Sets whether only local resources, that is resources using the file:\/\/ URI\n scheme, should be shown in the recently used resources selector. If\n local_only is TRUE (the default) then the shown resources are guaranteed\n to be accessible through the operating system native file system.\n Since 2.10\n Params:\n localOnly = TRUE if only local files can be shown\n\t \n",
"line" : 292}
,
{
"name" : "getLocalOnly",
"kind" : "function",
"type" : "int()",
"comment" : "\n Gets whether only local resources should be shown in the recently used\n resources selector. See gtk_recent_chooser_set_local_only()\n Since 2.10\n Returns: TRUE if only local resources should be shown.\n\t \n",
"line" : 304}
,
{
"name" : "setLimit",
"kind" : "function",
"type" : "void(int limit)",
"comment" : "\n Sets the number of items that should be returned by\n gtk_recent_chooser_get_items() and gtk_recent_chooser_get_uris().\n Since 2.10\n Params:\n limit = a positive integer, or -1 for all items\n\t \n",
"line" : 317}
,
{
"name" : "getLimit",
"kind" : "function",
"type" : "int()",
"comment" : "\n Gets the number of items returned by gtk_recent_chooser_get_items()\n and gtk_recent_chooser_get_uris().\n Since 2.10\n Returns: A positive integer, or -1 meaning that all items are returned.\n\t \n",
"line" : 329}
,
{
"name" : "setShowTips",
"kind" : "function",
"type" : "void(int showTips)",
"comment" : "\n Sets whether to show a tooltips containing the full path of each\n recently used resource in a GtkRecentChooser widget.\n Since 2.10\n Params:\n showTips = TRUE if tooltips should be shown\n\t \n",
"line" : 342}
,
{
"name" : "getShowTips",
"kind" : "function",
"type" : "int()",
"comment" : "\n Gets whether chooser should display tooltips containing the full path\n of a recently user resource.\n Since 2.10\n Returns: TRUE if the recent chooser should show tooltips, FALSE otherwise.\n\t \n",
"line" : 354}
,
{
"name" : "recentChooserSetShowNumbers",
"kind" : "function",
"type" : "void(int showNumbers)",
"comment" : "\n Warning\n gtk_recent_chooser_set_show_numbers has been deprecated since version 2.12 and should not be used in newly-written code. Use gtk_recent_chooser_menu_set_show_numbers() instead.\n Whether to show recently used resources prepended by a unique number.\n Since 2.10\n Params:\n showNumbers = TRUE to show numbers, FALSE otherwise\n\t \n",
"line" : 368}
,
{
"name" : "recentChooserGetShowNumbers",
"kind" : "function",
"type" : "int()",
"comment" : "\n Warning\n gtk_recent_chooser_get_show_numbers has been deprecated since version 2.12 and should not be used in newly-written code. use gtk_recent_chooser_menu_get_show_numbers() instead.\n Returns whether chooser should display recently used resources\n prepended by a unique number.\n Since 2.10\n Returns: TRUE if the recent chooser should show display numbers, FALSE otherwise.\n\t \n",
"line" : 382}
,
{
"name" : "setSortType",
"kind" : "function",
"type" : "void(GtkRecentSortType sortType)",
"comment" : "\n Changes the sorting order of the recently used resources list displayed by\n chooser.\n Since 2.10\n Params:\n sortType = sort order that the chooser should use\n\t \n",
"line" : 395}
,
{
"name" : "getSortType",
"kind" : "function",
"type" : "GtkRecentSortType()",
"comment" : "\n Gets the value set by gtk_recent_chooser_set_sort_type().\n Since 2.10\n Returns: the sorting order of the chooser.\n\t \n",
"line" : 406}
,
{
"name" : "setSortFunc",
"kind" : "function",
"type" : "void(GtkRecentSortFunc sortFunc, void* sortData, GDestroyNotify dataDestroy)",
"comment" : "\n Sets the comparison function used when sorting to be sort_func. If\n the chooser has the sort type set to GTK_RECENT_SORT_CUSTOM then\n the chooser will sort using this function.\n To the comparison function will be passed two GtkRecentInfo structs and\n sort_data; sort_func should return a positive integer if the first\n item comes before the second, zero if the two items are equal and\n a negative integer if the first item comes after the second.\n Since 2.10\n Params:\n sortFunc = the comparison function\n sortData = user data to pass to sort_func, or NULL. [allow-none]\n dataDestroy = destroy notifier for sort_data, or NULL. [allow-none]\n\t \n",
"line" : 426}
,
{
"name" : "setCurrentUri",
"kind" : "function",
"type" : "int(string uri)",
"comment" : "\n Sets uri as the current URI for chooser.\n Since 2.10\n Params:\n uri = a URI\n Returns: TRUE if the URI was found.\n Throws: GException on failure.\n\t \n",
"line" : 440}
,
{
"name" : "getCurrentUri",
"kind" : "function",
"type" : "string()",
"comment" : "\n Gets the URI currently selected by chooser.\n Since 2.10\n Returns: a newly allocated string holding a URI.\n\t \n",
"line" : 460}
,
{
"name" : "getCurrentItem",
"kind" : "function",
"type" : "RecentInfo()",
"comment" : "\n Gets the GtkRecentInfo currently selected by chooser.\n Since 2.10\n Returns: a GtkRecentInfo. Use gtk_recent_info_unref() when when you have finished using it.\n\t \n",
"line" : 471}
,
{
"name" : "selectUri",
"kind" : "function",
"type" : "int(string uri)",
"comment" : "\n Selects uri inside chooser.\n Since 2.10\n Params:\n uri = a URI\n Returns: TRUE if uri was found.\n Throws: GException on failure.\n\t \n",
"line" : 490}
,
{
"name" : "unselectUri",
"kind" : "function",
"type" : "void(string uri)",
"comment" : "\n Unselects uri inside chooser.\n Since 2.10\n Params:\n uri = a URI\n\t \n",
"line" : 511}
,
{
"name" : "selectAll",
"kind" : "function",
"type" : "void()",
"comment" : "\n Selects all the items inside chooser, if the chooser supports\n multiple selection.\n Since 2.10\n\t \n",
"line" : 522}
,
{
"name" : "unselectAll",
"kind" : "function",
"type" : "void()",
"comment" : "\n Unselects all the items inside chooser.\n Since 2.10\n\t \n",
"line" : 532}
,
{
"name" : "getItems",
"kind" : "function",
"type" : "ListG()",
"comment" : "\n Gets the list of recently used resources in form of GtkRecentInfo objects.\n The return value of this function is affected by the \"sort-type\" and\n \"limit\" properties of chooser.\n Since 2.10\n Returns: A newly allocated list of GtkRecentInfo objects. You should use gtk_recent_info_unref() on every item of the list, and then free the list itself using g_list_free(). [element-type GtkRecentInfo][transfer full]\n\t \n",
"line" : 545}
,
{
"name" : "getUris",
"kind" : "function",
"type" : "string[]()",
"comment" : "\n Gets the URI of the recently used resources.\n The return value of this function is affected by the \"sort-type\" and \"limit\"\n properties of chooser.\n Since the returned array is NULL terminated, length may be NULL.\n Since 2.10\n Returns: A newly allocated, NULL-terminated array of strings. Use g_strfreev() to free it. [array length=length zero-terminated=1][transfer full]\n\t \n",
"line" : 564}
,
{
"name" : "addFilter",
"kind" : "function",
"type" : "void(RecentFilter filter)",
"comment" : "\n Adds filter to the list of GtkRecentFilter objects held by chooser.\n If no previous filter objects were defined, this function will call\n gtk_recent_chooser_set_filter().\n Since 2.10\n Params:\n filter = a GtkRecentFilter\n\t \n",
"line" : 587}
,
{
"name" : "removeFilter",
"kind" : "function",
"type" : "void(RecentFilter filter)",
"comment" : "\n Removes filter from the list of GtkRecentFilter objects held by chooser.\n Since 2.10\n Params:\n filter = a GtkRecentFilter\n\t \n",
"line" : 599}
,
{
"name" : "listFilters",
"kind" : "function",
"type" : "ListSG()",
"comment" : "\n Gets the GtkRecentFilter objects held by chooser.\n Since 2.10\n Returns: A singly linked list of GtkRecentFilter objects. You should just free the returned list using g_slist_free(). [element-type GtkRecentFilter][transfer container]\n\t \n",
"line" : 610}
,
{
"name" : "setFilter",
"kind" : "function",
"type" : "void(RecentFilter filter)",
"comment" : "\n Sets filter as the current GtkRecentFilter object used by chooser\n to affect the displayed recently used resources.\n Since 2.10\n Params:\n filter = a GtkRecentFilter\n\t \n",
"line" : 628}
,
{
"name" : "getFilter",
"kind" : "function",
"type" : "RecentFilter()",
"comment" : "\n Gets the GtkRecentFilter object currently used by chooser to affect\n the display of the recently used resources.\n Since 2.10\n Returns: a GtkRecentFilter object. [transfer none]\n\t \n",
"line" : 640}
]
}
]
}
,
{
"name" : "gtk.RecentChooserWidget",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/RecentChooserWidget.d",
"members" : [
{
"name" : "RecentChooserWidget",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkRecentChooserWidget is a widget suitable for selecting recently used\n files. It is the main building block of a GtkRecentChooserDialog. Most\n applications will only need to use the latter; you can use\n GtkRecentChooserWidget as part of a larger window if you have special needs.\n Note that GtkRecentChooserWidget does not have any methods of its own.\n Instead, you should use the functions that work on a GtkRecentChooser.\n Recently used files are supported since GTK+ 2.10.\n \n",
"line" : 87,
"base" : "VBox",
"interfaces" : [
"RecentChooserIF"],
"members" : [
{
"name" : "gtkRecentChooserWidget",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkRecentChooserWidget*",
"comment" : " the main Gtk struct \n",
"line" : 91}
,
{
"name" : "getRecentChooserWidgetStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkRecentChooserWidget*()",
"line" : 94}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 101}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RecentChooserWidget(GtkRecentChooserWidget* gtkRecentChooserWidget)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 109}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 127}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RecentChooserWidget()",
"comment" : "\n\t \n\n Creates a new GtkRecentChooserWidget object. This is an embeddable widget\n used to access the recently used resources list.\n Since 2.10\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 145}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RecentChooserWidget(RecentManager manager)",
"comment" : "\n Creates a new GtkRecentChooserWidget with a specified recent manager.\n This is useful if you have implemented your own recent manager, or if you\n have a customized instance of a GtkRecentManager object.\n Since 2.10\n Params:\n manager = a GtkRecentManager\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 165}
]
}
]
}
,
{
"name" : "gtk.RecentFilter",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/RecentFilter.d",
"members" : [
{
"name" : "RecentFilter",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkRecentFilter can be used to restrict the files being shown\n in a GtkRecentChooser. Files can be filtered based on their name\n (with gtk_recent_filter_add_pattern()), on their mime type (with\n gtk_file_filter_add_mime_type()), on the application that has\n registered them (with gtk_recent_filter_add_application()), or by\n a custom filter function (with gtk_recent_filter_add_custom()).\n Filtering by mime type handles aliasing and subclassing of mime\n types; e.g. a filter for text\/plain also matches a file with mime\n type application\/rtf, since application\/rtf is a subclass of text\/plain.\n Note that GtkRecentFilter allows wildcards for the subtype of a\n mime type, so you can e.g. filter for image\/+*.\n Normally, filters are used by adding them to a GtkRecentChooser,\n see gtk_recent_chooser_add_filter(), but it is also possible to\n manually use a filter on a file with gtk_recent_filter_filter().\n Recently used files are supported since GTK+ 2.10.\n \n",
"line" : 86,
"base" : "ObjectGtk",
"members" : [
{
"name" : "gtkRecentFilter",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkRecentFilter*",
"comment" : " the main Gtk struct \n",
"line" : 90}
,
{
"name" : "getRecentFilterStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkRecentFilter*()",
"line" : 93}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 100}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RecentFilter(GtkRecentFilter* gtkRecentFilter)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 108}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 126}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RecentFilter()",
"comment" : "\n\t \n\n Creates a new GtkRecentFilter with no rules added to it.\n Such filter does not accept any recently used resources, so is not\n particularly useful until you add rules with\n gtk_recent_filter_add_pattern(), gtk_recent_filter_add_mime_type(),\n gtk_recent_filter_add_application(), gtk_recent_filter_add_age().\n Since 2.10\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 144}
,
{
"name" : "getName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the human-readable name for the filter.\n See gtk_recent_filter_set_name().\n Since 2.10\n Returns: the name of the filter, or NULL. The returned string is owned by the filter object and should not be freed.\n\t \n",
"line" : 161}
,
{
"name" : "setName",
"kind" : "function",
"protection" : "public",
"type" : "void(string name)",
"comment" : "\n Sets the human-readable name of the filter; this is the string\n that will be displayed in the recently used resources selector\n user interface if there is a selectable list of filters.\n Since 2.10\n Params:\n name = then human readable name of filter\n\t \n",
"line" : 175}
,
{
"name" : "addMimeType",
"kind" : "function",
"protection" : "public",
"type" : "void(string mimeType)",
"comment" : "\n Adds a rule that allows resources based on their registered MIME type.\n Since 2.10\n Params:\n mimeType = a MIME type\n\t \n",
"line" : 187}
,
{
"name" : "addPattern",
"kind" : "function",
"protection" : "public",
"type" : "void(string pattern)",
"comment" : "\n Adds a rule that allows resources based on a pattern matching their\n display name.\n Since 2.10\n Params:\n pattern = a file pattern\n\t \n",
"line" : 200}
,
{
"name" : "addPixbufFormats",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Adds a rule allowing image files in the formats supported\n by GdkPixbuf.\n Since 2.10\n\t \n",
"line" : 211}
,
{
"name" : "addApplication",
"kind" : "function",
"protection" : "public",
"type" : "void(string application)",
"comment" : "\n Adds a rule that allows resources based on the name of the application\n that has registered them.\n Since 2.10\n Params:\n application = an application name\n\t \n",
"line" : 224}
,
{
"name" : "addGroup",
"kind" : "function",
"protection" : "public",
"type" : "void(string group)",
"comment" : "\n Adds a rule that allows resources based on the name of the group\n to which they belong\n Since 2.10\n Params:\n group = a group name\n\t \n",
"line" : 237}
,
{
"name" : "addAge",
"kind" : "function",
"protection" : "public",
"type" : "void(int days)",
"comment" : "\n Adds a rule that allows resources based on their age - that is, the number\n of days elapsed since they were last modified.\n Since 2.10\n Params:\n days = number of days\n\t \n",
"line" : 250}
,
{
"name" : "addCustom",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkRecentFilterFlags needed, extern (C) int function(GtkRecentFilterInfo*, void*) func, void* data, extern (C) void function(void* cbData) dataDestroy)",
"comment" : "\n Adds a rule to a filter that allows resources based on a custom callback\n function. The bitfield needed which is passed in provides information\n about what sorts of information that the filter function needs;\n this allows GTK+ to avoid retrieving expensive information when\n it isn't needed by the filter.\n Since 2.10\n Params:\n needed = bitfield of flags indicating the information that the custom\n filter function needs.\n func = callback function; if the function returns TRUE, then\n the file will be displayed.\n data = data to pass to func\n dataDestroy = function to call to free data when it is no longer needed.\n\t \n",
"line" : 271}
,
{
"name" : "getNeeded",
"kind" : "function",
"protection" : "public",
"type" : "GtkRecentFilterFlags()",
"comment" : "\n Gets the fields that need to be filled in for the structure\n passed to gtk_recent_filter_filter()\n This function will not typically be used by applications; it\n is intended principally for use in the implementation of\n GtkRecentChooser.\n Since 2.10\n Returns: bitfield of flags indicating needed fields when calling gtk_recent_filter_filter()\n\t \n",
"line" : 286}
,
{
"name" : "filter",
"kind" : "function",
"protection" : "public",
"type" : "int(GtkRecentFilterInfo* filterInfo)",
"comment" : "\n Tests whether a file should be displayed according to filter.\n The GtkRecentFilterInfo structure filter_info should include\n the fields returned from gtk_recent_filter_get_needed().\n This function will not typically be used by applications; it\n is intended principally for use in the implementation of\n GtkRecentChooser.\n Since 2.10\n Params:\n filter = a GtkRecentFilter\n filterInfo = a GtkRecentFilterInfo structure containing information\n about a recently used resource\n Returns: TRUE if the file should be displayed\n\t \n",
"line" : 306}
]
}
]
}
,
{
"name" : "gtk.RecentInfo",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/RecentInfo.d",
"members" : [
{
"name" : "RecentInfo",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkRecentManager provides a facility for adding, removing and\n looking up recently used files. Each recently used file is\n identified by its URI, and has meta-data associated to it, like\n the names and command lines of the applications that have\n registered it, the number of time each application has registered\n the same file, the mime type of the file and whether the file\n should be displayed only by the applications that have\n registered it.\n The GtkRecentManager acts like a database of all the recently\n used files. You can create new GtkRecentManager objects, but\n it is more efficient to use the standard recent manager for\n the GdkScreen so that informations about the recently used\n files is shared with other people using them. In case the\n default screen is being used, adding a new recently used\n file is as simple as:\n $(DDOC_COMMENT example)\n While looking up a recently used file is as simple as:\n $(DDOC_COMMENT example)\n Recently used files are supported since GTK+ 2.10.\n \n",
"line" : 96,
"base" : "Object",
"members" : [
{
"name" : "gtkRecentInfo",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkRecentInfo*",
"comment" : " the main Gtk struct \n",
"line" : 99}
,
{
"name" : "getRecentInfoStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkRecentInfo*()",
"line" : 102}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 109}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RecentInfo(GtkRecentInfo* gtkRecentInfo)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 117}
,
{
"name" : "doref",
"kind" : "function",
"protection" : "public",
"type" : "RecentInfo()",
"comment" : "\n\t \n\n Increases the reference count of recent_info by one.\n Since 2.10\n Returns: the recent info object with its reference count increased by one.\n\t \n",
"line" : 135}
,
{
"name" : "unref",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Decreases the reference count of info by one. If the reference\n count reaches zero, info is deallocated, and the memory freed.\n Since 2.10\n\t \n",
"line" : 151}
,
{
"name" : "getUri",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the URI of the resource.\n Since 2.10\n Returns: the URI of the resource. The returned string is owned by the recent manager, and should not be freed.\n\t \n",
"line" : 162}
,
{
"name" : "getDisplayName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the name of the resource. If none has been defined, the basename\n of the resource is obtained.\n Since 2.10\n Returns: the display name of the resource. The returned string is owned by the recent manager, and should not be freed.\n\t \n",
"line" : 174}
,
{
"name" : "getDescription",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the (short) description of the resource.\n Since 2.10\n Returns: the description of the resource. The returned string is owned by the recent manager, and should not be freed.\n\t \n",
"line" : 185}
,
{
"name" : "getMimeType",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the MIME type of the resource.\n Since 2.10\n Returns: the MIME type of the resource. The returned string is owned by the recent manager, and should not be freed.\n\t \n",
"line" : 196}
,
{
"name" : "getAdded",
"kind" : "function",
"protection" : "public",
"type" : "uint()",
"comment" : "\n Gets the timestamp (seconds from system's Epoch) when the resource\n was added to the recently used resources list.\n Since 2.10\n Returns: the number of seconds elapsed from system's Epoch when the resource was added to the list, or -1 on failure.\n\t \n",
"line" : 208}
,
{
"name" : "getModified",
"kind" : "function",
"protection" : "public",
"type" : "uint()",
"comment" : "\n Gets the timestamp (seconds from system's Epoch) when the resource\n was last modified.\n Since 2.10\n Returns: the number of seconds elapsed from system's Epoch when the resource was last modified, or -1 on failure.\n\t \n",
"line" : 220}
,
{
"name" : "getVisited",
"kind" : "function",
"protection" : "public",
"type" : "uint()",
"comment" : "\n Gets the timestamp (seconds from system's Epoch) when the resource\n was last visited.\n Since 2.10\n Returns: the number of seconds elapsed from system's Epoch when the resource was last visited, or -1 on failure.\n\t \n",
"line" : 232}
,
{
"name" : "getPrivateHint",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value of the \"private\" flag. Resources in the recently used\n list that have this flag set to TRUE should only be displayed by the\n applications that have registered them.\n Since 2.10\n Returns: TRUE if the private flag was found, FALSE otherwise.\n\t \n",
"line" : 245}
,
{
"name" : "getApplicationInfo",
"kind" : "function",
"protection" : "public",
"type" : "int(string appName, out string appExec, out uint count, out uint time)",
"comment" : "\n Gets the data regarding the application that has registered the resource\n pointed by info.\n If the command line contains any escape characters defined inside the\n storage specification, they will be expanded.\n Since 2.10\n Params:\n appName = the name of the application that has registered this item\n appExec = return location for the string containing the command line. [transfer none][out]\n count = return location for the number of times this item was registered. [out]\n time = return location for the timestamp this item was last registered\n for this application. [out]\n Returns: TRUE if an application with app_name has registered this resource inside the recently used list, or FALSE otherwise. The app_exec string is owned by the GtkRecentInfo and should not be modified or freed\n\t \n",
"line" : 265}
,
{
"name" : "getApplications",
"kind" : "function",
"protection" : "public",
"type" : "string[]()",
"comment" : "\n Retrieves the list of applications that have registered this resource.\n Since 2.10\n Returns: a newly allocated NULL-terminated array of strings. Use g_strfreev() to free it. [array length=length zero-terminated=1][transfer full]\n\t \n",
"line" : 281}
,
{
"name" : "lastApplication",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the name of the last application that have registered the\n recently used resource represented by info.\n Since 2.10\n Returns: an application name. Use g_free() to free it.\n\t \n",
"line" : 302}
,
{
"name" : "getGroups",
"kind" : "function",
"protection" : "public",
"type" : "string[]()",
"comment" : "\n Returns all groups registered for the recently used item info. The\n array of returned group names will be NULL terminated, so length might\n optionally be NULL.\n Since 2.10\n Returns: a newly allocated NULL terminated array of strings. Use g_strfreev() to free it. [array length=length zero-terminated=1][transfer full]\n\t \n",
"line" : 315}
,
{
"name" : "hasGroup",
"kind" : "function",
"protection" : "public",
"type" : "int(string groupName)",
"comment" : "\n Checks whether group_name appears inside the groups registered for the\n recently used item info.\n Since 2.10\n Params:\n groupName = name of a group\n Returns: TRUE if the group was found.\n\t \n",
"line" : 338}
,
{
"name" : "hasApplication",
"kind" : "function",
"protection" : "public",
"type" : "int(string appName)",
"comment" : "\n Checks whether an application registered this resource using app_name.\n Since 2.10\n Params:\n appName = a string containing an application name\n Returns: TRUE if an application with name app_name was found, FALSE otherwise.\n\t \n",
"line" : 351}
,
{
"name" : "getIcon",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf(int size)",
"comment" : "\n Retrieves the icon of size size associated to the resource MIME type.\n Since 2.10\n Params:\n size = the size of the icon in pixels\n Returns: a GdkPixbuf containing the icon, or NULL. Use g_object_unref() when finished using the icon. [transfer full]\n\t \n",
"line" : 364}
,
{
"name" : "getShortName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Computes a valid UTF-8 string that can be used as the name of the item in a\n menu or list. For example, calling this function on an item that refers to\n \"file:\/\/\/foo\/bar.txt\" will yield \"bar.txt\".\n Since 2.10\n Returns: A newly-allocated string in UTF-8 encoding; free it with g_free().\n\t \n",
"line" : 382}
,
{
"name" : "getUriDisplay",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets a displayable version of the resource's URI. If the resource\n is local, it returns a local path; if the resource is not local,\n it returns the UTF-8 encoded content of gtk_recent_info_get_uri().\n Since 2.10\n Returns: a newly allocated UTF-8 string containing the resource's URI or NULL. Use g_free() when done using it.\n\t \n",
"line" : 395}
,
{
"name" : "getAge",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the number of days elapsed since the last update of the resource\n pointed by info.\n Since 2.10\n Returns: a positive integer containing the number of days elapsed since the time this resource was last modified.\n\t \n",
"line" : 407}
,
{
"name" : "isLocal",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Checks whether the resource is local or not by looking at the\n scheme of its URI.\n Since 2.10\n Returns: TRUE if the resource is local.\n\t \n",
"line" : 419}
,
{
"name" : "exists",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Checks whether the resource pointed by info still exists. At\n the moment this check is done only on resources pointing to local files.\n Since 2.10\n Returns: TRUE if the resource exists\n\t \n",
"line" : 431}
,
{
"name" : "match",
"kind" : "function",
"protection" : "public",
"type" : "int(RecentInfo infoB)",
"comment" : "\n Checks whether two GtkRecentInfo structures point to the same\n resource.\n Since 2.10\n Params:\n infoB = a GtkRecentInfo\n Returns: TRUE if both GtkRecentInfo structures point to se same resource, FALSE otherwise.\n\t \n",
"line" : 445}
]
}
]
}
,
{
"name" : "gtk.RecentManager",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/RecentManager.d",
"members" : [
{
"name" : "RecentManager",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkRecentManager provides a facility for adding, removing and\n looking up recently used files. Each recently used file is\n identified by its URI, and has meta-data associated to it, like\n the names and command lines of the applications that have\n registered it, the number of time each application has registered\n the same file, the mime type of the file and whether the file\n should be displayed only by the applications that have\n registered it.\n The GtkRecentManager acts like a database of all the recently\n used files. You can create new GtkRecentManager objects, but\n it is more efficient to use the standard recent manager for\n the GdkScreen so that informations about the recently used\n files is shared with other people using them. In case the\n default screen is being used, adding a new recently used\n file is as simple as:\n $(DDOC_COMMENT example)\n While looking up a recently used file is as simple as:\n $(DDOC_COMMENT example)\n Recently used files are supported since GTK+ 2.10.\n \n",
"line" : 106,
"base" : "ObjectG",
"members" : [
{
"name" : "gtkRecentManager",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkRecentManager*",
"comment" : " the main Gtk struct \n",
"line" : 110}
,
{
"name" : "getRecentManagerStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkRecentManager*()",
"line" : 113}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 120}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RecentManager(GtkRecentManager* gtkRecentManager)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 128}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 146}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 154}
,
{
"name" : "onChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(RecentManager)[]",
"line" : 156}
,
{
"name" : "addOnChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(RecentManager) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when the current recently used resources manager changes its\n contents.\n Since 2.10\n\t \n",
"line" : 162}
,
{
"name" : "callBackChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkRecentManager* recentManagerStruct, RecentManager recentManager)",
"line" : 177}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RecentManager()",
"comment" : "\n Creates a new recent manager object. Recent manager objects are used to\n handle the list of recently used resources. A GtkRecentManager object\n monitors the recently used resources list, and emits the \"changed\" signal\n each time something inside the list changes.\n GtkRecentManager objects are expensive: be sure to create them only when\n needed. You should use gtk_recent_manager_get_default() instead.\n Since 2.10\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 196}
,
{
"name" : "getDefault",
"kind" : "function",
"protection" : "public",
"type" : "RecentManager()",
"comment" : "\n Gets a unique instance of GtkRecentManager, that you can share\n in your application without caring about memory management. The\n returned instance will be freed when you application terminates.\n Since 2.10\n Returns: A unique GtkRecentManager. Do not ref or unref it. [transfer none]\n\t \n",
"line" : 214}
,
{
"name" : "getForScreen",
"kind" : "function",
"protection" : "public",
"type" : "RecentManager(Screen screen)",
"comment" : "\n Warning\n gtk_recent_manager_get_for_screen has been deprecated since version 2.12 and should not be used in newly-written code. This function has been deprecated and should\n  not be used in newly written code. Calling this function is\n  equivalent to calling gtk_recent_manager_get_default().\n Gets the recent manager object associated with screen; if this\n function has not previously been called for the given screen,\n a new recent manager object will be created and associated with\n the screen. Recent manager objects are fairly expensive to create,\n so using this function is usually a better choice than calling\n gtk_recent_manager_new() and setting the screen yourself; by using\n this function a single recent manager object will be shared between\n users.\n Since 2.10\n Params:\n screen = a GdkScreen\n Returns: A unique GtkRecentManager associated with the given screen. This recent manager is associated to the with the screen and can be used as long as the screen is open. Do not ref or unref it.\n\t \n",
"line" : 243}
,
{
"name" : "setScreen",
"kind" : "function",
"protection" : "public",
"type" : "void(Screen screen)",
"comment" : "\n Warning\n gtk_recent_manager_set_screen has been deprecated since version 2.12 and should not be used in newly-written code. This function has been deprecated and should\n  not be used in newly written code. Calling this function has\n  no effect.\n Sets the screen for a recent manager; the screen is used to\n track the user's currently configured recently used documents\n storage.\n Since 2.10\n Params:\n screen = a GdkScreen\n\t \n",
"line" : 266}
,
{
"name" : "addItem",
"kind" : "function",
"protection" : "public",
"type" : "int(string uri)",
"comment" : "\n Adds a new resource, pointed by uri, into the recently used\n resources list.\n This function automatically retrieves some of the needed\n metadata and setting other metadata to common default values; it\n then feeds the data to gtk_recent_manager_add_full().\n See gtk_recent_manager_add_full() if you want to explicitly\n define the metadata for the resource pointed by uri.\n Since 2.10\n Params:\n uri = a valid URI\n Returns: TRUE if the new item was successfully added to the recently used resources list\n\t \n",
"line" : 285}
,
{
"name" : "addFull",
"kind" : "function",
"protection" : "public",
"type" : "int(string uri, GtkRecentData* recentData)",
"comment" : "\n Adds a new resource, pointed by uri, into the recently used\n resources list, using the metadata specified inside the GtkRecentData\n structure passed in recent_data.\n The passed URI will be used to identify this resource inside the\n list.\n In order to register the new recently used resource, metadata about\n the resource must be passed as well as the URI; the metadata is\n stored in a GtkRecentData structure, which must contain the MIME\n type of the resource pointed by the URI; the name of the application\n that is registering the item, and a command line to be used when\n launching the item.\n Optionally, a GtkRecentData structure might contain a UTF-8 string\n to be used when viewing the item instead of the last component of the\n URI; a short description of the item; whether the item should be\n considered private - that is, should be displayed only by the\n applications that have registered it.\n Since 2.10\n Params:\n uri = a valid URI\n recentData = metadata of the resource\n Returns: TRUE if the new item was successfully added to the recently used resources list, FALSE otherwise.\n\t \n",
"line" : 314}
,
{
"name" : "removeItem",
"kind" : "function",
"protection" : "public",
"type" : "int(string uri)",
"comment" : "\n Removes a resource pointed by uri from the recently used resources\n list handled by a recent manager.\n Since 2.10\n Params:\n uri = the URI of the item you wish to remove\n Returns: TRUE if the item pointed by uri has been successfully removed by the recently used resources list, and FALSE otherwise.\n Throws: GException on failure.\n\t \n",
"line" : 329}
,
{
"name" : "lookupItem",
"kind" : "function",
"protection" : "public",
"type" : "RecentInfo(string uri)",
"comment" : "\n Searches for a URI inside the recently used resources list, and\n returns a structure containing informations about the resource\n like its MIME type, or its display name.\n Since 2.10\n Params:\n uri = a URI\n Returns: a GtkRecentInfo structure containing information about the resource pointed by uri, or NULL if the URI was not registered in the recently used resources list. Free with gtk_recent_info_unref().\n Throws: GException on failure.\n\t \n",
"line" : 354}
,
{
"name" : "hasItem",
"kind" : "function",
"protection" : "public",
"type" : "int(string uri)",
"comment" : "\n Checks whether there is a recently used resource registered\n with uri inside the recent manager.\n Since 2.10\n Params:\n uri = a URI\n Returns: TRUE if the resource was found, FALSE otherwise.\n\t \n",
"line" : 381}
,
{
"name" : "moveItem",
"kind" : "function",
"protection" : "public",
"type" : "int(string uri, string newUri)",
"comment" : "\n Changes the location of a recently used resource from uri to new_uri.\n Please note that this function will not affect the resource pointed\n by the URIs, but only the URI used in the recently used resources list.\n Since 2.10\n Params:\n uri = the URI of a recently used resource\n newUri = the new URI of the recently used resource, or NULL to\n remove the item pointed by uri in the list. [allow-none]\n Returns: TRUE on success.\n Throws: GException on failure.\n\t \n",
"line" : 399}
,
{
"name" : "getLimit",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Warning\n gtk_recent_manager_get_limit has been deprecated since version 2.22 and should not be used in newly-written code. The length of the list should be managed by the\n  view (implementing GtkRecentChooser), and not by the model (the\n  GtkRecentManager). See \"limit\".\n Gets the maximum number of items that the gtk_recent_manager_get_items()\n function should return.\n Since 2.10\n Returns: the number of items to return, or -1 for every item.\n\t \n",
"line" : 424}
,
{
"name" : "setLimit",
"kind" : "function",
"protection" : "public",
"type" : "void(int limit)",
"comment" : "\n Warning\n gtk_recent_manager_set_limit has been deprecated since version 2.22 and should not be used in newly-written code. The length of the list should be managed by the\n  view (implementing GtkRecentChooser), and not by the model (the\n  GtkRecentManager). See \"limit\".\n Sets the maximum number of item that the gtk_recent_manager_get_items()\n function should return. If limit is set to -1, then return all the\n items.\n Since 2.10\n Params:\n limit = the maximum number of items to return, or -1.\n\t \n",
"line" : 442}
,
{
"name" : "getItems",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Gets the list of recently used resources.\n Since 2.10\n Returns: a list of newly allocated GtkRecentInfo objects. Use gtk_recent_info_unref() on each item inside the list, and then free the list itself using g_list_free(). [element-type GtkRecentInfo][transfer full]\n\t \n",
"line" : 453}
,
{
"name" : "purgeItems",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Purges every item from the recently used resources list.\n Since 2.10\n Returns: the number of items that have been removed from the recently used resources list.\n Throws: GException on failure.\n\t \n",
"line" : 470}
]
}
]
}
,
{
"name" : "gtk.Ruler",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Ruler.d",
"members" : [
{
"name" : "Ruler",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n Note\n  This widget is considered too specialized\/little-used for\n  GTK+, and will be removed in GTK 3. If your application needs this widget,\n  feel free to use it, as the widget is useful in some applications; it's just\n  not of general interest. However, we are not accepting new features for the\n  widget, and it will move out of the GTK+ distribution.\n The GTKRuler widget is a base class for horizontal and vertical rulers. Rulers\n are used to show the mouse pointer's location in a window. The ruler can either\n be horizontal or vertical on the window. Within the ruler a small triangle\n indicates the location of the mouse relative to the horizontal or vertical\n ruler. See GtkHRuler to learn how to create a new horizontal ruler. See\n GtkVRuler to learn how to create a new vertical ruler.\n \n",
"line" : 86,
"base" : "Widget",
"interfaces" : [
"OrientableIF"],
"members" : [
{
"name" : "gtkRuler",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkRuler*",
"comment" : " the main Gtk struct \n",
"line" : 90}
,
{
"name" : "getRulerStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkRuler*()",
"line" : 93}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 100}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Ruler(GtkRuler* gtkRuler)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 108}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 126}
,
{
"name" : "setMetric",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkMetricType metric)",
"comment" : "\n\t \n\n Warning\n gtk_ruler_set_metric has been deprecated since version 2.24 and should not be used in newly-written code. GtkRuler has been removed from GTK 3 for being\n  unmaintained and too specialized. There is no replacement.\n This calls the GTKMetricType to set the ruler to units defined. Available units\n are GTK_PIXELS, GTK_INCHES, or GTK_CENTIMETERS. The default unit of measurement\n is GTK_PIXELS.\n Params:\n metric = the unit of measurement\n\t \n",
"line" : 148}
,
{
"name" : "setRange",
"kind" : "function",
"protection" : "public",
"type" : "void(double lower, double upper, double position, double maxSize)",
"comment" : "\n Warning\n gtk_ruler_set_range is deprecated and should not be used in newly-written code.\n This sets the range of the ruler.\n Deprecated: 2.24: GtkRuler has been removed from GTK 3 for being\n  unmaintained and too specialized. There is no replacement.\n Params:\n lower = the lower limit of the ruler\n upper = the upper limit of the ruler\n position = the mark on the ruler\n maxSize = the maximum size of the ruler used when calculating the space to\n leave for the text\n\t \n",
"line" : 167}
,
{
"name" : "getMetric",
"kind" : "function",
"protection" : "public",
"type" : "GtkMetricType()",
"comment" : "\n Warning\n gtk_ruler_get_metric is deprecated and should not be used in newly-written code.\n Gets the units used for a GtkRuler. See gtk_ruler_set_metric().\n Returns: the units currently used for ruler Deprecated: 2.24: GtkRuler has been removed from GTK 3 for being unmaintained and too specialized. There is no replacement.\n\t \n",
"line" : 179}
,
{
"name" : "getRange",
"kind" : "function",
"protection" : "public",
"type" : "void(out double lower, out double upper, out double position, out double maxSize)",
"comment" : "\n Warning\n gtk_ruler_get_range is deprecated and should not be used in newly-written code.\n Retrieves values indicating the range and current position of a GtkRuler.\n See gtk_ruler_set_range().\n Deprecated: 2.24: GtkRuler has been removed from GTK 3 for being\n  unmaintained and too specialized. There is no replacement.\n Params:\n lower = location to store lower limit of the ruler, or NULL. [allow-none]\n upper = location to store upper limit of the ruler, or NULL. [allow-none]\n position = location to store the current position of the mark on the ruler, or NULL. [allow-none]\n maxSize = location to store the maximum size of the ruler used when calculating\n the space to leave for the text, or NULL.\n\t \n",
"line" : 199}
]
}
]
}
,
{
"name" : "gtk.ScaleButton",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/ScaleButton.d",
"members" : [
{
"name" : "ScaleButton",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkScaleButton provides a button which pops up a scale widget.\n This kind of widget is commonly used for volume controls in multimedia\n applications, and GTK+ provides a GtkVolumeButton subclass that\n is tailored for this use case.\n \n",
"line" : 90,
"base" : "Button",
"interfaces" : [
"OrientableIF"],
"members" : [
{
"name" : "gtkScaleButton",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkScaleButton*",
"comment" : " the main Gtk struct \n",
"line" : 94}
,
{
"name" : "getScaleButtonStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkScaleButton*()",
"line" : 97}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 104}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ScaleButton(GtkScaleButton* gtkScaleButton)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 112}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 130}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 141}
,
{
"name" : "onPopdownListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(ScaleButton)[]",
"line" : 143}
,
{
"name" : "addOnPopdown",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(ScaleButton) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::popdown signal is a\n keybinding signal\n which gets emitted to popdown the scale widget.\n The default binding for this signal is Escape.\n Since 2.12\n\t \n",
"line" : 151}
,
{
"name" : "callBackPopdown",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkScaleButton* buttonStruct, ScaleButton scaleButton)",
"line" : 166}
,
{
"name" : "onPopupListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(ScaleButton)[]",
"line" : 174}
,
{
"name" : "addOnPopup",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(ScaleButton) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::popup signal is a\n keybinding signal\n which gets emitted to popup the scale widget.\n The default bindings for this signal are Space, Enter and Return.\n Since 2.12\n\t \n",
"line" : 182}
,
{
"name" : "callBackPopup",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkScaleButton* buttonStruct, ScaleButton scaleButton)",
"line" : 197}
,
{
"name" : "onValueChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(double, ScaleButton)[]",
"line" : 205}
,
{
"name" : "addOnValueChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(double, ScaleButton) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::value-changed signal is emitted when the value field has\n changed.\n Since 2.12\n\t \n",
"line" : 211}
,
{
"name" : "callBackValueChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkScaleButton* buttonStruct, double value, ScaleButton scaleButton)",
"line" : 226}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ScaleButton(GtkIconSize size, double min, double max, double step, string[] icons)",
"comment" : "\n Creates a GtkScaleButton, with a range between min and max, with\n a stepping of step.\n Since 2.12\n Params:\n size = a stock icon size. [in]\n min = the minimum value of the scale (usually 0)\n max = the maximum value of the scale (usually 100)\n step = the stepping of value when a scroll-wheel event,\n or up\/down arrow event occurs (usually 2)\n icons = a NULL-terminated\n array of icon names, or NULL if you want to set the list\n later with gtk_scale_button_set_icons(). [allow-none][array zero-terminated=1]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 250}
,
{
"name" : "setAdjustment",
"kind" : "function",
"protection" : "public",
"type" : "void(Adjustment adjustment)",
"comment" : "\n Sets the GtkAdjustment to be used as a model\n for the GtkScaleButton's scale.\n See gtk_range_set_adjustment() for details.\n Since 2.12\n Params:\n adjustment = a GtkAdjustment\n\t \n",
"line" : 269}
,
{
"name" : "setIcons",
"kind" : "function",
"protection" : "public",
"type" : "void(string[] icons)",
"comment" : "\n Sets the icons to be used by the scale button.\n For details, see the \"icons\" property.\n Since 2.12\n Params:\n icons = a NULL-terminated array of icon names. [array zero-terminated=1]\n\t \n",
"line" : 282}
,
{
"name" : "setValue",
"kind" : "function",
"protection" : "public",
"type" : "void(double value)",
"comment" : "\n Sets the current value of the scale; if the value is outside\n the minimum or maximum range values, it will be clamped to fit\n inside them. The scale button emits the \"value-changed\"\n signal if the value changes.\n Since 2.12\n Params:\n value = new value of the scale button\n\t \n",
"line" : 297}
,
{
"name" : "getAdjustment",
"kind" : "function",
"protection" : "public",
"type" : "Adjustment()",
"comment" : "\n Gets the GtkAdjustment associated with the GtkScaleButton's scale.\n See gtk_range_get_adjustment() for details.\n Since 2.12\n Returns: the adjustment associated with the scale. [transfer none]\n\t \n",
"line" : 309}
,
{
"name" : "getValue",
"kind" : "function",
"protection" : "public",
"type" : "double()",
"comment" : "\n Gets the current value of the scale button.\n Since 2.12\n Returns: current value of the scale button\n\t \n",
"line" : 325}
,
{
"name" : "getPopup",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Retrieves the popup of the GtkScaleButton.\n Since 2.14\n Returns: the popup of the GtkScaleButton. [transfer none]\n\t \n",
"line" : 336}
,
{
"name" : "getPlusButton",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Retrieves the plus button of the GtkScaleButton.\n Since 2.14\n Returns: the plus button of the GtkScaleButton. [transfer none]\n\t \n",
"line" : 352}
,
{
"name" : "getMinusButton",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Retrieves the minus button of the GtkScaleButton.\n Since 2.14\n Returns: the minus button of the GtkScaleButton. [transfer none]\n\t \n",
"line" : 368}
]
}
]
}
,
{
"name" : "gtk.Scale",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Scale.d",
"members" : [
{
"name" : "Scale",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkScale is a slider control used to select a numeric value.\n To use it, you'll probably want to investigate the methods on\n its base class, GtkRange, in addition to the methods for GtkScale itself.\n To set the value of a scale, you would normally use gtk_range_set_value().\n To detect changes to the value, you would normally use the \"value_changed\"\n signal.\n The GtkScale widget is an abstract class, used only for deriving the\n subclasses GtkHScale and GtkVScale. To create a scale widget,\n call gtk_hscale_new_with_range() or gtk_vscale_new_with_range().\n GtkScale as GtkBuildable\n GtkScale supports a custom <marks> element, which\n can contain multiple <mark> elements. The \"value\" and \"position\"\n attributes have the same meaning as gtk_scale_add_mark() parameters of the\n same name. If the element is not empty, its content is taken as the markup\n to show at the mark. It can be translated with the usual \"translatable and\n \"context\" attributes.\n \n",
"line" : 92,
"base" : "Range",
"members" : [
{
"name" : "gtkScale",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkScale*",
"comment" : " the main Gtk struct \n",
"line" : 96}
,
{
"name" : "getScaleStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkScale*()",
"line" : 99}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 106}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Scale(GtkScale* gtkScale)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 114}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 132}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 140}
,
{
"name" : "onFormatValueListeners",
"kind" : "variable",
"protection" : "public",
"type" : "string delegate(double, Scale)[]",
"line" : 142}
,
{
"name" : "addOnFormatValue",
"kind" : "function",
"protection" : "public",
"type" : "void(string delegate(double, Scale) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Signal which allows you to change how the scale value is displayed.\n Connect a signal handler which returns an allocated string representing\n value. That string will then be used to display the scale's value.\n Here's an example signal handler which displays a value 1.0 as\n with \"-->1.0<--\".\n $(DDOC_COMMENT example)\n\t \n",
"line" : 151}
,
{
"name" : "callBackFormatValue",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkScale* scaleStruct, double value, Scale scale)",
"line" : 166}
,
{
"name" : "setDigits",
"kind" : "function",
"protection" : "public",
"type" : "void(int digits)",
"comment" : "\n Sets the number of decimal places that are displayed in the value.\n Also causes the value of the adjustment to be rounded off to this\n number of digits, so the retrieved value matches the value the user saw.\n Params:\n digits = the number of decimal places to display,\n e.g. use 1 to display 1.0, 2 to display 1.00, etc\n\t \n",
"line" : 183}
,
{
"name" : "setDrawValue",
"kind" : "function",
"protection" : "public",
"type" : "void(int drawValue)",
"comment" : "\n Specifies whether the current value is displayed as a string next\n to the slider.\n Params:\n drawValue = TRUE to draw the value\n\t \n",
"line" : 195}
,
{
"name" : "setValuePos",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkPositionType pos)",
"comment" : "\n Sets the position in which the current value is displayed.\n Params:\n pos = the position in which the current value is displayed\n\t \n",
"line" : 206}
,
{
"name" : "getDigits",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the number of decimal places that are displayed in the value.\n Returns: the number of decimal places that are displayed\n\t \n",
"line" : 216}
,
{
"name" : "getDrawValue",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the current value is displayed as a string\n next to the slider.\n Returns: whether the current value is displayed as a string\n\t \n",
"line" : 227}
,
{
"name" : "getValuePos",
"kind" : "function",
"protection" : "public",
"type" : "GtkPositionType()",
"comment" : "\n Gets the position in which the current value is displayed.\n Returns: the position in which the current value is displayed\n\t \n",
"line" : 237}
,
{
"name" : "getLayout",
"kind" : "function",
"protection" : "public",
"type" : "PgLayout()",
"comment" : "\n Gets the PangoLayout used to display the scale. The returned\n object is owned by the scale so does not need to be freed by\n the caller.\n Since 2.4\n Returns: the PangoLayout for this scale, or NULL if the \"draw-value\" property is FALSE. [transfer none]\n\t \n",
"line" : 250}
,
{
"name" : "getLayoutOffsets",
"kind" : "function",
"protection" : "public",
"type" : "void(out int x, out int y)",
"comment" : "\n Obtains the coordinates where the scale will draw the\n PangoLayout representing the text in the scale. Remember\n when using the PangoLayout function you need to convert to\n and from pixels using PANGO_PIXELS() or PANGO_SCALE.\n If the \"draw-value\" property is FALSE, the return\n values are undefined.\n Since 2.4\n Params:\n x = location to store X offset of layout, or NULL. [out][allow-none]\n y = location to store Y offset of layout, or NULL. [out][allow-none]\n\t \n",
"line" : 273}
,
{
"name" : "addMark",
"kind" : "function",
"protection" : "public",
"type" : "void(double value, GtkPositionType position, string markup)",
"comment" : "\n Adds a mark at value.\n A mark is indicated visually by drawing a tick mark next to the scale,\n and GTK+ makes it easy for the user to position the scale exactly at the\n marks value.\n If markup is not NULL, text is shown next to the tick mark.\n To remove marks from a scale, use gtk_scale_clear_marks().\n Since 2.16\n Params:\n value = the value at which the mark is placed, must be between\n the lower and upper limits of the scales' adjustment\n position = where to draw the mark. For a horizontal scale, GTK_POS_TOP\n is drawn above the scale, anything else below. For a vertical scale,\n GTK_POS_LEFT is drawn to the left of the scale, anything else to the\n right.\n markup = Text to be shown at the mark, using Pango markup, or NULL. [allow-none]\n\t \n",
"line" : 296}
,
{
"name" : "clearMarks",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Removes any marks that have been added with gtk_scale_add_mark().\n Since 2.16\n\t \n",
"line" : 306}
]
}
]
}
,
{
"name" : "gtk.Scrollbar",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Scrollbar.d",
"members" : [
{
"name" : "Scrollbar",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkScrollbar widget is an abstract base class for GtkHScrollbar and\n GtkVScrollbar. It is not very useful in itself.\n The position of the thumb in a scrollbar is controlled by the scroll\n adjustments. See GtkAdjustment for the fields in an adjustment - for\n GtkScrollbar, the \"value\" field represents the position of the\n scrollbar, which must be between the \"lower\" field and \"upper -\n page_size.\" The \"page_size\" field represents the size of the visible\n scrollable area. The \"step_increment\" and \"page_increment\" fields are\n used when the user asks to step down (using the small stepper arrows)\n or page down (using for example the PageDown key).\n \n",
"line" : 79,
"base" : "Range",
"members" : [
{
"name" : "gtkScrollbar",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkScrollbar*",
"comment" : " the main Gtk struct \n",
"line" : 83}
,
{
"name" : "getScrollbarStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkScrollbar*()",
"line" : 86}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 93}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Scrollbar(GtkScrollbar* gtkScrollbar)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 101}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 119}
]
}
]
}
,
{
"name" : "gtk.ScrolledWindow",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/ScrolledWindow.d",
"members" : [
{
"name" : "ScrolledWindow",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkScrolledWindow is a GtkBin subclass: it's a container\n the accepts a single child widget. GtkScrolledWindow adds scrollbars\n to the child widget and optionally draws a beveled frame around the\n child widget.\n The scrolled window can work in two ways. Some widgets have native\n scrolling support; these widgets have \"slots\" for GtkAdjustment\n objects.\n [5]\n Widgets with native scroll support include GtkTreeView, GtkTextView,\n and GtkLayout.\n For widgets that lack native scrolling support, the GtkViewport\n widget acts as an adaptor class, implementing scrollability for child\n widgets that lack their own scrolling capabilities. Use GtkViewport\n to scroll child widgets such as GtkTable, GtkBox, and so on.\n If a widget has native scrolling abilities, it can be added to the\n GtkScrolledWindow with gtk_container_add(). If a widget does not, you\n must first add the widget to a GtkViewport, then add the GtkViewport\n to the scrolled window. The convenience function\n gtk_scrolled_window_add_with_viewport() does exactly this, so you can\n ignore the presence of the viewport.\n The position of the scrollbars is controlled by the scroll\n adjustments. See GtkAdjustment for the fields in an adjustment - for\n GtkScrollbar, used by GtkScrolledWindow, the \"value\" field\n represents the position of the scrollbar, which must be between the\n \"lower\" field and \"upper - page_size.\" The \"page_size\" field\n represents the size of the visible scrollable area. The\n \"step_increment\" and \"page_increment\" fields are used when the user\n asks to step down (using the small stepper arrows) or page down (using\n for example the PageDown key).\n If a GtkScrolledWindow doesn't behave quite as you would like, or\n doesn't have exactly the right layout, it's very possible to set up\n your own scrolling with GtkScrollbar and for example a GtkTable.\n \n",
"line" : 110,
"base" : "Bin",
"members" : [
{
"name" : "gtkScrolledWindow",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkScrolledWindow*",
"comment" : " the main Gtk struct \n",
"line" : 114}
,
{
"name" : "getScrolledWindowStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkScrolledWindow*()",
"line" : 117}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 124}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ScrolledWindow(GtkScrolledWindow* gtkScrolledWindow)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 132}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 150}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ScrolledWindow()",
"comment" : " \n",
"line" : 157}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ScrolledWindow(Widget widget)",
"comment" : " \n",
"line" : 163}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ScrolledWindow(Adjustment hadjustment, Adjustment vadjustment)",
"comment" : "\n Creates a new scrolled window. The two arguments are the scrolled\n window's adjustments; these will be shared with the scrollbars and the\n child widget to keep the bars in sync with the child. Usually you want\n to pass NULL for the adjustments, which will cause the scrolled window\n to create them for you.\n Params:\n  hadjustment = Horizontal adjustment.\n  vadjustment = Vertical adjustment.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 180}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ScrolledWindow(GtkPolicyType hPolicy, GtkPolicyType vPolicy)",
"comment" : "\n Creates a new Scrolled window and set the policy type\n Params:\n  hPolicy = the horizontal policy\n  vPolicy = the vertical policy\n\t \n",
"line" : 201}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 209}
,
{
"name" : "onMoveFocusOutListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkDirectionType, ScrolledWindow)[]",
"line" : 211}
,
{
"name" : "addOnMoveFocusOut",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkDirectionType, ScrolledWindow) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 214}
,
{
"name" : "callBackMoveFocusOut",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkScrolledWindow* scrolledwindowStruct, GtkDirectionType arg1, ScrolledWindow scrolledWindow)",
"line" : 229}
,
{
"name" : "onScrollChildListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GtkScrollType, int, ScrolledWindow)[]",
"line" : 237}
,
{
"name" : "addOnScrollChild",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GtkScrollType, int, ScrolledWindow) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n See Also\n GtkViewport, GtkAdjustment, GtkWidgetClass\n [5] The scrolled window installs GtkAdjustment objects in\n the child window's slots using the set_scroll_adjustments_signal,\n found in GtkWidgetClass. (Conceptually, these widgets implement a\n \"Scrollable\" interface; because GTK+ 1.2 lacked interface support in\n the object system, this interface is hackily implemented as a signal\n in GtkWidgetClass. The GTK+ 2.0 object system would allow a clean\n implementation, but it wasn't worth breaking the\n API.)\n\t \n",
"line" : 250}
,
{
"name" : "callBackScrollChild",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkScrolledWindow* scrolledwindowStruct, GtkScrollType arg1, int arg2, ScrolledWindow scrolledWindow)",
"line" : 265}
,
{
"name" : "getHadjustment",
"kind" : "function",
"protection" : "public",
"type" : "Adjustment()",
"comment" : "\n Returns the horizontal scrollbar's adjustment, used to connect the\n horizontal scrollbar to the child widget's horizontal scroll\n functionality.\n Returns: the horizontal GtkAdjustment. [transfer none]\n\t \n",
"line" : 285}
,
{
"name" : "getVadjustment",
"kind" : "function",
"protection" : "public",
"type" : "Adjustment()",
"comment" : "\n Returns the vertical scrollbar's adjustment, used to connect the\n vertical scrollbar to the child widget's vertical scroll functionality.\n Returns: the vertical GtkAdjustment. [transfer none]\n\t \n",
"line" : 301}
,
{
"name" : "getHscrollbar",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Returns the horizontal scrollbar of scrolled_window.\n Since 2.8\n Returns: the horizontal scrollbar of the scrolled window, or NULL if it does not have one. [transfer none]\n\t \n",
"line" : 317}
,
{
"name" : "getVscrollbar",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Returns the vertical scrollbar of scrolled_window.\n Since 2.8\n Returns: the vertical scrollbar of the scrolled window, or NULL if it does not have one. [transfer none]\n\t \n",
"line" : 333}
,
{
"name" : "setPolicy",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkPolicyType hscrollbarPolicy, GtkPolicyType vscrollbarPolicy)",
"comment" : "\n Sets the scrollbar policy for the horizontal and vertical scrollbars.\n The policy determines when the scrollbar should appear; it is a value\n from the GtkPolicyType enumeration. If GTK_POLICY_ALWAYS, the\n scrollbar is always present; if GTK_POLICY_NEVER, the scrollbar is\n never present; if GTK_POLICY_AUTOMATIC, the scrollbar is present only\n if needed (that is, if the slider part of the bar would be smaller\n than the trough - the display is larger than the page size).\n Params:\n hscrollbarPolicy = policy for horizontal bar\n vscrollbarPolicy = policy for vertical bar\n\t \n",
"line" : 356}
,
{
"name" : "addWithViewport",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child)",
"comment" : "\n Used to add children without native scrolling capabilities. This\n is simply a convenience function; it is equivalent to adding the\n unscrollable child to a viewport, then adding the viewport to the\n scrolled window. If a child has native scrolling, use\n gtk_container_add() instead of this function.\n The viewport scrolls the child by moving its GdkWindow, and takes\n the size of the child to be the size of its toplevel GdkWindow.\n This will be very wrong for most widgets that support native scrolling;\n for example, if you add a widget such as GtkTreeView with a viewport,\n the whole widget will scroll, including the column headings. Thus,\n widgets with native scrolling support should not be used with the\n GtkViewport proxy.\n A widget supports scrolling natively if the\n set_scroll_adjustments_signal field in GtkWidgetClass is non-zero,\n i.e. has been filled in with a valid signal identifier.\n Params:\n child = the widget you want to scroll\n\t \n",
"line" : 381}
,
{
"name" : "setPlacement",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkCornerType windowPlacement)",
"comment" : "\n Sets the placement of the contents with respect to the scrollbars\n for the scrolled window.\n The default is GTK_CORNER_TOP_LEFT, meaning the child is\n in the top left, with the scrollbars underneath and to the right.\n Other values in GtkCornerType are GTK_CORNER_TOP_RIGHT,\n GTK_CORNER_BOTTOM_LEFT, and GTK_CORNER_BOTTOM_RIGHT.\n See also gtk_scrolled_window_get_placement() and\n gtk_scrolled_window_unset_placement().\n Params:\n windowPlacement = position of the child window\n\t \n",
"line" : 399}
,
{
"name" : "unsetPlacement",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Unsets the placement of the contents with respect to the scrollbars\n for the scrolled window. If no window placement is set for a scrolled\n window, it obeys the \"gtk-scrolled-window-placement\" XSETTING.\n See also gtk_scrolled_window_set_placement() and\n gtk_scrolled_window_get_placement().\n Since 2.10\n\t \n",
"line" : 413}
,
{
"name" : "setShadowType",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkShadowType type)",
"comment" : "\n Changes the type of shadow drawn around the contents of\n scrolled_window.\n Params:\n type = kind of shadow to draw around scrolled window contents\n\t \n",
"line" : 425}
,
{
"name" : "setHadjustment",
"kind" : "function",
"protection" : "public",
"type" : "void(Adjustment hadjustment)",
"comment" : "\n Sets the GtkAdjustment for the horizontal scrollbar.\n Params:\n hadjustment = horizontal scroll adjustment\n\t \n",
"line" : 436}
,
{
"name" : "setVadjustment",
"kind" : "function",
"protection" : "public",
"type" : "void(Adjustment vadjustment)",
"comment" : "\n Sets the GtkAdjustment for the vertical scrollbar.\n Params:\n vadjustment = vertical scroll adjustment\n\t \n",
"line" : 447}
,
{
"name" : "getPlacement",
"kind" : "function",
"protection" : "public",
"type" : "GtkCornerType()",
"comment" : "\n Gets the placement of the contents with respect to the scrollbars\n for the scrolled window. See gtk_scrolled_window_set_placement().\n Returns: the current placement value. See also gtk_scrolled_window_set_placement() and gtk_scrolled_window_unset_placement().\n\t \n",
"line" : 458}
,
{
"name" : "getPolicy",
"kind" : "function",
"protection" : "public",
"type" : "void(out GtkPolicyType hscrollbarPolicy, out GtkPolicyType vscrollbarPolicy)",
"comment" : "\n Retrieves the current policy values for the horizontal and vertical\n scrollbars. See gtk_scrolled_window_set_policy().\n Params:\n hscrollbarPolicy = location to store the policy\n for the horizontal scrollbar, or NULL. [out][allow-none]\n vscrollbarPolicy = location to store the policy\n for the vertical scrollbar, or NULL. [out][allow-none]\n\t \n",
"line" : 473}
,
{
"name" : "getShadowType",
"kind" : "function",
"protection" : "public",
"type" : "GtkShadowType()",
"comment" : "\n Gets the shadow type of the scrolled window. See\n gtk_scrolled_window_set_shadow_type().\n Returns: the current shadow type\n\t \n",
"line" : 484}
]
}
]
}
,
{
"name" : "gtk.Selections",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Selections.d",
"members" : [
{
"name" : "Selections",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The selection mechanism provides the basis for different types\n of communication between processes. In particular, drag and drop and\n GtkClipboard work via selections. You will very seldom or\n never need to use most of the functions in this section directly;\n GtkClipboard provides a nicer interface to the same functionality.\n Some of the datatypes defined this section are used in\n the GtkClipboard and drag-and-drop API's as well. The\n GtkTargetEntry structure and GtkTargetList objects represent\n lists of data types that are supported when sending or\n receiving data. The GtkSelectionData object is used to\n store a chunk of data along with the data type and other\n associated information.\n \n",
"line" : 96,
"base" : "Object",
"members" : [
{
"name" : "ownerSet",
"kind" : "function",
"protection" : "public",
"type" : "int(Widget widget, void* selection, uint time)",
"comment" : "\n\t \n\n Claims ownership of a given selection for a particular widget,\n or, if widget is NULL, release ownership of the selection.\n Params:\n widget = a GtkWidget, or NULL. [allow-none]\n selection = an interned atom representing the selection to claim\n time = timestamp with which to claim the selection\n Returns: TRUE if the operation succeeded\n\t \n",
"line" : 110}
,
{
"name" : "ownerSetForDisplay",
"kind" : "function",
"protection" : "public",
"type" : "int(Display display, Widget widget, void* selection, uint time)",
"comment" : "\n Claim ownership of a given selection for a particular widget, or,\n if widget is NULL, release ownership of the selection.\n Since 2.2\n Params:\n display = the Gdkdisplay where the selection is set\n widget = new selection owner (a GdkWidget), or NULL. [allow-none]\n selection = an interned atom representing the selection to claim.\n time = timestamp with which to claim the selection\n Returns: TRUE if the operation succeeded\n\t \n",
"line" : 127}
,
{
"name" : "addTarget",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, void* selection, void* target, uint info)",
"comment" : "\n Appends a specified target to the list of supported targets for a\n given widget and selection.\n Params:\n widget = a GtkTarget\n selection = the selection\n target = target to add.\n info = A unsigned integer which will be passed back to the application.\n\t \n",
"line" : 142}
,
{
"name" : "addTargets",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, void* selection, GtkTargetEntry[] targets)",
"comment" : "\n Prepends a table of targets to the list of supported targets\n for a given widget and selection.\n Params:\n widget = a GtkWidget\n selection = the selection\n targets = a table of targets to add. [array length=ntargets]\n\t \n",
"line" : 156}
,
{
"name" : "clearTargets",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, void* selection)",
"comment" : "\n Remove all targets registered for the given selection for the\n widget.\n Params:\n widget = a GtkWidget\n selection = an atom representing a selection\n\t \n",
"line" : 169}
,
{
"name" : "convert",
"kind" : "function",
"protection" : "public",
"type" : "int(Widget widget, void* selection, void* target, uint time)",
"comment" : "\n Requests the contents of a selection. When received,\n a \"selection-received\" signal will be generated.\n Params:\n widget = The widget which acts as requestor\n selection = Which selection to get\n target = Form of information desired (e.g., STRING)\n time = Time of request (usually of triggering event)\n In emergency, you could use GDK_CURRENT_TIME\n Returns: TRUE if requested succeeded. FALSE if we could not process request. (e.g., there was already a request in process for this widget).\n\t \n",
"line" : 186}
,
{
"name" : "dataSet",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkSelectionData* selectionData, void* type, int format, char[] data)",
"comment" : "\n Stores new data into a GtkSelectionData object. Should\n only be called from a selection handler callback.\n Zero-terminates the stored data.\n Params:\n selectionData = a pointer to a GtkSelectionData structure.\n type = the type of selection data\n format = format (number of bits in a unit)\n data = pointer to the data (will be copied). [array length=length]\n\t \n",
"line" : 202}
,
{
"name" : "dataSetText",
"kind" : "function",
"protection" : "public",
"type" : "int(GtkSelectionData* selectionData, string str, int len)",
"comment" : "\n Sets the contents of the selection from a UTF-8 encoded string.\n The string is converted to the form determined by\n selection_data->target.\n Params:\n selectionData = a GtkSelectionData\n str = a UTF-8 string\n len = the length of str, or -1 if str is nul-terminated.\n Returns: TRUE if the selection was successfully set, otherwise FALSE.\n\t \n",
"line" : 218}
,
{
"name" : "dataGetText",
"kind" : "function",
"protection" : "public",
"type" : "char*(GtkSelectionData* selectionData)",
"comment" : "\n Gets the contents of the selection data as a UTF-8 string.\n Params:\n selectionData = a GtkSelectionData\n Returns: if the selection data contained a recognized text type and it could be converted to UTF-8, a newly allocated string containing the converted text, otherwise NULL. If the result is non-NULL it must be freed with g_free().\n\t \n",
"line" : 230}
,
{
"name" : "dataSetPixbuf",
"kind" : "function",
"protection" : "public",
"type" : "int(GtkSelectionData* selectionData, Pixbuf pixbuf)",
"comment" : "\n Sets the contents of the selection from a GdkPixbuf\n The pixbuf is converted to the form determined by\n selection_data->target.\n Since 2.6\n Params:\n selectionData = a GtkSelectionData\n pixbuf = a GdkPixbuf\n Returns: TRUE if the selection was successfully set, otherwise FALSE.\n\t \n",
"line" : 246}
,
{
"name" : "dataGetPixbuf",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf(GtkSelectionData* selectionData)",
"comment" : "\n Gets the contents of the selection data as a GdkPixbuf.\n Since 2.6\n Params:\n selectionData = a GtkSelectionData\n Returns: if the selection data contained a recognized image type and it could be converted to a GdkPixbuf, a newly allocated pixbuf is returned, otherwise NULL. If the result is non-NULL it must be freed with g_object_unref(). [transfer full]\n\t \n",
"line" : 259}
,
{
"name" : "dataSetUris",
"kind" : "function",
"protection" : "public",
"type" : "int(GtkSelectionData* selectionData, string[] uris)",
"comment" : "\n Sets the contents of the selection from a list of URIs.\n The string is converted to the form determined by\n selection_data->target.\n Since 2.6\n Params:\n selectionData = a GtkSelectionData\n uris = a NULL-terminated array of\n strings holding URIs. [array zero-terminated=1]\n Returns: TRUE if the selection was successfully set, otherwise FALSE.\n\t \n",
"line" : 281}
,
{
"name" : "dataGetUris",
"kind" : "function",
"protection" : "public",
"type" : "string[](GtkSelectionData* selectionData)",
"comment" : "\n Gets the contents of the selection data as array of URIs.\n Since 2.6\n Params:\n selectionData = a GtkSelectionData\n Returns: if the selection data contains a list of URIs, a newly allocated NULL-terminated string array containing the URIs, otherwise NULL. If the result is non-NULL it must be freed with g_strfreev(). [array zero-terminated=1][element-type utf8][transfer full]\n\t \n",
"line" : 294}
,
{
"name" : "dataGetTargets",
"kind" : "function",
"protection" : "public",
"type" : "int(GtkSelectionData* selectionData, out void*[] targets)",
"comment" : "\n Gets the contents of selection_data as an array of targets.\n This can be used to interpret the results of getting\n the standard TARGETS target that is always supplied for\n any selection.\n Params:\n selectionData = a GtkSelectionData object\n targets = location to store an array of targets. The result\n stored here must be freed with g_free(). [out][array length=n_atoms][transfer container]\n Returns: TRUE if selection_data contains a valid array of targets, otherwise FALSE.\n\t \n",
"line" : 311}
,
{
"name" : "dataTargetsIncludeImage",
"kind" : "function",
"protection" : "public",
"type" : "int(GtkSelectionData* selectionData, int writable)",
"comment" : "\n Given a GtkSelectionData object holding a list of targets,\n determines if any of the targets in targets can be used to\n provide a GdkPixbuf.\n Since 2.6\n Params:\n selectionData = a GtkSelectionData object\n writable = whether to accept only targets for which GTK+ knows\n how to convert a pixbuf into the format\n Returns: TRUE if selection_data holds a list of targets, and a suitable target for images is included, otherwise FALSE.\n\t \n",
"line" : 334}
,
{
"name" : "dataTargetsIncludeText",
"kind" : "function",
"protection" : "public",
"type" : "int(GtkSelectionData* selectionData)",
"comment" : "\n Given a GtkSelectionData object holding a list of targets,\n determines if any of the targets in targets can be used to\n provide text.\n Params:\n selectionData = a GtkSelectionData object\n Returns: TRUE if selection_data holds a list of targets, and a suitable target for text is included, otherwise FALSE.\n\t \n",
"line" : 348}
,
{
"name" : "dataTargetsIncludeUri",
"kind" : "function",
"protection" : "public",
"type" : "int(GtkSelectionData* selectionData)",
"comment" : "\n Given a GtkSelectionData object holding a list of targets,\n determines if any of the targets in targets can be used to\n provide a list or URIs.\n Since 2.10\n Params:\n selectionData = a GtkSelectionData object\n Returns: TRUE if selection_data holds a list of targets, and a suitable target for URI lists is included, otherwise FALSE.\n\t \n",
"line" : 363}
,
{
"name" : "dataTargetsIncludeRichText",
"kind" : "function",
"protection" : "public",
"type" : "int(GtkSelectionData* selectionData, TextBuffer buffer)",
"comment" : "\n Given a GtkSelectionData object holding a list of targets,\n determines if any of the targets in targets can be used to\n provide rich text.\n Since 2.10\n Params:\n selectionData = a GtkSelectionData object\n buffer = a GtkTextBuffer\n Returns: TRUE if selection_data holds a list of targets, and a suitable target for rich text is included, otherwise FALSE.\n\t \n",
"line" : 379}
,
{
"name" : "dataGetSelection",
"kind" : "function",
"protection" : "public",
"type" : "void*(GtkSelectionData* selectionData)",
"comment" : "\n Retrieves the selection GdkAtom of the selection data.\n Since 2.16\n Params:\n selectionData = a pointer to a GtkSelectionData structure.\n Returns: the selection GdkAtom of the selection data. [transfer none]\n\t \n",
"line" : 392}
,
{
"name" : "dataGetData",
"kind" : "function",
"protection" : "public",
"type" : "char*(GtkSelectionData* selectionData)",
"comment" : "\n Retrieves the raw data of the selection.\n Since 2.14\n Params:\n selectionData = a pointer to a GtkSelectionData structure.\n Returns: the raw data of the selection.\n\t \n",
"line" : 405}
,
{
"name" : "dataGetLength",
"kind" : "function",
"protection" : "public",
"type" : "int(GtkSelectionData* selectionData)",
"comment" : "\n Retrieves the length of the raw data of the selection.\n Since 2.14\n Params:\n selectionData = a pointer to a GtkSelectionData structure.\n Returns: the length of the data of the selection.\n\t \n",
"line" : 418}
,
{
"name" : "dataGetDataType",
"kind" : "function",
"protection" : "public",
"type" : "void*(GtkSelectionData* selectionData)",
"comment" : "\n Retrieves the data type of the selection.\n Since 2.14\n Params:\n selectionData = a pointer to a GtkSelectionData structure.\n Returns: the data type of the selection. [transfer none]\n\t \n",
"line" : 431}
,
{
"name" : "dataGetDisplay",
"kind" : "function",
"protection" : "public",
"type" : "Display(GtkSelectionData* selectionData)",
"comment" : "\n Retrieves the display of the selection.\n Since 2.14\n Params:\n selectionData = a pointer to a GtkSelectionData structure.\n Returns: the display of the selection. [transfer none]\n\t \n",
"line" : 444}
,
{
"name" : "dataGetFormat",
"kind" : "function",
"protection" : "public",
"type" : "int(GtkSelectionData* selectionData)",
"comment" : "\n Retrieves the format of the selection.\n Since 2.14\n Params:\n selectionData = a pointer to a GtkSelectionData structure.\n Returns: the format of the selection.\n\t \n",
"line" : 462}
,
{
"name" : "dataGetTarget",
"kind" : "function",
"protection" : "public",
"type" : "void*(GtkSelectionData* selectionData)",
"comment" : "\n Retrieves the target of the selection.\n Since 2.14\n Params:\n selectionData = a pointer to a GtkSelectionData structure.\n Returns: the target of the selection. [transfer none]\n\t \n",
"line" : 475}
,
{
"name" : "removeAll",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget)",
"comment" : "\n Removes all handlers and unsets ownership of all\n selections for a widget. Called when widget is being\n destroyed. This function will not generally be\n called by applications.\n Params:\n widget = a GtkWidget\n\t \n",
"line" : 489}
,
{
"name" : "clear",
"kind" : "function",
"protection" : "public",
"type" : "int(Widget widget, GdkEventSelection* event)",
"comment" : "\n Warning\n gtk_selection_clear has been deprecated since version 2.4 and should not be used in newly-written code. Instead of calling this function, chain up from\n your selection-clear-event handler. Calling this function\n from any other context is illegal.\n The default handler for the \"selection-clear-event\"\n signal.\n Since 2.2\n Params:\n widget = a GtkWidget\n event = the event\n Returns: TRUE if the event was handled, otherwise false\n\t \n",
"line" : 508}
,
{
"name" : "dataCopy",
"kind" : "function",
"protection" : "public",
"type" : "GtkSelectionData*(GtkSelectionData* data)",
"comment" : "\n Makes a copy of a GtkSelectionData structure and its data.\n Params:\n data = a pointer to a GtkSelectionData structure.\n Returns: a pointer to a copy of data.\n\t \n",
"line" : 520}
,
{
"name" : "dataFree",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkSelectionData* data)",
"comment" : "\n Frees a GtkSelectionData structure returned from\n gtk_selection_data_copy().\n Params:\n data = a pointer to a GtkSelectionData structure.\n\t \n",
"line" : 532}
]
}
]
}
,
{
"name" : "gtk.Separator",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Separator.d",
"members" : [
{
"name" : "Separator",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkSeparator widget is an abstract class, used only for deriving the\n subclasses GtkHSeparator and GtkVSeparator.\n \n",
"line" : 76,
"base" : "Widget",
"interfaces" : [
"OrientableIF"],
"members" : [
{
"name" : "gtkSeparator",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkSeparator*",
"comment" : " the main Gtk struct \n",
"line" : 80}
,
{
"name" : "getSeparatorStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkSeparator*()",
"line" : 83}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 90}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Separator(GtkSeparator* gtkSeparator)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 98}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 116}
]
}
]
}
,
{
"name" : "gtk.SeparatorMenuItem",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/SeparatorMenuItem.d",
"members" : [
{
"name" : "SeparatorMenuItem",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkSeparatorMenuItem is a separator used to group\n items within a menu. It displays a horizontal line with a shadow to\n make it appear sunken into the interface.\n \n",
"line" : 72,
"base" : "MenuItem",
"members" : [
{
"name" : "gtkSeparatorMenuItem",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkSeparatorMenuItem*",
"comment" : " the main Gtk struct \n",
"line" : 76}
,
{
"name" : "getSeparatorMenuItemStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkSeparatorMenuItem*()",
"line" : 79}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 86}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "SeparatorMenuItem(GtkSeparatorMenuItem* gtkSeparatorMenuItem)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 94}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 112}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "SeparatorMenuItem()",
"comment" : "\n\t \n\n Creates a new GtkSeparatorMenuItem.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 125}
]
}
]
}
,
{
"name" : "gtk.SeparatorToolItem",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/SeparatorToolItem.d",
"members" : [
{
"name" : "SeparatorToolItem",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n  A GtkSeparatorItem is a GtkToolItem that separates groups of other\n  GtkToolItems. Depending on the theme, a GtkSeparatorToolItem will\n  often look like a vertical line on horizontally docked toolbars.\n If the property \"expand\" is TRUE and the property \"draw\" is FALSE, a\n GtkSeparatorToolItem will act as a \"spring\" that forces other items\n to the ends of the toolbar.\n  Use gtk_separator_tool_item_new() to create a new GtkSeparatorToolItem.\n \n",
"line" : 79,
"base" : "ToolItem",
"members" : [
{
"name" : "gtkSeparatorToolItem",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkSeparatorToolItem*",
"comment" : " the main Gtk struct \n",
"line" : 83}
,
{
"name" : "getSeparatorToolItemStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkSeparatorToolItem*()",
"line" : 86}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 93}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "SeparatorToolItem(GtkSeparatorToolItem* gtkSeparatorToolItem)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 101}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 119}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "SeparatorToolItem()",
"comment" : "\n\t \n\n Create a new GtkSeparatorToolItem\n Since 2.4\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 133}
,
{
"name" : "setDraw",
"kind" : "function",
"protection" : "public",
"type" : "void(int draw)",
"comment" : "\n Whether item is drawn as a vertical line, or just blank.\n Setting this to FALSE along with gtk_tool_item_set_expand() is useful\n to create an item that forces following items to the end of the toolbar.\n Since 2.4\n Params:\n draw = whether item is drawn as a vertical line\n\t \n",
"line" : 152}
,
{
"name" : "getDraw",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether item is drawn as a line, or just blank.\n See gtk_separator_tool_item_set_draw().\n Since 2.4\n Returns: TRUE if item is drawn as a line, or just blank.\n\t \n",
"line" : 164}
]
}
]
}
,
{
"name" : "gtk.Settings",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Settings.d",
"members" : [
{
"name" : "Settings",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkSettings provide a mechanism to share global settings between applications.\n On the X window system, this sharing is realized by an XSettings\n manager that is usually part of the desktop environment, along with utilities\n that let the user change these settings. In the absence of an Xsettings manager,\n settings can also be specified in RC files.\n Applications can override system-wide settings with gtk_settings_set_string_property(),\n gtk_settings_set_long_property(), etc. This should be restricted to special\n cases though; GtkSettings are not meant as an application configuration\n facility. When doing so, you need to be aware that settings that are specific\n to individual widgets may not be available before the widget type has been\n realized at least once. The following example demonstrates a way to do this:\n $(DDOC_COMMENT example)\n There is one GtkSettings instance per screen. It can be obtained with\n gtk_settings_get_for_screen(), but in many cases, it is more convenient\n to use gtk_widget_get_settings(). gtk_settings_get_default() returns the\n GtkSettings instance for the default screen.\n \n",
"line" : 102,
"base" : "ObjectG",
"members" : [
{
"name" : "gtkSettings",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkSettings*",
"comment" : " the main Gtk struct \n",
"line" : 106}
,
{
"name" : "getSettingsStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkSettings*()",
"line" : 109}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 116}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Settings(GtkSettings* gtkSettings)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 124}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 142}
,
{
"name" : "getDefault",
"kind" : "function",
"protection" : "public",
"type" : "Settings()",
"comment" : "\n\t \n\n Gets the GtkSettings object for the default GDK screen, creating\n it if necessary. See gtk_settings_get_for_screen().\n Returns: a GtkSettings object. If there is no default screen, then returns NULL. [transfer none]\n\t \n",
"line" : 156}
,
{
"name" : "getForScreen",
"kind" : "function",
"protection" : "public",
"type" : "Settings(Screen screen)",
"comment" : "\n Gets the GtkSettings object for screen, creating it if necessary.\n Since 2.2\n Params:\n screen = a GdkScreen.\n Returns: a GtkSettings object. [transfer none]\n\t \n",
"line" : 174}
,
{
"name" : "installProperty",
"kind" : "function",
"protection" : "public",
"type" : "void(ParamSpec pspec)",
"comment" : "\n\t \n",
"line" : 187}
,
{
"name" : "installPropertyParser",
"kind" : "function",
"protection" : "public",
"type" : "void(ParamSpec pspec, extern (C) int function(GParamSpec*, GString*, GValue*) parser)",
"comment" : "\n\t \n",
"line" : 195}
,
{
"name" : "rcPropertyParseColor",
"kind" : "function",
"protection" : "public",
"type" : "int(ParamSpec pspec, StringG gstring, Value propertyValue)",
"comment" : "\n A GtkRcPropertyParser for use with gtk_settings_install_property_parser()\n or gtk_widget_class_install_style_property_parser() which parses a\n color given either by its name or in the form\n { red, green, blue } where red, green and\n blue are integers between 0 and 65535 or floating-point numbers\n between 0 and 1.\n Params:\n pspec = a GParamSpec\n gstring = the GString to be parsed\n propertyValue = a GValue which must hold GdkColor values.\n Returns: TRUE if gstring could be parsed and property_value has been set to the resulting GdkColor.\n\t \n",
"line" : 214}
,
{
"name" : "rcPropertyParseEnum",
"kind" : "function",
"protection" : "public",
"type" : "int(ParamSpec pspec, StringG gstring, Value propertyValue)",
"comment" : "\n A GtkRcPropertyParser for use with gtk_settings_install_property_parser()\n or gtk_widget_class_install_style_property_parser() which parses a single\n enumeration value.\n The enumeration value can be specified by its name, its nickname or\n its numeric value. For consistency with flags parsing, the value\n may be surrounded by parentheses.\n Params:\n pspec = a GParamSpec\n gstring = the GString to be parsed\n propertyValue = a GValue which must hold enum values.\n Returns: TRUE if gstring could be parsed and property_value has been set to the resulting GEnumValue.\n\t \n",
"line" : 233}
,
{
"name" : "rcPropertyParseFlags",
"kind" : "function",
"protection" : "public",
"type" : "int(ParamSpec pspec, StringG gstring, Value propertyValue)",
"comment" : "\n A GtkRcPropertyParser for use with gtk_settings_install_property_parser()\n or gtk_widget_class_install_style_property_parser() which parses flags.\n Flags can be specified by their name, their nickname or\n numerically. Multiple flags can be specified in the form\n \"( flag1 | flag2 | ... )\".\n Params:\n pspec = a GParamSpec\n gstring = the GString to be parsed\n propertyValue = a GValue which must hold flags values.\n Returns: TRUE if gstring could be parsed and property_value has been set to the resulting flags value.\n\t \n",
"line" : 251}
,
{
"name" : "rcPropertyParseRequisition",
"kind" : "function",
"protection" : "public",
"type" : "int(ParamSpec pspec, StringG gstring, Value propertyValue)",
"comment" : "\n A GtkRcPropertyParser for use with gtk_settings_install_property_parser()\n or gtk_widget_class_install_style_property_parser() which parses a\n requisition in the form\n \"{ width, height }\" for integers width and height.\n Params:\n pspec = a GParamSpec\n gstring = the GString to be parsed\n propertyValue = a GValue which must hold boxed values.\n Returns: TRUE if gstring could be parsed and property_value has been set to the resulting GtkRequisition.\n\t \n",
"line" : 268}
,
{
"name" : "rcPropertyParseBorder",
"kind" : "function",
"protection" : "public",
"type" : "int(ParamSpec pspec, StringG gstring, Value propertyValue)",
"comment" : "\n A GtkRcPropertyParser for use with gtk_settings_install_property_parser()\n or gtk_widget_class_install_style_property_parser() which parses\n borders in the form\n \"{ left, right, top, bottom }\" for integers\n left, right, top and bottom.\n Params:\n pspec = a GParamSpec\n gstring = the GString to be parsed\n propertyValue = a GValue which must hold boxed values.\n Returns: TRUE if gstring could be parsed and property_value has been set to the resulting GtkBorder.\n\t \n",
"line" : 286}
,
{
"name" : "setPropertyValue",
"kind" : "function",
"protection" : "public",
"type" : "void(string name, GtkSettingsValue* svalue)",
"comment" : "\n\t \n",
"line" : 294}
,
{
"name" : "setStringProperty",
"kind" : "function",
"protection" : "public",
"type" : "void(string name, string vString, string origin)",
"comment" : "\n\t \n",
"line" : 302}
,
{
"name" : "setLongProperty",
"kind" : "function",
"protection" : "public",
"type" : "void(string name, long vLong, string origin)",
"comment" : "\n\t \n",
"line" : 310}
,
{
"name" : "setDoubleProperty",
"kind" : "function",
"protection" : "public",
"type" : "void(string name, double vDouble, string origin)",
"comment" : "\n\t \n",
"line" : 318}
]
}
]
}
,
{
"name" : "gtk.Signals",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Signals.d",
"members" : [
{
"name" : "Signals",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GTK+ signal system merely proxies the GLib signal system now. For future\n usage, direct use of the GSignal API is recommended, this avoids significant\n performance hits where GtkArg structures have to be converted into GValues.\n What are signals?\n Signals are a way to get notification when something happens\n and to customize object behavior according to the\n user's needs.\n Every signal is uniquely identified by a name,\n \"class_name::signal_name\", where signal_name might be something like\n \"clicked\" and class_name might be \"GtkButton\". Note that some other class\n may also define a \"clicked\" callback, so long as it doesn't derive from\n GtkButton.\n When they are created, they are also assigned a unique positive integer,\n the signal id (1 is the first signal id- 0 is used to flag an error).\n Each is also tied to an array of types that describes\n the prototype of the function pointer(s) (handlers) you may\n connect to the signal. Finally, every signal has\n a default handler that is given by a function pointer\n in its class structure: it is run by default whenever the\n signal is emitted. (It is possible that a signal will\n be emitted and a user-defined handler will prevent the default handler\n from being run.)\n Signals are used by everyone, but they are only\n created on a per class basis -- so you should not call\n call gtk_signal_new() unless you are writing\n a new GtkObject type. However, if you want to make a new signal\n for an existing type, you may use gtk_object_class_user_signal_new()\n to create a signal that doesn't correspond to a class's builtin\n methods.\n <hr>\n How are signals used?\n There are two basic actions in the signal handling game.\n If you want notification of an event, you must connect\n a function pointer and a data pointer to that signal; the data pointer\n will be passed as the last argument to the function (so long as you\n are using the default marshalling functions).\n You will receive a connection id, a unique positive integer\n corresponding to that attachment.\n Functions that want to notify the user of certain actions,\n emit signals.\n <hr>\n Basic Terminology\n signal\n A class method, e.g. GtkButton::clicked.\n More precisely it is a unique class-branch\/signal-name pair.\n This means you may not define a signal handler for a class which\n derives from GtkButton that is called clicked,\n but it is okay to share signals names if they are separate in\n the class tree.\n default handler\n The object's internal method which is invoked\n when the signal is emitted.\n user-defined handler\n A function pointer and data connected\n to a signal (for a particular object).\n There are really two types: those which are connected\n normally, and those which are connected by one\n of the connect_after functions. The connect_after handlers\n are always run after the default handler.\n Many toolkits refer to these as callbacks.\n emission\n the whole process of emitting a signal,\n including the invocation of all\n the different handler types mentioned above.\n signal id\n The unique positive (nonzero) integer\n used to identify a signal. It can be used instead of\n a name to many functions for a slight performance\n improvement.\n connection id\n The unique positive (nonzero) integer\n used to identify the connection of a user-defined handler\n to a signal. Notice that it is allowed to connect the\n same function-pointer\/user-data pair twice, so\n there is no guarantee that a function-pointer\/user-data\n maps to a unique connection id.\n <hr>\n A brief note on how they work.\n The functions responsible for translating an array of GtkArgs\n to your C compiler's normal semantics are called Marshallers.\n They are identified by\n gtk_marshal_return_value__parameter_list()\n for example a C function returning a gboolean and taking a gint\n can be invoked by using gtk_marshal_BOOL__INT().\n Not all possibly combinations of return\/params are available,\n of course, so if you are writing a GtkObject with parameters\n you might have to write a marshaller.\n \n",
"line" : 161,
"base" : "Object",
"members" : [
{
"name" : "newv",
"kind" : "function",
"protection" : "public",
"type" : "uint(string name, GtkSignalRunType signalFlags, GType objectType, uint functionOffset, extern (C) void function(GClosure*, GValue*, uint, GValue*, void*, void*) marshaller, GType returnVal, GType[] args)",
"comment" : "\n\t \n\n Warning\n gtk_signal_newv is deprecated and should not be used in newly-written code. Use g_signal_newv() instead.\n Creates a new signal type. (This is usually done in a\n class initializer.)\n This function take the types as an array, instead of a list\n following the arguments. Otherwise the same as gtk_signal_new().\n Params:\n name = the name of the signal to create.\n signalFlags = see gtk_signal_new().\n objectType = the type of GtkObject to associate the signal with.\n functionOffset = how many bytes the function pointer is in\n the class structure for this type.\n returnVal = the type of the return value, or GTK_TYPE_NONE if\n you don't want a return value.\n args = an array of GtkTypes, describing the prototype to\n the callbacks.\n Returns: the signal id.\n\t \n",
"line" : 185}
,
{
"name" : "emitv",
"kind" : "function",
"protection" : "public",
"type" : "void(ObjectGtk object, uint signalId, GtkArg[] args)",
"comment" : "\n Warning\n gtk_signal_emitv is deprecated and should not be used in newly-written code. Use g_signal_emitv() instead.\n Emits a signal. This causes the default handler and user-connected\n handlers to be run. This differs from gtk_signal_emit() by taking\n an array of GtkArgs instead of using C's varargs mechanism.\n Params:\n object = the object to emit the signal to.\n signalId = the signal identifier.\n args = an array of GtkArgs, one for each parameter,\n followed by one which is a pointer to the return type.\n\t \n",
"line" : 203}
,
{
"name" : "emitvByName",
"kind" : "function",
"protection" : "public",
"type" : "void(ObjectGtk object, string name, GtkArg[] args)",
"comment" : "\n Warning\n gtk_signal_emitv_by_name is deprecated and should not be used in newly-written code. Use g_signal_emitv() and g_signal_lookup() instead.\n Emits a signal by name. This causes the default handler and user-connected\n handlers to be run. This differs from gtk_signal_emit() by taking\n an array of GtkArgs instead of using C's varargs mechanism.\n Params:\n object = the object to emit the signal to.\n name = the name of the signal.\n args = an array of GtkArgs, one for each parameter,\n followed by one which is a pointer to the return type.\n\t \n",
"line" : 221}
,
{
"name" : "emitStopByName",
"kind" : "function",
"protection" : "public",
"type" : "void(ObjectGtk object, string name)",
"comment" : "\n Warning\n gtk_signal_emit_stop_by_name is deprecated and should not be used in newly-written code. Use g_signal_stop_emission_by_name() instead.\n This function aborts a signal's current emission.\n It is just like gtk_signal_emit_stop()\n except it will lookup the signal id for you.\n Params:\n object = the object whose signal handlers you wish to stop.\n name = the name of the signal you wish to stop.\n\t \n",
"line" : 237}
,
{
"name" : "connectFull",
"kind" : "function",
"protection" : "public",
"type" : "ulong(ObjectGtk object, string name, extern (C) void function() func, extern (C) void function(GtkObject*, void*, uint, GtkArg*) unsupported, void* data, extern (C) void function(void* cbData) destroyFunc, int objectSignal, int after)",
"comment" : "\n Warning\n gtk_signal_connect_full is deprecated and should not be used in newly-written code. Use g_signal_connect_data() instead.\n Attaches a function pointer and user data to a signal with\n more control.\n Params:\n object = the object which emits the signal. For example, a button\n in the button press signal.\n name = the name of the signal.\n func = function pointer to attach to the signal.\n data = the user data associated with the function.\n destroyFunc = function to call when this particular hook is\n disconnected.\n objectSignal = whether this is an object signal-- basically an \"object\n signal\" is one that wants its user_data and object fields switched,\n which is useful for calling functions which operate on another\n object primarily.\n after = whether to invoke the user-defined handler after the signal, or to let\n the signal's default behavior preside (i.e. depending on GTK_RUN_FIRST\n and GTK_RUN_LAST).\n Returns: the connection id.\n\t \n",
"line" : 265}
,
{
"name" : "connectWhileAlive",
"kind" : "function",
"protection" : "public",
"type" : "void(ObjectGtk object, string name, extern (C) void function() func, void* funcData, ObjectGtk aliveObject)",
"comment" : "\n Warning\n gtk_signal_connect_while_alive is deprecated and should not be used in newly-written code. Use g_signal_connect_object() instead.\n Attaches a function pointer and another GtkObject to a signal.\n This function takes an object whose \"destroy\" signal\n should be trapped.\n That way, you don't have to clean up the\n signal handler when you destroy the object.\n It is a little less efficient though.\n (Instead you may call gtk_signal_disconnect_by_data(), if you want\n to explicitly delete all attachments to this object. This\n is perhaps not recommended since it could be confused\n with an integer masquerading as a pointer (through GINT_TO_POINTER()).)\n Params:\n object = the object that emits the signal.\n name = name of the signal.\n func = function pointer to attach to the signal.\n funcData = pointer to pass to func.\n aliveObject = object whose death should cause the handler connection\n to be destroyed.\n\t \n",
"line" : 292}
,
{
"name" : "connectObjectWhileAlive",
"kind" : "function",
"protection" : "public",
"type" : "void(ObjectGtk object, string name, extern (C) void function() func, ObjectGtk aliveObject)",
"comment" : "\n Warning\n gtk_signal_connect_object_while_alive is deprecated and should not be used in newly-written code. Use g_signal_connect_object() instead, passing\n G_CONNECT_SWAPPED as connect_flags.\n These signal connectors are for signals which refer to objects,\n so they must not be called after the object is deleted.\n Unlike gtk_signal_connect_while_alive(),\n this swaps the object and user data, making it suitable for\n use with functions which primarily operate on the user data.\n This function acts just like gtk_signal_connect_object() except\n it traps the \"destroy\" signal to prevent you from having to\n clean up the handler.\n Params:\n object = the object associated with the signal.\n name = name of the signal.\n func = function pointer to attach to the signal.\n aliveObject = the user data, which must be an object, whose destruction\n should signal the removal of this signal.\n\t \n",
"line" : 317}
]
}
]
}
,
{
"name" : "gtk.SizeGroup",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/SizeGroup.d",
"members" : [
{
"name" : "SizeGroup",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkSizeGroup provides a mechanism for grouping a number of widgets\n together so they all request the same amount of space. This is\n typically useful when you want a column of widgets to have the same\n size, but you can't use a GtkTable widget.\n In detail, the size requested for each widget in a GtkSizeGroup is\n the maximum of the sizes that would have been requested for each\n widget in the size group if they were not in the size group. The mode\n of the size group (see gtk_size_group_set_mode()) determines whether\n this applies to the horizontal size, the vertical size, or both sizes.\n Note that size groups only affect the amount of space requested, not\n the size that the widgets finally receive. If you want the widgets in\n a GtkSizeGroup to actually be the same size, you need to pack them in\n such a way that they get the size they request and not more. For\n example, if you are packing your widgets into a table, you would not\n include the GTK_FILL flag.\n GtkSizeGroup objects are referenced by each widget in the size group,\n so once you have added all widgets to a GtkSizeGroup, you can drop\n the initial reference to the size group with g_object_unref(). If the\n widgets in the size group are subsequently destroyed, then they will\n be removed from the size group and drop their references on the size\n group; when all widgets have been removed, the size group will be\n freed.\n Widgets can be part of multiple size groups; GTK+ will compute the\n horizontal size of a widget from the horizontal requisition of all\n widgets that can be reached from the widget by a chain of size groups\n of type GTK_SIZE_GROUP_HORIZONTAL or GTK_SIZE_GROUP_BOTH, and the\n vertical size from the vertical requisition of all widgets that can be\n reached from the widget by a chain of size groups of type\n GTK_SIZE_GROUP_VERTICAL or GTK_SIZE_GROUP_BOTH.\n GtkSizeGroup as GtkBuildable\n Size groups can be specified in a UI definition by placing an\n <object> element with class=\"GtkSizeGroup\"\n somewhere in the UI definition. The widgets that belong to the\n size group are specified by a <widgets> element that may\n contain multiple <widget> elements, one for each member\n of the size group. The name attribute gives the id of the widget.\n $(DDOC_COMMENT example)\n \n",
"line" : 117,
"base" : "ObjectG",
"interfaces" : [
"BuildableIF"],
"members" : [
{
"name" : "gtkSizeGroup",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkSizeGroup*",
"comment" : " the main Gtk struct \n",
"line" : 121}
,
{
"name" : "getSizeGroupStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkSizeGroup*()",
"line" : 124}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 131}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "SizeGroup(GtkSizeGroup* gtkSizeGroup)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 139}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 157}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "SizeGroup(GtkSizeGroupMode mode)",
"comment" : "\n\t \n\n Create a new GtkSizeGroup.\n Params:\n mode = the mode for the new size group.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 175}
,
{
"name" : "setMode",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkSizeGroupMode mode)",
"comment" : "\n Sets the GtkSizeGroupMode of the size group. The mode of the size\n group determines whether the widgets in the size group should\n all have the same horizontal requisition (GTK_SIZE_GROUP_MODE_HORIZONTAL)\n all have the same vertical requisition (GTK_SIZE_GROUP_MODE_VERTICAL),\n or should all have the same requisition in both directions\n (GTK_SIZE_GROUP_MODE_BOTH).\n Params:\n mode = the mode to set for the size group.\n\t \n",
"line" : 196}
,
{
"name" : "getMode",
"kind" : "function",
"protection" : "public",
"type" : "GtkSizeGroupMode()",
"comment" : "\n Gets the current mode of the size group. See gtk_size_group_set_mode().\n Returns: the current mode of the size group.\n\t \n",
"line" : 206}
,
{
"name" : "setIgnoreHidden",
"kind" : "function",
"protection" : "public",
"type" : "void(int ignoreHidden)",
"comment" : "\n Sets whether unmapped widgets should be ignored when\n calculating the size.\n Since 2.8\n Params:\n ignoreHidden = whether unmapped widgets should be ignored\n when calculating the size\n\t \n",
"line" : 220}
,
{
"name" : "getIgnoreHidden",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns if invisible widgets are ignored when calculating the size.\n Since 2.8\n Returns: TRUE if invisible widgets are ignored.\n\t \n",
"line" : 231}
,
{
"name" : "addWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget)",
"comment" : "\n Adds a widget to a GtkSizeGroup. In the future, the requisition\n of the widget will be determined as the maximum of its requisition\n and the requisition of the other widgets in the size group.\n Whether this applies horizontally, vertically, or in both directions\n depends on the mode of the size group. See gtk_size_group_set_mode().\n When the widget is destroyed or no longer referenced elsewhere, it will\n be removed from the size group.\n Params:\n widget = the GtkWidget to add\n\t \n",
"line" : 248}
,
{
"name" : "removeWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget)",
"comment" : "\n Removes a widget from a GtkSizeGroup.\n Params:\n widget = the GtkWidget to remove\n\t \n",
"line" : 259}
,
{
"name" : "getWidgets",
"kind" : "function",
"protection" : "public",
"type" : "ListSG()",
"comment" : "\n Returns the list of widgets associated with size_group.\n Since 2.10\n Returns: a GSList of widgets. The list is owned by GTK+ and should not be modified. [element-type GtkWidget][transfer none]\n\t \n",
"line" : 270}
]
}
]
}
,
{
"name" : "gtk.Socket",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Socket.d",
"members" : [
{
"name" : "Socket",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n Together with GtkPlug, GtkSocket provides the ability\n to embed widgets from one process into another process\n in a fashion that is transparent to the user. One\n process creates a GtkSocket widget and passes\n that widget's window ID to the other process,\n which then creates a GtkPlug with that window ID.\n Any widgets contained in the GtkPlug then will appear\n inside the first application's window.\n The socket's window ID is obtained by using\n gtk_socket_get_id(). Before using this function,\n the socket must have been realized, and for hence,\n have been added to its parent.\n $(DDOC_COMMENT example)\n Note that if you pass the window ID of the socket to another\n process that will create a plug in the socket, you\n must make sure that the socket widget is not destroyed\n until that plug is created. Violating this rule will\n cause unpredictable consequences, the most likely\n consequence being that the plug will appear as a\n separate toplevel window. You can check if the plug\n has been created by using gtk_socket_get_plug_window(). If\n it returns a non-NULL value, then the plug has been\n successfully created inside of the socket.\n When GTK+ is notified that the embedded window has been\n destroyed, then it will destroy the socket as well. You\n should always, therefore, be prepared for your sockets\n to be destroyed at any time when the main event loop\n is running. To prevent this from happening, you can\n connect to the \"plug-removed\" signal.\n The communication between a GtkSocket and a GtkPlug follows the\n XEmbed\n protocol. This protocol has also been implemented in other toolkits, e.g.\n Qt, allowing the same level of integration\n when embedding a Qt widget in GTK or vice versa.\n A socket can also be used to swallow arbitrary\n pre-existing top-level windows using gtk_socket_steal(),\n though the integration when this is done will not be as close\n as between a GtkPlug and a GtkSocket.\n Note\n The GtkPlug and GtkSocket widgets are currently not available\n on all platforms supported by GTK+.\n \n",
"line" : 115,
"base" : "Container",
"members" : [
{
"name" : "gtkSocket",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkSocket*",
"comment" : " the main Gtk struct \n",
"line" : 119}
,
{
"name" : "getSocketStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkSocket*()",
"line" : 122}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 129}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Socket(GtkSocket* gtkSocket)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 137}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 155}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 163}
,
{
"name" : "onPlugAddedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Socket)[]",
"line" : 165}
,
{
"name" : "addOnPlugAdded",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Socket) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted when a client is successfully\n added to the socket.\n\t \n",
"line" : 170}
,
{
"name" : "callBackPlugAdded",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkSocket* socketStruct, Socket socket)",
"line" : 185}
,
{
"name" : "onPlugRemovedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(Socket)[]",
"line" : 193}
,
{
"name" : "addOnPlugRemoved",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(Socket) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted when a client is removed from the socket.\n The default action is to destroy the GtkSocket widget, so if you\n want to reuse it you must add a signal handler that returns TRUE.\n TRUE to stop other handlers from being invoked.\n See Also\n GtkPlug, XEmbed\n\t \n",
"line" : 202}
,
{
"name" : "callBackPlugRemoved",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkSocket* socketStruct, Socket socket)",
"line" : 217}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Socket()",
"comment" : "\n Create a new empty GtkSocket.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 235}
,
{
"name" : "steal",
"kind" : "function",
"protection" : "public",
"type" : "void(void* wid)",
"comment" : "\n Warning\n gtk_socket_steal is deprecated and should not be used in newly-written code.\n Reparents a pre-existing toplevel window into a GtkSocket. This is\n meant to embed clients that do not know about embedding into a\n GtkSocket, however doing so is inherently unreliable, and using\n this function is not recommended.\n The GtkSocket must have already be added into a toplevel window\n  before you can make this call.\n Params:\n wid = the window ID of an existing toplevel window.\n\t \n",
"line" : 258}
,
{
"name" : "addId",
"kind" : "function",
"protection" : "public",
"type" : "void(void* windowId)",
"comment" : "\n Adds an XEMBED client, such as a GtkPlug, to the GtkSocket. The\n client may be in the same process or in a different process.\n To embed a GtkPlug in a GtkSocket, you can either create the\n GtkPlug with gtk_plug_new (0), call\n gtk_plug_get_id() to get the window ID of the plug, and then pass that to the\n gtk_socket_add_id(), or you can call gtk_socket_get_id() to get the\n window ID for the socket, and call gtk_plug_new() passing in that\n ID.\n The GtkSocket must have already be added into a toplevel window\n  before you can make this call.\n Params:\n windowId = the window ID of a client participating in the XEMBED protocol.\n\t \n",
"line" : 278}
,
{
"name" : "getId",
"kind" : "function",
"protection" : "public",
"type" : "void*()",
"comment" : "\n Gets the window ID of a GtkSocket widget, which can then\n be used to create a client embedded inside the socket, for\n instance with gtk_plug_new().\n The GtkSocket must have already be added into a toplevel window\n before you can make this call.\n Returns: the window ID for the socket\n\t \n",
"line" : 292}
,
{
"name" : "getPlugWindow",
"kind" : "function",
"protection" : "public",
"type" : "Window()",
"comment" : "\n Retrieves the window of the plug. Use this to check if the plug has\n been created inside of the socket.\n Since 2.14\n Signal Details\n The \"plug-added\" signal\n void user_function (GtkSocket *socket_,\n  gpointer user_data) : Run Last\n This signal is emitted when a client is successfully\n added to the socket.\n Returns: the window of the plug if available, or NULL. [transfer none]\n\t \n",
"line" : 310}
]
}
]
}
,
{
"name" : "gtk.SpinButton",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/SpinButton.d",
"members" : [
{
"name" : "SpinButton",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkSpinButton is an ideal way to allow the user to set the value of some\n attribute. Rather than having to directly type a number into a GtkEntry,\n GtkSpinButton allows the user to click on one of two arrows to increment or\n decrement the displayed value. A value can still be typed in, with the bonus\n that it can be checked to ensure it is in a given range.\n The main properties of a GtkSpinButton are through a GtkAdjustment. See the\n GtkAdjustment section for more details about an adjustment's properties.\n $(DDOC_COMMENT example)\n $(DDOC_COMMENT example)\n \n",
"line" : 86,
"base" : "Entry",
"members" : [
{
"name" : "gtkSpinButton",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkSpinButton*",
"comment" : " the main Gtk struct \n",
"line" : 90}
,
{
"name" : "getSpinButtonStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkSpinButton*()",
"line" : 93}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 100}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "SpinButton(GtkSpinButton* gtkSpinButton)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 108}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 126}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 134}
,
{
"name" : "onChangeValueListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkScrollType, SpinButton)[]",
"line" : 136}
,
{
"name" : "addOnChangeValue",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkScrollType, SpinButton) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 139}
,
{
"name" : "callBackChangeValue",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkSpinButton* spinbuttonStruct, GtkScrollType arg1, SpinButton spinButton)",
"line" : 154}
,
{
"name" : "onInputListeners",
"kind" : "variable",
"protection" : "public",
"type" : "int delegate(void*, SpinButton)[]",
"line" : 162}
,
{
"name" : "addOnInput",
"kind" : "function",
"protection" : "public",
"type" : "void(int delegate(void*, SpinButton) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 165}
,
{
"name" : "callBackInput",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkSpinButton* spinbuttonStruct, void* arg1, SpinButton spinButton)",
"line" : 180}
,
{
"name" : "onOutputListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(SpinButton)[]",
"line" : 188}
,
{
"name" : "addOnOutput",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(SpinButton) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::output signal can be used to change to formatting\n of the value that is displayed in the spin buttons entry.\n $(DDOC_COMMENT example)\n TRUE if the value has been displayed.\n\t \n",
"line" : 195}
,
{
"name" : "callBackOutput",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkSpinButton* spinButtonStruct, SpinButton spinButton)",
"line" : 210}
,
{
"name" : "onValueChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(SpinButton)[]",
"line" : 223}
,
{
"name" : "addOnValueChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(SpinButton) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 226}
,
{
"name" : "callBackValueChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkSpinButton* spinbuttonStruct, SpinButton spinButton)",
"line" : 241}
,
{
"name" : "onWrappedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(SpinButton)[]",
"line" : 249}
,
{
"name" : "addOnWrapped",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(SpinButton) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The wrapped signal is emitted right after the spinbutton wraps\n from its maximum to minimum value or vice-versa.\n Since 2.10\n See Also\n GtkEntry\n retrieve text rather than numbers.\n\t \n",
"line" : 258}
,
{
"name" : "callBackWrapped",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkSpinButton* spinbuttonStruct, SpinButton spinButton)",
"line" : 273}
,
{
"name" : "configure",
"kind" : "function",
"protection" : "public",
"type" : "void(Adjustment adjustment, double climbRate, uint digits)",
"comment" : "\n Changes the properties of an existing spin button. The adjustment, climb rate,\n and number of decimal places are all changed accordingly, after this function call.\n Params:\n adjustment = a GtkAdjustment. [allow-none]\n climbRate = the new climb rate.\n digits = the number of decimal places to display in the spin button.\n\t \n",
"line" : 290}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "SpinButton(Adjustment adjustment, double climbRate, uint digits)",
"comment" : "\n Creates a new GtkSpinButton.\n Params:\n adjustment = the GtkAdjustment object that this spin button should use.\n climbRate = specifies how much the spin button changes when an arrow is clicked on.\n digits = the number of decimal places to display.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 304}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "SpinButton(double min, double max, double step)",
"comment" : "\n This is a convenience constructor that allows creation of a numeric\n GtkSpinButton without manually creating an adjustment. The value is\n initially set to the minimum value and a page increment of 10 * step\n is the default. The precision of the spin button is equivalent to the\n precision of step.\n Note that the way in which the precision is derived works best if step\n is a power of ten. If the resulting precision is not suitable for your\n needs, use gtk_spin_button_set_digits() to correct it.\n Params:\n min = Minimum allowable value\n max = Maximum allowable value\n step = Increment added or subtracted by spinning the widget\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 330}
,
{
"name" : "setAdjustment",
"kind" : "function",
"protection" : "public",
"type" : "void(Adjustment adjustment)",
"comment" : "\n Replaces the GtkAdjustment associated with spin_button.\n Params:\n adjustment = a GtkAdjustment to replace the existing adjustment\n\t \n",
"line" : 346}
,
{
"name" : "getAdjustment",
"kind" : "function",
"protection" : "public",
"type" : "Adjustment()",
"comment" : "\n Get the adjustment associated with a GtkSpinButton\n Returns: the GtkAdjustment of spin_button. [transfer none]\n\t \n",
"line" : 356}
,
{
"name" : "setDigits",
"kind" : "function",
"protection" : "public",
"type" : "void(uint digits)",
"comment" : "\n Set the precision to be displayed by spin_button. Up to 20 digit precision\n is allowed.\n Params:\n digits = the number of digits after the decimal point to be displayed for the spin button's value\n\t \n",
"line" : 373}
,
{
"name" : "setIncrements",
"kind" : "function",
"protection" : "public",
"type" : "void(double step, double page)",
"comment" : "\n Sets the step and page increments for spin_button. This affects how\n quickly the value changes when the spin button's arrows are activated.\n Params:\n step = increment applied for a button 1 press.\n page = increment applied for a button 2 press.\n\t \n",
"line" : 386}
,
{
"name" : "setRange",
"kind" : "function",
"protection" : "public",
"type" : "void(double min, double max)",
"comment" : "\n Sets the minimum and maximum allowable values for spin_button\n Params:\n min = minimum allowable value\n max = maximum allowable value\n\t \n",
"line" : 398}
,
{
"name" : "getValueAsInt",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Get the value spin_button represented as an integer.\n Returns: the value of spin_button\n\t \n",
"line" : 408}
,
{
"name" : "setValue",
"kind" : "function",
"protection" : "public",
"type" : "void(double value)",
"comment" : "\n Set the value of spin_button.\n Params:\n value = the new value\n\t \n",
"line" : 419}
,
{
"name" : "setUpdatePolicy",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkSpinButtonUpdatePolicy policy)",
"comment" : "\n Sets the update behavior of a spin button. This determines whether the\n spin button is always updated or only when a valid value is set.\n Params:\n policy = a GtkSpinButtonUpdatePolicy value\n\t \n",
"line" : 431}
,
{
"name" : "setNumeric",
"kind" : "function",
"protection" : "public",
"type" : "void(int numeric)",
"comment" : "\n Sets the flag that determines if non-numeric text can be typed into\n the spin button.\n Params:\n numeric = flag indicating if only numeric entry is allowed.\n\t \n",
"line" : 443}
,
{
"name" : "spin",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkSpinType direction, double increment)",
"comment" : "\n Increment or decrement a spin button's value in a specified direction\n by a specified amount.\n Params:\n direction = a GtkSpinType indicating the direction to spin.\n increment = step increment to apply in the specified direction.\n\t \n",
"line" : 456}
,
{
"name" : "setWrap",
"kind" : "function",
"protection" : "public",
"type" : "void(int wrap)",
"comment" : "\n Sets the flag that determines if a spin button value wraps around to the\n opposite limit when the upper or lower limit of the range is exceeded.\n Params:\n wrap = a flag indicating if wrapping behavior is performed.\n\t \n",
"line" : 468}
,
{
"name" : "setSnapToTicks",
"kind" : "function",
"protection" : "public",
"type" : "void(int snapToTicks)",
"comment" : "\n Sets the policy as to whether values are corrected to the nearest step\n increment when a spin button is activated after providing an invalid value.\n Params:\n snapToTicks = a flag indicating if invalid values should be corrected.\n\t \n",
"line" : 480}
,
{
"name" : "update",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Manually force an update of the spin button.\n\t \n",
"line" : 489}
,
{
"name" : "getDigits",
"kind" : "function",
"protection" : "public",
"type" : "uint()",
"comment" : "\n Fetches the precision of spin_button. See gtk_spin_button_set_digits().\n Returns: the current precision\n\t \n",
"line" : 499}
,
{
"name" : "getIncrements",
"kind" : "function",
"protection" : "public",
"type" : "void(out double step, out double page)",
"comment" : "\n Gets the current step and page the increments used by spin_button. See\n gtk_spin_button_set_increments().\n Params:\n step = location to store step increment, or NULL. [out][allow-none]\n page = location to store page increment, or NULL. [out][allow-none]\n\t \n",
"line" : 512}
,
{
"name" : "getNumeric",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether non-numeric text can be typed into the spin button.\n See gtk_spin_button_set_numeric().\n Returns: TRUE if only numeric text can be entered\n\t \n",
"line" : 523}
,
{
"name" : "getRange",
"kind" : "function",
"protection" : "public",
"type" : "void(out double min, out double max)",
"comment" : "\n Gets the range allowed for spin_button. See\n gtk_spin_button_set_range().\n Params:\n min = location to store minimum allowed value, or NULL. [out][allow-none]\n max = location to store maximum allowed value, or NULL. [out][allow-none]\n\t \n",
"line" : 536}
,
{
"name" : "getSnapToTicks",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the values are corrected to the nearest step. See\n gtk_spin_button_set_snap_to_ticks().\n Returns: TRUE if values are snapped to the nearest step.\n\t \n",
"line" : 547}
,
{
"name" : "getUpdatePolicy",
"kind" : "function",
"protection" : "public",
"type" : "GtkSpinButtonUpdatePolicy()",
"comment" : "\n Gets the update behavior of a spin button. See\n gtk_spin_button_set_update_policy().\n Returns: the current update policy\n\t \n",
"line" : 558}
,
{
"name" : "getValue",
"kind" : "function",
"protection" : "public",
"type" : "double()",
"comment" : "\n Get the value in the spin_button.\n Returns: the value of spin_button\n\t \n",
"line" : 568}
,
{
"name" : "getWrap",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the spin button's value wraps around to the\n opposite limit when the upper or lower limit of the range is\n exceeded. See gtk_spin_button_set_wrap().\n Returns: TRUE if the spin button wraps around\n\t \n",
"line" : 580}
]
}
]
}
,
{
"name" : "gtk.Spinner",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Spinner.d",
"members" : [
{
"name" : "Spinner",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkSpinner widget displays an icon-size spinning animation.\n It is often used as an alternative to a GtkProgressBar for\n displaying indefinite activity, instead of actual progress.\n To start the animation, use gtk_spinner_start(), to stop it\n use gtk_spinner_stop().\n \n",
"line" : 73,
"base" : "DrawingArea",
"members" : [
{
"name" : "gtkSpinner",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkSpinner*",
"comment" : " the main Gtk struct \n",
"line" : 77}
,
{
"name" : "getSpinnerStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkSpinner*()",
"line" : 80}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 87}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Spinner(GtkSpinner* gtkSpinner)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 95}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 113}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Spinner()",
"comment" : "\n\t \n\n Returns a new spinner widget. Not yet started.\n Since 2.20\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 127}
,
{
"name" : "start",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Starts the animation of the spinner.\n Since 2.20\n\t \n",
"line" : 142}
,
{
"name" : "stop",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Stops the animation of the spinner.\n Since 2.20\n\t \n",
"line" : 152}
]
}
]
}
,
{
"name" : "gtk.StandardEnumerations",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/StandardEnumerations.d",
"members" : [
{
"name" : "StandardEnumerations",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n \n",
"line" : 67,
"base" : "Object",
"members" : [
]
}
]
}
,
{
"name" : "gtk.Statusbar",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Statusbar.d",
"members" : [
{
"name" : "Statusbar",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkStatusbar is usually placed along the bottom of an application's main\n GtkWindow. It may provide a regular commentary of the application's status\n (as is usually the case in a web browser, for example), or may be used to\n simply output a message when the status changes, (when an upload is complete\n in an FTP client, for example).\n It may also have a resize grip (a triangular area in the lower right corner)\n which can be clicked on to resize the window containing the statusbar.\n Status bars in GTK+ maintain a stack of messages. The message at\n the top of the each bar's stack is the one that will currently be displayed.\n Any messages added to a statusbar's stack must specify a context\n id that is used to uniquely identify the source of a message.\n This context id can be generated by gtk_statusbar_get_context_id(), given a\n message and the statusbar that it will be added to. Note that messages are\n stored in a stack, and when choosing which message to display, the stack\n structure is adhered to, regardless of the context identifier of a message.\n One could say that a statusbar maintains one stack of messages for display\n purposes, but allows multiple message producers to maintain sub-stacks of\n the messages they produced (via context ids).\n Status bars are created using gtk_statusbar_new().\n Messages are added to the bar's stack with gtk_statusbar_push().\n The message at the top of the stack can be removed using gtk_statusbar_pop().\n A message can be removed from anywhere in the stack if its message_id was\n recorded at the time it was added. This is done using gtk_statusbar_remove().\n \n",
"line" : 99,
"base" : "HBox",
"members" : [
{
"name" : "gtkStatusbar",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkStatusbar*",
"comment" : " the main Gtk struct \n",
"line" : 103}
,
{
"name" : "getStatusbarStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkStatusbar*()",
"line" : 106}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 113}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Statusbar(GtkStatusbar* gtkStatusbar)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 121}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 139}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 147}
,
{
"name" : "onTextPoppedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(uint, string, Statusbar)[]",
"line" : 149}
,
{
"name" : "addOnTextPopped",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(uint, string, Statusbar) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Is emitted whenever a new message is popped off a statusbar's stack.\n\t \n",
"line" : 153}
,
{
"name" : "callBackTextPopped",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkStatusbar* statusbarStruct, uint contextId, char* text, Statusbar statusbar)",
"line" : 168}
,
{
"name" : "onTextPushedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(uint, string, Statusbar)[]",
"line" : 176}
,
{
"name" : "addOnTextPushed",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(uint, string, Statusbar) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Is emitted whenever a new message gets pushed onto a statusbar's stack.\n\t \n",
"line" : 180}
,
{
"name" : "callBackTextPushed",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkStatusbar* statusbarStruct, uint contextId, char* text, Statusbar statusbar)",
"line" : 195}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Statusbar()",
"comment" : "\n Creates a new GtkStatusbar ready for messages.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 208}
,
{
"name" : "getContextId",
"kind" : "function",
"protection" : "public",
"type" : "uint(string contextDescription)",
"comment" : "\n Returns a new context identifier, given a description\n of the actual context. Note that the description is\n not shown in the UI.\n Params:\n contextDescription = textual description of what context\n the new message is being used in\n Returns: an integer id\n\t \n",
"line" : 228}
,
{
"name" : "push",
"kind" : "function",
"protection" : "public",
"type" : "uint(uint contextId, string text)",
"comment" : "\n Pushes a new message onto a statusbar's stack.\n Params:\n contextId = the message's context id, as returned by\n gtk_statusbar_get_context_id()\n text = the message to add to the statusbar\n Returns: a message id that can be used with gtk_statusbar_remove().\n\t \n",
"line" : 242}
,
{
"name" : "pop",
"kind" : "function",
"protection" : "public",
"type" : "void(uint contextId)",
"comment" : "\n Removes the first message in the GtkStatusBar's stack\n with the given context id.\n Note that this may not change the displayed message, if\n the message at the top of the stack has a different\n context id.\n Params:\n contextId = a context identifier\n\t \n",
"line" : 257}
,
{
"name" : "remove",
"kind" : "function",
"protection" : "public",
"type" : "void(uint contextId, uint messageId)",
"comment" : "\n Forces the removal of a message from a statusbar's stack.\n The exact context_id and message_id must be specified.\n Params:\n contextId = a context identifier\n messageId = a message identifier, as returned by gtk_statusbar_push()\n\t \n",
"line" : 270}
,
{
"name" : "removeAll",
"kind" : "function",
"protection" : "public",
"type" : "void(uint contextId)",
"comment" : "\n Forces the removal of all messages from a statusbar's\n stack with the exact context_id.\n Since 2.22\n Params:\n contextId = a context identifier\n\t \n",
"line" : 283}
,
{
"name" : "setHasResizeGrip",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n Sets whether the statusbar has a resize grip.\n TRUE by default.\n Params:\n setting = TRUE to have a resize grip\n\t \n",
"line" : 295}
,
{
"name" : "getHasResizeGrip",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the statusbar has a resize grip.\n Returns: TRUE if the statusbar has a resize grip.\n\t \n",
"line" : 305}
,
{
"name" : "getMessageArea",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Retrieves the box containing the label widget.\n Since 2.20\n Returns: a GtkBox. [transfer none]\n\t \n",
"line" : 316}
]
}
]
}
,
{
"name" : "gtk.StatusIcon",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/StatusIcon.d",
"members" : [
{
"name" : "StatusIcon",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The \"system tray\" or notification area is normally used for transient icons\n that indicate some special state. For example, a system tray icon might\n appear to tell the user that they have new mail, or have an incoming instant\n message, or something along those lines. The basic idea is that creating an\n icon in the notification area is less annoying than popping up a dialog.\n A GtkStatusIcon object can be used to display an icon in a \"system tray\".\n The icon can have a tooltip, and the user can interact with it by\n activating it or popping up a context menu. Critical information should\n not solely be displayed in a GtkStatusIcon, since it may not be\n visible (e.g. when the user doesn't have a notification area on his panel).\n This can be checked with gtk_status_icon_is_embedded().\n On X11, the implementation follows the freedesktop.org \"System Tray\"\n specification. Implementations of the \"tray\" side of this specification can\n be found e.g. in the GNOME and KDE panel applications.\n Note that a GtkStatusIcon is not a widget, but just\n a GObject. Making it a widget would be impractical, since the system tray\n on Win32 doesn't allow to embed arbitrary widgets.\n \n",
"line" : 110,
"base" : "ObjectG",
"members" : [
{
"name" : "gtkStatusIcon",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkStatusIcon*",
"comment" : " the main Gtk struct \n",
"line" : 114}
,
{
"name" : "getStatusIconStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkStatusIcon*()",
"line" : 117}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 124}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "StatusIcon(GtkStatusIcon* gtkStatusIcon)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 132}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 150}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "StatusIcon(StockID stockID)",
"comment" : "\n Creates a status icon displaying a stock icon. Sample stock icon\n names are StockID.OPEN, StockID.QUIT. You can register your\n own stock icon names, see gtk_icon_factory_add_default() and\n gtk_icon_factory_add().\n Since 2.10\n Params:\n  stock_id = a stock icon id\n Returns:\n  a new GtkStatusIcon\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 168}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "StatusIcon(string iconName, bool loadFromFile = false)",
"comment" : "\n Creates a status icon displaying an icon from the current icon theme.\n If the current icon theme is changed, the icon will be updated\n appropriately.\n Since 2.10\n Params:\n  iconName =  an icon name\n  loadFromFile = treat iconName as a filename and load that image\n  with gtk_status_icon_new_from_file.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 190}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 216}
,
{
"name" : "onActivateListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(StatusIcon)[]",
"line" : 218}
,
{
"name" : "addOnActivate",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(StatusIcon) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Gets emitted when the user activates the status icon.\n If and how status icons can activated is platform-dependent.\n Unlike most G_SIGNAL_ACTION signals, this signal is meant to\n be used by applications and should be wrapped by language bindings.\n Since 2.10\n\t \n",
"line" : 226}
,
{
"name" : "callBackActivate",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkStatusIcon* statusIconStruct, StatusIcon statusIcon)",
"line" : 241}
,
{
"name" : "onButtonPressListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkEvent*, StatusIcon)[]",
"line" : 249}
,
{
"name" : "addOnButtonPress",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkEvent*, StatusIcon) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::button-press-event signal will be emitted when a button\n (typically from a mouse) is pressed.\n Whether this event is emitted is platform-dependent. Use the ::activate\n and ::popup-menu signals in preference.\n TRUE to stop other handlers from being invoked\n for the event. FALSE to propagate the event further.\n Since 2.14\n\t \n",
"line" : 259}
,
{
"name" : "callBackButtonPress",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkStatusIcon* statusIconStruct, GdkEvent* event, StatusIcon statusIcon)",
"line" : 274}
,
{
"name" : "onButtonReleaseListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkEvent*, StatusIcon)[]",
"line" : 287}
,
{
"name" : "addOnButtonRelease",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkEvent*, StatusIcon) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::button-release-event signal will be emitted when a button\n (typically from a mouse) is released.\n Whether this event is emitted is platform-dependent. Use the ::activate\n and ::popup-menu signals in preference.\n TRUE to stop other handlers from being invoked\n for the event. FALSE to propagate the event further.\n Since 2.14\n\t \n",
"line" : 297}
,
{
"name" : "callBackButtonRelease",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkStatusIcon* statusIconStruct, GdkEvent* event, StatusIcon statusIcon)",
"line" : 312}
,
{
"name" : "onPopupMenuListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(uint, uint, StatusIcon)[]",
"line" : 325}
,
{
"name" : "addOnPopupMenu",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(uint, uint, StatusIcon) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Gets emitted when the user brings up the context menu\n of the status icon. Whether status icons can have context\n menus and how these are activated is platform-dependent.\n The button and activate_time parameters should be\n passed as the last to arguments to gtk_menu_popup().\n Unlike most G_SIGNAL_ACTION signals, this signal is meant to\n be used by applications and should be wrapped by language bindings.\n Since 2.10\n\t \n",
"line" : 336}
,
{
"name" : "callBackPopupMenu",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkStatusIcon* statusIconStruct, uint button, uint activateTime, StatusIcon statusIcon)",
"line" : 351}
,
{
"name" : "onQueryTooltipListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(int, int, int, Tooltip, StatusIcon)[]",
"line" : 359}
,
{
"name" : "addOnQueryTooltip",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(int, int, int, Tooltip, StatusIcon) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when the \"gtk-tooltip-timeout\" has expired with the\n cursor hovering above status_icon; or emitted when status_icon got\n focus in keyboard mode.\n Using the given coordinates, the signal handler should determine\n whether a tooltip should be shown for status_icon. If this is\n the case TRUE should be returned, FALSE otherwise. Note that if\n keyboard_mode is TRUE, the values of x and y are undefined and\n should not be used.\n The signal handler is free to manipulate tooltip with the therefore\n destined function calls.\n Whether this signal is emitted is platform-dependent.\n For plain text tooltips, use \"tooltip-text\" in preference.\n TRUE if the tooltip was trigged using the keyboard\n TRUE if tooltip should be shown right now, FALSE otherwise.\n Since 2.16\n\t \n",
"line" : 377}
,
{
"name" : "callBackQueryTooltip",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkStatusIcon* statusIconStruct, int x, int y, int keyboardMode, GtkTooltip* tooltip, StatusIcon statusIcon)",
"line" : 392}
,
{
"name" : "onScrollListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkEvent*, StatusIcon)[]",
"line" : 405}
,
{
"name" : "addOnScroll",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkEvent*, StatusIcon) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::scroll-event signal is emitted when a button in the 4 to 7\n range is pressed. Wheel mice are usually configured to generate\n button press events for buttons 4 and 5 when the wheel is turned.\n Whether this event is emitted is platform-dependent.\n TRUE to stop other handlers from being invoked for the event.\n FALSE to propagate the event further.\n\t \n",
"line" : 414}
,
{
"name" : "callBackScroll",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkStatusIcon* statusIconStruct, GdkEvent* event, StatusIcon statusIcon)",
"line" : 429}
,
{
"name" : "onSizeChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(int, StatusIcon)[]",
"line" : 442}
,
{
"name" : "addOnSizeChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(int, StatusIcon) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Gets emitted when the size available for the image\n changes, e.g. because the notification area got resized.\n TRUE if the icon was updated for the new\n size. Otherwise, GTK+ will scale the icon as necessary.\n Since 2.10\n\t \n",
"line" : 450}
,
{
"name" : "callBackSizeChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkStatusIcon* statusIconStruct, int size, StatusIcon statusIcon)",
"line" : 465}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "StatusIcon()",
"comment" : "\n Creates an empty status icon object.\n Since 2.10\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 484}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "StatusIcon(Pixbuf pixbuf)",
"comment" : "\n Creates a status icon displaying pixbuf.\n The image will be scaled down to fit in the available\n space in the notification area, if necessary.\n Since 2.10\n Params:\n pixbuf = a GdkPixbuf\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 504}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "StatusIcon(IconIF icon)",
"comment" : "\n Creates a status icon displaying a GIcon. If the icon is a\n themed icon, it will be updated when the theme changes.\n Since 2.14\n Params:\n icon = a GIcon\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 523}
,
{
"name" : "setFromPixbuf",
"kind" : "function",
"protection" : "public",
"type" : "void(Pixbuf pixbuf)",
"comment" : "\n Makes status_icon display pixbuf.\n See gtk_status_icon_new_from_pixbuf() for details.\n Since 2.10\n Params:\n pixbuf = a GdkPixbuf or NULL. [allow-none]\n\t \n",
"line" : 541}
,
{
"name" : "setFromFile",
"kind" : "function",
"protection" : "public",
"type" : "void(string filename)",
"comment" : "\n Makes status_icon display the file filename.\n See gtk_status_icon_new_from_file() for details.\n Since 2.10\n Params:\n filename = a filename\n\t \n",
"line" : 554}
,
{
"name" : "setFromStock",
"kind" : "function",
"protection" : "public",
"type" : "void(string stockId)",
"comment" : "\n Makes status_icon display the stock icon with the id stock_id.\n See gtk_status_icon_new_from_stock() for details.\n Since 2.10\n Params:\n stockId = a stock icon id\n\t \n",
"line" : 567}
,
{
"name" : "setFromIconName",
"kind" : "function",
"protection" : "public",
"type" : "void(string iconName)",
"comment" : "\n Makes status_icon display the icon named icon_name from the\n current icon theme.\n See gtk_status_icon_new_from_icon_name() for details.\n Since 2.10\n Params:\n iconName = an icon name\n\t \n",
"line" : 581}
,
{
"name" : "setFromGicon",
"kind" : "function",
"protection" : "public",
"type" : "void(IconIF icon)",
"comment" : "\n Makes status_icon display the GIcon.\n See gtk_status_icon_new_from_gicon() for details.\n Since 2.14\n Params:\n icon = a GIcon\n\t \n",
"line" : 594}
,
{
"name" : "getStorageType",
"kind" : "function",
"protection" : "public",
"type" : "GtkImageType()",
"comment" : "\n Gets the type of representation being used by the GtkStatusIcon\n to store image data. If the GtkStatusIcon has no image data,\n the return value will be GTK_IMAGE_EMPTY.\n Since 2.10\n Returns: the image representation being used\n\t \n",
"line" : 607}
,
{
"name" : "getPixbuf",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf()",
"comment" : "\n Gets the GdkPixbuf being displayed by the GtkStatusIcon.\n The storage type of the status icon must be GTK_IMAGE_EMPTY or\n GTK_IMAGE_PIXBUF (see gtk_status_icon_get_storage_type()).\n The caller of this function does not own a reference to the\n returned pixbuf.\n Since 2.10\n Returns: the displayed pixbuf, or NULL if the image is empty. [transfer none]\n\t \n",
"line" : 622}
,
{
"name" : "getStock",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the id of the stock icon being displayed by the GtkStatusIcon.\n The storage type of the status icon must be GTK_IMAGE_EMPTY or\n GTK_IMAGE_STOCK (see gtk_status_icon_get_storage_type()).\n The returned string is owned by the GtkStatusIcon and should not\n be freed or modified.\n Since 2.10\n Returns: stock id of the displayed stock icon, or NULL if the image is empty.\n\t \n",
"line" : 642}
,
{
"name" : "getIconName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the name of the icon being displayed by the GtkStatusIcon.\n The storage type of the status icon must be GTK_IMAGE_EMPTY or\n GTK_IMAGE_ICON_NAME (see gtk_status_icon_get_storage_type()).\n The returned string is owned by the GtkStatusIcon and should not\n be freed or modified.\n Since 2.10\n Returns: name of the displayed icon, or NULL if the image is empty.\n\t \n",
"line" : 657}
,
{
"name" : "getGicon",
"kind" : "function",
"protection" : "public",
"type" : "IconIF()",
"comment" : "\n Retrieves the GIcon being displayed by the GtkStatusIcon.\n The storage type of the status icon must be GTK_IMAGE_EMPTY or\n GTK_IMAGE_GICON (see gtk_status_icon_get_storage_type()).\n The caller of this function does not own a reference to the\n returned GIcon.\n If this function fails, icon is left unchanged;\n Since 2.14\n Returns: the displayed icon, or NULL if the image is empty. [transfer none]\n\t \n",
"line" : 673}
,
{
"name" : "getSize",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the size in pixels that is available for the image.\n Stock icons and named icons adapt their size automatically\n if the size of the notification area changes. For other\n storage types, the size-changed signal can be used to\n react to size changes.\n Note that the returned size is only meaningful while the\n status icon is embedded (see gtk_status_icon_is_embedded()).\n Since 2.10\n Returns: the size that is available for the image\n\t \n",
"line" : 695}
,
{
"name" : "setScreen",
"kind" : "function",
"protection" : "public",
"type" : "void(Screen screen)",
"comment" : "\n Sets the GdkScreen where status_icon is displayed; if\n the icon is already mapped, it will be unmapped, and\n then remapped on the new screen.\n Since 2.12\n Params:\n screen = a GdkScreen\n\t \n",
"line" : 709}
,
{
"name" : "getScreen",
"kind" : "function",
"protection" : "public",
"type" : "Screen()",
"comment" : "\n Returns the GdkScreen associated with status_icon.\n Since 2.12\n Returns: a GdkScreen. [transfer none]\n\t \n",
"line" : 720}
,
{
"name" : "setTooltip",
"kind" : "function",
"protection" : "public",
"type" : "void(string tooltipText)",
"comment" : "\n Warning\n gtk_status_icon_set_tooltip has been deprecated since version 2.16 and should not be used in newly-written code. Use gtk_status_icon_set_tooltip_text() instead.\n Sets the tooltip of the status icon.\n Since 2.10\n Params:\n tooltipText = the tooltip text, or NULL. [allow-none]\n\t \n",
"line" : 739}
,
{
"name" : "setTooltipText",
"kind" : "function",
"protection" : "public",
"type" : "void(string text)",
"comment" : "\n Sets text as the contents of the tooltip.\n This function will take care of setting \"has-tooltip\" to\n TRUE and of the default handler for the \"query-tooltip\"\n signal.\n See also the \"tooltip-text\" property and\n gtk_tooltip_set_text().\n Since 2.16\n Params:\n text = the contents of the tooltip for status_icon\n\t \n",
"line" : 756}
,
{
"name" : "getTooltipText",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the contents of the tooltip for status_icon.\n Since 2.16\n Returns: the tooltip text, or NULL. You should free the returned string with g_free() when done.\n\t \n",
"line" : 767}
,
{
"name" : "setTooltipMarkup",
"kind" : "function",
"protection" : "public",
"type" : "void(string markup)",
"comment" : "\n Sets markup as the contents of the tooltip, which is marked up with\n  the Pango text markup language.\n This function will take care of setting \"has-tooltip\" to TRUE\n and of the default handler for the \"query-tooltip\" signal.\n See also the \"tooltip-markup\" property and\n gtk_tooltip_set_markup().\n Since 2.16\n Params:\n markup = the contents of the tooltip for status_icon, or NULL. [allow-none]\n\t \n",
"line" : 784}
,
{
"name" : "getTooltipMarkup",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the contents of the tooltip for status_icon.\n Since 2.16\n Returns: the tooltip text, or NULL. You should free the returned string with g_free() when done.\n\t \n",
"line" : 795}
,
{
"name" : "setHasTooltip",
"kind" : "function",
"protection" : "public",
"type" : "void(int hasTooltip)",
"comment" : "\n Sets the has-tooltip property on status_icon to has_tooltip.\n See \"has-tooltip\" for more information.\n Since 2.16\n Params:\n hasTooltip = whether or not status_icon has a tooltip\n\t \n",
"line" : 808}
,
{
"name" : "getHasTooltip",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the current value of the has-tooltip property.\n See \"has-tooltip\" for more information.\n Since 2.16\n Returns: current value of has-tooltip on status_icon.\n\t \n",
"line" : 820}
,
{
"name" : "setTitle",
"kind" : "function",
"protection" : "public",
"type" : "void(string title)",
"comment" : "\n Sets the title of this tray icon.\n This should be a short, human-readable, localized string\n describing the tray icon. It may be used by tools like screen\n readers to render the tray icon.\n Since 2.18\n Params:\n title = the title\n\t \n",
"line" : 835}
,
{
"name" : "getTitle",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the title of this tray icon. See gtk_status_icon_set_title().\n Since 2.18\n Returns: the title of the status icon\n\t \n",
"line" : 846}
,
{
"name" : "setName",
"kind" : "function",
"protection" : "public",
"type" : "void(string name)",
"comment" : "\n Sets the name of this tray icon.\n This should be a string identifying this icon. It is may be\n used for sorting the icons in the tray and will not be shown to\n the user.\n Since 2.20\n Params:\n name = the name\n\t \n",
"line" : 861}
,
{
"name" : "setVisible",
"kind" : "function",
"protection" : "public",
"type" : "void(int visible)",
"comment" : "\n Shows or hides a status icon.\n Since 2.10\n Params:\n visible = TRUE to show the status icon, FALSE to hide it\n\t \n",
"line" : 873}
,
{
"name" : "getVisible",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the status icon is visible or not.\n Note that being visible does not guarantee that\n the user can actually see the icon, see also\n gtk_status_icon_is_embedded().\n Since 2.10\n Returns: TRUE if the status icon is visible\n\t \n",
"line" : 887}
,
{
"name" : "setBlinking",
"kind" : "function",
"protection" : "public",
"type" : "void(int blinking)",
"comment" : "\n Warning\n gtk_status_icon_set_blinking has been deprecated since version 2.22 and should not be used in newly-written code. This function will be removed in GTK+ 3\n Makes the status icon start or stop blinking.\n Note that blinking user interface elements may be problematic\n for some users, and thus may be turned off, in which case\n this setting has no effect.\n Since 2.10\n Params:\n blinking = TRUE to turn blinking on, FALSE to turn it off\n\t \n",
"line" : 904}
,
{
"name" : "getBlinking",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Warning\n gtk_status_icon_get_blinking has been deprecated since version 2.22 and should not be used in newly-written code. This function will be removed in GTK+ 3\n Returns whether the icon is blinking, see\n gtk_status_icon_set_blinking().\n Since 2.10\n Returns: TRUE if the icon is blinking\n\t \n",
"line" : 918}
,
{
"name" : "isEmbedded",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the status icon is embedded in a notification\n area.\n Since 2.10\n Returns: TRUE if the status icon is embedded in a notification area.\n\t \n",
"line" : 930}
,
{
"name" : "positionMenu",
"kind" : "function",
"protection" : "public",
"type" : "void(Menu menu, out int x, out int y, out int pushIn, void* userData)",
"comment" : "\n Menu positioning function to use with gtk_menu_popup()\n to position menu aligned to the status icon user_data.\n Since 2.10\n Params:\n menu = the GtkMenu\n x = return location for the x position\n y = return location for the y position\n pushIn = whether the first menu item should be offset (pushed in) to be\n aligned with the menu popup position (only useful for GtkOptionMenu).\n userData = the status icon to position the menu on\n\t \n",
"line" : 948}
,
{
"name" : "getGeometry",
"kind" : "function",
"protection" : "public",
"type" : "int(out Screen screen, out GdkRectangle area, out GtkOrientation orientation)",
"comment" : "\n Obtains information about the location of the status icon\n on screen. This information can be used to e.g. position\n popups like notification bubbles.\n See gtk_status_icon_position_menu() for a more convenient\n alternative for positioning menus.\n Note that some platforms do not allow GTK+ to provide\n this information, and even on platforms that do allow it,\n the information is not reliable unless the status icon\n is embedded in a notification area, see\n gtk_status_icon_is_embedded().\n Since 2.10\n Params:\n screen = return location for the screen, or NULL if the\n information is not needed. [out][transfer none][allow-none]\n area = return location for the area occupied by the status\n icon, or NULL. [out][allow-none]\n orientation = return location for the orientation of the panel\n in which the status icon is embedded, or NULL. A panel\n at the top or bottom of the screen is horizontal, a panel\n at the left or right is vertical. [out][allow-none]\n Returns: TRUE if the location information has been filled in\n\t \n",
"line" : 977}
,
{
"name" : "getX11_WindowId",
"kind" : "function",
"protection" : "public",
"type" : "uint()",
"comment" : "\n This function is only useful on the X11\/freedesktop.org platform.\n It returns a window ID for the widget in the underlying\n status icon implementation. This is useful for the Galago\n notification service, which can send a window ID in the protocol\n in order for the server to position notification windows\n pointing to a status icon reliably.\n This function is not intended for other use cases which are\n more likely to be met by one of the non-X11 specific methods, such\n as gtk_status_icon_position_menu().\n Since 2.14\n Returns: An 32 bit unsigned integer identifier for the underlying X11 Window\n\t \n",
"line" : 1001}
]
}
]
}
,
{
"name" : "gtk.StockItem",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/StockItem.d",
"members" : [
{
"name" : "StockItem",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n Stock items represent commonly-used menu or toolbar items such as\n \"Open\" or \"Exit\". Each stock item is identified by a stock ID;\n stock IDs are just strings, but macros such as GTK_STOCK_OPEN are\n provided to avoid typing mistakes in the strings.\n Applications can register their own stock items in addition to those\n built-in to GTK+.\n Each stock ID can be associated with a GtkStockItem, which contains\n the user-visible label, keyboard accelerator, and translation domain\n of the menu or toolbar item; and\/or with an icon stored in a\n GtkIconFactory. See GtkIconFactory for\n more information on stock icons. The connection between a\n GtkStockItem and stock icons is purely conventional (by virtue of\n using the same stock ID); it's possible to register a stock item but\n no icon, and vice versa. Stock icons may have a RTL variant which gets\n used for right-to-left locales.\n \n",
"line" : 92,
"base" : "Object",
"members" : [
{
"name" : "gtkStockItem",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkStockItem*",
"comment" : " the main Gtk struct \n",
"line" : 95}
,
{
"name" : "getStockItemStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkStockItem*()",
"line" : 98}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 105}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "StockItem(GtkStockItem* gtkStockItem)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 113}
,
{
"name" : "add",
"kind" : "function",
"protection" : "public",
"type" : "void(uint nItems)",
"comment" : "\n\t \n\n Registers each of the stock items in items. If an item already\n exists with the same stock ID as one of the items, the old item\n gets replaced. The stock items are copied, so GTK+ does not hold\n any pointer into items and items can be freed. Use\n gtk_stock_add_static() if items is persistent and GTK+ need not\n copy the array.\n Params:\n nItems = number of GtkStockItem in items\n\t \n",
"line" : 136}
,
{
"name" : "addStatic",
"kind" : "function",
"protection" : "public",
"type" : "void(uint nItems)",
"comment" : "\n Same as gtk_stock_add(), but doesn't copy items, so\n items must persist until application exit.\n Params:\n nItems = number of items\n\t \n",
"line" : 148}
,
{
"name" : "itemCopy",
"kind" : "function",
"protection" : "public",
"type" : "StockItem()",
"comment" : "\n Copies a stock item, mostly useful for language bindings and not in applications.\n Params:\n item = a GtkStockItem\n Returns: a new GtkStockItem\n\t \n",
"line" : 160}
,
{
"name" : "itemFree",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Frees a stock item allocated on the heap, such as one returned by\n gtk_stock_item_copy(). Also frees the fields inside the stock item,\n if they are not NULL.\n Params:\n item = a GtkStockItem\n\t \n",
"line" : 178}
,
{
"name" : "listIds",
"kind" : "function",
"protection" : "public",
"type" : "ListSG()",
"comment" : "\n Retrieves a list of all known stock IDs added to a GtkIconFactory\n or registered with gtk_stock_add(). The list must be freed with g_slist_free(),\n and each string in the list must be freed with g_free().\n Returns: a list of known stock IDs. [element-type utf8][transfer full]\n\t \n",
"line" : 190}
,
{
"name" : "lookup",
"kind" : "function",
"protection" : "public",
"type" : "int(string stockId, StockItem item)",
"comment" : "\n Fills item with the registered values for stock_id, returning TRUE\n if stock_id was known.\n Params:\n stockId = a stock item name\n item = stock item to initialize with values. [out]\n Returns: TRUE if item was initialized\n\t \n",
"line" : 209}
,
{
"name" : "setTranslateFunc",
"kind" : "function",
"protection" : "public",
"type" : "void(string domain, extern (C) char* function(char*, void*) func, void* data, extern (C) void function(void* cbData) notify)",
"comment" : "\n Sets a function to be used for translating the label of\n a stock item.\n If no function is registered for a translation domain,\n g_dgettext() is used.\n The function is used for all stock items whose\n translation_domain matches domain. Note that it is possible\n to use strings different from the actual gettext translation domain\n of your application for this, as long as your GtkTranslateFunc uses\n the correct domain when calling dgettext(). This can be useful, e.g.\n Since 2.8\n Params:\n domain = the translation domain for which func shall be used\n func = a GtkTranslateFunc\n data = data to pass to func\n notify = a GDestroyNotify that is called when data is\n no longer needed\n\t \n",
"line" : 233}
]
}
]
}
,
{
"name" : "gtk.Style",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Style.d",
"members" : [
{
"name" : "Style",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n \n",
"line" : 110,
"base" : "ObjectG",
"members" : [
{
"name" : "gtkStyle",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkStyle*",
"comment" : " the main Gtk struct \n",
"line" : 114}
,
{
"name" : "getStyleStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkStyle*()",
"line" : 117}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 124}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Style(GtkStyle* gtkStyle)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 132}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 150}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 158}
,
{
"name" : "onRealizeListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Style)[]",
"line" : 160}
,
{
"name" : "addOnRealize",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Style) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when the style has been initialized for a particular\n colormap and depth. Connecting to this signal is probably seldom\n useful since most of the time applications and widgets only\n deal with styles that have been already realized.\n Since 2.4\n\t \n",
"line" : 168}
,
{
"name" : "callBackRealize",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkStyle* styleStruct, Style style)",
"line" : 183}
,
{
"name" : "onUnrealizeListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Style)[]",
"line" : 191}
,
{
"name" : "addOnUnrealize",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Style) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when the aspects of the style specific to a particular colormap\n and depth are being cleaned up. A connection to this signal can be useful\n if a widget wants to cache objects like a GdkGC as object data on GtkStyle.\n This signal provides a convenient place to free such cached objects.\n Since 2.4\n\t \n",
"line" : 199}
,
{
"name" : "callBackUnrealize",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkStyle* styleStruct, Style style)",
"line" : 214}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Style()",
"comment" : "\n Creates a new GtkStyle.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 227}
,
{
"name" : "copy",
"kind" : "function",
"protection" : "public",
"type" : "Style()",
"comment" : "\n Creates a copy of the passed in GtkStyle object.\n Returns: a copy of style. [transfer full]\n\t \n",
"line" : 242}
,
{
"name" : "attach",
"kind" : "function",
"protection" : "public",
"type" : "Style(Window window)",
"comment" : "\n Attaches a style to a window; this process allocates the\n colors and creates the GC's for the style - it specializes\n it to a particular visual and colormap. The process may\n involve the creation of a new style if the style has already\n been attached to a window with a different style and colormap.\n Since this function may return a new object, you have to use it\n Params:\n window = a GdkWindow.\n Returns: Either style, or a newly-created GtkStyle. If the style is newly created, the style parameter will be unref'ed, and the new style will have a reference count belonging to the caller.\n\t \n",
"line" : 264}
,
{
"name" : "detach",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Detaches a style from a window. If the style is not attached\n to any windows anymore, it is unrealized. See gtk_style_attach().\n\t \n",
"line" : 279}
,
{
"name" : "setBackground",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType)",
"comment" : "\n Sets the background of window to the background color or pixmap\n specified by style for the given state.\n Params:\n window = a GdkWindow\n stateType = a state\n\t \n",
"line" : 292}
,
{
"name" : "applyDefaultBackground",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, int setBg, GtkStateType stateType, Rectangle area, int x, int y, int width, int height)",
"comment" : "\n Params:\n area = . [allow-none]\n\t \n",
"line" : 302}
,
{
"name" : "lookupColor",
"kind" : "function",
"protection" : "public",
"type" : "int(string colorName, Color color)",
"comment" : "\n Looks up color_name in the style's logical color mappings,\n filling in color and returning TRUE if found, otherwise\n returning FALSE. Do not cache the found mapping, because\n it depends on the GtkStyle and might change when a theme\n switch occurs.\n Since 2.10\n Params:\n colorName = the name of the logical color to look up\n color = the GdkColor to fill in. [out]\n Returns: TRUE if the mapping was found.\n\t \n",
"line" : 320}
,
{
"name" : "lookupIconSet",
"kind" : "function",
"protection" : "public",
"type" : "IconSet(string stockId)",
"comment" : "\n Looks up stock_id in the icon factories associated with style\n and the default icon factory, returning an icon set if found,\n otherwise NULL.\n Params:\n stockId = an icon name\n Returns: icon set of stock_id. [transfer none]\n\t \n",
"line" : 334}
,
{
"name" : "renderIcon",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf(IconSource source, GtkTextDirection direction, GtkStateType state, GtkIconSize size, Widget widget, string detail)",
"comment" : "\n Renders the icon specified by source at the given size\n according to the given parameters and returns the result in a\n pixbuf.\n Params:\n source = the GtkIconSource specifying the icon to render\n direction = a text direction\n state = a state\n size = (type int) the size to render the icon at. A size of\n (GtkIconSize)-1 means render at the size of the source and\n don't scale.\n widget = the widget. [allow-none]\n detail = a style detail. [allow-none]\n Returns: a newly-created GdkPixbuf containing the rendered icon. [transfer full]\n\t \n",
"line" : 360}
,
{
"name" : "getFont",
"kind" : "function",
"protection" : "public",
"type" : "Font()",
"comment" : "\n Warning\n gtk_style_get_font is deprecated and should not be used in newly-written code.\n Gets the GdkFont to use for the given style. This is\n meant only as a replacement for direct access to style->font\n and should not be used in new code. New code should\n use style->font_desc instead.\n Returns: the GdkFont for the style. This font is owned by the style; if you want to keep around a copy, you must call gdk_font_ref().\n\t \n",
"line" : 380}
,
{
"name" : "setFont",
"kind" : "function",
"protection" : "public",
"type" : "void(Font font)",
"comment" : "\n Warning\n gtk_style_set_font is deprecated and should not be used in newly-written code.\n Sets the GdkFont to use for a given style. This is\n meant only as a replacement for direct access to style->font\n and should not be used in new code. New code should\n use style->font_desc instead.\n Params:\n font = a GdkFont, or NULL to use the GdkFont corresponding\n to style->font_desc. [allow-none]\n\t \n",
"line" : 402}
,
{
"name" : "getStyleProperty",
"kind" : "function",
"protection" : "public",
"type" : "void(GType widgetType, string propertyName, Value value)",
"comment" : "\n Queries the value of a style property corresponding to a\n widget class is in the given style.\n Since 2.16\n Params:\n widgetType = the GType of a descendant of GtkWidget\n propertyName = the name of the style property to get\n value = a GValue where the value of the property being\n queried will be stored\n\t \n",
"line" : 418}
,
{
"name" : "getValist",
"kind" : "function",
"protection" : "public",
"type" : "void(GType widgetType, string firstPropertyName, void* varArgs)",
"comment" : "\n Non-vararg variant of gtk_style_get().\n Used primarily by language bindings.\n Since 2.16\n Params:\n widgetType = the GType of a descendant of GtkWidget\n firstPropertyName = the name of the first style property to get\n varArgs = a va_list of pairs of property names and\n locations to return the property values, starting with the\n location for first_property_name.\n\t \n",
"line" : 435}
,
{
"name" : "drawHline",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, int x1, int x2, int y)",
"comment" : "\n Warning\n gtk_draw_hline has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_paint_hline() instead.\n Draws a horizontal line from (x1, y) to (x2, y) in window\n using the given style and state.\n Params:\n window = a GdkWindow\n stateType = a state\n x1 = the starting x coordinate\n x2 = the ending x coordinate\n y = the y coordinate\n\t \n",
"line" : 453}
,
{
"name" : "drawVline",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, int y1_, int y2_, int x)",
"comment" : "\n Warning\n gtk_draw_vline has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_paint_vline() instead.\n Draws a vertical line from (x, y1_) to (x, y2_) in window\n using the given style and state.\n Params:\n window = a GdkWindow\n stateType = a state\n y1_ = the starting y coordinate\n y2_ = the ending y coordinate\n x = the x coordinate\n\t \n",
"line" : 471}
,
{
"name" : "drawShadow",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, int x, int y, int width, int height)",
"comment" : "\n Warning\n gtk_draw_shadow has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_paint_shadow() instead.\n Draws a shadow around the given rectangle in window\n using the given style and state and shadow type.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = type of shadow to draw\n x = x origin of the rectangle\n y = y origin of the rectangle\n width = width of the rectangle\n height = width of the rectangle\n\t \n",
"line" : 491}
,
{
"name" : "drawPolygon",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, GdkPoint[] points, int fill)",
"comment" : "\n Warning\n gtk_draw_polygon has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_paint_polygon() instead.\n Draws a polygon on window with the given parameters.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = type of shadow to draw\n points = an array of GdkPoints\n fill = TRUE if the polygon should be filled\n\t \n",
"line" : 508}
,
{
"name" : "drawArrow",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, GtkArrowType arrowType, int fill, int x, int y, int width, int height)",
"comment" : "\n Warning\n gtk_draw_arrow has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_paint_arrow() instead.\n Draws an arrow in the given rectangle on window using the given\n parameters. arrow_type determines the direction of the arrow.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = the type of shadow to draw\n arrowType = the type of arrow to draw\n fill = TRUE if the arrow tip should be filled\n x = x origin of the rectangle to draw the arrow in\n y = y origin of the rectangle to draw the arrow in\n width = width of the rectangle to draw the arrow in\n height = height of the rectangle to draw the arrow in\n\t \n",
"line" : 530}
,
{
"name" : "drawDiamond",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, int x, int y, int width, int height)",
"comment" : "\n Warning\n gtk_draw_diamond has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_paint_diamond() instead.\n Draws a diamond in the given rectangle on window using the given\n parameters.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = the type of shadow to draw\n x = x origin of the rectangle to draw the diamond in\n y = y origin of the rectangle to draw the diamond in\n width = width of the rectangle to draw the diamond in\n height = height of the rectangle to draw the diamond in\n\t \n",
"line" : 550}
,
{
"name" : "drawString",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, int x, int y, string string)",
"comment" : "\n Warning\n gtk_draw_string has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_paint_layout() instead.\n Draws a text string on window with the given parameters.\n Params:\n window = a GdkWindow\n stateType = a state\n x = x origin\n y = y origin\n string = the string to draw\n\t \n",
"line" : 567}
,
{
"name" : "drawBox",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, int x, int y, int width, int height)",
"comment" : "\n Warning\n gtk_draw_box has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_paint_box() instead.\n Draws a box on window with the given parameters.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = the type of shadow to draw\n x = x origin of the box\n y = y origin of the box\n width = the width of the box\n height = the height of the box\n\t \n",
"line" : 586}
,
{
"name" : "drawBoxGap",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, int x, int y, int width, int height, GtkPositionType gapSide, int gapX, int gapWidth)",
"comment" : "\n Warning\n gtk_draw_box_gap has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_paint_box_gap() instead.\n Draws a box in window using the given style and state and shadow type,\n leaving a gap in one side.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = type of shadow to draw\n x = x origin of the rectangle\n y = y origin of the rectangle\n width = width of the rectangle\n height = width of the rectangle\n gapSide = side in which to leave the gap\n gapX = starting position of the gap\n gapWidth = width of the gap\n\t \n",
"line" : 609}
,
{
"name" : "drawCheck",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, int x, int y, int width, int height)",
"comment" : "\n Warning\n gtk_draw_check has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_paint_check() instead.\n Draws a check button indicator in the given rectangle on window with\n the given parameters.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = the type of shadow to draw\n x = x origin of the rectangle to draw the check in\n y = y origin of the rectangle to draw the check in\n width = the width of the rectangle to draw the check in\n height = the height of the rectangle to draw the check in\n\t \n",
"line" : 629}
,
{
"name" : "drawExtension",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, int x, int y, int width, int height, GtkPositionType gapSide)",
"comment" : "\n Warning\n gtk_draw_extension has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_paint_extension() instead.\n Draws an extension, i.e. a notebook tab.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = type of shadow to draw\n x = x origin of the extension\n y = y origin of the extension\n width = width of the extension\n height = width of the extension\n gapSide = the side on to which the extension is attached\n\t \n",
"line" : 649}
,
{
"name" : "drawFlatBox",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, int x, int y, int width, int height)",
"comment" : "\n Warning\n gtk_draw_flat_box has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_paint_flat_box() instead.\n Draws a flat box on window with the given parameters.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = the type of shadow to draw\n x = x origin of the box\n y = y origin of the box\n width = the width of the box\n height = the height of the box\n\t \n",
"line" : 668}
,
{
"name" : "drawFocus",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, int x, int y, int width, int height)",
"comment" : "\n Warning\n gtk_draw_focus has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_paint_focus() instead.\n Draws a focus indicator around the given rectangle on window using the\n given style.\n Params:\n window = a GdkWindow\n x = the x origin of the rectangle around which to draw a focus indicator\n y = the y origin of the rectangle around which to draw a focus indicator\n width = the width of the rectangle around which to draw a focus indicator\n height = the height of the rectangle around which to draw a focus indicator\n\t \n",
"line" : 686}
,
{
"name" : "drawHandle",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, int x, int y, int width, int height, GtkOrientation orientation)",
"comment" : "\n Warning\n gtk_draw_handle has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_paint_handle() instead.\n Draws a handle as used in GtkHandleBox and GtkPaned.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = type of shadow to draw\n x = x origin of the handle\n y = y origin of the handle\n width = with of the handle\n height = height of the handle\n orientation = the orientation of the handle\n\t \n",
"line" : 706}
,
{
"name" : "drawOption",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, int x, int y, int width, int height)",
"comment" : "\n Warning\n gtk_draw_option has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_paint_option() instead.\n Draws a radio button indicator in the given rectangle on window with\n the given parameters.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = the type of shadow to draw\n x = x origin of the rectangle to draw the option in\n y = y origin of the rectangle to draw the option in\n width = the width of the rectangle to draw the option in\n height = the height of the rectangle to draw the option in\n\t \n",
"line" : 726}
,
{
"name" : "drawShadowGap",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, int x, int y, int width, int height, GtkPositionType gapSide, int gapX, int gapWidth)",
"comment" : "\n Warning\n gtk_draw_shadow_gap has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_paint_shadow_gap() instead.\n Draws a shadow around the given rectangle in window\n using the given style and state and shadow type, leaving a\n gap in one side.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = type of shadow to draw\n x = x origin of the rectangle\n y = y origin of the rectangle\n width = width of the rectangle\n height = width of the rectangle\n gapSide = side in which to leave the gap\n gapX = starting position of the gap\n gapWidth = width of the gap\n\t \n",
"line" : 750}
,
{
"name" : "drawSlider",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, int x, int y, int width, int height, GtkOrientation orientation)",
"comment" : "\n Warning\n gtk_draw_slider is deprecated and should not be used in newly-written code.\n Draws a slider in the given rectangle on window using the\n given style and orientation.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = a shadow\n x = the x origin of the rectangle in which to draw a slider\n y = the y origin of the rectangle in which to draw a slider\n width = the width of the rectangle in which to draw a slider\n height = the height of the rectangle in which to draw a slider\n orientation = the orientation to be used\n\t \n",
"line" : 771}
,
{
"name" : "drawTab",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, int x, int y, int width, int height)",
"comment" : "\n Warning\n gtk_draw_tab has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_paint_tab() instead.\n Draws an option menu tab (i.e. the up and down pointing arrows)\n in the given rectangle on window using the given parameters.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = the type of shadow to draw\n x = x origin of the rectangle to draw the tab in\n y = y origin of the rectangle to draw the tab in\n width = the width of the rectangle to draw the tab in\n height = the height of the rectangle to draw the tab in\n\t \n",
"line" : 791}
,
{
"name" : "drawExpander",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, int x, int y, GtkExpanderStyle expanderStyle)",
"comment" : "\n Warning\n gtk_draw_expander has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_paint_expander() instead.\n Draws an expander as used in GtkTreeView.\n Params:\n window = a GdkWindow\n stateType = a state\n x = the x position to draw the expander at\n y = the y position to draw the expander at\n expanderStyle = the style to draw the expander in\n\t \n",
"line" : 808}
,
{
"name" : "drawLayout",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, int useText, int x, int y, PgLayout layout)",
"comment" : "\n Warning\n gtk_draw_layout is deprecated and should not be used in newly-written code.\n Draws a layout on window using the given parameters.\n Params:\n window = a GdkWindow\n stateType = a state\n useText = whether to use the text or foreground\n graphics context of style\n x = x origin\n y = y origin\n layout = the layout to draw\n\t \n",
"line" : 827}
,
{
"name" : "drawResizeGrip",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GdkWindowEdge edge, int x, int y, int width, int height)",
"comment" : "\n Warning\n gtk_draw_resize_grip has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_paint_resize_grip() instead.\n Draws a resize grip in the given rectangle on window using the given\n parameters.\n Params:\n window = a GdkWindow\n stateType = a state\n edge = the edge in which to draw the resize grip\n x = the x origin of the rectangle in which to draw the resize grip\n y = the y origin of the rectangle in which to draw the resize grip\n width = the width of the rectangle in which to draw the resize grip\n height = the height of the rectangle in which to draw the resize grip\n\t \n",
"line" : 847}
,
{
"name" : "paintArrow",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, Rectangle area, Widget widget, string detail, GtkArrowType arrowType, int fill, int x, int y, int width, int height)",
"comment" : "\n Draws an arrow in the given rectangle on window using the given\n parameters. arrow_type determines the direction of the arrow.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = the type of shadow to draw\n area = clip rectangle, or NULL if the\n output should not be clipped. [allow-none]\n widget = the widget. [allow-none]\n detail = a style detail. [allow-none]\n arrowType = the type of arrow to draw\n fill = TRUE if the arrow tip should be filled\n x = x origin of the rectangle to draw the arrow in\n y = y origin of the rectangle to draw the arrow in\n width = width of the rectangle to draw the arrow in\n height = height of the rectangle to draw the arrow in\n\t \n",
"line" : 871}
,
{
"name" : "paintBox",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, Rectangle area, Widget widget, string detail, int x, int y, int width, int height)",
"comment" : "\n Draws a box on window with the given parameters.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = the type of shadow to draw\n area = clip rectangle, or NULL if the\n output should not be clipped. [allow-none]\n widget = the widget. [allow-none]\n detail = a style detail. [allow-none]\n x = x origin of the box\n y = y origin of the box\n width = the width of the box\n height = the height of the box\n\t \n",
"line" : 892}
,
{
"name" : "paintBoxGap",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, Rectangle area, Widget widget, string detail, int x, int y, int width, int height, GtkPositionType gapSide, int gapX, int gapWidth)",
"comment" : "\n Draws a box in window using the given style and state and shadow type,\n leaving a gap in one side.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = type of shadow to draw\n area = clip rectangle, or NULL if the\n output should not be clipped. [allow-none]\n widget = the widget. [allow-none]\n detail = a style detail. [allow-none]\n x = x origin of the rectangle\n y = y origin of the rectangle\n width = width of the rectangle\n height = width of the rectangle\n gapSide = side in which to leave the gap\n gapX = starting position of the gap\n gapWidth = width of the gap\n\t \n",
"line" : 917}
,
{
"name" : "paintCheck",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, Rectangle area, Widget widget, string detail, int x, int y, int width, int height)",
"comment" : "\n Draws a check button indicator in the given rectangle on window with\n the given parameters.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = the type of shadow to draw\n area = clip rectangle, or NULL if the\n output should not be clipped. [allow-none]\n widget = the widget. [allow-none]\n detail = a style detail. [allow-none]\n x = x origin of the rectangle to draw the check in\n y = y origin of the rectangle to draw the check in\n width = the width of the rectangle to draw the check in\n height = the height of the rectangle to draw the check in\n\t \n",
"line" : 939}
,
{
"name" : "paintDiamond",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, Rectangle area, Widget widget, string detail, int x, int y, int width, int height)",
"comment" : "\n Draws a diamond in the given rectangle on window using the given\n parameters.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = the type of shadow to draw\n area = clip rectangle, or NULL if the\n output should not be clipped. [allow-none]\n widget = the widget. [allow-none]\n detail = a style detail. [allow-none]\n x = x origin of the rectangle to draw the diamond in\n y = y origin of the rectangle to draw the diamond in\n width = width of the rectangle to draw the diamond in\n height = height of the rectangle to draw the diamond in\n\t \n",
"line" : 961}
,
{
"name" : "paintExtension",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, Rectangle area, Widget widget, string detail, int x, int y, int width, int height, GtkPositionType gapSide)",
"comment" : "\n Draws an extension, i.e. a notebook tab.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = type of shadow to draw\n area = clip rectangle, or NULL if the\n output should not be clipped. [allow-none]\n widget = the widget. [allow-none]\n detail = a style detail. [allow-none]\n x = x origin of the extension\n y = y origin of the extension\n width = width of the extension\n height = width of the extension\n gapSide = the side on to which the extension is attached\n\t \n",
"line" : 983}
,
{
"name" : "paintFlatBox",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, Rectangle area, Widget widget, string detail, int x, int y, int width, int height)",
"comment" : "\n Draws a flat box on window with the given parameters.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = the type of shadow to draw\n area = clip rectangle, or NULL if the\n output should not be clipped. [allow-none]\n widget = the widget. [allow-none]\n detail = a style detail. [allow-none]\n x = x origin of the box\n y = y origin of the box\n width = the width of the box\n height = the height of the box\n\t \n",
"line" : 1004}
,
{
"name" : "paintFocus",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, Rectangle area, Widget widget, string detail, int x, int y, int width, int height)",
"comment" : "\n Draws a focus indicator around the given rectangle on window using the\n given style.\n Params:\n window = a GdkWindow\n stateType = a state\n area = clip rectangle, or NULL if the\n output should not be clipped. [allow-none]\n widget = the widget. [allow-none]\n detail = a style detail. [allow-none]\n x = the x origin of the rectangle around which to draw a focus indicator\n y = the y origin of the rectangle around which to draw a focus indicator\n width = the width of the rectangle around which to draw a focus indicator\n height = the height of the rectangle around which to draw a focus indicator\n\t \n",
"line" : 1025}
,
{
"name" : "paintHandle",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, Rectangle area, Widget widget, string detail, int x, int y, int width, int height, GtkOrientation orientation)",
"comment" : "\n Draws a handle as used in GtkHandleBox and GtkPaned.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = type of shadow to draw\n area = clip rectangle, or NULL if the\n output should not be clipped. [allow-none]\n widget = the widget. [allow-none]\n detail = a style detail. [allow-none]\n x = x origin of the handle\n y = y origin of the handle\n width = with of the handle\n height = height of the handle\n orientation = the orientation of the handle\n\t \n",
"line" : 1047}
,
{
"name" : "paintHline",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, Rectangle area, Widget widget, string detail, int x1, int x2, int y)",
"comment" : "\n Draws a horizontal line from (x1, y) to (x2, y) in window\n using the given style and state.\n Params:\n window = a GdkWindow\n stateType = a state\n area = rectangle to which the output is clipped, or NULL if the\n output should not be clipped. [allow-none]\n widget = the widget. [allow-none]\n detail = a style detail. [allow-none]\n x1 = the starting x coordinate\n x2 = the ending x coordinate\n y = the y coordinate\n\t \n",
"line" : 1067}
,
{
"name" : "paintOption",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, Rectangle area, Widget widget, string detail, int x, int y, int width, int height)",
"comment" : "\n Draws a radio button indicator in the given rectangle on window with\n the given parameters.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = the type of shadow to draw\n area = clip rectangle, or NULL if the\n output should not be clipped. [allow-none]\n widget = the widget. [allow-none]\n detail = a style detail. [allow-none]\n x = x origin of the rectangle to draw the option in\n y = y origin of the rectangle to draw the option in\n width = the width of the rectangle to draw the option in\n height = the height of the rectangle to draw the option in\n\t \n",
"line" : 1089}
,
{
"name" : "paintPolygon",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, Rectangle area, Widget widget, string detail, GdkPoint[] points, int nPoints, int fill)",
"comment" : "\n Draws a polygon on window with the given parameters.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = type of shadow to draw\n area = clip rectangle, or NULL if the\n output should not be clipped. [allow-none]\n widget = the widget. [allow-none]\n detail = a style detail. [allow-none]\n points = an array of GdkPoints\n nPoints = length of points\n fill = TRUE if the polygon should be filled\n\t \n",
"line" : 1109}
,
{
"name" : "paintShadow",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, Rectangle area, Widget widget, string detail, int x, int y, int width, int height)",
"comment" : "\n Draws a shadow around the given rectangle in window\n using the given style and state and shadow type.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = type of shadow to draw\n area = clip rectangle or NULL if the\n output should not be clipped. [allow-none]\n widget = the widget. [allow-none]\n detail = a style detail. [allow-none]\n x = x origin of the rectangle\n y = y origin of the rectangle\n width = width of the rectangle\n height = width of the rectangle\n\t \n",
"line" : 1131}
,
{
"name" : "paintShadowGap",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, Rectangle area, Widget widget, string detail, int x, int y, int width, int height, GtkPositionType gapSide, int gapX, int gapWidth)",
"comment" : "\n Draws a shadow around the given rectangle in window\n using the given style and state and shadow type, leaving a\n gap in one side.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = type of shadow to draw\n area = clip rectangle, or NULL if the\n output should not be clipped. [allow-none]\n widget = the widget. [allow-none]\n detail = a style detail. [allow-none]\n x = x origin of the rectangle\n y = y origin of the rectangle\n width = width of the rectangle\n height = width of the rectangle\n gapSide = side in which to leave the gap\n gapX = starting position of the gap\n gapWidth = width of the gap\n\t \n",
"line" : 1157}
,
{
"name" : "paintSlider",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, Rectangle area, Widget widget, string detail, int x, int y, int width, int height, GtkOrientation orientation)",
"comment" : "\n Draws a slider in the given rectangle on window using the\n given style and orientation.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = a shadow\n area = clip rectangle, or NULL if the\n output should not be clipped. [allow-none]\n widget = the widget. [allow-none]\n detail = a style detail. [allow-none]\n x = the x origin of the rectangle in which to draw a slider\n y = the y origin of the rectangle in which to draw a slider\n width = the width of the rectangle in which to draw a slider\n height = the height of the rectangle in which to draw a slider\n orientation = the orientation to be used\n\t \n",
"line" : 1180}
,
{
"name" : "paintSpinner",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, Rectangle area, Widget widget, string detail, uint step, int x, int y, int width, int height)",
"comment" : "\n Draws a spinner on window using the given parameters.\n Since 2.20\n Params:\n window = a GdkWindow\n stateType = a state\n area = clip rectangle, or NULL if the\n output should not be clipped. [allow-none]\n widget = the widget (may be NULL). [allow-none]\n detail = a style detail (may be NULL). [allow-none]\n step = the nth step, a value between 0 and \"num-steps\"\n x = the x origin of the rectangle in which to draw the spinner\n y = the y origin of the rectangle in which to draw the spinner\n width = the width of the rectangle in which to draw the spinner\n height = the height of the rectangle in which to draw the spinner\n\t \n",
"line" : 1202}
,
{
"name" : "paintString",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, Rectangle area, Widget widget, string detail, int x, int y, string string)",
"comment" : "\n Warning\n gtk_paint_string has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_paint_layout() instead.\n Draws a text string on window with the given parameters.\n Params:\n window = a GdkWindow\n stateType = a state\n area = clip rectangle, or NULL if the\n output should not be clipped. [allow-none]\n widget = the widget. [allow-none]\n detail = a style detail. [allow-none]\n x = x origin\n y = y origin\n string = the string to draw\n\t \n",
"line" : 1223}
,
{
"name" : "paintTab",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, GtkShadowType shadowType, Rectangle area, Widget widget, string detail, int x, int y, int width, int height)",
"comment" : "\n Draws an option menu tab (i.e. the up and down pointing arrows)\n in the given rectangle on window using the given parameters.\n Params:\n window = a GdkWindow\n stateType = a state\n shadowType = the type of shadow to draw\n area = clip rectangle, or NULL if the\n output should not be clipped. [allow-none]\n widget = the widget. [allow-none]\n detail = a style detail. [allow-none]\n x = x origin of the rectangle to draw the tab in\n y = y origin of the rectangle to draw the tab in\n width = the width of the rectangle to draw the tab in\n height = the height of the rectangle to draw the tab in\n\t \n",
"line" : 1245}
,
{
"name" : "paintVline",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, Rectangle area, Widget widget, string detail, int y1_, int y2_, int x)",
"comment" : "\n Draws a vertical line from (x, y1_) to (x, y2_) in window\n using the given style and state.\n Params:\n window = a GdkWindow\n stateType = a state\n area = rectangle to which the output is clipped, or NULL if the\n output should not be clipped. [allow-none]\n widget = the widget. [allow-none]\n detail = a style detail. [allow-none]\n y1_ = the starting y coordinate\n y2_ = the ending y coordinate\n x = the x coordinate\n\t \n",
"line" : 1265}
,
{
"name" : "paintExpander",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, Rectangle area, Widget widget, string detail, int x, int y, GtkExpanderStyle expanderStyle)",
"comment" : "\n Draws an expander as used in GtkTreeView. x and y specify the\n center the expander. The size of the expander is determined by the\n \"expander-size\" style property of widget. (If widget is not\n specified or doesn't have an \"expander-size\" property, an\n unspecified default size will be used, since the caller doesn't\n have sufficient information to position the expander, this is\n likely not useful.) The expander is expander_size pixels tall\n in the collapsed position and expander_size pixels wide in the\n expanded position.\n Params:\n window = a GdkWindow\n stateType = a state\n area = clip rectangle, or NULL if the\n output should not be clipped. [allow-none]\n widget = the widget. [allow-none]\n detail = a style detail. [allow-none]\n x = the x position to draw the expander at\n y = the y position to draw the expander at\n expanderStyle = the style to draw the expander in; determines\n whether the expander is collapsed, expanded, or in an\n intermediate state.\n\t \n",
"line" : 1294}
,
{
"name" : "paintLayout",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, int useText, Rectangle area, Widget widget, string detail, int x, int y, PgLayout layout)",
"comment" : "\n Draws a layout on window using the given parameters.\n Params:\n window = a GdkWindow\n stateType = a state\n useText = whether to use the text or foreground\n graphics context of style\n area = clip rectangle, or NULL if the\n output should not be clipped. [allow-none]\n widget = the widget. [allow-none]\n detail = a style detail. [allow-none]\n x = x origin\n y = y origin\n layout = the layout to draw\n\t \n",
"line" : 1315}
,
{
"name" : "paintResizeGrip",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, GtkStateType stateType, Rectangle area, Widget widget, string detail, GdkWindowEdge edge, int x, int y, int width, int height)",
"comment" : "\n Draws a resize grip in the given rectangle on window using the given\n parameters.\n Params:\n window = a GdkWindow\n stateType = a state\n area = clip rectangle, or NULL if the\n output should not be clipped. [allow-none]\n widget = the widget. [allow-none]\n detail = a style detail. [allow-none]\n edge = the edge in which to draw the resize grip\n x = the x origin of the rectangle in which to draw the resize grip\n y = the y origin of the rectangle in which to draw the resize grip\n width = the width of the rectangle in which to draw the resize grip\n height = the height of the rectangle in which to draw the resize grip\n\t \n",
"line" : 1337}
,
{
"name" : "drawInsertionCursor",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, Drawable drawable, Rectangle area, Rectangle location, int isPrimary, GtkTextDirection direction, int drawArrow)",
"comment" : "\n Draws a text caret on drawable at location. This is not a style function\n but merely a convenience function for drawing the standard cursor shape.\n Since 2.4\n Params:\n widget = a GtkWidget\n drawable = a GdkDrawable\n area = rectangle to which the output is clipped, or NULL if the\n output should not be clipped. [allow-none]\n location = location where to draw the cursor (location->width is ignored)\n isPrimary = if the cursor should be the primary cursor color.\n direction = whether the cursor is left-to-right or\n right-to-left. Should never be GTK_TEXT_DIR_NONE\n drawArrow = TRUE to draw a directional arrow on the\n cursor. Should be FALSE unless the cursor is split.\n\t \n",
"line" : 1359}
]
}
]
}
,
{
"name" : "gtk.Table",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Table.d",
"members" : [
{
"name" : "Table",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkTable functions allow the programmer to arrange widgets in rows and\n columns, making it easy to align many widgets next to each other,\n horizontally and vertically.\n Tables are created with a call to gtk_table_new(), the size of which can\n later be changed with gtk_table_resize().\n Widgets can be added to a table using gtk_table_attach() or the more\n convenient (but slightly less flexible) gtk_table_attach_defaults().\n To alter the space next to a specific row, use gtk_table_set_row_spacing(),\n and for a column, gtk_table_set_col_spacing().\n The gaps between all rows or columns can be changed by calling\n gtk_table_set_row_spacings() or gtk_table_set_col_spacings() respectively.\n gtk_table_set_homogeneous(), can be used to set whether all cells in the\n table will resize themselves to the size of the largest widget in the table.\n \n",
"line" : 86,
"base" : "Container",
"members" : [
{
"name" : "gtkTable",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkTable*",
"comment" : " the main Gtk struct \n",
"line" : 90}
,
{
"name" : "getTableStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkTable*()",
"line" : 93}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 100}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Table(GtkTable* gtkTable)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 108}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 126}
,
{
"name" : "row",
"kind" : "variable",
"protection" : "public",
"type" : "int",
"line" : 132}
,
{
"name" : "col",
"kind" : "variable",
"protection" : "public",
"type" : "int",
"line" : 133}
,
{
"name" : "maxRows",
"kind" : "variable",
"protection" : "public",
"type" : "int",
"line" : 134}
,
{
"name" : "maxCols",
"kind" : "variable",
"protection" : "public",
"type" : "int",
"line" : 135}
,
{
"name" : "defaultXOption",
"kind" : "variable",
"protection" : "public",
"type" : "GtkAttachOptions",
"line" : 137}
,
{
"name" : "defaultYOption",
"kind" : "variable",
"protection" : "public",
"type" : "GtkAttachOptions",
"line" : 138}
,
{
"name" : "removeAll",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Removes all children and resizes the table to 1,1\n\t \n",
"line" : 143}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Table(uint rows, uint columns, int homogeneous)",
"comment" : "\n Used to create a new table widget. An initial size must be given by\n specifying how many rows and columns the table should have, although\n this can be changed later with gtk_table_resize(). rows and columns\n must both be in the range 0 .. 65535.\n Params:\n  rows = The number of rows the new table should have.\n  columns = The number of columns the new table should have.\n  homogeneous = If set to TRUE, all table cells are resized to the size of the cell\n  containing the largest widget.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 161}
,
{
"name" : "attach",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child)",
"comment" : "\n Attach a new widget creating a new row if necessary\n\t \n",
"line" : 183}
,
{
"name" : "resize",
"kind" : "function",
"protection" : "public",
"type" : "void(uint rows, uint columns)",
"comment" : "\n\t \n\n If you need to change a table's size after it has been created, this function allows you to do so.\n Params:\n rows = The new number of rows.\n columns = The new number of columns.\n\t \n",
"line" : 205}
,
{
"name" : "attach",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, uint leftAttach, uint rightAttach, uint topAttach, uint bottomAttach, GtkAttachOptions xoptions, GtkAttachOptions yoptions, uint xpadding, uint ypadding)",
"comment" : "\n Adds a widget to a table. The number of 'cells' that a widget will occupy is\n specified by left_attach, right_attach, top_attach and bottom_attach.\n These each represent the leftmost, rightmost, uppermost and lowest column\n and row numbers of the table. (Columns and rows are indexed from zero).\n Params:\n child = The widget to add.\n leftAttach = the column number to attach the left side of a child widget to.\n rightAttach = the column number to attach the right side of a child widget to.\n topAttach = the row number to attach the top of a child widget to.\n bottomAttach = the row number to attach the bottom of a child widget to.\n xoptions = Used to specify the properties of the child widget when the table is resized.\n yoptions = The same as xoptions, except this field determines behaviour of vertical resizing.\n xpadding = An integer value specifying the padding on the left and right of the widget being added to the table.\n ypadding = The amount of padding above and below the child widget.\n\t \n",
"line" : 227}
,
{
"name" : "attachDefaults",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, uint leftAttach, uint rightAttach, uint topAttach, uint bottomAttach)",
"comment" : "\n As there are many options associated with gtk_table_attach(), this convenience function provides the programmer with a means to add children to a table with identical padding and expansion options. The values used for the GtkAttachOptions are GTK_EXPAND | GTK_FILL, and the padding is set to 0.\n Params:\n widget = The child widget to add.\n leftAttach = The column number to attach the left side of the child widget to.\n rightAttach = The column number to attach the right side of the child widget to.\n topAttach = The row number to attach the top of the child widget to.\n bottomAttach = The row number to attach the bottom of the child widget to.\n\t \n",
"line" : 242}
,
{
"name" : "setRowSpacing",
"kind" : "function",
"protection" : "public",
"type" : "void(uint row, uint spacing)",
"comment" : "\n Changes the space between a given table row and the subsequent row.\n Params:\n row = row number whose spacing will be changed.\n spacing = number of pixels that the spacing should take up.\n\t \n",
"line" : 254}
,
{
"name" : "setColSpacing",
"kind" : "function",
"protection" : "public",
"type" : "void(uint column, uint spacing)",
"comment" : "\n Alters the amount of space between a given table column and the following\n column.\n Params:\n column = the column whose spacing should be changed.\n spacing = number of pixels that the spacing should take up.\n\t \n",
"line" : 267}
,
{
"name" : "setRowSpacings",
"kind" : "function",
"protection" : "public",
"type" : "void(uint spacing)",
"comment" : "\n Sets the space between every row in table equal to spacing.\n Params:\n spacing = the number of pixels of space to place between every row in the table.\n\t \n",
"line" : 278}
,
{
"name" : "setColSpacings",
"kind" : "function",
"protection" : "public",
"type" : "void(uint spacing)",
"comment" : "\n Sets the space between every column in table equal to spacing.\n Params:\n spacing = the number of pixels of space to place between every column in the table.\n\t \n",
"line" : 289}
,
{
"name" : "setHomogeneous",
"kind" : "function",
"protection" : "public",
"type" : "void(int homogeneous)",
"comment" : "\n Changes the homogenous property of table cells, ie. whether all cells are an equal size or not.\n Params:\n homogeneous = Set to TRUE to ensure all table cells are the same size. Set\n to FALSE if this is not your desired behaviour.\n\t \n",
"line" : 301}
,
{
"name" : "getDefaultRowSpacing",
"kind" : "function",
"protection" : "public",
"type" : "uint()",
"comment" : "\n Gets the default row spacing for the table. This is\n the spacing that will be used for newly added rows.\n (See gtk_table_set_row_spacings())\n Returns: the default row spacing\n\t \n",
"line" : 313}
,
{
"name" : "getHomogeneous",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the table cells are all constrained to the same\n width and height. (See gtk_table_set_homogenous())\n Returns: TRUE if the cells are all constrained to the same size\n\t \n",
"line" : 324}
,
{
"name" : "getRowSpacing",
"kind" : "function",
"protection" : "public",
"type" : "uint(uint row)",
"comment" : "\n Gets the amount of space between row row, and\n row row + 1. See gtk_table_set_row_spacing().\n Params:\n row = a row in the table, 0 indicates the first row\n Returns: the row spacing\n\t \n",
"line" : 337}
,
{
"name" : "getColSpacing",
"kind" : "function",
"protection" : "public",
"type" : "uint(uint column)",
"comment" : "\n Gets the amount of space between column col, and\n column col + 1. See gtk_table_set_col_spacing().\n Params:\n column = a column in the table, 0 indicates the first column\n Returns: the column spacing\n\t \n",
"line" : 350}
,
{
"name" : "getDefaultColSpacing",
"kind" : "function",
"protection" : "public",
"type" : "uint()",
"comment" : "\n Gets the default column spacing for the table. This is\n the spacing that will be used for newly added columns.\n (See gtk_table_set_col_spacings())\n Returns: the default column spacing\n\t \n",
"line" : 362}
,
{
"name" : "getSize",
"kind" : "function",
"protection" : "public",
"type" : "void(out uint rows, out uint columns)",
"comment" : "\n Since 2.22\n Params:\n rows = return location for the number of\n rows, or NULL. [out][allow-none]\n columns = return location for the number\n of columns, or NULL. [out][allow-none]\n\t \n",
"line" : 376}
]
}
]
}
,
{
"name" : "gtk.TargetList",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TargetList.d",
"members" : [
{
"name" : "TargetList",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The selection mechanism provides the basis for different types\n of communication between processes. In particular, drag and drop and\n GtkClipboard work via selections. You will very seldom or\n never need to use most of the functions in this section directly;\n GtkClipboard provides a nicer interface to the same functionality.\n Some of the datatypes defined this section are used in\n the GtkClipboard and drag-and-drop API's as well. The\n GtkTargetEntry structure and GtkTargetList objects represent\n lists of data types that are supported when sending or\n receiving data. The GtkSelectionData object is used to\n store a chunk of data along with the data type and other\n associated information.\n \n",
"line" : 85,
"base" : "Boxed",
"members" : [
{
"name" : "gtkTargetList",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkTargetList*",
"comment" : " the main Gtk struct \n",
"line" : 89}
,
{
"name" : "getTargetListStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkTargetList*()",
"line" : 92}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 99}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TargetList(GtkTargetList* gtkTargetList)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 107}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TargetList(GtkTargetEntry[] targets)",
"comment" : "\n\t \n\n Creates a new GtkTargetList from an array of GtkTargetEntry.\n Params:\n targets = Pointer to an array of GtkTargetEntry. [array length=ntargets]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 126}
,
{
"name" : "doref",
"kind" : "function",
"protection" : "public",
"type" : "TargetList()",
"comment" : "\n Increases the reference count of a GtkTargetList by one.\n Returns: the passed in GtkTargetList.\n\t \n",
"line" : 141}
,
{
"name" : "unref",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Decreases the reference count of a GtkTargetList by one.\n If the resulting reference count is zero, frees the list.\n\t \n",
"line" : 156}
,
{
"name" : "add",
"kind" : "function",
"protection" : "public",
"type" : "void(void* target, uint flags, uint info)",
"comment" : "\n Appends another target to a GtkTargetList.\n Params:\n target = the interned atom representing the target\n flags = the flags for this target\n info = an ID that will be passed back to the application\n\t \n",
"line" : 169}
,
{
"name" : "addTable",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkTargetEntry[] targets)",
"comment" : "\n Prepends a table of GtkTargetEntry to a target list.\n Params:\n targets = the table of GtkTargetEntry. [array length=ntargets]\n\t \n",
"line" : 180}
,
{
"name" : "addTextTargets",
"kind" : "function",
"protection" : "public",
"type" : "void(uint info)",
"comment" : "\n Appends the text targets supported by GtkSelection to\n the target list. All targets are added with the same info.\n Since 2.6\n Params:\n info = an ID that will be passed back to the application\n\t \n",
"line" : 193}
,
{
"name" : "addImageTargets",
"kind" : "function",
"protection" : "public",
"type" : "void(uint info, int writable)",
"comment" : "\n Appends the image targets supported by GtkSelection to\n the target list. All targets are added with the same info.\n Since 2.6\n Params:\n info = an ID that will be passed back to the application\n writable = whether to add only targets for which GTK+ knows\n how to convert a pixbuf into the format\n\t \n",
"line" : 208}
,
{
"name" : "addUriTargets",
"kind" : "function",
"protection" : "public",
"type" : "void(uint info)",
"comment" : "\n Appends the URI targets supported by GtkSelection to\n the target list. All targets are added with the same info.\n Since 2.6\n Params:\n info = an ID that will be passed back to the application\n\t \n",
"line" : 221}
,
{
"name" : "addRichTextTargets",
"kind" : "function",
"protection" : "public",
"type" : "void(uint info, int deserializable, TextBuffer buffer)",
"comment" : "\n Appends the rich text targets registered with\n gtk_text_buffer_register_serialize_format() or\n gtk_text_buffer_register_deserialize_format() to the target list. All\n targets are added with the same info.\n Since 2.10\n Params:\n info = an ID that will be passed back to the application\n deserializable = if TRUE, then deserializable rich text formats\n will be added, serializable formats otherwise.\n buffer = a GtkTextBuffer.\n\t \n",
"line" : 239}
,
{
"name" : "remove",
"kind" : "function",
"protection" : "public",
"type" : "void(void* target)",
"comment" : "\n Removes a target from a target list.\n Params:\n target = the interned atom representing the target\n\t \n",
"line" : 250}
,
{
"name" : "find",
"kind" : "function",
"protection" : "public",
"type" : "int(void* target, out uint info)",
"comment" : "\n Looks up a given target in a GtkTargetList.\n Params:\n target = an interned atom representing the target to search for\n info = a pointer to the location to store application info for target,\n or NULL\n Returns: TRUE if the target was found, otherwise FALSE\n\t \n",
"line" : 264}
,
{
"name" : "gtkTargetTableFree",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkTargetEntry[] targets, int nTargets)",
"comment" : "\n This function frees a target table as returned by\n gtk_target_table_new_from_list()\n Since 2.10\n Params:\n targets = a GtkTargetEntry array. [array length=n_targets]\n nTargets = the number of entries in the array\n\t \n",
"line" : 278}
,
{
"name" : "gtkTargetTableNewFromList",
"kind" : "function",
"protection" : "public",
"type" : "GtkTargetEntry[]()",
"comment" : "\n This function creates an GtkTargetEntry array that contains the\n same targets as the passed list. The returned table is newly\n allocated and should be freed using gtk_target_table_free() when no\n longer needed.\n Since 2.10\n Returns: the new table. [array length=n_targets][transfer full]\n\t \n",
"line" : 292}
,
{
"name" : "gtkTargetsIncludeImage",
"kind" : "function",
"protection" : "public",
"type" : "int(void*[] targets, int writable)",
"comment" : "\n Determines if any of the targets in targets can be used to\n provide a GdkPixbuf.\n Since 2.10\n Params:\n targets = an array of GdkAtoms. [array length=n_targets]\n writable = whether to accept only targets for which GTK+ knows\n how to convert a pixbuf into the format\n Returns: TRUE if targets include a suitable target for images, otherwise FALSE.\n\t \n",
"line" : 310}
,
{
"name" : "gtkTargetsIncludeText",
"kind" : "function",
"protection" : "public",
"type" : "int(void*[] targets)",
"comment" : "\n Determines if any of the targets in targets can be used to\n provide text.\n Since 2.10\n Params:\n targets = an array of GdkAtoms. [array length=n_targets]\n Returns: TRUE if targets include a suitable target for text, otherwise FALSE.\n\t \n",
"line" : 324}
,
{
"name" : "gtkTargetsIncludeUri",
"kind" : "function",
"protection" : "public",
"type" : "int(void*[] targets)",
"comment" : "\n Determines if any of the targets in targets can be used to\n provide an uri list.\n Since 2.10\n Params:\n targets = an array of GdkAtoms. [array length=n_targets]\n Returns: TRUE if targets include a suitable target for uri lists, otherwise FALSE.\n\t \n",
"line" : 338}
,
{
"name" : "gtkTargetsIncludeRichText",
"kind" : "function",
"protection" : "public",
"type" : "int(void*[] targets, TextBuffer buffer)",
"comment" : "\n Determines if any of the targets in targets can be used to\n provide rich text.\n Since 2.10\n Params:\n targets = an array of GdkAtoms. [array length=n_targets]\n buffer = a GtkTextBuffer\n Returns: TRUE if targets include a suitable target for rich text, otherwise FALSE.\n\t \n",
"line" : 353}
]
}
]
}
,
{
"name" : "gtk.TearoffMenuItem",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TearoffMenuItem.d",
"members" : [
{
"name" : "TearoffMenuItem",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkTearoffMenuItem is a special GtkMenuItem which is used to\n tear off and reattach its menu.\n When its menu is shown normally, the GtkTearoffMenuItem is drawn as a\n dotted line indicating that the menu can be torn off. Activating it\n causes its menu to be torn off and displayed in its own window\n as a tearoff menu.\n When its menu is shown as a tearoff menu, the GtkTearoffMenuItem is drawn\n as a dotted line which has a left pointing arrow graphic indicating that\n the tearoff menu can be reattached. Activating it will erase the tearoff\n menu window.\n \n",
"line" : 79,
"base" : "MenuItem",
"members" : [
{
"name" : "gtkTearoffMenuItem",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkTearoffMenuItem*",
"comment" : " the main Gtk struct \n",
"line" : 83}
,
{
"name" : "getTearoffMenuItemStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkTearoffMenuItem*()",
"line" : 86}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 93}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TearoffMenuItem(GtkTearoffMenuItem* gtkTearoffMenuItem)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 101}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 119}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TearoffMenuItem()",
"comment" : "\n\t \n\n Creates a new GtkTearoffMenuItem.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 132}
]
}
]
}
,
{
"name" : "gtk.Testing",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Testing.d",
"members" : [
{
"name" : "Testing",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n \n",
"line" : 76,
"base" : "Object",
"members" : [
{
"name" : "testInit",
"kind" : "function",
"protection" : "public",
"type" : "void(ref string[] argv)",
"comment" : "\n This function is used to initialize a GTK+ test program.\n It will in turn call g_test_init() and gtk_init() to\n properly initialize the testing framework and graphical toolkit.\n It'll also set the program's locale to \"C\" and prevent loading of\n rc files and Gtk+ modules. This is done to make tets program environments as deterministic as possible.\n Like gtk_init() and g_test_init(), any known arguments will be processed and stripped from argc and argv.\n Params:\n  argvp = Address of the argv parameter of main(). Any parameters understood by g_test_init() or gtk_init() are stripped before return.\n\t \n",
"line" : 88}
,
{
"name" : "createSimpleWindow",
"kind" : "function",
"protection" : "public",
"type" : "Widget(string windowTitle, string dialogText)",
"comment" : "\n\t \n\n Create a simple window with window title window_title and\n text contents dialog_text.\n The window will quit any running gtk_main()-loop when destroyed, and it\n will automatically be destroyed upon test function teardown.\n Since 2.14\n Params:\n windowTitle = Title of the window to be displayed.\n dialogText = Text inside the window to be displayed.\n Returns: a widget pointer to the newly created GtkWindow. [transfer none]\n\t \n",
"line" : 113}
,
{
"name" : "findLabel",
"kind" : "function",
"protection" : "public",
"type" : "Widget(Widget widget, string labelPattern)",
"comment" : "\n This function will search widget and all its descendants for a GtkLabel\n widget with a text string matching label_pattern.\n The label_pattern may contain asterisks '*' and question marks '?' as\n placeholders, g_pattern_match() is used for the matching.\n Note that locales other than \"C\" tend to alter (translate\" label strings,\n so this function is genrally only useful in test programs with\n predetermined locales, see gtk_test_init() for more details.\n Since 2.14\n Params:\n widget = Valid label or container widget.\n labelPattern = Shell-glob pattern to match a label string.\n Returns: a GtkLabel widget if any is found. [transfer none]\n\t \n",
"line" : 138}
,
{
"name" : "findSibling",
"kind" : "function",
"protection" : "public",
"type" : "Widget(Widget baseWidget, GType widgetType)",
"comment" : "\n This function will search siblings of base_widget and siblings of its\n ancestors for all widgets matching widget_type.\n Of the matching widgets, the one that is geometrically closest to\n base_widget will be returned.\n The general purpose of this function is to find the most likely \"action\"\n widget, relative to another labeling widget. Such as finding a\n button or text entry widget, given it's corresponding label widget.\n Since 2.14\n Params:\n baseWidget = Valid widget, part of a widget hierarchy\n widgetType = Type of a aearched for sibling widget\n Returns: a widget of type widget_type if any is found. [transfer none]\n\t \n",
"line" : 163}
,
{
"name" : "findWidget",
"kind" : "function",
"protection" : "public",
"type" : "Widget(Widget widget, string labelPattern, GType widgetType)",
"comment" : "\n This function will search the descendants of widget for a widget\n of type widget_type that has a label matching label_pattern next\n to it. This is most useful for automated GUI testing, e.g. to find\n the \"OK\" button in a dialog and synthesize clicks on it.\n However see gtk_test_find_label(), gtk_test_find_sibling() and\n gtk_test_widget_click() for possible caveats involving the search of\n such widgets and synthesizing widget events.\n Since 2.14\n Params:\n widget = Container widget, usually a GtkWindow.\n labelPattern = Shell-glob pattern to match a label string.\n widgetType = Type of a aearched for label sibling widget.\n Returns: a valid widget if any is found or NULL. [transfer none]\n\t \n",
"line" : 189}
,
{
"name" : "listAllTypes",
"kind" : "function",
"protection" : "public",
"type" : "GType*(uint* nTypes)",
"comment" : "\n Return the type ids that have been registered after\n calling gtk_test_register_all_types().\n Since 2.14\n Params:\n nTypes = location to store number of types\n Returns: 0-terminated array of type ids. [array length=n_types zero-terminated=1][transfer none]\n\t \n",
"line" : 208}
,
{
"name" : "registerAllTypes",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Force registration of all core Gtk+ and Gdk object types.\n This allowes to refer to any of those object types via\n g_type_from_name() after calling this function.\n Since 2.14\n\t \n",
"line" : 220}
,
{
"name" : "sliderGetValue",
"kind" : "function",
"protection" : "public",
"type" : "double(Widget widget)",
"comment" : "\n Retrive the literal adjustment value for GtkRange based\n widgets and spin buttons. Note that the value returned by\n this function is anything between the lower and upper bounds\n of the adjustment belonging to widget, and is not a percentage\n as passed in to gtk_test_slider_set_perc().\n Since 2.14\n Params:\n widget = valid widget pointer.\n Returns: adjustment->value for an adjustment belonging to widget.\n\t \n",
"line" : 237}
,
{
"name" : "sliderSetPerc",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, double percentage)",
"comment" : "\n This function will adjust the slider position of all GtkRange\n based widgets, such as scrollbars or scales, it'll also adjust\n spin buttons. The adjustment value of these widgets is set to\n a value between the lower and upper limits, according to the\n percentage argument.\n Since 2.14\n Params:\n widget = valid widget pointer.\n percentage = value between 0 and 100.\n\t \n",
"line" : 254}
,
{
"name" : "spinButtonClick",
"kind" : "function",
"protection" : "public",
"type" : "int(SpinButton spinner, uint button, int upwards)",
"comment" : "\n This function will generate a button click in the upwards or downwards\n spin button arrow areas, usually leading to an increase or decrease of\n spin button's value.\n Since 2.14\n Params:\n spinner = valid GtkSpinButton widget.\n button = Number of the pointer button for the event, usually 1, 2 or 3.\n upwards = TRUE for upwards arrow click, FALSE for downwards arrow click.\n Returns: wether all actions neccessary for the button click simulation were carried out successfully.\n\t \n",
"line" : 271}
,
{
"name" : "textGet",
"kind" : "function",
"protection" : "public",
"type" : "string(Widget widget)",
"comment" : "\n Retrive the text string of widget if it is a GtkLabel,\n GtkEditable (entry and text widgets) or GtkTextView.\n Since 2.14\n Params:\n widget = valid widget pointer.\n Returns: new 0-terminated C string, needs to be released with g_free().\n\t \n",
"line" : 285}
,
{
"name" : "textSet",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, string string)",
"comment" : "\n Set the text string of widget to string if it is a GtkLabel,\n GtkEditable (entry and text widgets) or GtkTextView.\n Since 2.14\n Params:\n widget = valid widget pointer.\n string = a 0-terminated C string\n\t \n",
"line" : 299}
,
{
"name" : "widgetClick",
"kind" : "function",
"protection" : "public",
"type" : "int(Widget widget, uint button, GdkModifierType modifiers)",
"comment" : "\n This function will generate a button click (button press and button\n release event) in the middle of the first GdkWindow found that belongs\n to widget.\n For GTK_NO_WINDOW widgets like GtkButton, this will often be an\n input-only event window. For other widgets, this is usually widget->window.\n Certain caveats should be considered when using this function, in\n particular because the mouse pointer is warped to the button click\n location, see gdk_test_simulate_button() for details.\n Since 2.14\n Params:\n widget = Widget to generate a button click on.\n button = Number of the pointer button for the event, usually 1, 2 or 3.\n modifiers = Keyboard modifiers the event is setup with.\n Returns: wether all actions neccessary for the button click simulation were carried out successfully.\n\t \n",
"line" : 321}
,
{
"name" : "widgetSendKey",
"kind" : "function",
"protection" : "public",
"type" : "int(Widget widget, uint keyval, GdkModifierType modifiers)",
"comment" : "\n This function will generate keyboard press and release events in\n the middle of the first GdkWindow found that belongs to widget.\n For GTK_NO_WINDOW widgets like GtkButton, this will often be an\n input-only event window. For other widgets, this is usually widget->window.\n Certain caveats should be considered when using this function, in\n particular because the mouse pointer is warped to the key press\n location, see gdk_test_simulate_key() for details.\n Since 2.14\n Params:\n widget = Widget to generate a key press and release on.\n keyval = A Gdk keyboard value.\n modifiers = Keyboard modifiers the event is setup with.\n Returns: wether all actions neccessary for the key event simulation were carried out successfully.\n\t \n",
"line" : 342}
]
}
]
}
,
{
"name" : "gtk.TextAttributes",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TextAttributes.d",
"members" : [
{
"name" : "TextAttributes",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n You may wish to begin by reading the text widget\n conceptual overview which gives an overview of all the objects and data\n types related to the text widget and how they work together.\n Tags should be in the GtkTextTagTable for a given GtkTextBuffer\n before using them with that buffer.\n gtk_text_buffer_create_tag() is the best way to create tags.\n See gtk-demo for numerous examples.\n The \"invisible\" property was not implemented for GTK+ 2.0.\n It is working (with minor issues) since 2.8.\n \n",
"line" : 82,
"base" : "Object",
"members" : [
{
"name" : "gtkTextAttributes",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkTextAttributes*",
"comment" : " the main Gtk struct \n",
"line" : 85}
,
{
"name" : "getTextAttributesStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkTextAttributes*()",
"line" : 88}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 95}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TextAttributes(GtkTextAttributes* gtkTextAttributes)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 103}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 115}
,
{
"name" : "onListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GObject*, GdkEvent*, GtkTextIter*, TextAttributes)[]",
"line" : 117}
,
{
"name" : "addOn",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GObject*, GdkEvent*, GtkTextIter*, TextAttributes) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::event signal is emitted when an event occurs on a region of the\n buffer marked with this tag.\n TRUE to stop other handlers from being invoked for the\n event. FALSE to propagate the event further.\n\t \n",
"line" : 124}
,
{
"name" : "callBack",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkTextTag* tagStruct, GObject* object, GdkEvent* event, GtkTextIter* iter, TextAttributes textAttributes)",
"line" : 139}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TextAttributes()",
"comment" : "\n Creates a GtkTextAttributes, which describes\n a set of properties on some text.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 158}
,
{
"name" : "copy",
"kind" : "function",
"protection" : "public",
"type" : "TextAttributes()",
"comment" : "\n Copies src and returns a new GtkTextAttributes.\n Returns: a copy of src\n\t \n",
"line" : 173}
,
{
"name" : "copyValues",
"kind" : "function",
"protection" : "public",
"type" : "void(TextAttributes dest)",
"comment" : "\n Copies the values from src to dest so that dest has the same values\n as src. Frees existing values in dest.\n Params:\n dest = another GtkTextAttributes\n\t \n",
"line" : 190}
,
{
"name" : "unref",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Decrements the reference count on values, freeing the structure\n if the reference count reaches 0.\n\t \n",
"line" : 200}
,
{
"name" : "doref",
"kind" : "function",
"protection" : "public",
"type" : "TextAttributes()",
"comment" : "\n Increments the reference count on values.\n Returns: the GtkTextAttributes that were passed in\n\t \n",
"line" : 210}
]
}
]
}
,
{
"name" : "gtk.TextBuffer",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TextBuffer.d",
"members" : [
{
"name" : "TextBuffer",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n You may wish to begin by reading the text widget\n conceptual overview which gives an overview of all the objects and data\n types related to the text widget and how they work together.\n \n",
"line" : 141,
"base" : "ObjectG",
"members" : [
{
"name" : "gtkTextBuffer",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkTextBuffer*",
"comment" : " the main Gtk struct \n",
"line" : 145}
,
{
"name" : "getTextBufferStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkTextBuffer*()",
"line" : 148}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 155}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TextBuffer(GtkTextBuffer* gtkTextBuffer)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 163}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 181}
,
{
"name" : "setText",
"kind" : "function",
"protection" : "public",
"type" : "void(string text)",
"comment" : "\n Deletes current contents of buffer, and inserts text instead. If\n len is -1, text must be nul-terminated. text must be valid UTF-8.\n Params:\n  text = UTF-8 text to insert\n\t \n",
"line" : 193}
,
{
"name" : "insert",
"kind" : "function",
"protection" : "public",
"type" : "void(TextIter iter, string text)",
"comment" : "\n Inserts len bytes of text at position iter. If len is -1,\n text must be nul-terminated and will be inserted in its\n entirety. Emits the \"insert_text\" signal; insertion actually occurs\n in the default handler for the signal. iter is invalidated when\n insertion occurs (because the buffer contents change), but the\n default signal handler revalidates it to point to the end of the\n inserted text.\n Params:\n  iter = a position in the buffer\n  text = UTF-8 format text to insert\n\t \n",
"line" : 211}
,
{
"name" : "insertAtCursor",
"kind" : "function",
"protection" : "public",
"type" : "void(string text)",
"comment" : "\n Simply calls gtk_text_buffer_insert(), using the current\n cursor position as the insertion point.\n Params:\n  text = some text in UTF-8 format\n\t \n",
"line" : 223}
,
{
"name" : "insertInteractive",
"kind" : "function",
"protection" : "public",
"type" : "int(TextIter iter, string text, int defaultEditable)",
"comment" : "\n Like gtk_text_buffer_insert(), but the insertion will not occur if\n iter is at a non-editable location in the buffer. Usually you\n want to prevent insertions at ineditable locations if the insertion\n results from a user action (is interactive).\n default_editable indicates the editability of text that doesn't\n have a tag affecting editability applied to it. Typically the\n result of gtk_text_view_get_editable() is appropriate here.\n Params:\n  iter = a position in buffer\n  text = some UTF-8 text\n  defaultEditable = default editability of buffer\n Returns:\n  whether text was actually inserted\n\t \n",
"line" : 244}
,
{
"name" : "insertInteractiveAtCursor",
"kind" : "function",
"protection" : "public",
"type" : "int(string text, int defaultEditable)",
"comment" : "\n Calls gtk_text_buffer_insert_interactive() at the cursor\n position.\n default_editable indicates the editability of text that doesn't\n have a tag affecting editability applied to it. Typically the\n result of gtk_text_view_get_editable() is appropriate here.\n Params:\n  text = text in UTF-8 format\n  defaultEditable = default editability of buffer\n Returns:\n  whether text was actually inserted\n\t \n",
"line" : 262}
,
{
"name" : "insertWithTags",
"kind" : "function",
"protection" : "public",
"type" : "void(TextIter iter, string text,...)",
"comment" : "\n Inserts text into buffer at iter, applying the list of tags to\n the newly-inserted text. The last tag specified must be NULL to\n terminate the list. Equivalent to calling gtk_text_buffer_insert(),\n then gtk_text_buffer_apply_tag() on the inserted text;\n gtk_text_buffer_insert_with_tags() is just a convenience function.\n Params:\n  iter = an iterator in buffer\n  text = UTF-8 text\n  ... = NULL-terminated list of tags to apply\n\t \n",
"line" : 280}
,
{
"name" : "insertWithTagsByName",
"kind" : "function",
"protection" : "public",
"type" : "void(TextIter iter, string text,...)",
"comment" : "\n Same as gtk_text_buffer_insert_with_tags(), but allows you\n to pass in tag names instead of tag objects.\n Params:\n  iter = position in buffer\n  text = UTF-8 text\n  ... = more tag names\n\t \n",
"line" : 299}
,
{
"name" : "createTag",
"kind" : "function",
"protection" : "public",
"type" : "TextTag(string tagName, string propertyName, int propertyValue, string propertyName1, string propertyValue1)",
"comment" : "\n Create a new tag for this buffer\n Params:\n  tagName= can be null for no name\n  propertyName=\n  propertyValue=\n\t \n",
"line" : 316}
,
{
"name" : "createTag",
"kind" : "function",
"protection" : "public",
"type" : "TextTag(string tagName, string propertyName, int propertyValue)",
"comment" : "\n Create a new tag for this buffer\n Params:\n  tagName= can be null for no name\n  propertyName=\n  propertyValue=\n\t \n",
"line" : 336}
,
{
"name" : "createTag",
"kind" : "function",
"protection" : "public",
"type" : "TextTag(string tagName, string propertyName, double propertyValue)",
"comment" : "\n Create a new tag for this buffer\n Params:\n  tagName= can be null for no name\n  propertyName=\n  propertyValue=\n\t \n",
"line" : 353}
,
{
"name" : "createTag",
"kind" : "function",
"protection" : "public",
"type" : "TextTag(string tagName, string propertyName, int propertyValue, string propertyName2, int propertyValue2)",
"comment" : "\n Create a new tag for this buffer\n Params:\n  tagName= can be null for no name\n  propertyName=\n  propertyValue=\n  propertyName2=\n  propertyValue2=\n\t \n",
"line" : 370}
,
{
"name" : "createTag",
"kind" : "function",
"protection" : "public",
"type" : "TextTag(string tagName, string propertyName, int propertyValue, string propertyName2, int propertyValue2, string propertyName3, int propertyValue3, string propertyName4, int propertyValue4, string propertyName5, int propertyValue5)",
"comment" : " Create a new tag for this buffer \n",
"line" : 378}
,
{
"name" : "createTag",
"kind" : "function",
"protection" : "public",
"type" : "TextTag(string tagName, string propertyName, string propertyValue)",
"comment" : "\n Create a new tag for this buffer\n Params:\n  tagName= can be null for no name\n  propertyName=\n  propertyValue=\n\t \n",
"line" : 392}
,
{
"name" : "createTag",
"kind" : "function",
"protection" : "public",
"type" : "TextTag(string tagName, string propertyName, Bitmap propertyValue)",
"comment" : "\n Create a new tag for this buffer\n Params:\n  tagName = can be null for no name\n  propertyName=\n  propertyValue=\n\t \n",
"line" : 407}
,
{
"name" : "getText",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Obtain the entire text\n Returns: The text string\n\t \n",
"line" : 419}
,
{
"name" : "createTag",
"kind" : "function",
"protection" : "public",
"type" : "TextTag(string tagName, string propertyName, string propertyValue, string propertyName2, int propertyValue2)",
"comment" : "\n Create a new tag for this buffer\n Params:\n  tagName= can be null for no name\n  propertyName=\n  propertyValue=\n  propertyName2=\n  propertyValue2=\n\t \n",
"line" : 436}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 450}
,
{
"name" : "onApplyTagListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextTag, TextIter, TextIter, TextBuffer)[]",
"line" : 452}
,
{
"name" : "addOnApplyTag",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextTag, TextIter, TextIter, TextBuffer) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::apply-tag signal is emitted to apply a tag to a\n range of text in a GtkTextBuffer.\n Applying actually occurs in the default handler.\n Note that if your handler runs before the default handler it must not\n invalidate the start and end iters (or has to revalidate them).\n See also:\n gtk_text_buffer_apply_tag(),\n gtk_text_buffer_insert_with_tags(),\n gtk_text_buffer_insert_range().\n\t \n",
"line" : 464}
,
{
"name" : "callBackApplyTag",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextBuffer* textbufferStruct, GtkTextTag* tag, GtkTextIter* start, GtkTextIter* end, TextBuffer textBuffer)",
"line" : 479}
,
{
"name" : "onBeginUserActionListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextBuffer)[]",
"line" : 487}
,
{
"name" : "addOnBeginUserAction",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextBuffer) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::begin-user-action signal is emitted at the beginning of a single\n user-visible operation on a GtkTextBuffer.\n See also:\n gtk_text_buffer_begin_user_action(),\n gtk_text_buffer_insert_interactive(),\n gtk_text_buffer_insert_range_interactive(),\n gtk_text_buffer_delete_interactive(),\n gtk_text_buffer_backspace(),\n gtk_text_buffer_delete_selection().\n\t \n",
"line" : 499}
,
{
"name" : "callBackBeginUserAction",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextBuffer* textbufferStruct, TextBuffer textBuffer)",
"line" : 514}
,
{
"name" : "onChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextBuffer)[]",
"line" : 522}
,
{
"name" : "addOnChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextBuffer) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::changed signal is emitted when the content of a GtkTextBuffer\n has changed.\n\t \n",
"line" : 527}
,
{
"name" : "callBackChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextBuffer* textbufferStruct, TextBuffer textBuffer)",
"line" : 542}
,
{
"name" : "onDeleteRangeListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextIter, TextIter, TextBuffer)[]",
"line" : 550}
,
{
"name" : "addOnDeleteRange",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextIter, TextIter, TextBuffer) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::delete-range signal is emitted to delete a range\n from a GtkTextBuffer.\n Note that if your handler runs before the default handler it must not\n invalidate the start and end iters (or has to revalidate them).\n The default signal handler revalidates the start and end iters to\n both point point to the location where text was deleted. Handlers\n which run after the default handler (see g_signal_connect_after())\n do not have access to the deleted text.\n See also: gtk_text_buffer_delete().\n\t \n",
"line" : 562}
,
{
"name" : "callBackDeleteRange",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextBuffer* textbufferStruct, GtkTextIter* start, GtkTextIter* end, TextBuffer textBuffer)",
"line" : 577}
,
{
"name" : "onEndUserActionListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextBuffer)[]",
"line" : 585}
,
{
"name" : "addOnEndUserAction",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextBuffer) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::end-user-action signal is emitted at the end of a single\n user-visible operation on the GtkTextBuffer.\n See also:\n gtk_text_buffer_end_user_action(),\n gtk_text_buffer_insert_interactive(),\n gtk_text_buffer_insert_range_interactive(),\n gtk_text_buffer_delete_interactive(),\n gtk_text_buffer_backspace(),\n gtk_text_buffer_delete_selection(),\n gtk_text_buffer_backspace().\n\t \n",
"line" : 598}
,
{
"name" : "callBackEndUserAction",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextBuffer* textbufferStruct, TextBuffer textBuffer)",
"line" : 613}
,
{
"name" : "onInsertChildAnchorListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextIter, TextChildAnchor, TextBuffer)[]",
"line" : 621}
,
{
"name" : "addOnInsertChildAnchor",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextIter, TextChildAnchor, TextBuffer) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::insert-child-anchor signal is emitted to insert a\n GtkTextChildAnchor in a GtkTextBuffer.\n Insertion actually occurs in the default handler.\n Note that if your handler runs before the default handler it must\n not invalidate the location iter (or has to revalidate it).\n The default signal handler revalidates it to be placed after the\n inserted anchor.\n See also: gtk_text_buffer_insert_child_anchor().\n\t \n",
"line" : 632}
,
{
"name" : "callBackInsertChildAnchor",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextBuffer* textbufferStruct, GtkTextIter* location, GtkTextChildAnchor* anchor, TextBuffer textBuffer)",
"line" : 647}
,
{
"name" : "onInsertPixbufListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextIter, Pixbuf, TextBuffer)[]",
"line" : 655}
,
{
"name" : "addOnInsertPixbuf",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextIter, Pixbuf, TextBuffer) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::insert-pixbuf signal is emitted to insert a GdkPixbuf\n in a GtkTextBuffer. Insertion actually occurs in the default handler.\n Note that if your handler runs before the default handler it must not\n invalidate the location iter (or has to revalidate it).\n The default signal handler revalidates it to be placed after the\n inserted pixbuf.\n See also: gtk_text_buffer_insert_pixbuf().\n\t \n",
"line" : 665}
,
{
"name" : "callBackInsertPixbuf",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextBuffer* textbufferStruct, GtkTextIter* location, GdkPixbuf* pixbuf, TextBuffer textBuffer)",
"line" : 680}
,
{
"name" : "onInsertTextListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextIter, string, int, TextBuffer)[]",
"line" : 688}
,
{
"name" : "addOnInsertText",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextIter, string, int, TextBuffer) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::insert-text signal is emitted to insert text in a GtkTextBuffer.\n Insertion actually occurs in the default handler.\n Note that if your handler runs before the default handler it must not\n invalidate the location iter (or has to revalidate it).\n The default signal handler revalidates it to point to the end of the\n inserted text.\n See also:\n gtk_text_buffer_insert(),\n gtk_text_buffer_insert_range().\n\t \n",
"line" : 700}
,
{
"name" : "callBackInsertText",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextBuffer* textbufferStruct, GtkTextIter* location, char* text, int len, TextBuffer textBuffer)",
"line" : 715}
,
{
"name" : "onMarkDeletedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextMark, TextBuffer)[]",
"line" : 723}
,
{
"name" : "addOnMarkDeleted",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextMark, TextBuffer) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::mark-deleted signal is emitted as notification\n after a GtkTextMark is deleted.\n\t \n",
"line" : 728}
,
{
"name" : "callBackMarkDeleted",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextBuffer* textbufferStruct, GtkTextMark* mark, TextBuffer textBuffer)",
"line" : 743}
,
{
"name" : "onMarkSetListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextIter, TextMark, TextBuffer)[]",
"line" : 751}
,
{
"name" : "addOnMarkSet",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextIter, TextMark, TextBuffer) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::mark-set signal is emitted as notification\n after a GtkTextMark is set.\n See also:\n gtk_text_buffer_create_mark(),\n gtk_text_buffer_move_mark().\n\t \n",
"line" : 759}
,
{
"name" : "callBackMarkSet",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextBuffer* textbufferStruct, GtkTextIter* location, GtkTextMark* mark, TextBuffer textBuffer)",
"line" : 774}
,
{
"name" : "onModifiedChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextBuffer)[]",
"line" : 782}
,
{
"name" : "addOnModifiedChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextBuffer) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::modified-changed signal is emitted when the modified bit of a\n GtkTextBuffer flips.\n\t \n",
"line" : 787}
,
{
"name" : "callBackModifiedChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextBuffer* textbufferStruct, TextBuffer textBuffer)",
"line" : 802}
,
{
"name" : "onPasteDoneListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Clipboard, TextBuffer)[]",
"line" : 810}
,
{
"name" : "addOnPasteDone",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Clipboard, TextBuffer) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The paste-done signal is emitted after paste operation has been completed.\n This is useful to properly scroll the view to the end of the pasted text.\n See gtk_text_buffer_paste_clipboard() for more details.\n Since 2.16\n\t \n",
"line" : 817}
,
{
"name" : "callBackPasteDone",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextBuffer* textbufferStruct, GtkClipboard* arg1, TextBuffer textBuffer)",
"line" : 832}
,
{
"name" : "onRemoveTagListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextTag, TextIter, TextIter, TextBuffer)[]",
"line" : 840}
,
{
"name" : "addOnRemoveTag",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextTag, TextIter, TextIter, TextBuffer) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::remove-tag signal is emitted to remove all occurrences of tag from\n a range of text in a GtkTextBuffer.\n Removal actually occurs in the default handler.\n Note that if your handler runs before the default handler it must not\n invalidate the start and end iters (or has to revalidate them).\n See also:\n gtk_text_buffer_remove_tag().\n See Also\n GtkTextView, GtkTextIter, GtkTextMark\n\t \n",
"line" : 852}
,
{
"name" : "callBackRemoveTag",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextBuffer* textbufferStruct, GtkTextTag* tag, GtkTextIter* start, GtkTextIter* end, TextBuffer textBuffer)",
"line" : 867}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TextBuffer(TextTagTable table)",
"comment" : "\n Creates a new text buffer.\n Params:\n table = a tag table, or NULL to create a new one. [allow-none]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 882}
,
{
"name" : "getLineCount",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Obtains the number of lines in the buffer. This value is cached, so\n the function is very fast.\n Returns: number of lines in the buffer\n\t \n",
"line" : 898}
,
{
"name" : "getCharCount",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the number of characters in the buffer; note that characters\n and bytes are not the same, you can't e.g. expect the contents of\n the buffer in string form to be this many bytes long. The character\n count is cached, so this function is very fast.\n Returns: number of characters in the buffer\n\t \n",
"line" : 911}
,
{
"name" : "getTagTable",
"kind" : "function",
"protection" : "public",
"type" : "TextTagTable()",
"comment" : "\n Get the GtkTextTagTable associated with this buffer.\n Returns: the buffer's tag table. [transfer none]\n\t \n",
"line" : 921}
,
{
"name" : "insert",
"kind" : "function",
"protection" : "public",
"type" : "void(TextIter iter, string text, int len)",
"comment" : "\n Inserts len bytes of text at position iter. If len is -1,\n text must be nul-terminated and will be inserted in its\n entirety. Emits the \"insert-text\" signal; insertion actually occurs\n in the default handler for the signal. iter is invalidated when\n insertion occurs (because the buffer contents change), but the\n default signal handler revalidates it to point to the end of the\n inserted text.\n Params:\n iter = a position in the buffer\n text = text in UTF-8 format\n len = length of text in bytes, or -1\n\t \n",
"line" : 945}
,
{
"name" : "insertAtCursor",
"kind" : "function",
"protection" : "public",
"type" : "void(string text, int len)",
"comment" : "\n Simply calls gtk_text_buffer_insert(), using the current\n cursor position as the insertion point.\n Params:\n text = text in UTF-8 format\n len = length of text, in bytes\n\t \n",
"line" : 958}
,
{
"name" : "insertInteractive",
"kind" : "function",
"protection" : "public",
"type" : "int(TextIter iter, string text, int len, int defaultEditable)",
"comment" : "\n Like gtk_text_buffer_insert(), but the insertion will not occur if\n iter is at a non-editable location in the buffer. Usually you\n want to prevent insertions at ineditable locations if the insertion\n results from a user action (is interactive).\n default_editable indicates the editability of text that doesn't\n have a tag affecting editability applied to it. Typically the\n result of gtk_text_view_get_editable() is appropriate here.\n Params:\n iter = a position in buffer\n text = some UTF-8 text\n len = length of text in bytes, or -1\n defaultEditable = default editability of buffer\n Returns: whether text was actually inserted\n\t \n",
"line" : 979}
,
{
"name" : "insertInteractiveAtCursor",
"kind" : "function",
"protection" : "public",
"type" : "int(string text, int len, int defaultEditable)",
"comment" : "\n Calls gtk_text_buffer_insert_interactive() at the cursor\n position.\n default_editable indicates the editability of text that doesn't\n have a tag affecting editability applied to it. Typically the\n result of gtk_text_view_get_editable() is appropriate here.\n Params:\n text = text in UTF-8 format\n len = length of text in bytes, or -1\n defaultEditable = default editability of buffer\n Returns: whether text was actually inserted\n\t \n",
"line" : 997}
,
{
"name" : "insertRange",
"kind" : "function",
"protection" : "public",
"type" : "void(TextIter iter, TextIter start, TextIter end)",
"comment" : "\n Copies text, tags, and pixbufs between start and end (the order\n of start and end doesn't matter) and inserts the copy at iter.\n Used instead of simply getting\/inserting text because it preserves\n images and tags. If start and end are in a different buffer from\n buffer, the two buffers must share the same tag table.\n Implemented via emissions of the insert_text and apply_tag signals,\n so expect those.\n Params:\n iter = a position in buffer\n start = a position in a GtkTextBuffer\n end = another position in the same buffer as start\n\t \n",
"line" : 1016}
,
{
"name" : "insertRangeInteractive",
"kind" : "function",
"protection" : "public",
"type" : "int(TextIter iter, TextIter start, TextIter end, int defaultEditable)",
"comment" : "\n Same as gtk_text_buffer_insert_range(), but does nothing if the\n insertion point isn't editable. The default_editable parameter\n indicates whether the text is editable at iter if no tags\n enclosing iter affect editability. Typically the result of\n gtk_text_view_get_editable() is appropriate here.\n Params:\n iter = a position in buffer\n start = a position in a GtkTextBuffer\n end = another position in the same buffer as start\n defaultEditable = default editability of the buffer\n Returns: whether an insertion was possible at iter\n\t \n",
"line" : 1035}
,
{
"name" : "delet",
"kind" : "function",
"protection" : "public",
"type" : "void(TextIter start, TextIter end)",
"comment" : "\n Deletes text between start and end. The order of start and end\n is not actually relevant; gtk_text_buffer_delete() will reorder\n them. This function actually emits the \"delete-range\" signal, and\n the default handler of that signal deletes the text. Because the\n buffer is modified, all outstanding iterators become invalid after\n calling this function; however, the start and end will be\n re-initialized to point to the location where text was deleted.\n Params:\n start = a position in buffer\n end = another position in buffer\n\t \n",
"line" : 1053}
,
{
"name" : "deleteInteractive",
"kind" : "function",
"protection" : "public",
"type" : "int(TextIter startIter, TextIter endIter, int defaultEditable)",
"comment" : "\n Deletes all editable text in the given range.\n Calls gtk_text_buffer_delete() for each editable sub-range of\n [start,end). start and end are revalidated to point to\n the location of the last deleted range, or left untouched if\n no text was deleted.\n Params:\n startIter = start of range to delete\n endIter = end of range\n defaultEditable = whether the buffer is editable by default\n Returns: whether some text was actually deleted\n\t \n",
"line" : 1071}
,
{
"name" : "backspace",
"kind" : "function",
"protection" : "public",
"type" : "int(TextIter iter, int interactive, int defaultEditable)",
"comment" : "\n Performs the appropriate action as if the user hit the delete\n key with the cursor at the position specified by iter. In the\n normal case a single character will be deleted, but when\n combining accents are involved, more than one character can\n be deleted, and when precomposed character and accent combinations\n are involved, less than one character will be deleted.\n Because the buffer is modified, all outstanding iterators become\n invalid after calling this function; however, the iter will be\n re-initialized to point to the location where text was deleted.\n Since 2.6\n Params:\n iter = a position in buffer\n interactive = whether the deletion is caused by user interaction\n defaultEditable = whether the buffer is editable by default\n Returns: TRUE if the buffer was modified\n\t \n",
"line" : 1094}
,
{
"name" : "getText",
"kind" : "function",
"protection" : "public",
"type" : "string(TextIter start, TextIter end, int includeHiddenChars)",
"comment" : "\n Returns the text in the range [start,end). Excludes undisplayed\n text (text marked with tags that set the invisibility attribute) if\n include_hidden_chars is FALSE. Does not include characters\n representing embedded images, so byte and character indexes into\n the returned string do not correspond to byte\n and character indexes into the buffer. Contrast with\n gtk_text_buffer_get_slice().\n Params:\n start = start of a range\n end = end of a range\n includeHiddenChars = whether to include invisible text\n Returns: an allocated UTF-8 string\n\t \n",
"line" : 1114}
,
{
"name" : "getSlice",
"kind" : "function",
"protection" : "public",
"type" : "string(TextIter start, TextIter end, int includeHiddenChars)",
"comment" : "\n Returns the text in the range [start,end). Excludes undisplayed\n text (text marked with tags that set the invisibility attribute) if\n include_hidden_chars is FALSE. The returned string includes a\n 0xFFFC character whenever the buffer contains\n embedded images, so byte and character indexes into\n the returned string do correspond to byte\n and character indexes into the buffer. Contrast with\n gtk_text_buffer_get_text(). Note that 0xFFFC can occur in normal\n text as well, so it is not a reliable indicator that a pixbuf or\n widget is in the buffer.\n Params:\n start = start of a range\n end = end of a range\n includeHiddenChars = whether to include invisible text\n Returns: an allocated UTF-8 string\n\t \n",
"line" : 1137}
,
{
"name" : "insertPixbuf",
"kind" : "function",
"protection" : "public",
"type" : "void(TextIter iter, Pixbuf pixbuf)",
"comment" : "\n Inserts an image into the text buffer at iter. The image will be\n counted as one character in character counts, and when obtaining\n the buffer contents as a string, will be represented by the Unicode\n \"object replacement character\" 0xFFFC. Note that the \"slice\"\n variants for obtaining portions of the buffer as a string include\n this character for pixbufs, but the \"text\" variants do\n not. e.g. see gtk_text_buffer_get_slice() and\n gtk_text_buffer_get_text().\n Params:\n iter = location to insert the pixbuf\n pixbuf = a GdkPixbuf\n\t \n",
"line" : 1156}
,
{
"name" : "insertChildAnchor",
"kind" : "function",
"protection" : "public",
"type" : "void(TextIter iter, TextChildAnchor anchor)",
"comment" : "\n Inserts a child widget anchor into the text buffer at iter. The\n anchor will be counted as one character in character counts, and\n when obtaining the buffer contents as a string, will be represented\n by the Unicode \"object replacement character\" 0xFFFC. Note that the\n \"slice\" variants for obtaining portions of the buffer as a string\n include this character for child anchors, but the \"text\" variants do\n not. E.g. see gtk_text_buffer_get_slice() and\n gtk_text_buffer_get_text(). Consider\n gtk_text_buffer_create_child_anchor() as a more convenient\n alternative to this function. The buffer will add a reference to\n the anchor, so you can unref it after insertion.\n Params:\n iter = location to insert the anchor\n anchor = a GtkTextChildAnchor\n\t \n",
"line" : 1178}
,
{
"name" : "createChildAnchor",
"kind" : "function",
"protection" : "public",
"type" : "TextChildAnchor(TextIter iter)",
"comment" : "\n This is a convenience function which simply creates a child anchor\n with gtk_text_child_anchor_new() and inserts it into the buffer\n with gtk_text_buffer_insert_child_anchor(). The new anchor is\n owned by the buffer; no reference count is returned to\n the caller of gtk_text_buffer_create_child_anchor().\n Params:\n iter = location in the buffer\n Returns: the created child anchor. [transfer none]\n\t \n",
"line" : 1194}
,
{
"name" : "createMark",
"kind" : "function",
"protection" : "public",
"type" : "TextMark(string markName, TextIter where, int leftGravity)",
"comment" : "\n Creates a mark at position where. If mark_name is NULL, the mark\n is anonymous; otherwise, the mark can be retrieved by name using\n gtk_text_buffer_get_mark(). If a mark has left gravity, and text is\n inserted at the mark's current location, the mark will be moved to\n the left of the newly-inserted text. If the mark has right gravity\n (left_gravity = FALSE), the mark will end up on the right of\n newly-inserted text. The standard left-to-right cursor is a mark\n with right gravity (when you type, the cursor stays on the right\n side of the text you're typing).\n The caller of this function does not own a\n reference to the returned GtkTextMark, so you can ignore the\n return value if you like. Marks are owned by the buffer and go\n away when the buffer does.\n Emits the \"mark-set\" signal as notification of the mark's initial\n placement.\n Params:\n markName = name for mark, or NULL. [allow-none]\n where = location to place mark\n leftGravity = whether the mark has left gravity\n Returns: the new GtkTextMark object. [transfer none]\n\t \n",
"line" : 1227}
,
{
"name" : "moveMark",
"kind" : "function",
"protection" : "public",
"type" : "void(TextMark mark, TextIter where)",
"comment" : "\n Moves mark to the new location where. Emits the \"mark-set\" signal\n as notification of the move.\n Params:\n mark = a GtkTextMark\n where = new location for mark in buffer\n\t \n",
"line" : 1245}
,
{
"name" : "moveMarkByName",
"kind" : "function",
"protection" : "public",
"type" : "void(string name, TextIter where)",
"comment" : "\n Moves the mark named name (which must exist) to location where.\n See gtk_text_buffer_move_mark() for details.\n Params:\n name = name of a mark\n where = new location for mark\n\t \n",
"line" : 1258}
,
{
"name" : "addMark",
"kind" : "function",
"protection" : "public",
"type" : "void(TextMark mark, TextIter where)",
"comment" : "\n Adds the mark at position where. The mark must not be added to\n another buffer, and if its name is not NULL then there must not\n be another mark in the buffer with the same name.\n Emits the \"mark-set\" signal as notification of the mark's initial\n placement.\n Since 2.12\n Params:\n mark = the mark to add\n where = location to place mark\n\t \n",
"line" : 1275}
,
{
"name" : "deleteMark",
"kind" : "function",
"protection" : "public",
"type" : "void(TextMark mark)",
"comment" : "\n Deletes mark, so that it's no longer located anywhere in the\n buffer. Removes the reference the buffer holds to the mark, so if\n you haven't called g_object_ref() on the mark, it will be freed. Even\n if the mark isn't freed, most operations on mark become\n invalid, until it gets added to a buffer again with\n gtk_text_buffer_add_mark(). Use gtk_text_mark_get_deleted() to\n find out if a mark has been removed from its buffer.\n The \"mark-deleted\" signal will be emitted as notification after\n the mark is deleted.\n Params:\n mark = a GtkTextMark in buffer\n\t \n",
"line" : 1294}
,
{
"name" : "deleteMarkByName",
"kind" : "function",
"protection" : "public",
"type" : "void(string name)",
"comment" : "\n Deletes the mark named name; the mark must exist. See\n gtk_text_buffer_delete_mark() for details.\n Params:\n name = name of a mark in buffer\n\t \n",
"line" : 1306}
,
{
"name" : "getMark",
"kind" : "function",
"protection" : "public",
"type" : "TextMark(string name)",
"comment" : "\n Returns the mark named name in buffer buffer, or NULL if no such\n mark exists in the buffer.\n Params:\n name = a mark name\n Returns: a GtkTextMark, or NULL. [transfer none]\n\t \n",
"line" : 1319}
,
{
"name" : "getInsert",
"kind" : "function",
"protection" : "public",
"type" : "TextMark()",
"comment" : "\n Returns the mark that represents the cursor (insertion point).\n Equivalent to calling gtk_text_buffer_get_mark() to get the mark\n named \"insert\", but very slightly more efficient, and involves less\n typing.\n Returns: insertion point mark. [transfer none]\n\t \n",
"line" : 1337}
,
{
"name" : "getSelectionBound",
"kind" : "function",
"protection" : "public",
"type" : "TextMark()",
"comment" : "\n Returns the mark that represents the selection bound. Equivalent\n to calling gtk_text_buffer_get_mark() to get the mark named\n \"selection_bound\", but very slightly more efficient, and involves\n less typing.\n The currently-selected text in buffer is the region between the\n \"selection_bound\" and \"insert\" marks. If \"selection_bound\" and\n \"insert\" are in the same place, then there is no current selection.\n gtk_text_buffer_get_selection_bounds() is another convenient function\n for handling the selection, if you just want to know whether there's a\n selection and what its bounds are.\n Returns: selection bound mark. [transfer none]\n\t \n",
"line" : 1361}
,
{
"name" : "getHasSelection",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Indicates whether the buffer has some text currently selected.\n Since 2.10\n Returns: TRUE if the there is text selected\n\t \n",
"line" : 1377}
,
{
"name" : "placeCursor",
"kind" : "function",
"protection" : "public",
"type" : "void(TextIter where)",
"comment" : "\n This function moves the \"insert\" and \"selection_bound\" marks\n simultaneously. If you move them to the same place in two steps\n with gtk_text_buffer_move_mark(), you will temporarily select a\n region in between their old and new locations, which can be pretty\n inefficient since the temporarily-selected region will force stuff\n to be recalculated. This function moves them as a unit, which can\n be optimized.\n Params:\n where = where to put the cursor\n\t \n",
"line" : 1394}
,
{
"name" : "selectRange",
"kind" : "function",
"protection" : "public",
"type" : "void(TextIter ins, TextIter bound)",
"comment" : "\n This function moves the \"insert\" and \"selection_bound\" marks\n simultaneously. If you move them in two steps\n with gtk_text_buffer_move_mark(), you will temporarily select a\n region in between their old and new locations, which can be pretty\n inefficient since the temporarily-selected region will force stuff\n to be recalculated. This function moves them as a unit, which can\n be optimized.\n Since 2.4\n Params:\n ins = where to put the \"insert\" mark\n bound = where to put the \"selection_bound\" mark\n\t \n",
"line" : 1413}
,
{
"name" : "applyTag",
"kind" : "function",
"protection" : "public",
"type" : "void(TextTag tag, TextIter start, TextIter end)",
"comment" : "\n Emits the \"apply-tag\" signal on buffer. The default\n handler for the signal applies tag to the given range.\n start and end do not have to be in order.\n Params:\n tag = a GtkTextTag\n start = one bound of range to be tagged\n end = other bound of range to be tagged\n\t \n",
"line" : 1428}
,
{
"name" : "removeTag",
"kind" : "function",
"protection" : "public",
"type" : "void(TextTag tag, TextIter start, TextIter end)",
"comment" : "\n Emits the \"remove-tag\" signal. The default handler for the signal\n removes all occurrences of tag from the given range. start and\n end don't have to be in order.\n Params:\n tag = a GtkTextTag\n start = one bound of range to be untagged\n end = other bound of range to be untagged\n\t \n",
"line" : 1443}
,
{
"name" : "applyTagByName",
"kind" : "function",
"protection" : "public",
"type" : "void(string name, TextIter start, TextIter end)",
"comment" : "\n Calls gtk_text_tag_table_lookup() on the buffer's tag table to\n get a GtkTextTag, then calls gtk_text_buffer_apply_tag().\n Params:\n name = name of a named GtkTextTag\n start = one bound of range to be tagged\n end = other bound of range to be tagged\n\t \n",
"line" : 1457}
,
{
"name" : "removeTagByName",
"kind" : "function",
"protection" : "public",
"type" : "void(string name, TextIter start, TextIter end)",
"comment" : "\n Calls gtk_text_tag_table_lookup() on the buffer's tag table to\n get a GtkTextTag, then calls gtk_text_buffer_remove_tag().\n Params:\n name = name of a GtkTextTag\n start = one bound of range to be untagged\n end = other bound of range to be untagged\n\t \n",
"line" : 1471}
,
{
"name" : "removeAllTags",
"kind" : "function",
"protection" : "public",
"type" : "void(TextIter start, TextIter end)",
"comment" : "\n Removes all tags in the range between start and end. Be careful\n with this function; it could remove tags added in code unrelated to\n the code you're currently writing. That is, using this function is\n probably a bad idea if you have two or more unrelated code sections\n that add tags.\n Params:\n start = one bound of range to be untagged\n end = other bound of range to be untagged\n\t \n",
"line" : 1487}
,
{
"name" : "getIterAtLineOffset",
"kind" : "function",
"protection" : "public",
"type" : "void(TextIter iter, int lineNumber, int charOffset)",
"comment" : "\n Obtains an iterator pointing to char_offset within the given\n line. The char_offset must exist, offsets off the end of the line\n are not allowed. Note characters, not bytes;\n UTF-8 may encode one character as multiple bytes.\n Params:\n iter = iterator to initialize. [out]\n lineNumber = line number counting from 0\n charOffset = char offset from start of line\n\t \n",
"line" : 1503}
,
{
"name" : "getIterAtOffset",
"kind" : "function",
"protection" : "public",
"type" : "void(TextIter iter, int charOffset)",
"comment" : "\n Initializes iter to a position char_offset chars from the start\n of the entire buffer. If char_offset is -1 or greater than the number\n of characters in the buffer, iter is initialized to the end iterator,\n the iterator one past the last valid character in the buffer.\n Params:\n iter = iterator to initialize. [out]\n charOffset = char offset from start of buffer, counting from 0, or -1\n\t \n",
"line" : 1518}
,
{
"name" : "getIterAtLine",
"kind" : "function",
"protection" : "public",
"type" : "void(TextIter iter, int lineNumber)",
"comment" : "\n Initializes iter to the start of the given line.\n Params:\n iter = iterator to initialize. [out]\n lineNumber = line number counting from 0\n\t \n",
"line" : 1530}
,
{
"name" : "getIterAtLineIndex",
"kind" : "function",
"protection" : "public",
"type" : "void(TextIter iter, int lineNumber, int byteIndex)",
"comment" : "\n Obtains an iterator pointing to byte_index within the given line.\n byte_index must be the start of a UTF-8 character, and must not be\n beyond the end of the line. Note bytes, not\n characters; UTF-8 may encode one character as multiple bytes.\n Params:\n iter = iterator to initialize. [out]\n lineNumber = line number counting from 0\n byteIndex = byte index from start of line\n\t \n",
"line" : 1546}
,
{
"name" : "getIterAtMark",
"kind" : "function",
"protection" : "public",
"type" : "void(TextIter iter, TextMark mark)",
"comment" : "\n Initializes iter with the current position of mark.\n Params:\n iter = iterator to initialize. [out]\n mark = a GtkTextMark in buffer\n\t \n",
"line" : 1558}
,
{
"name" : "getIterAtChildAnchor",
"kind" : "function",
"protection" : "public",
"type" : "void(TextIter iter, TextChildAnchor anchor)",
"comment" : "\n Obtains the location of anchor within buffer.\n Params:\n iter = an iterator to be initialized. [out]\n anchor = a child anchor that appears in buffer\n\t \n",
"line" : 1570}
,
{
"name" : "getStartIter",
"kind" : "function",
"protection" : "public",
"type" : "void(TextIter iter)",
"comment" : "\n Initialized iter with the first position in the text buffer. This\n is the same as using gtk_text_buffer_get_iter_at_offset() to get\n the iter at character offset 0.\n Params:\n iter = iterator to initialize. [out]\n\t \n",
"line" : 1583}
,
{
"name" : "getEndIter",
"kind" : "function",
"protection" : "public",
"type" : "void(TextIter iter)",
"comment" : "\n Initializes iter with the \"end iterator,\" one past the last valid\n character in the text buffer. If dereferenced with\n gtk_text_iter_get_char(), the end iterator has a character value of\n 0. The entire buffer lies in the range from the first position in\n the buffer (call gtk_text_buffer_get_start_iter() to get\n character position 0) to the end iterator.\n Params:\n iter = iterator to initialize. [out]\n\t \n",
"line" : 1599}
,
{
"name" : "getBounds",
"kind" : "function",
"protection" : "public",
"type" : "void(TextIter start, TextIter end)",
"comment" : "\n Retrieves the first and last iterators in the buffer, i.e. the\n entire buffer lies within the range [start,end).\n Params:\n start = iterator to initialize with first position in the buffer. [out]\n end = iterator to initialize with the end iterator. [out]\n\t \n",
"line" : 1612}
,
{
"name" : "getModified",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Indicates whether the buffer has been modified since the last call\n to gtk_text_buffer_set_modified() set the modification flag to\n FALSE. Used for example to enable a \"save\" function in a text\n editor.\n Returns: TRUE if the buffer has been modified\n\t \n",
"line" : 1625}
,
{
"name" : "setModified",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n Used to keep track of whether the buffer has been modified since the\n last time it was saved. Whenever the buffer is saved to disk, call\n gtk_text_buffer_set_modified (buffer, FALSE). When the buffer is modified,\n it will automatically toggled on the modified bit again. When the modified\n bit flips, the buffer emits a \"modified-changed\" signal.\n Params:\n setting = modification flag setting\n\t \n",
"line" : 1640}
,
{
"name" : "deleteSelection",
"kind" : "function",
"protection" : "public",
"type" : "int(int interactive, int defaultEditable)",
"comment" : "\n Deletes the range between the \"insert\" and \"selection_bound\" marks,\n that is, the currently-selected text. If interactive is TRUE,\n the editability of the selection will be considered (users can't delete\n uneditable text).\n Params:\n interactive = whether the deletion is caused by user interaction\n defaultEditable = whether the buffer is editable by default\n Returns: whether there was a non-empty selection to delete\n\t \n",
"line" : 1656}
,
{
"name" : "pasteClipboard",
"kind" : "function",
"protection" : "public",
"type" : "void(Clipboard clipboard, TextIter overrideLocation, int defaultEditable)",
"comment" : "\n Pastes the contents of a clipboard at the insertion point, or\n at override_location. (Note: pasting is asynchronous, that is,\n we'll ask for the paste data and return, and at some point later\n after the main loop runs, the paste data will be inserted.)\n Params:\n clipboard = the GtkClipboard to paste from\n overrideLocation = location to insert pasted text, or NULL for\n at the cursor. [allow-none]\n defaultEditable = whether the buffer is editable by default\n\t \n",
"line" : 1673}
,
{
"name" : "copyClipboard",
"kind" : "function",
"protection" : "public",
"type" : "void(Clipboard clipboard)",
"comment" : "\n Copies the currently-selected text to a clipboard.\n Params:\n clipboard = the GtkClipboard object to copy to\n\t \n",
"line" : 1684}
,
{
"name" : "cutClipboard",
"kind" : "function",
"protection" : "public",
"type" : "void(Clipboard clipboard, int defaultEditable)",
"comment" : "\n Copies the currently-selected text to a clipboard, then deletes\n said text if it's editable.\n Params:\n clipboard = the GtkClipboard object to cut to\n defaultEditable = default editability of the buffer\n\t \n",
"line" : 1697}
,
{
"name" : "getSelectionBounds",
"kind" : "function",
"protection" : "public",
"type" : "int(TextIter start, TextIter end)",
"comment" : "\n Returns TRUE if some text is selected; places the bounds\n of the selection in start and end (if the selection has length 0,\n then start and end are filled in with the same value).\n start and end will be in ascending order. If start and end are\n NULL, then they are not filled in, but the return value still indicates\n whether text is selected.\n Params:\n start = iterator to initialize with selection start. [out]\n end = iterator to initialize with selection end. [out]\n Returns: whether the selection has nonzero length\n\t \n",
"line" : 1715}
,
{
"name" : "beginUserAction",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Called to indicate that the buffer operations between here and a\n call to gtk_text_buffer_end_user_action() are part of a single\n user-visible operation. The operations between\n gtk_text_buffer_begin_user_action() and\n gtk_text_buffer_end_user_action() can then be grouped when creating\n an undo stack. GtkTextBuffer maintains a count of calls to\n gtk_text_buffer_begin_user_action() that have not been closed with\n a call to gtk_text_buffer_end_user_action(), and emits the\n \"begin-user-action\" and \"end-user-action\" signals only for the\n outermost pair of calls. This allows you to build user actions\n from other user actions.\n The \"interactive\" buffer mutation functions, such as\n gtk_text_buffer_insert_interactive(), automatically call begin\/end\n user action around the buffer operations they perform, so there's\n no need to add extra calls if you user action consists solely of a\n single call to one of those functions.\n\t \n",
"line" : 1739}
,
{
"name" : "endUserAction",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Should be paired with a call to gtk_text_buffer_begin_user_action().\n See that function for a full explanation.\n\t \n",
"line" : 1749}
,
{
"name" : "addSelectionClipboard",
"kind" : "function",
"protection" : "public",
"type" : "void(Clipboard clipboard)",
"comment" : "\n Adds clipboard to the list of clipboards in which the selection\n contents of buffer are available. In most cases, clipboard will be\n the GtkClipboard of type GDK_SELECTION_PRIMARY for a view of buffer.\n Params:\n clipboard = a GtkClipboard\n\t \n",
"line" : 1762}
,
{
"name" : "removeSelectionClipboard",
"kind" : "function",
"protection" : "public",
"type" : "void(Clipboard clipboard)",
"comment" : "\n Removes a GtkClipboard added with\n gtk_text_buffer_add_selection_clipboard().\n Params:\n clipboard = a GtkClipboard added to buffer by\n gtk_text_buffer_add_selection_clipboard()\n\t \n",
"line" : 1775}
,
{
"name" : "deserialize",
"kind" : "function",
"protection" : "public",
"type" : "int(TextBuffer contentBuffer, void* format, TextIter iter, ubyte[] data)",
"comment" : "\n This function deserializes rich text in format format and inserts\n it at iter.\n formats to be used must be registered using\n gtk_text_buffer_register_deserialize_format() or\n gtk_text_buffer_register_deserialize_tagset() beforehand.\n Since 2.10\n Params:\n contentBuffer = the GtkTextBuffer to deserialize into\n format = the rich text format to use for deserializing\n iter = insertion point for the deserialized text\n data = data to deserialize. [array length=length]\n Returns: TRUE on success, FALSE otherwise.\n Throws: GException on failure.\n\t \n",
"line" : 1796}
,
{
"name" : "deserializeGetCanCreateTags",
"kind" : "function",
"protection" : "public",
"type" : "int(void* format)",
"comment" : "\n This functions returns the value set with\n gtk_text_buffer_deserialize_set_can_create_tags()\n Since 2.10\n Params:\n format = a GdkAtom representing a registered rich text format\n Returns: whether deserializing this format may create tags\n\t \n",
"line" : 1819}
,
{
"name" : "deserializeSetCanCreateTags",
"kind" : "function",
"protection" : "public",
"type" : "void(void* format, int canCreateTags)",
"comment" : "\n Use this function to allow a rich text deserialization function to\n create new tags in the receiving buffer. Note that using this\n function is almost always a bad idea, because the rich text\n functions you register should know how to map the rich text format\n they handler to your text buffers set of tags.\n The ability of creating new (arbitrary!) tags in the receiving buffer\n is meant for special rich text formats like the internal one that\n is registered using gtk_text_buffer_register_deserialize_tagset(),\n because that format is essentially a dump of the internal structure\n of the source buffer, including its tag names.\n You should allow creation of tags only if you know what you are\n doing, e.g. if you defined a tagset name for your application\n suite's text buffers and you know that it's fine to receive new\n tags from these buffers, because you know that your application can\n handle the newly created tags.\n Since 2.10\n Params:\n format = a GdkAtom representing a registered rich text format\n canCreateTags = whether deserializing this format may create tags\n\t \n",
"line" : 1846}
,
{
"name" : "getCopyTargetList",
"kind" : "function",
"protection" : "public",
"type" : "TargetList()",
"comment" : "\n This function returns the list of targets this text buffer can\n provide for copying and as DND source. The targets in the list are\n added with info values from the GtkTextBufferTargetInfo enum,\n using gtk_target_list_add_rich_text_targets() and\n gtk_target_list_add_text_targets().\n Since 2.10\n Returns: the GtkTargetList. [transfer none]\n\t \n",
"line" : 1861}
,
{
"name" : "getDeserializeFormats",
"kind" : "function",
"protection" : "public",
"type" : "void*[]()",
"comment" : "\n This function returns the rich text deserialize formats registered\n with buffer using gtk_text_buffer_register_deserialize_format() or\n gtk_text_buffer_register_deserialize_tagset()\n Since 2.10\n Returns: an array of GdkAtoms representing the registered formats. [array length=n_formats][transfer container]\n\t \n",
"line" : 1879}
,
{
"name" : "getPasteTargetList",
"kind" : "function",
"protection" : "public",
"type" : "TargetList()",
"comment" : "\n This function returns the list of targets this text buffer supports\n for pasting and as DND destination. The targets in the list are\n added with info values from the GtkTextBufferTargetInfo enum,\n using gtk_target_list_add_rich_text_targets() and\n gtk_target_list_add_text_targets().\n Since 2.10\n Returns: the GtkTargetList. [transfer none]\n\t \n",
"line" : 1896}
,
{
"name" : "getSerializeFormats",
"kind" : "function",
"protection" : "public",
"type" : "void*[]()",
"comment" : "\n This function returns the rich text serialize formats registered\n with buffer using gtk_text_buffer_register_serialize_format() or\n gtk_text_buffer_register_serialize_tagset()\n Since 2.10\n Returns: an array of GdkAtoms representing the registered formats. [array length=n_formats][transfer container]\n\t \n",
"line" : 1914}
,
{
"name" : "registerDeserializeFormat",
"kind" : "function",
"protection" : "public",
"type" : "void*(string mimeType, extern (C) int function(GtkTextBuffer*, GtkTextBuffer*, GtkTextIter*, ubyte*, ulong, int, void*, GError**) funct, void* userData, extern (C) void function(void* cbData) userDataDestroy)",
"comment" : "\n This function registers a rich text deserialization function along with\n its mime_type with the passed buffer.\n Since 2.10\n Params:\n mimeType = the format's mime-type\n userData = function's user_data\n userDataDestroy = a function to call when user_data is no longer needed\n Returns: the GdkAtom that corresponds to the newly registered format's mime-type. [transfer none]\n\t \n",
"line" : 1932}
,
{
"name" : "registerDeserializeTagset",
"kind" : "function",
"protection" : "public",
"type" : "void*(string tagsetName)",
"comment" : "\n This function registers GTK+'s internal rich text serialization\n format with the passed buffer. See\n gtk_text_buffer_register_serialize_tagset() for details.\n Since 2.10\n Params:\n tagsetName = an optional tagset name, on NULL. [allow-none]\n Returns: the GdkAtom that corresponds to the newly registered format's mime-type. [transfer none]\n\t \n",
"line" : 1947}
,
{
"name" : "registerSerializeFormat",
"kind" : "function",
"protection" : "public",
"type" : "void*(string mimeType, extern (C) ubyte* function(GtkTextBuffer*, GtkTextBuffer*, GtkTextIter*, GtkTextIter*, ulong*, void*) funct, void* userData, extern (C) void function(void* cbData) userDataDestroy)",
"comment" : "\n This function registers a rich text serialization function along with\n its mime_type with the passed buffer.\n Since 2.10\n Params:\n mimeType = the format's mime-type\n userData = function's user_data\n userDataDestroy = a function to call when user_data is no longer needed\n Returns: the GdkAtom that corresponds to the newly registered format's mime-type. [transfer none]\n\t \n",
"line" : 1963}
,
{
"name" : "registerSerializeTagset",
"kind" : "function",
"protection" : "public",
"type" : "void*(string tagsetName)",
"comment" : "\n This function registers GTK+'s internal rich text serialization\n format with the passed buffer. The internal format does not comply\n to any standard rich text format and only works between GtkTextBuffer\n instances. It is capable of serializing all of a text buffer's tags\n and embedded pixbufs.\n This function is just a wrapper around\n gtk_text_buffer_register_serialize_format(). The mime type used\n for registering is \"application\/x-gtk-text-buffer-rich-text\", or\n \"application\/x-gtk-text-buffer-rich-text;format=tagset_name\" if a\n tagset_name was passed.\n The tagset_name can be used to restrict the transfer of rich text\n to buffers with compatible sets of tags, in order to avoid unknown\n tags from being pasted. It is probably the common case to pass an\n identifier != NULL here, since the NULL tagset requires the\n receiving buffer to deal with with pasting of arbitrary tags.\n Since 2.10\n Params:\n tagsetName = an optional tagset name, on NULL. [allow-none]\n Returns: the GdkAtom that corresponds to the newly registered format's mime-type. [transfer none]\n\t \n",
"line" : 1990}
,
{
"name" : "serialize",
"kind" : "function",
"protection" : "public",
"type" : "ubyte[](TextBuffer contentBuffer, void* format, TextIter start, TextIter end)",
"comment" : "\n This function serializes the portion of text between start\n and end in the rich text format represented by format.\n formats to be used must be registered using\n gtk_text_buffer_register_serialize_format() or\n gtk_text_buffer_register_serialize_tagset() beforehand.\n Since 2.10\n Params:\n contentBuffer = the GtkTextBuffer to serialize\n format = the rich text format to use for serializing\n start = start of block of text to serialize\n end = end of block of test to serialize\n Returns: the serialized data, encoded as format. [array length=length][transfer full]\n\t \n",
"line" : 2010}
,
{
"name" : "unregisterDeserializeFormat",
"kind" : "function",
"protection" : "public",
"type" : "void(void* format)",
"comment" : "\n This function unregisters a rich text format that was previously\n registered using gtk_text_buffer_register_deserialize_format() or\n gtk_text_buffer_register_deserialize_tagset().\n Since 2.10\n Params:\n format = a GdkAtom representing a registered rich text format.\n\t \n",
"line" : 2026}
,
{
"name" : "unregisterSerializeFormat",
"kind" : "function",
"protection" : "public",
"type" : "void(void* format)",
"comment" : "\n This function unregisters a rich text format that was previously\n registered using gtk_text_buffer_register_serialize_format() or\n gtk_text_buffer_register_serialize_tagset()\n Since 2.10\n Params:\n format = a GdkAtom representing a registered rich text format.\n\t \n",
"line" : 2040}
]
}
]
}
,
{
"name" : "gtk.TextChildAnchor",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TextChildAnchor.d",
"members" : [
{
"name" : "TextChildAnchor",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n You may wish to begin by reading the text widget\n conceptual overview which gives an overview of all the objects and data\n types related to the text widget and how they work together.\n \n",
"line" : 78,
"base" : "Object",
"members" : [
{
"name" : "gtkTextChildAnchor",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkTextChildAnchor*",
"comment" : " the main Gtk struct \n",
"line" : 81}
,
{
"name" : "getTextChildAnchorStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkTextChildAnchor*()",
"line" : 84}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 91}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TextChildAnchor(GtkTextChildAnchor* gtkTextChildAnchor)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 99}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 111}
,
{
"name" : "onBackspaceListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextChildAnchor)[]",
"line" : 113}
,
{
"name" : "addOnBackspace",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextChildAnchor) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::backspace signal is a\n keybinding signal\n which gets emitted when the user asks for it.\n The default bindings for this signal are\n Backspace and Shift-Backspace.\n\t \n",
"line" : 121}
,
{
"name" : "callBackBackspace",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, TextChildAnchor textChildAnchor)",
"line" : 136}
,
{
"name" : "onCopyClipboardListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextChildAnchor)[]",
"line" : 144}
,
{
"name" : "addOnCopyClipboard",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextChildAnchor) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::copy-clipboard signal is a\n keybinding signal\n which gets emitted to copy the selection to the clipboard.\n The default bindings for this signal are\n Ctrl-c and Ctrl-Insert.\n\t \n",
"line" : 152}
,
{
"name" : "callBackCopyClipboard",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, TextChildAnchor textChildAnchor)",
"line" : 167}
,
{
"name" : "onCutClipboardListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextChildAnchor)[]",
"line" : 175}
,
{
"name" : "addOnCutClipboard",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextChildAnchor) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::cut-clipboard signal is a\n keybinding signal\n which gets emitted to cut the selection to the clipboard.\n The default bindings for this signal are\n Ctrl-x and Shift-Delete.\n\t \n",
"line" : 183}
,
{
"name" : "callBackCutClipboard",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, TextChildAnchor textChildAnchor)",
"line" : 198}
,
{
"name" : "onDeleteFromCursorListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkDeleteType, int, TextChildAnchor)[]",
"line" : 206}
,
{
"name" : "addOnDeleteFromCursor",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkDeleteType, int, TextChildAnchor) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::delete-from-cursor signal is a\n keybinding signal\n which gets emitted when the user initiates a text deletion.\n If the type is GTK_DELETE_CHARS, GTK+ deletes the selection\n if there is one, otherwise it deletes the requested number\n of characters.\n The default bindings for this signal are\n Delete for deleting a character, Ctrl-Delete for\n deleting a word and Ctrl-Backspace for deleting a word\n backwords.\n\t \n",
"line" : 219}
,
{
"name" : "callBackDeleteFromCursor",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, GtkDeleteType type, int count, TextChildAnchor textChildAnchor)",
"line" : 234}
,
{
"name" : "onInsertAtCursorListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(string, TextChildAnchor)[]",
"line" : 242}
,
{
"name" : "addOnInsertAtCursor",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(string, TextChildAnchor) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::insert-at-cursor signal is a\n keybinding signal\n which gets emitted when the user initiates the insertion of a\n fixed string at the cursor.\n This signal has no default bindings.\n\t \n",
"line" : 250}
,
{
"name" : "callBackInsertAtCursor",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, char* str, TextChildAnchor textChildAnchor)",
"line" : 265}
,
{
"name" : "onMoveCursorListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkMovementStep, int, int, TextChildAnchor)[]",
"line" : 273}
,
{
"name" : "addOnMoveCursor",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkMovementStep, int, int, TextChildAnchor) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::move-cursor signal is a\n keybinding signal\n which gets emitted when the user initiates a cursor movement.\n If the cursor is not visible in text_view, this signal causes\n the viewport to be moved instead.\n Applications should not connect to it, but may emit it with\n g_signal_emit_by_name() if they need to control the cursor\n programmatically.\n The default bindings for this signal come in two variants,\n the variant with the Shift modifier extends the selection,\n the variant without the Shift modifer does not.\n There are too many key combinations to list them all here.\n Arrow keys move by individual characters\/lines\n Ctrl-arrow key combinations move by words\/paragraphs\n Home\/End keys move to the ends of the buffer\n PageUp\/PageDown keys move vertically by pages\n Ctrl-PageUp\/PageDown keys move horizontally by pages\n TRUE if the move should extend the selection\n\t \n",
"line" : 294}
,
{
"name" : "callBackMoveCursor",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, GtkMovementStep step, int count, int extendSelection, TextChildAnchor textChildAnchor)",
"line" : 309}
,
{
"name" : "onMoveViewportListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkScrollStep, int, TextChildAnchor)[]",
"line" : 317}
,
{
"name" : "addOnMoveViewport",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkScrollStep, int, TextChildAnchor) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::move-viewport signal is a\n keybinding signal\n which can be bound to key combinations to allow the user\n to move the viewport, i.e. change what part of the text view\n is visible in a containing scrolled window.\n There are no default bindings for this signal.\n\t \n",
"line" : 326}
,
{
"name" : "callBackMoveViewport",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, GtkScrollStep step, int count, TextChildAnchor textChildAnchor)",
"line" : 341}
,
{
"name" : "onPageHorizontallyListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(int, int, TextChildAnchor)[]",
"line" : 349}
,
{
"name" : "addOnPageHorizontally",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(int, int, TextChildAnchor) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::page-horizontally signal is a\n keybinding signal\n which can be bound to key combinations to allow the user\n to initiate horizontal cursor movement by pages.\n This signal should not be used anymore, instead use the\n \"move-cursor\" signal with the GTK_MOVEMENT_HORIZONTAL_PAGES\n granularity.\n TRUE if the move should extend the selection\n\t \n",
"line" : 360}
,
{
"name" : "callBackPageHorizontally",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, int count, int extendSelection, TextChildAnchor textChildAnchor)",
"line" : 375}
,
{
"name" : "onPasteClipboardListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextChildAnchor)[]",
"line" : 383}
,
{
"name" : "addOnPasteClipboard",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextChildAnchor) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::paste-clipboard signal is a\n keybinding signal\n which gets emitted to paste the contents of the clipboard\n into the text view.\n The default bindings for this signal are\n Ctrl-v and Shift-Insert.\n\t \n",
"line" : 392}
,
{
"name" : "callBackPasteClipboard",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, TextChildAnchor textChildAnchor)",
"line" : 407}
,
{
"name" : "onPopulatePopupListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkMenu*, TextChildAnchor)[]",
"line" : 415}
,
{
"name" : "addOnPopulatePopup",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkMenu*, TextChildAnchor) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::populate-popup signal gets emitted before showing the\n context menu of the text view.\n If you need to add items to the context menu, connect\n to this signal and append your menuitems to the menu.\n\t \n",
"line" : 422}
,
{
"name" : "callBackPopulatePopup",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* entryStruct, GtkMenu* menu, TextChildAnchor textChildAnchor)",
"line" : 437}
,
{
"name" : "onPreeditChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(string, TextChildAnchor)[]",
"line" : 445}
,
{
"name" : "addOnPreeditChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(string, TextChildAnchor) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n If an input method is used, the typed text will not immediately\n be committed to the buffer. So if you are interested in the text,\n connect to this signal.\n This signal is only emitted if the text at the given position\n is actually editable.\n Since 2.20\n\t \n",
"line" : 454}
,
{
"name" : "callBackPreeditChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, char* preedit, TextChildAnchor textChildAnchor)",
"line" : 469}
,
{
"name" : "onSelectAllListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(int, TextChildAnchor)[]",
"line" : 477}
,
{
"name" : "addOnSelectAll",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(int, TextChildAnchor) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::select-all signal is a\n keybinding signal\n which gets emitted to select or unselect the complete\n contents of the text view.\n The default bindings for this signal are Ctrl-a and Ctrl-\/\n for selecting and Shift-Ctrl-a and Ctrl-\\ for unselecting.\n TRUE to select, FALSE to unselect\n\t \n",
"line" : 487}
,
{
"name" : "callBackSelectAll",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, int select, TextChildAnchor textChildAnchor)",
"line" : 502}
,
{
"name" : "onSetAnchorListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextChildAnchor)[]",
"line" : 510}
,
{
"name" : "addOnSetAnchor",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextChildAnchor) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::set-anchor signal is a\n keybinding signal\n which gets emitted when the user initiates setting the \"anchor\"\n mark. The \"anchor\" mark gets placed at the same position as the\n \"insert\" mark.\n This signal has no default bindings.\n\t \n",
"line" : 519}
,
{
"name" : "callBackSetAnchor",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, TextChildAnchor textChildAnchor)",
"line" : 534}
,
{
"name" : "onSetScrollAdjustmentsListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkAdjustment*, GtkAdjustment*, TextChildAnchor)[]",
"line" : 542}
,
{
"name" : "addOnSetScrollAdjustments",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkAdjustment*, GtkAdjustment*, TextChildAnchor) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Set the scroll adjustments for the text view. Usually scrolled containers\n like GtkScrolledWindow will emit this signal to connect two instances\n of GtkScrollbar to the scroll directions of the GtkTextView.\n\t \n",
"line" : 548}
,
{
"name" : "callBackSetScrollAdjustments",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* horizontalStruct, GtkAdjustment* vertical, GtkAdjustment* arg2, TextChildAnchor textChildAnchor)",
"line" : 563}
,
{
"name" : "onToggleCursorVisibleListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextChildAnchor)[]",
"line" : 571}
,
{
"name" : "addOnToggleCursorVisible",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextChildAnchor) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::toggle-cursor-visible signal is a\n keybinding signal\n which gets emitted to toggle the visibility of the cursor.\n The default binding for this signal is F7.\n\t \n",
"line" : 578}
,
{
"name" : "callBackToggleCursorVisible",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, TextChildAnchor textChildAnchor)",
"line" : 593}
,
{
"name" : "onToggleOverwriteListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextChildAnchor)[]",
"line" : 601}
,
{
"name" : "addOnToggleOverwrite",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextChildAnchor) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::toggle-overwrite signal is a\n keybinding signal\n which gets emitted to toggle the overwrite mode of the text view.\n The default bindings for this signal is Insert.\n See Also\n GtkTextBuffer, GtkTextIter\n\t \n",
"line" : 610}
,
{
"name" : "callBackToggleOverwrite",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, TextChildAnchor textChildAnchor)",
"line" : 625}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TextChildAnchor()",
"comment" : "\n Creates a new GtkTextChildAnchor. Usually you would then insert\n it into a GtkTextBuffer with gtk_text_buffer_insert_child_anchor().\n To perform the creation and insertion in one step, use the\n convenience function gtk_text_buffer_create_child_anchor().\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 641}
,
{
"name" : "getWidgets",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Gets a list of all widgets anchored at this child anchor.\n The returned list should be freed with g_list_free().\n Returns: list of widgets anchored at anchor. [element-type GtkWidget][transfer container]\n\t \n",
"line" : 657}
,
{
"name" : "getDeleted",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether a child anchor has been deleted from\n the buffer. Keep in mind that the child anchor will be\n unreferenced when removed from the buffer, so you need to\n hold your own reference (with g_object_ref()) if you plan\n to use this function — otherwise all deleted child anchors\n will also be finalized.\n Returns: TRUE if the child anchor has been deleted from its buffer\n\t \n",
"line" : 677}
]
}
]
}
,
{
"name" : "gtk.TextIter",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TextIter.d",
"members" : [
{
"name" : "TextIter",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n You may wish to begin by reading the text widget\n conceptual overview which gives an overview of all the objects and data\n types related to the text widget and how they work together.\n \n",
"line" : 97,
"base" : "Boxed",
"members" : [
{
"name" : "gtkTextIter",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkTextIter*",
"comment" : " the main Gtk struct \n",
"line" : 101}
,
{
"name" : "getTextIterStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkTextIter*()",
"line" : 104}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 111}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TextIter(GtkTextIter* gtkTextIter)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 119}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TextIter()",
"comment" : " \n",
"line" : 130}
,
{
"name" : "getBuffer",
"kind" : "function",
"protection" : "public",
"type" : "TextBuffer()",
"comment" : "\n\t \n\n Returns the GtkTextBuffer this iterator is associated with.\n Returns: the buffer. [transfer none]\n\t \n",
"line" : 143}
,
{
"name" : "copy",
"kind" : "function",
"protection" : "public",
"type" : "TextIter()",
"comment" : "\n Creates a dynamically-allocated copy of an iterator. This function\n is not useful in applications, because iterators can be copied with a\n simple assignment (GtkTextIter i = j;). The\n function is used by language bindings.\n Returns: a copy of the iter, free with gtk_text_iter_free()\n\t \n",
"line" : 161}
,
{
"name" : "free",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Free an iterator allocated on the heap. This function\n is intended for use in language bindings, and is not\n especially useful for applications, because iterators can\n simply be allocated on the stack.\n\t \n",
"line" : 178}
,
{
"name" : "getOffset",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the character offset of an iterator.\n Each character in a GtkTextBuffer has an offset,\n starting with 0 for the first character in the buffer.\n Use gtk_text_buffer_get_iter_at_offset() to convert an\n offset back into an iterator.\n Returns: a character offset\n\t \n",
"line" : 192}
,
{
"name" : "getLine",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the line number containing the iterator. Lines in\n a GtkTextBuffer are numbered beginning with 0 for the first\n line in the buffer.\n Returns: a line number\n\t \n",
"line" : 204}
,
{
"name" : "getLineOffset",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the character offset of the iterator,\n counting from the start of a newline-terminated line.\n The first character on the line has offset 0.\n Returns: offset from start of line\n\t \n",
"line" : 216}
,
{
"name" : "getLineIndex",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the byte index of the iterator, counting\n from the start of a newline-terminated line.\n Remember that GtkTextBuffer encodes text in\n UTF-8, and that characters can require a variable\n number of bytes to represent.\n Returns: distance from start of line, in bytes\n\t \n",
"line" : 230}
,
{
"name" : "getVisibleLineIndex",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the number of bytes from the start of the\n line to the given iter, not counting bytes that\n are invisible due to tags with the \"invisible\" flag\n toggled on.\n Returns: byte index of iter with respect to the start of the line\n\t \n",
"line" : 243}
,
{
"name" : "getVisibleLineOffset",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the offset in characters from the start of the\n line to the given iter, not counting characters that\n are invisible due to tags with the \"invisible\" flag\n toggled on.\n Returns: offset in visible characters from the start of the line\n\t \n",
"line" : 256}
,
{
"name" : "getChar",
"kind" : "function",
"protection" : "public",
"type" : "uint()",
"comment" : "\n Returns the Unicode character at this iterator. (Equivalent to\n operator* on a C++ iterator.) If the element at this iterator is a\n non-character element, such as an image embedded in the buffer, the\n Unicode \"unknown\" character 0xFFFC is returned. If invoked on\n the end iterator, zero is returned; zero is not a valid Unicode character.\n So you can write a loop which ends when gtk_text_iter_get_char()\n returns 0.\n Returns: a Unicode character, or 0 if iter is not dereferenceable\n\t \n",
"line" : 272}
,
{
"name" : "getSlice",
"kind" : "function",
"protection" : "public",
"type" : "string(TextIter end)",
"comment" : "\n Returns the text in the given range. A \"slice\" is an array of\n characters encoded in UTF-8 format, including the Unicode \"unknown\"\n character 0xFFFC for iterable non-character elements in the buffer,\n such as images. Because images are encoded in the slice, byte and\n character offsets in the returned array will correspond to byte\n offsets in the text buffer. Note that 0xFFFC can occur in normal\n text as well, so it is not a reliable indicator that a pixbuf or\n widget is in the buffer.\n Params:\n end = iterator at end of a range\n Returns: slice of text from the buffer\n\t \n",
"line" : 291}
,
{
"name" : "getText",
"kind" : "function",
"protection" : "public",
"type" : "string(TextIter end)",
"comment" : "\n Returns text in the given range. If the range\n contains non-text elements such as images, the character and byte\n offsets in the returned string will not correspond to character and\n byte offsets in the buffer. If you want offsets to correspond, see\n gtk_text_iter_get_slice().\n Params:\n end = iterator at end of a range\n Returns: array of characters from the buffer\n\t \n",
"line" : 307}
,
{
"name" : "getVisibleSlice",
"kind" : "function",
"protection" : "public",
"type" : "string(TextIter end)",
"comment" : "\n Like gtk_text_iter_get_slice(), but invisible text is not included.\n Invisible text is usually invisible because a GtkTextTag with the\n \"invisible\" attribute turned on has been applied to it.\n Params:\n end = iterator at end of range\n Returns: slice of text from the buffer\n\t \n",
"line" : 321}
,
{
"name" : "getVisibleText",
"kind" : "function",
"protection" : "public",
"type" : "string(TextIter end)",
"comment" : "\n Like gtk_text_iter_get_text(), but invisible text is not included.\n Invisible text is usually invisible because a GtkTextTag with the\n \"invisible\" attribute turned on has been applied to it.\n Params:\n end = iterator at end of range\n Returns: string containing visible text in the range\n\t \n",
"line" : 335}
,
{
"name" : "getPixbuf",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf()",
"comment" : "\n If the element at iter is a pixbuf, the pixbuf is returned\n (with no new reference count added). Otherwise,\n NULL is returned.\n Returns: the pixbuf at iter. [transfer none]\n\t \n",
"line" : 347}
,
{
"name" : "getMarks",
"kind" : "function",
"protection" : "public",
"type" : "ListSG()",
"comment" : "\n Returns a list of all GtkTextMark at this location. Because marks\n are not iterable (they don't take up any \"space\" in the buffer,\n they are just marks in between iterable locations), multiple marks\n can exist in the same place. The returned list is not in any\n meaningful order.\n Returns: list of GtkTextMark. [element-type GtkTextMark][transfer container]\n\t \n",
"line" : 366}
,
{
"name" : "getToggledTags",
"kind" : "function",
"protection" : "public",
"type" : "ListSG(int toggledOn)",
"comment" : "\n Returns a list of GtkTextTag that are toggled on or off at this\n point. (If toggled_on is TRUE, the list contains tags that are\n toggled on.) If a tag is toggled on at iter, then some non-empty\n range of characters following iter has that tag applied to it. If\n a tag is toggled off, then some non-empty range following iter\n does not have the tag applied to it.\n Params:\n toggledOn = TRUE to get toggled-on tags\n Returns: tags toggled at this point. [element-type GtkTextTag][transfer container]\n\t \n",
"line" : 388}
,
{
"name" : "getChildAnchor",
"kind" : "function",
"protection" : "public",
"type" : "TextChildAnchor()",
"comment" : "\n If the location at iter contains a child anchor, the\n anchor is returned (with no new reference count added). Otherwise,\n NULL is returned.\n Returns: the anchor at iter. [transfer none]\n\t \n",
"line" : 405}
,
{
"name" : "beginsTag",
"kind" : "function",
"protection" : "public",
"type" : "int(TextTag tag)",
"comment" : "\n Returns TRUE if tag is toggled on at exactly this point. If tag\n is NULL, returns TRUE if any tag is toggled on at this point. Note\n that the gtk_text_iter_begins_tag() returns TRUE if iter is the\n start of the tagged range;\n gtk_text_iter_has_tag() tells you whether an iterator is\n within a tagged range.\n Params:\n tag = a GtkTextTag, or NULL. [allow-none]\n Returns: whether iter is the start of a range tagged with tag\n\t \n",
"line" : 427}
,
{
"name" : "endsTag",
"kind" : "function",
"protection" : "public",
"type" : "int(TextTag tag)",
"comment" : "\n Returns TRUE if tag is toggled off at exactly this point. If tag\n is NULL, returns TRUE if any tag is toggled off at this point. Note\n that the gtk_text_iter_ends_tag() returns TRUE if iter is the\n end of the tagged range;\n gtk_text_iter_has_tag() tells you whether an iterator is\n within a tagged range.\n Params:\n tag = a GtkTextTag, or NULL. [allow-none]\n Returns: whether iter is the end of a range tagged with tag\n\t \n",
"line" : 444}
,
{
"name" : "togglesTag",
"kind" : "function",
"protection" : "public",
"type" : "int(TextTag tag)",
"comment" : "\n This is equivalent to (gtk_text_iter_begins_tag() ||\n gtk_text_iter_ends_tag()), i.e. it tells you whether a range with\n tag applied to it begins or ends at iter.\n Params:\n tag = a GtkTextTag, or NULL. [allow-none]\n Returns: whether tag is toggled on or off at iter\n\t \n",
"line" : 458}
,
{
"name" : "hasTag",
"kind" : "function",
"protection" : "public",
"type" : "int(TextTag tag)",
"comment" : "\n Returns TRUE if iter is within a range tagged with tag.\n Params:\n tag = a GtkTextTag\n Returns: whether iter is tagged with tag\n\t \n",
"line" : 470}
,
{
"name" : "getTags",
"kind" : "function",
"protection" : "public",
"type" : "ListSG()",
"comment" : "\n Returns a list of tags that apply to iter, in ascending order of\n priority (highest-priority tags are last). The GtkTextTag in the\n list don't have a reference added, but you have to free the list\n itself.\n Returns: list of GtkTextTag. [element-type GtkTextTag][transfer container]\n\t \n",
"line" : 483}
,
{
"name" : "editable",
"kind" : "function",
"protection" : "public",
"type" : "int(int defaultSetting)",
"comment" : "\n Returns whether the character at iter is within an editable region\n of text. Non-editable text is \"locked\" and can't be changed by the\n user via GtkTextView. This function is simply a convenience\n wrapper around gtk_text_iter_get_attributes(). If no tags applied\n to this text affect editability, default_setting will be returned.\n You don't want to use this function to decide whether text can be\n inserted at iter, because for insertion you don't want to know\n whether the char at iter is inside an editable range, you want to\n know whether a new character inserted at iter would be inside an\n editable range. Use gtk_text_iter_can_insert() to handle this\n case.\n Params:\n defaultSetting = TRUE if text is editable by default\n Returns: whether iter is inside an editable range\n\t \n",
"line" : 510}
,
{
"name" : "canInsert",
"kind" : "function",
"protection" : "public",
"type" : "int(int defaultEditability)",
"comment" : "\n Considering the default editability of the buffer, and tags that\n affect editability, determines whether text inserted at iter would\n be editable. If text inserted at iter would be editable then the\n user should be allowed to insert text at iter.\n gtk_text_buffer_insert_interactive() uses this function to decide\n whether insertions are allowed at a given position.\n Params:\n defaultEditability = TRUE if text is editable by default\n Returns: whether text inserted at iter would be editable\n\t \n",
"line" : 527}
,
{
"name" : "startsWord",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether iter begins a natural-language word. Word\n breaks are determined by Pango and should be correct for nearly any\n language (if not, the correct fix would be to the Pango word break\n algorithms).\n Returns: TRUE if iter is at the start of a word\n\t \n",
"line" : 540}
,
{
"name" : "endsWord",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether iter ends a natural-language word. Word breaks\n are determined by Pango and should be correct for nearly any\n language (if not, the correct fix would be to the Pango word break\n algorithms).\n Returns: TRUE if iter is at the end of a word\n\t \n",
"line" : 553}
,
{
"name" : "insideWord",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether iter is inside a natural-language word (as\n opposed to say inside some whitespace). Word breaks are determined\n by Pango and should be correct for nearly any language (if not, the\n correct fix would be to the Pango word break algorithms).\n Returns: TRUE if iter is inside a word\n\t \n",
"line" : 566}
,
{
"name" : "startsLine",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns TRUE if iter begins a paragraph,\n i.e. if gtk_text_iter_get_line_offset() would return 0.\n However this function is potentially more efficient than\n gtk_text_iter_get_line_offset() because it doesn't have to compute\n the offset, it just has to see whether it's 0.\n Returns: whether iter begins a line\n\t \n",
"line" : 580}
,
{
"name" : "endsLine",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns TRUE if iter points to the start of the paragraph\n delimiter characters for a line (delimiters will be either a\n newline, a carriage return, a carriage return followed by a\n newline, or a Unicode paragraph separator character). Note that an\n iterator pointing to the \\n of a \\r\\n pair will not be counted as\n the end of a line, the line ends before the \\r. The end iterator is\n considered to be at the end of a line, even though there are no\n paragraph delimiter chars there.\n Returns: whether iter is at the end of a line\n\t \n",
"line" : 597}
,
{
"name" : "startsSentence",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether iter begins a sentence. Sentence boundaries are\n determined by Pango and should be correct for nearly any language\n (if not, the correct fix would be to the Pango text boundary\n algorithms).\n Returns: TRUE if iter is at the start of a sentence.\n\t \n",
"line" : 610}
,
{
"name" : "endsSentence",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether iter ends a sentence. Sentence boundaries are\n determined by Pango and should be correct for nearly any language\n (if not, the correct fix would be to the Pango text boundary\n algorithms).\n Returns: TRUE if iter is at the end of a sentence.\n\t \n",
"line" : 623}
,
{
"name" : "insideSentence",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether iter is inside a sentence (as opposed to in\n between two sentences, e.g. after a period and before the first\n letter of the next sentence). Sentence boundaries are determined\n by Pango and should be correct for nearly any language (if not, the\n correct fix would be to the Pango text boundary algorithms).\n Returns: TRUE if iter is inside a sentence.\n\t \n",
"line" : 637}
,
{
"name" : "isCursorPosition",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n See gtk_text_iter_forward_cursor_position() or PangoLogAttr or\n pango_break() for details on what a cursor position is.\n Returns: TRUE if the cursor can be placed at iter\n\t \n",
"line" : 648}
,
{
"name" : "getCharsInLine",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the number of characters in the line containing iter,\n including the paragraph delimiters.\n Returns: number of characters in the line\n\t \n",
"line" : 659}
,
{
"name" : "getBytesInLine",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the number of bytes in the line containing iter,\n including the paragraph delimiters.\n Returns: number of bytes in the line\n\t \n",
"line" : 670}
,
{
"name" : "getAttributes",
"kind" : "function",
"protection" : "public",
"type" : "int(TextAttributes values)",
"comment" : "\n Computes the effect of any tags applied to this spot in the\n text. The values parameter should be initialized to the default\n settings you wish to use if no tags are in effect. You'd typically\n obtain the defaults from gtk_text_view_get_default_attributes().\n gtk_text_iter_get_attributes() will modify values, applying the\n effects of any tags present at iter. If any tags affected values,\n the function returns TRUE.\n Params:\n values = a GtkTextAttributes to be filled in. [out]\n Returns: TRUE if values was modified\n\t \n",
"line" : 688}
,
{
"name" : "getLanguage",
"kind" : "function",
"protection" : "public",
"type" : "PgLanguage()",
"comment" : "\n A convenience wrapper around gtk_text_iter_get_attributes(),\n which returns the language in effect at iter. If no tags affecting\n language apply to iter, the return value is identical to that of\n gtk_get_default_language().\n Returns: language in effect at iter\n\t \n",
"line" : 701}
,
{
"name" : "isEnd",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns TRUE if iter is the end iterator, i.e. one past the last\n dereferenceable iterator in the buffer. gtk_text_iter_is_end() is\n the most efficient way to check whether an iterator is the end\n iterator.\n Returns: whether iter is the end iterator\n\t \n",
"line" : 719}
,
{
"name" : "isStart",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns TRUE if iter is the first iterator in the buffer, that is\n if iter has a character offset of 0.\n Returns: whether iter is the first in the buffer\n\t \n",
"line" : 730}
,
{
"name" : "forwardChar",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Moves iter forward by one character offset. Note that images\n embedded in the buffer occupy 1 character slot, so\n gtk_text_iter_forward_char() may actually move onto an image instead\n of a character, if you have images in your buffer. If iter is the\n end iterator or one character before it, iter will now point at\n the end iterator, and gtk_text_iter_forward_char() returns FALSE for\n convenience when writing loops.\n Returns: whether iter moved and is dereferenceable\n\t \n",
"line" : 746}
,
{
"name" : "backwardChar",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Moves backward by one character offset. Returns TRUE if movement\n was possible; if iter was the first in the buffer (character\n offset 0), gtk_text_iter_backward_char() returns FALSE for convenience when\n writing loops.\n Returns: whether movement was possible\n\t \n",
"line" : 759}
,
{
"name" : "forwardChars",
"kind" : "function",
"protection" : "public",
"type" : "int(int count)",
"comment" : "\n Moves count characters if possible (if count would move past the\n start or end of the buffer, moves to the start or end of the\n buffer). The return value indicates whether the new position of\n iter is different from its original position, and dereferenceable\n (the last iterator in the buffer is not dereferenceable). If count\n is 0, the function does nothing and returns FALSE.\n Params:\n count = number of characters to move, may be negative\n Returns: whether iter moved and is dereferenceable\n\t \n",
"line" : 776}
,
{
"name" : "backwardChars",
"kind" : "function",
"protection" : "public",
"type" : "int(int count)",
"comment" : "\n Moves count characters backward, if possible (if count would move\n past the start or end of the buffer, moves to the start or end of\n the buffer). The return value indicates whether the iterator moved\n onto a dereferenceable position; if the iterator didn't move, or\n moved onto the end iterator, then FALSE is returned. If count is 0,\n the function does nothing and returns FALSE.\n Params:\n count = number of characters to move\n Returns: whether iter moved and is dereferenceable\n\t \n",
"line" : 793}
,
{
"name" : "forwardLine",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Moves iter to the start of the next line. If the iter is already on the\n last line of the buffer, moves the iter to the end of the current line.\n If after the operation, the iter is at the end of the buffer and not\n dereferencable, returns FALSE. Otherwise, returns TRUE.\n Returns: whether iter can be dereferenced\n\t \n",
"line" : 806}
,
{
"name" : "backwardLine",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Moves iter to the start of the previous line. Returns TRUE if\n iter could be moved; i.e. if iter was at character offset 0, this\n function returns FALSE. Therefore if iter was already on line 0,\n but not at the start of the line, iter is snapped to the start of\n the line and the function returns TRUE. (Note that this implies that\n in a loop calling this function, the line number may not change on\n every iteration, if your first iteration is on line 0.)\n Returns: whether iter moved\n\t \n",
"line" : 822}
,
{
"name" : "forwardLines",
"kind" : "function",
"protection" : "public",
"type" : "int(int count)",
"comment" : "\n Moves count lines forward, if possible (if count would move\n past the start or end of the buffer, moves to the start or end of\n the buffer). The return value indicates whether the iterator moved\n onto a dereferenceable position; if the iterator didn't move, or\n moved onto the end iterator, then FALSE is returned. If count is 0,\n the function does nothing and returns FALSE. If count is negative,\n moves backward by 0 - count lines.\n Params:\n count = number of lines to move forward\n Returns: whether iter moved and is dereferenceable\n\t \n",
"line" : 840}
,
{
"name" : "backwardLines",
"kind" : "function",
"protection" : "public",
"type" : "int(int count)",
"comment" : "\n Moves count lines backward, if possible (if count would move\n past the start or end of the buffer, moves to the start or end of\n the buffer). The return value indicates whether the iterator moved\n onto a dereferenceable position; if the iterator didn't move, or\n moved onto the end iterator, then FALSE is returned. If count is 0,\n the function does nothing and returns FALSE. If count is negative,\n moves forward by 0 - count lines.\n Params:\n count = number of lines to move backward\n Returns: whether iter moved and is dereferenceable\n\t \n",
"line" : 858}
,
{
"name" : "forwardWordEnds",
"kind" : "function",
"protection" : "public",
"type" : "int(int count)",
"comment" : "\n Calls gtk_text_iter_forward_word_end() up to count times.\n Params:\n count = number of times to move\n Returns: TRUE if iter moved and is not the end iterator\n\t \n",
"line" : 870}
,
{
"name" : "backwardWordStarts",
"kind" : "function",
"protection" : "public",
"type" : "int(int count)",
"comment" : "\n Calls gtk_text_iter_backward_word_start() up to count times.\n Params:\n count = number of times to move\n Returns: TRUE if iter moved and is not the end iterator\n\t \n",
"line" : 882}
,
{
"name" : "forwardWordEnd",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Moves forward to the next word end. (If iter is currently on a\n word end, moves forward to the next one after that.) Word breaks\n are determined by Pango and should be correct for nearly any\n language (if not, the correct fix would be to the Pango word break\n algorithms).\n Returns: TRUE if iter moved and is not the end iterator\n\t \n",
"line" : 896}
,
{
"name" : "backwardWordStart",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Moves backward to the previous word start. (If iter is currently on a\n word start, moves backward to the next one after that.) Word breaks\n are determined by Pango and should be correct for nearly any\n language (if not, the correct fix would be to the Pango word break\n algorithms).\n Returns: TRUE if iter moved and is not the end iterator\n\t \n",
"line" : 910}
,
{
"name" : "forwardCursorPosition",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Moves iter forward by a single cursor position. Cursor positions\n are (unsurprisingly) positions where the cursor can appear. Perhaps\n surprisingly, there may not be a cursor position between all\n characters. The most common example for European languages would be\n a carriage return\/newline sequence. For some Unicode characters,\n the equivalent of say the letter \"a\" with an accent mark will be\n represented as two characters, first the letter then a \"combining\n mark\" that causes the accent to be rendered; so the cursor can't go\n between those two characters. See also the PangoLogAttr structure and\n pango_break() function.\n Returns: TRUE if we moved and the new position is dereferenceable\n\t \n",
"line" : 929}
,
{
"name" : "backwardCursorPosition",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Like gtk_text_iter_forward_cursor_position(), but moves backward.\n Returns: TRUE if we moved\n\t \n",
"line" : 939}
,
{
"name" : "forwardCursorPositions",
"kind" : "function",
"protection" : "public",
"type" : "int(int count)",
"comment" : "\n Moves up to count cursor positions. See\n gtk_text_iter_forward_cursor_position() for details.\n Params:\n count = number of positions to move\n Returns: TRUE if we moved and the new position is dereferenceable\n\t \n",
"line" : 952}
,
{
"name" : "backwardCursorPositions",
"kind" : "function",
"protection" : "public",
"type" : "int(int count)",
"comment" : "\n Moves up to count cursor positions. See\n gtk_text_iter_forward_cursor_position() for details.\n Params:\n count = number of positions to move\n Returns: TRUE if we moved and the new position is dereferenceable\n\t \n",
"line" : 965}
,
{
"name" : "backwardSentenceStart",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Moves backward to the previous sentence start; if iter is already at\n the start of a sentence, moves backward to the next one. Sentence\n boundaries are determined by Pango and should be correct for nearly\n any language (if not, the correct fix would be to the Pango text\n boundary algorithms).\n Returns: TRUE if iter moved and is not the end iterator\n\t \n",
"line" : 979}
,
{
"name" : "backwardSentenceStarts",
"kind" : "function",
"protection" : "public",
"type" : "int(int count)",
"comment" : "\n Calls gtk_text_iter_backward_sentence_start() up to count times,\n or until it returns FALSE. If count is negative, moves forward\n instead of backward.\n Params:\n count = number of sentences to move\n Returns: TRUE if iter moved and is not the end iterator\n\t \n",
"line" : 993}
,
{
"name" : "forwardSentenceEnd",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Moves forward to the next sentence end. (If iter is at the end of\n a sentence, moves to the next end of sentence.) Sentence\n boundaries are determined by Pango and should be correct for nearly\n any language (if not, the correct fix would be to the Pango text\n boundary algorithms).\n Returns: TRUE if iter moved and is not the end iterator\n\t \n",
"line" : 1007}
,
{
"name" : "forwardSentenceEnds",
"kind" : "function",
"protection" : "public",
"type" : "int(int count)",
"comment" : "\n Calls gtk_text_iter_forward_sentence_end() count times (or until\n gtk_text_iter_forward_sentence_end() returns FALSE). If count is\n negative, moves backward instead of forward.\n Params:\n count = number of sentences to move\n Returns: TRUE if iter moved and is not the end iterator\n\t \n",
"line" : 1021}
,
{
"name" : "forwardVisibleWordEnds",
"kind" : "function",
"protection" : "public",
"type" : "int(int count)",
"comment" : "\n Calls gtk_text_iter_forward_visible_word_end() up to count times.\n Since 2.4\n Params:\n count = number of times to move\n Returns: TRUE if iter moved and is not the end iterator\n\t \n",
"line" : 1034}
,
{
"name" : "backwardVisibleWordStarts",
"kind" : "function",
"protection" : "public",
"type" : "int(int count)",
"comment" : "\n Calls gtk_text_iter_backward_visible_word_start() up to count times.\n Since 2.4\n Params:\n count = number of times to move\n Returns: TRUE if iter moved and is not the end iterator\n\t \n",
"line" : 1047}
,
{
"name" : "forwardVisibleWordEnd",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Moves forward to the next visible word end. (If iter is currently on a\n word end, moves forward to the next one after that.) Word breaks\n are determined by Pango and should be correct for nearly any\n language (if not, the correct fix would be to the Pango word break\n algorithms).\n Since 2.4\n Returns: TRUE if iter moved and is not the end iterator\n\t \n",
"line" : 1062}
,
{
"name" : "backwardVisibleWordStart",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Moves backward to the previous visible word start. (If iter is currently\n on a word start, moves backward to the next one after that.) Word breaks\n are determined by Pango and should be correct for nearly any\n language (if not, the correct fix would be to the Pango word break\n algorithms).\n Since 2.4\n Returns: TRUE if iter moved and is not the end iterator\n\t \n",
"line" : 1077}
,
{
"name" : "forwardVisibleCursorPosition",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Moves iter forward to the next visible cursor position. See\n gtk_text_iter_forward_cursor_position() for details.\n Since 2.4\n Returns: TRUE if we moved and the new position is dereferenceable\n\t \n",
"line" : 1089}
,
{
"name" : "backwardVisibleCursorPosition",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Moves iter forward to the previous visible cursor position. See\n gtk_text_iter_backward_cursor_position() for details.\n Since 2.4\n Returns: TRUE if we moved and the new position is dereferenceable\n\t \n",
"line" : 1101}
,
{
"name" : "forwardVisibleCursorPositions",
"kind" : "function",
"protection" : "public",
"type" : "int(int count)",
"comment" : "\n Moves up to count visible cursor positions. See\n gtk_text_iter_forward_cursor_position() for details.\n Since 2.4\n Params:\n count = number of positions to move\n Returns: TRUE if we moved and the new position is dereferenceable\n\t \n",
"line" : 1115}
,
{
"name" : "backwardVisibleCursorPositions",
"kind" : "function",
"protection" : "public",
"type" : "int(int count)",
"comment" : "\n Moves up to count visible cursor positions. See\n gtk_text_iter_backward_cursor_position() for details.\n Since 2.4\n Params:\n count = number of positions to move\n Returns: TRUE if we moved and the new position is dereferenceable\n\t \n",
"line" : 1129}
,
{
"name" : "forwardVisibleLine",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Moves iter to the start of the next visible line. Returns TRUE if there\n was a next line to move to, and FALSE if iter was simply moved to\n the end of the buffer and is now not dereferenceable, or if iter was\n already at the end of the buffer.\n Since 2.8\n Returns: whether iter can be dereferenced\n\t \n",
"line" : 1143}
,
{
"name" : "backwardVisibleLine",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Moves iter to the start of the previous visible line. Returns TRUE if\n iter could be moved; i.e. if iter was at character offset 0, this\n function returns FALSE. Therefore if iter was already on line 0,\n but not at the start of the line, iter is snapped to the start of\n the line and the function returns TRUE. (Note that this implies that\n in a loop calling this function, the line number may not change on\n every iteration, if your first iteration is on line 0.)\n Since 2.8\n Returns: whether iter moved\n\t \n",
"line" : 1160}
,
{
"name" : "forwardVisibleLines",
"kind" : "function",
"protection" : "public",
"type" : "int(int count)",
"comment" : "\n Moves count visible lines forward, if possible (if count would move\n past the start or end of the buffer, moves to the start or end of\n the buffer). The return value indicates whether the iterator moved\n onto a dereferenceable position; if the iterator didn't move, or\n moved onto the end iterator, then FALSE is returned. If count is 0,\n the function does nothing and returns FALSE. If count is negative,\n moves backward by 0 - count lines.\n Since 2.8\n Params:\n count = number of lines to move forward\n Returns: whether iter moved and is dereferenceable\n\t \n",
"line" : 1179}
,
{
"name" : "backwardVisibleLines",
"kind" : "function",
"protection" : "public",
"type" : "int(int count)",
"comment" : "\n Moves count visible lines backward, if possible (if count would move\n past the start or end of the buffer, moves to the start or end of\n the buffer). The return value indicates whether the iterator moved\n onto a dereferenceable position; if the iterator didn't move, or\n moved onto the end iterator, then FALSE is returned. If count is 0,\n the function does nothing and returns FALSE. If count is negative,\n moves forward by 0 - count lines.\n Since 2.8\n Params:\n count = number of lines to move backward\n Returns: whether iter moved and is dereferenceable\n\t \n",
"line" : 1198}
,
{
"name" : "setOffset",
"kind" : "function",
"protection" : "public",
"type" : "void(int charOffset)",
"comment" : "\n Sets iter to point to char_offset. char_offset counts from the start\n of the entire text buffer, starting with 0.\n Params:\n charOffset = a character number\n\t \n",
"line" : 1210}
,
{
"name" : "setLine",
"kind" : "function",
"protection" : "public",
"type" : "void(int lineNumber)",
"comment" : "\n Moves iterator iter to the start of the line line_number. If\n line_number is negative or larger than the number of lines in the\n buffer, moves iter to the start of the last line in the buffer.\n Params:\n lineNumber = line number (counted from 0)\n\t \n",
"line" : 1223}
,
{
"name" : "setLineOffset",
"kind" : "function",
"protection" : "public",
"type" : "void(int charOnLine)",
"comment" : "\n Moves iter within a line, to a new character\n (not byte) offset. The given character offset must be less than or\n equal to the number of characters in the line; if equal, iter\n moves to the start of the next line. See\n gtk_text_iter_set_line_index() if you have a byte index rather than\n a character offset.\n Params:\n charOnLine = a character offset relative to the start of iter's current line\n\t \n",
"line" : 1239}
,
{
"name" : "setLineIndex",
"kind" : "function",
"protection" : "public",
"type" : "void(int byteOnLine)",
"comment" : "\n Same as gtk_text_iter_set_line_offset(), but works with a\n byte index. The given byte index must be at\n the start of a character, it can't be in the middle of a UTF-8\n encoded character.\n Params:\n byteOnLine = a byte index relative to the start of iter's current line\n\t \n",
"line" : 1253}
,
{
"name" : "setVisibleLineIndex",
"kind" : "function",
"protection" : "public",
"type" : "void(int byteOnLine)",
"comment" : "\n Like gtk_text_iter_set_line_index(), but the index is in visible\n bytes, i.e. text with a tag making it invisible is not counted\n in the index.\n Params:\n byteOnLine = a byte index\n\t \n",
"line" : 1266}
,
{
"name" : "setVisibleLineOffset",
"kind" : "function",
"protection" : "public",
"type" : "void(int charOnLine)",
"comment" : "\n Like gtk_text_iter_set_line_offset(), but the offset is in visible\n characters, i.e. text with a tag making it invisible is not\n counted in the offset.\n Params:\n charOnLine = a character offset\n\t \n",
"line" : 1279}
,
{
"name" : "forwardToEnd",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Moves iter forward to the \"end iterator,\" which points one past the last\n valid character in the buffer. gtk_text_iter_get_char() called on the\n end iterator returns 0, which is convenient for writing loops.\n\t \n",
"line" : 1290}
,
{
"name" : "forwardToLineEnd",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Moves the iterator to point to the paragraph delimiter characters,\n which will be either a newline, a carriage return, a carriage\n return\/newline in sequence, or the Unicode paragraph separator\n character. If the iterator is already at the paragraph delimiter\n characters, moves to the paragraph delimiter characters for the\n next line. If iter is on the last line in the buffer, which does\n not end in paragraph delimiters, moves to the end iterator (end of\n the last line), and returns FALSE.\n Returns: TRUE if we moved and the new location is not the end iterator\n\t \n",
"line" : 1307}
,
{
"name" : "forwardToTagToggle",
"kind" : "function",
"protection" : "public",
"type" : "int(TextTag tag)",
"comment" : "\n Moves forward to the next toggle (on or off) of the\n GtkTextTag tag, or to the next toggle of any tag if\n tag is NULL. If no matching tag toggles are found,\n returns FALSE, otherwise TRUE. Does not return toggles\n located at iter, only toggles after iter. Sets iter to\n the location of the toggle, or to the end of the buffer\n if no toggle is found.\n Params:\n tag = a GtkTextTag, or NULL. [allow-none]\n Returns: whether we found a tag toggle after iter\n\t \n",
"line" : 1325}
,
{
"name" : "backwardToTagToggle",
"kind" : "function",
"protection" : "public",
"type" : "int(TextTag tag)",
"comment" : "\n Moves backward to the next toggle (on or off) of the\n GtkTextTag tag, or to the next toggle of any tag if\n tag is NULL. If no matching tag toggles are found,\n returns FALSE, otherwise TRUE. Does not return toggles\n located at iter, only toggles before iter. Sets iter\n to the location of the toggle, or the start of the buffer\n if no toggle is found.\n Params:\n tag = a GtkTextTag, or NULL. [allow-none]\n Returns: whether we found a tag toggle before iter\n\t \n",
"line" : 1343}
,
{
"name" : "forwardFindChar",
"kind" : "function",
"protection" : "public",
"type" : "int(extern (C) int function(uint, void*) pred, void* userData, TextIter limit)",
"comment" : "\n Advances iter, calling pred on each character. If\n pred returns TRUE, returns TRUE and stops scanning.\n If pred never returns TRUE, iter is set to limit if\n limit is non-NULL, otherwise to the end iterator.\n Params:\n pred = a function to be called on each character. [scope call]\n userData = user data for pred\n limit = search limit, or NULL for none. [allow-none]\n Returns: whether a match was found\n\t \n",
"line" : 1360}
,
{
"name" : "backwardFindChar",
"kind" : "function",
"protection" : "public",
"type" : "int(extern (C) int function(uint, void*) pred, void* userData, TextIter limit)",
"comment" : "\n Same as gtk_text_iter_forward_find_char(), but goes backward from iter.\n Params:\n pred = function to be called on each character. [scope call]\n userData = user data for pred\n limit = search limit, or NULL for none. [allow-none]\n Returns: whether a match was found\n\t \n",
"line" : 1374}
,
{
"name" : "forwardSearch",
"kind" : "function",
"protection" : "public",
"type" : "int(string str, GtkTextSearchFlags flags, TextIter matchStart, TextIter matchEnd, TextIter limit)",
"comment" : "\n Searches forward for str. Any match is returned by setting\n match_start to the first character of the match and match_end to the\n first character after the match. The search will not continue past\n limit. Note that a search is a linear or O(n) operation, so you\n may wish to use limit to avoid locking up your UI on large\n buffers.\n If the GTK_TEXT_SEARCH_VISIBLE_ONLY flag is present, the match may\n have invisible text interspersed in str. i.e. str will be a\n possibly-noncontiguous subsequence of the matched range. similarly,\n if you specify GTK_TEXT_SEARCH_TEXT_ONLY, the match may have\n pixbufs or child widgets mixed inside the matched range. If these\n flags are not given, the match must be exact; the special 0xFFFC\n character in str will match embedded pixbufs or child widgets.\n Params:\n str = a search string\n flags = flags affecting how the search is done\n matchStart = return location for start of match, or NULL. [out caller-allocates][allow-none]\n matchEnd = return location for end of match, or NULL. [out caller-allocates][allow-none]\n limit = bound for the search, or NULL for the end of the buffer. [allow-none]\n Returns: whether a match was found\n\t \n",
"line" : 1402}
,
{
"name" : "backwardSearch",
"kind" : "function",
"protection" : "public",
"type" : "int(string str, GtkTextSearchFlags flags, TextIter matchStart, TextIter matchEnd, TextIter limit)",
"comment" : "\n Same as gtk_text_iter_forward_search(), but moves backward.\n Params:\n str = search string\n flags = bitmask of flags affecting the search\n matchStart = return location for start of match, or NULL. [out caller-allocates][allow-none]\n matchEnd = return location for end of match, or NULL. [out caller-allocates][allow-none]\n limit = location of last possible match_start, or NULL for start of buffer. [allow-none]\n Returns: whether a match was found\n\t \n",
"line" : 1418}
,
{
"name" : "equal",
"kind" : "function",
"protection" : "public",
"type" : "int(TextIter rhs)",
"comment" : "\n Tests whether two iterators are equal, using the fastest possible\n mechanism. This function is very fast; you can expect it to perform\n better than e.g. getting the character offset for each iterator and\n comparing the offsets yourself. Also, it's a bit faster than\n gtk_text_iter_compare().\n Params:\n rhs = another GtkTextIter\n Returns: TRUE if the iterators point to the same place in the buffer\n\t \n",
"line" : 1434}
,
{
"name" : "compare",
"kind" : "function",
"protection" : "public",
"type" : "int(TextIter rhs)",
"comment" : "\n A qsort()-style function that returns negative if lhs is less than\n rhs, positive if lhs is greater than rhs, and 0 if they're equal.\n Ordering is in character offset order, i.e. the first character in the buffer\n is less than the second character in the buffer.\n Params:\n rhs = another GtkTextIter\n Returns: -1 if lhs is less than rhs, 1 if lhs is greater, 0 if they are equal\n\t \n",
"line" : 1449}
,
{
"name" : "inRange",
"kind" : "function",
"protection" : "public",
"type" : "int(TextIter start, TextIter end)",
"comment" : "\n Checks whether iter falls in the range [start, end).\n start and end must be in ascending order.\n Params:\n start = start of range\n end = end of range\n Returns: TRUE if iter is in the range\n\t \n",
"line" : 1463}
,
{
"name" : "order",
"kind" : "function",
"protection" : "public",
"type" : "void(TextIter second)",
"comment" : "\n Swaps the value of first and second if second comes before\n first in the buffer. That is, ensures that first and second are\n in sequence. Most text buffer functions that take a range call this\n automatically on your behalf, so there's no real reason to call it yourself\n in those cases. There are some exceptions, such as gtk_text_iter_in_range(),\n that expect a pre-sorted range.\n Params:\n second = another GtkTextIter\n\t \n",
"line" : 1479}
]
}
]
}
,
{
"name" : "gtk.TextMark",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TextMark.d",
"members" : [
{
"name" : "TextMark",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n You may wish to begin by reading the text widget\n conceptual overview which gives an overview of all the objects and data\n types related to the text widget and how they work together.\n A GtkTextMark is like a bookmark in a text buffer; it preserves a position in\n the text. You can convert the mark to an iterator using\n gtk_text_buffer_get_iter_at_mark(). Unlike iterators, marks remain valid across\n buffer mutations, because their behavior is defined when text is inserted or\n deleted. When text containing a mark is deleted, the mark remains in the\n position originally occupied by the deleted text. When text is inserted at a\n mark, a mark with left gravity will be moved to the\n beginning of the newly-inserted text, and a mark with right\n gravity will be moved to the end.\n [3]\n Marks are reference counted, but the reference count only controls the validity\n of the memory; marks can be deleted from the buffer at any time with\n gtk_text_buffer_delete_mark(). Once deleted from the buffer, a mark is\n essentially useless.\n Marks optionally have names; these can be convenient to avoid passing the\n GtkTextMark object around.\n Marks are typically created using the gtk_text_buffer_create_mark() function.\n \n",
"line" : 94,
"base" : "ObjectG",
"members" : [
{
"name" : "gtkTextMark",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkTextMark*",
"comment" : " the main Gtk struct \n",
"line" : 98}
,
{
"name" : "getTextMarkStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkTextMark*()",
"line" : 101}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 108}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TextMark(GtkTextMark* gtkTextMark)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 116}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 134}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TextMark(string name, int leftGravity)",
"comment" : "\n\t \n\n Creates a text mark. Add it to a buffer using gtk_text_buffer_add_mark().\n If name is NULL, the mark is anonymous; otherwise, the mark can be\n retrieved by name using gtk_text_buffer_get_mark(). If a mark has left\n gravity, and text is inserted at the mark's current location, the mark\n will be moved to the left of the newly-inserted text. If the mark has\n right gravity (left_gravity = FALSE), the mark will end up on the\n right of newly-inserted text. The standard left-to-right cursor is a\n mark with right gravity (when you type, the cursor stays on the right\n side of the text you're typing).\n Since 2.12\n Params:\n name = mark name or NULL. [allow-none]\n leftGravity = whether the mark should have left gravity\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 159}
,
{
"name" : "setVisible",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n Sets the visibility of mark; the insertion point is normally\n visible, i.e. you can see it as a vertical bar. Also, the text\n widget uses a visible mark to indicate where a drop will occur when\n dragging-and-dropping text. Most other marks are not visible.\n Marks are not visible by default.\n Params:\n setting = visibility of mark\n\t \n",
"line" : 179}
,
{
"name" : "getVisible",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns TRUE if the mark is visible (i.e. a cursor is displayed\n for it).\n Returns: TRUE if visible\n\t \n",
"line" : 190}
,
{
"name" : "getDeleted",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns TRUE if the mark has been removed from its buffer\n with gtk_text_buffer_delete_mark(). See gtk_text_buffer_add_mark()\n for a way to add it to a buffer again.\n Returns: whether the mark is deleted\n\t \n",
"line" : 202}
,
{
"name" : "getName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns the mark name; returns NULL for anonymous marks.\n Returns: mark name\n\t \n",
"line" : 212}
,
{
"name" : "getBuffer",
"kind" : "function",
"protection" : "public",
"type" : "TextBuffer()",
"comment" : "\n Gets the buffer this mark is located inside,\n or NULL if the mark is deleted.\n Returns: the mark's GtkTextBuffer. [transfer none]\n\t \n",
"line" : 223}
,
{
"name" : "getLeftGravity",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether the mark has left gravity.\n Returns: TRUE if the mark has left gravity, FALSE otherwise\n\t \n",
"line" : 238}
]
}
]
}
,
{
"name" : "gtk.TextTag",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TextTag.d",
"members" : [
{
"name" : "TextTag",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n You may wish to begin by reading the text widget\n conceptual overview which gives an overview of all the objects and data\n types related to the text widget and how they work together.\n Tags should be in the GtkTextTagTable for a given GtkTextBuffer\n before using them with that buffer.\n gtk_text_buffer_create_tag() is the best way to create tags.\n See gtk-demo for numerous examples.\n The \"invisible\" property was not implemented for GTK+ 2.0.\n It is working (with minor issues) since 2.8.\n \n",
"line" : 92,
"base" : "ObjectG",
"members" : [
{
"name" : "gtkTextTag",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkTextTag*",
"comment" : " the main Gtk struct \n",
"line" : 96}
,
{
"name" : "getTextTagStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkTextTag*()",
"line" : 99}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 106}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TextTag(GtkTextTag* gtkTextTag)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 114}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 132}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 140}
,
{
"name" : "onListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(ObjectG, Event, TextIter, TextTag)[]",
"line" : 142}
,
{
"name" : "addOn",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(ObjectG, Event, TextIter, TextTag) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::event signal is emitted when an event occurs on a region of the\n buffer marked with this tag.\n TRUE to stop other handlers from being invoked for the\n event. FALSE to propagate the event further.\n\t \n",
"line" : 149}
,
{
"name" : "callBack",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkTextTag* tagStruct, GObject* object, GdkEvent* event, GtkTextIter* iter, TextTag textTag)",
"line" : 164}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TextTag(string name)",
"comment" : "\n Creates a GtkTextTag. Configure the tag using object arguments,\n i.e. using g_object_set().\n Params:\n name = tag name, or NULL. [allow-none]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 185}
,
{
"name" : "getPriority",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Get the tag priority.\n Returns: The tag's priority.\n\t \n",
"line" : 200}
,
{
"name" : "setPriority",
"kind" : "function",
"protection" : "public",
"type" : "void(int priority)",
"comment" : "\n Sets the priority of a GtkTextTag. Valid priorities are\n start at 0 and go to one less than gtk_text_tag_table_get_size().\n Each tag in a table has a unique priority; setting the priority\n of one tag shifts the priorities of all the other tags in the\n table to maintain a unique priority for each tag. Higher priority\n tags \"win\" if two tags both set the same text attribute. When adding\n a tag to a tag table, it will be assigned the highest priority in\n the table by default; so normally the precedence of a set of tags\n is the order in which they were added to the table, or created with\n gtk_text_buffer_create_tag(), which adds the tag to the buffer's table\n automatically.\n Params:\n priority = the new priority\n\t \n",
"line" : 221}
,
{
"name" : "event",
"kind" : "function",
"protection" : "public",
"type" : "int(ObjectG eventObject, Event event, TextIter iter)",
"comment" : "\n Emits the \"event\" signal on the GtkTextTag.\n Params:\n eventObject = object that received the event, such as a widget\n event = the event\n iter = location where the event was received\n Returns: result of signal emission (whether the event was handled)\n\t \n",
"line" : 235}
]
}
]
}
,
{
"name" : "gtk.TextTagTable",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TextTagTable.d",
"members" : [
{
"name" : "TextTagTable",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n You may wish to begin by reading the text widget\n conceptual overview which gives an overview of all the objects and data\n types related to the text widget and how they work together.\n GtkTextTagTables as GtkBuildable\n The GtkTextTagTable implementation of the GtkBuildable interface\n supports adding tags by specifying \"tag\" as the \"type\"\n attribute of a <child> element.\n $(DDOC_COMMENT example)\n You may wish to begin by reading the text widget\n conceptual overview which gives an overview of all the objects and data\n types related to the text widget and how they work together.\n \n",
"line" : 88,
"base" : "ObjectG",
"members" : [
{
"name" : "gtkTextTagTable",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkTextTagTable*",
"comment" : " the main Gtk struct \n",
"line" : 92}
,
{
"name" : "getTextTagTableStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkTextTagTable*()",
"line" : 95}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 102}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TextTagTable(GtkTextTagTable* gtkTextTagTable)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 110}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 128}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 136}
,
{
"name" : "onTagAddedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextTag, TextTagTable)[]",
"line" : 138}
,
{
"name" : "addOnTagAdded",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextTag, TextTagTable) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 141}
,
{
"name" : "callBackTagAdded",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextTagTable* texttagtableStruct, GtkTextTag* arg1, TextTagTable textTagTable)",
"line" : 156}
,
{
"name" : "onTagChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextTag, int, TextTagTable)[]",
"line" : 164}
,
{
"name" : "addOnTagChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextTag, int, TextTagTable) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 167}
,
{
"name" : "callBackTagChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextTagTable* texttagtableStruct, GtkTextTag* arg1, int arg2, TextTagTable textTagTable)",
"line" : 182}
,
{
"name" : "onTagRemovedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextTag, TextTagTable)[]",
"line" : 190}
,
{
"name" : "addOnTagRemoved",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextTag, TextTagTable) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 193}
,
{
"name" : "callBackTagRemoved",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextTagTable* texttagtableStruct, GtkTextTag* arg1, TextTagTable textTagTable)",
"line" : 208}
,
{
"name" : "tableNew",
"kind" : "function",
"protection" : "public",
"type" : "TextTagTable()",
"comment" : "\n Creates a new GtkTextTagTable. The table contains no tags by\n default.\n Returns: a new GtkTextTagTable\n\t \n",
"line" : 222}
,
{
"name" : "tableAdd",
"kind" : "function",
"protection" : "public",
"type" : "void(TextTag tag)",
"comment" : "\n Add a tag to the table. The tag is assigned the highest priority\n in the table.\n tag must not be in a tag table already, and may not have\n the same name as an already-added tag.\n Params:\n table = a GtkTextTagTable\n tag = a GtkTextTag\n\t \n",
"line" : 242}
,
{
"name" : "tableRemove",
"kind" : "function",
"protection" : "public",
"type" : "void(TextTag tag)",
"comment" : "\n Remove a tag from the table. This will remove the table's\n reference to the tag, so be careful - the tag will end\n up destroyed if you don't have a reference to it.\n Params:\n table = a GtkTextTagTable\n tag = a GtkTextTag\n\t \n",
"line" : 256}
,
{
"name" : "tableLookup",
"kind" : "function",
"protection" : "public",
"type" : "TextTag(string name)",
"comment" : "\n Look up a named tag.\n Params:\n table = a GtkTextTagTable\n name = name of a tag\n Returns: The tag, or NULL if none by that name is in the table. [transfer none]\n\t \n",
"line" : 269}
,
{
"name" : "tableForeach",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) void function(GtkTextTag*, void*) func, void* data)",
"comment" : "\n Calls func on each tag in table, with user data data.\n Note that the table may not be modified while iterating\n over it (you can't add\/remove tags).\n Params:\n table = a GtkTextTagTable\n func = a function to call on each tag. [scope call]\n data = user data\n\t \n",
"line" : 289}
,
{
"name" : "tableGetSize",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the size of the table (number of tags)\n Params:\n table = a GtkTextTagTable\n Returns: number of tags in table Signal Details The \"tag-added\" signal void user_function (GtkTextTagTable *texttagtable, GtkTextTag *arg1, gpointer user_data) : Run Last\n\t \n",
"line" : 301}
]
}
]
}
,
{
"name" : "gtk.TextView",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TextView.d",
"members" : [
{
"name" : "TextView",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n You may wish to begin by reading the text widget\n conceptual overview which gives an overview of all the objects and data\n types related to the text widget and how they work together.\n \n",
"line" : 110,
"base" : "Container",
"members" : [
{
"name" : "gtkTextView",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkTextView*",
"comment" : " the main Gtk struct \n",
"line" : 114}
,
{
"name" : "getTextViewStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkTextView*()",
"line" : 117}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 124}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TextView(GtkTextView* gtkTextView)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 132}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 150}
,
{
"name" : "getLineTextAt",
"kind" : "function",
"protection" : "public",
"type" : "string(int y)",
"comment" : "\n Get the text line at the pixel y\n\t \n",
"line" : 159}
,
{
"name" : "insertText",
"kind" : "function",
"protection" : "public",
"type" : "void(string text)",
"comment" : "\n Simply appends some on the cursor position\n Params:\n  text = the text to append\n\t \n",
"line" : 180}
,
{
"name" : "appendText",
"kind" : "function",
"protection" : "public",
"type" : "void(string text, bool ensureVisible = true)",
"comment" : "\n Simply appends some text to this view\n Params:\n  text = the text to append\n\t \n",
"line" : 191}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 211}
,
{
"name" : "onBackspaceListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextView)[]",
"line" : 213}
,
{
"name" : "addOnBackspace",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::backspace signal is a\n keybinding signal\n which gets emitted when the user asks for it.\n The default bindings for this signal are\n Backspace and Shift-Backspace.\n\t \n",
"line" : 221}
,
{
"name" : "callBackBackspace",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, TextView textView)",
"line" : 236}
,
{
"name" : "onCopyClipboardListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextView)[]",
"line" : 244}
,
{
"name" : "addOnCopyClipboard",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::copy-clipboard signal is a\n keybinding signal\n which gets emitted to copy the selection to the clipboard.\n The default bindings for this signal are\n Ctrl-c and Ctrl-Insert.\n\t \n",
"line" : 252}
,
{
"name" : "callBackCopyClipboard",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, TextView textView)",
"line" : 267}
,
{
"name" : "onCutClipboardListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextView)[]",
"line" : 275}
,
{
"name" : "addOnCutClipboard",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::cut-clipboard signal is a\n keybinding signal\n which gets emitted to cut the selection to the clipboard.\n The default bindings for this signal are\n Ctrl-x and Shift-Delete.\n\t \n",
"line" : 283}
,
{
"name" : "callBackCutClipboard",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, TextView textView)",
"line" : 298}
,
{
"name" : "onDeleteFromCursorListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkDeleteType, int, TextView)[]",
"line" : 306}
,
{
"name" : "addOnDeleteFromCursor",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkDeleteType, int, TextView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::delete-from-cursor signal is a\n keybinding signal\n which gets emitted when the user initiates a text deletion.\n If the type is GTK_DELETE_CHARS, GTK+ deletes the selection\n if there is one, otherwise it deletes the requested number\n of characters.\n The default bindings for this signal are\n Delete for deleting a character, Ctrl-Delete for\n deleting a word and Ctrl-Backspace for deleting a word\n backwords.\n\t \n",
"line" : 319}
,
{
"name" : "callBackDeleteFromCursor",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, GtkDeleteType type, int count, TextView textView)",
"line" : 334}
,
{
"name" : "onInsertAtCursorListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(string, TextView)[]",
"line" : 342}
,
{
"name" : "addOnInsertAtCursor",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(string, TextView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::insert-at-cursor signal is a\n keybinding signal\n which gets emitted when the user initiates the insertion of a\n fixed string at the cursor.\n This signal has no default bindings.\n\t \n",
"line" : 350}
,
{
"name" : "callBackInsertAtCursor",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, char* str, TextView textView)",
"line" : 365}
,
{
"name" : "onMoveCursorListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkMovementStep, int, int, TextView)[]",
"line" : 373}
,
{
"name" : "addOnMoveCursor",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkMovementStep, int, int, TextView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::move-cursor signal is a\n keybinding signal\n which gets emitted when the user initiates a cursor movement.\n If the cursor is not visible in text_view, this signal causes\n the viewport to be moved instead.\n Applications should not connect to it, but may emit it with\n g_signal_emit_by_name() if they need to control the cursor\n programmatically.\n The default bindings for this signal come in two variants,\n the variant with the Shift modifier extends the selection,\n the variant without the Shift modifer does not.\n There are too many key combinations to list them all here.\n Arrow keys move by individual characters\/lines\n Ctrl-arrow key combinations move by words\/paragraphs\n Home\/End keys move to the ends of the buffer\n PageUp\/PageDown keys move vertically by pages\n Ctrl-PageUp\/PageDown keys move horizontally by pages\n TRUE if the move should extend the selection\n\t \n",
"line" : 394}
,
{
"name" : "callBackMoveCursor",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, GtkMovementStep step, int count, int extendSelection, TextView textView)",
"line" : 409}
,
{
"name" : "onMoveViewportListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkScrollStep, int, TextView)[]",
"line" : 417}
,
{
"name" : "addOnMoveViewport",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkScrollStep, int, TextView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::move-viewport signal is a\n keybinding signal\n which can be bound to key combinations to allow the user\n to move the viewport, i.e. change what part of the text view\n is visible in a containing scrolled window.\n There are no default bindings for this signal.\n\t \n",
"line" : 426}
,
{
"name" : "callBackMoveViewport",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, GtkScrollStep step, int count, TextView textView)",
"line" : 441}
,
{
"name" : "onPageHorizontallyListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(int, int, TextView)[]",
"line" : 449}
,
{
"name" : "addOnPageHorizontally",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(int, int, TextView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::page-horizontally signal is a\n keybinding signal\n which can be bound to key combinations to allow the user\n to initiate horizontal cursor movement by pages.\n This signal should not be used anymore, instead use the\n \"move-cursor\" signal with the GTK_MOVEMENT_HORIZONTAL_PAGES\n granularity.\n TRUE if the move should extend the selection\n\t \n",
"line" : 460}
,
{
"name" : "callBackPageHorizontally",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, int count, int extendSelection, TextView textView)",
"line" : 475}
,
{
"name" : "onPasteClipboardListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextView)[]",
"line" : 483}
,
{
"name" : "addOnPasteClipboard",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::paste-clipboard signal is a\n keybinding signal\n which gets emitted to paste the contents of the clipboard\n into the text view.\n The default bindings for this signal are\n Ctrl-v and Shift-Insert.\n\t \n",
"line" : 492}
,
{
"name" : "callBackPasteClipboard",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, TextView textView)",
"line" : 507}
,
{
"name" : "onPopulatePopupListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkMenu*, TextView)[]",
"line" : 515}
,
{
"name" : "addOnPopulatePopup",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkMenu*, TextView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::populate-popup signal gets emitted before showing the\n context menu of the text view.\n If you need to add items to the context menu, connect\n to this signal and append your menuitems to the menu.\n\t \n",
"line" : 522}
,
{
"name" : "callBackPopulatePopup",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* entryStruct, GtkMenu* menu, TextView textView)",
"line" : 537}
,
{
"name" : "onPreeditChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(string, TextView)[]",
"line" : 545}
,
{
"name" : "addOnPreeditChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(string, TextView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n If an input method is used, the typed text will not immediately\n be committed to the buffer. So if you are interested in the text,\n connect to this signal.\n This signal is only emitted if the text at the given position\n is actually editable.\n Since 2.20\n\t \n",
"line" : 554}
,
{
"name" : "callBackPreeditChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, char* preedit, TextView textView)",
"line" : 569}
,
{
"name" : "onSelectAllListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(int, TextView)[]",
"line" : 577}
,
{
"name" : "addOnSelectAll",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(int, TextView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::select-all signal is a\n keybinding signal\n which gets emitted to select or unselect the complete\n contents of the text view.\n The default bindings for this signal are Ctrl-a and Ctrl-\/\n for selecting and Shift-Ctrl-a and Ctrl-\\ for unselecting.\n TRUE to select, FALSE to unselect\n\t \n",
"line" : 587}
,
{
"name" : "callBackSelectAll",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, int select, TextView textView)",
"line" : 602}
,
{
"name" : "onSetAnchorListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextView)[]",
"line" : 610}
,
{
"name" : "addOnSetAnchor",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::set-anchor signal is a\n keybinding signal\n which gets emitted when the user initiates setting the \"anchor\"\n mark. The \"anchor\" mark gets placed at the same position as the\n \"insert\" mark.\n This signal has no default bindings.\n\t \n",
"line" : 619}
,
{
"name" : "callBackSetAnchor",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, TextView textView)",
"line" : 634}
,
{
"name" : "onSetScrollAdjustmentsListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Adjustment, Adjustment, TextView)[]",
"line" : 642}
,
{
"name" : "addOnSetScrollAdjustments",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Adjustment, Adjustment, TextView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Set the scroll adjustments for the text view. Usually scrolled containers\n like GtkScrolledWindow will emit this signal to connect two instances\n of GtkScrollbar to the scroll directions of the GtkTextView.\n\t \n",
"line" : 648}
,
{
"name" : "callBackSetScrollAdjustments",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* horizontalStruct, GtkAdjustment* vertical, GtkAdjustment* arg2, TextView textView)",
"line" : 663}
,
{
"name" : "onToggleCursorVisibleListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextView)[]",
"line" : 671}
,
{
"name" : "addOnToggleCursorVisible",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::toggle-cursor-visible signal is a\n keybinding signal\n which gets emitted to toggle the visibility of the cursor.\n The default binding for this signal is F7.\n\t \n",
"line" : 678}
,
{
"name" : "callBackToggleCursorVisible",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, TextView textView)",
"line" : 693}
,
{
"name" : "onToggleOverwriteListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TextView)[]",
"line" : 701}
,
{
"name" : "addOnToggleOverwrite",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TextView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::toggle-overwrite signal is a\n keybinding signal\n which gets emitted to toggle the overwrite mode of the text view.\n The default bindings for this signal is Insert.\n See Also\n GtkTextBuffer, GtkTextIter\n\t \n",
"line" : 710}
,
{
"name" : "callBackToggleOverwrite",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTextView* textViewStruct, TextView textView)",
"line" : 725}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TextView()",
"comment" : "\n Creates a new GtkTextView. If you don't call gtk_text_view_set_buffer()\n before using the text view, an empty default buffer will be created\n for you. Get the buffer with gtk_text_view_get_buffer(). If you want\n to specify your own buffer, consider gtk_text_view_new_with_buffer().\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 741}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TextView(TextBuffer buffer)",
"comment" : "\n Creates a new GtkTextView widget displaying the buffer\n buffer. One buffer can be shared among many widgets.\n buffer may be NULL to create a default buffer, in which case\n this function is equivalent to gtk_text_view_new(). The\n text view adds its own reference count to the buffer; it does not\n take over an existing reference.\n Params:\n buffer = a GtkTextBuffer\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 763}
,
{
"name" : "setBuffer",
"kind" : "function",
"protection" : "public",
"type" : "void(TextBuffer buffer)",
"comment" : "\n Sets buffer as the buffer being displayed by text_view. The previous\n buffer displayed by the text view is unreferenced, and a reference is\n added to buffer. If you owned a reference to buffer before passing it\n to this function, you must remove that reference yourself; GtkTextView\n will not \"adopt\" it.\n Params:\n buffer = a GtkTextBuffer. [allow-none]\n\t \n",
"line" : 783}
,
{
"name" : "getBuffer",
"kind" : "function",
"protection" : "public",
"type" : "TextBuffer()",
"comment" : "\n Returns the GtkTextBuffer being displayed by this text view.\n The reference count on the buffer is not incremented; the caller\n of this function won't own a new reference.\n Returns: a GtkTextBuffer. [transfer none]\n\t \n",
"line" : 795}
,
{
"name" : "scrollToMark",
"kind" : "function",
"protection" : "public",
"type" : "void(TextMark mark, double withinMargin, int useAlign, double xalign, double yalign)",
"comment" : "\n Scrolls text_view so that mark is on the screen in the position\n indicated by xalign and yalign. An alignment of 0.0 indicates\n left or top, 1.0 indicates right or bottom, 0.5 means center.\n If use_align is FALSE, the text scrolls the minimal distance to\n get the mark onscreen, possibly not scrolling at all. The effective\n screen for purposes of this function is reduced by a margin of size\n within_margin.\n Params:\n mark = a GtkTextMark\n withinMargin = margin as a [0.0,0.5) fraction of screen size\n useAlign = whether to use alignment arguments (if FALSE, just\n get the mark onscreen)\n xalign = horizontal alignment of mark within visible area\n yalign = vertical alignment of mark within visible area\n\t \n",
"line" : 822}
,
{
"name" : "scrollToIter",
"kind" : "function",
"protection" : "public",
"type" : "int(TextIter iter, double withinMargin, int useAlign, double xalign, double yalign)",
"comment" : "\n Scrolls text_view so that iter is on the screen in the position\n indicated by xalign and yalign. An alignment of 0.0 indicates\n left or top, 1.0 indicates right or bottom, 0.5 means center.\n If use_align is FALSE, the text scrolls the minimal distance to\n get the mark onscreen, possibly not scrolling at all. The effective\n screen for purposes of this function is reduced by a margin of size\n within_margin.\n Note that this function uses the currently-computed height of the\n lines in the text buffer. Line heights are computed in an idle\n handler; so this function may not have the desired effect if it's\n called before the height computations. To avoid oddness, consider\n using gtk_text_view_scroll_to_mark() which saves a point to be\n scrolled to after line validation.\n Params:\n iter = a GtkTextIter\n withinMargin = margin as a [0.0,0.5) fraction of screen size\n useAlign = whether to use alignment arguments (if FALSE,\n just get the mark onscreen)\n xalign = horizontal alignment of mark within visible area\n yalign = vertical alignment of mark within visible area\n Returns: TRUE if scrolling occurred\n\t \n",
"line" : 851}
,
{
"name" : "scrollMarkOnscreen",
"kind" : "function",
"protection" : "public",
"type" : "void(TextMark mark)",
"comment" : "\n Scrolls text_view the minimum distance such that mark is contained\n within the visible area of the widget.\n Params:\n mark = a mark in the buffer for text_view\n\t \n",
"line" : 863}
,
{
"name" : "moveMarkOnscreen",
"kind" : "function",
"protection" : "public",
"type" : "int(TextMark mark)",
"comment" : "\n Moves a mark within the buffer so that it's\n located within the currently-visible text area.\n Params:\n mark = a GtkTextMark\n Returns: TRUE if the mark moved (wasn't already onscreen)\n\t \n",
"line" : 876}
,
{
"name" : "placeCursorOnscreen",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Moves the cursor to the currently visible region of the\n buffer, it it isn't there already.\n Returns: TRUE if the cursor had to be moved.\n\t \n",
"line" : 887}
,
{
"name" : "getVisibleRect",
"kind" : "function",
"protection" : "public",
"type" : "void(Rectangle visibleRect)",
"comment" : "\n Fills visible_rect with the currently-visible\n region of the buffer, in buffer coordinates. Convert to window coordinates\n with gtk_text_view_buffer_to_window_coords().\n Params:\n visibleRect = rectangle to fill. [out]\n\t \n",
"line" : 900}
,
{
"name" : "getIterLocation",
"kind" : "function",
"protection" : "public",
"type" : "void(TextIter iter, Rectangle location)",
"comment" : "\n Gets a rectangle which roughly contains the character at iter.\n The rectangle position is in buffer coordinates; use\n gtk_text_view_buffer_to_window_coords() to convert these\n coordinates to coordinates for one of the windows in the text view.\n Params:\n iter = a GtkTextIter\n location = bounds of the character at iter. [out]\n\t \n",
"line" : 915}
,
{
"name" : "getLineAtY",
"kind" : "function",
"protection" : "public",
"type" : "void(TextIter targetIter, int y, out int lineTop)",
"comment" : "\n Gets the GtkTextIter at the start of the line containing\n the coordinate y. y is in buffer coordinates, convert from\n window coordinates with gtk_text_view_window_to_buffer_coords().\n If non-NULL, line_top will be filled with the coordinate of the top\n edge of the line.\n Params:\n targetIter = a GtkTextIter. [out]\n y = a y coordinate\n lineTop = return location for top coordinate of the line. [out]\n\t \n",
"line" : 932}
,
{
"name" : "getLineYrange",
"kind" : "function",
"protection" : "public",
"type" : "void(TextIter iter, out int y, out int height)",
"comment" : "\n Gets the y coordinate of the top of the line containing iter,\n and the height of the line. The coordinate is a buffer coordinate;\n convert to window coordinates with gtk_text_view_buffer_to_window_coords().\n Params:\n iter = a GtkTextIter\n y = return location for a y coordinate. [out]\n height = return location for a height. [out]\n\t \n",
"line" : 947}
,
{
"name" : "getIterAtLocation",
"kind" : "function",
"protection" : "public",
"type" : "void(TextIter iter, int x, int y)",
"comment" : "\n Retrieves the iterator at buffer coordinates x and y. Buffer\n coordinates are coordinates for the entire buffer, not just the\n currently-displayed portion. If you have coordinates from an\n event, you have to convert those to buffer coordinates with\n gtk_text_view_window_to_buffer_coords().\n Params:\n iter = a GtkTextIter. [out]\n x = x position, in buffer coordinates\n y = y position, in buffer coordinates\n\t \n",
"line" : 964}
,
{
"name" : "getIterAtPosition",
"kind" : "function",
"protection" : "public",
"type" : "void(TextIter iter, out int trailing, int x, int y)",
"comment" : "\n Retrieves the iterator pointing to the character at buffer\n coordinates x and y. Buffer coordinates are coordinates for\n the entire buffer, not just the currently-displayed portion.\n If you have coordinates from an event, you have to convert\n those to buffer coordinates with\n gtk_text_view_window_to_buffer_coords().\n Note that this is different from gtk_text_view_get_iter_at_location(),\n which returns cursor locations, i.e. positions between\n characters.\n Since 2.6\n Params:\n iter = a GtkTextIter. [out]\n trailing = if non-NULL, location to store an integer indicating where\n in the grapheme the user clicked. It will either be\n zero, or the number of characters in the grapheme.\n 0 represents the trailing edge of the grapheme. [out][allow-none]\n x = x position, in buffer coordinates\n y = y position, in buffer coordinates\n\t \n",
"line" : 990}
,
{
"name" : "bufferToWindowCoords",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkTextWindowType win, int bufferX, int bufferY, out int windowX, out int windowY)",
"comment" : "\n Converts coordinate (buffer_x, buffer_y) to coordinates for the window\n win, and stores the result in (window_x, window_y).\n Note that you can't convert coordinates for a nonexisting window (see\n gtk_text_view_set_border_window_size()).\n Params:\n win = a GtkTextWindowType except GTK_TEXT_WINDOW_PRIVATE\n bufferX = buffer x coordinate\n bufferY = buffer y coordinate\n windowX = window x coordinate return location or NULL. [out][allow-none]\n windowY = window y coordinate return location or NULL. [out][allow-none]\n\t \n",
"line" : 1008}
,
{
"name" : "windowToBufferCoords",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkTextWindowType win, int windowX, int windowY, out int bufferX, out int bufferY)",
"comment" : "\n Converts coordinates on the window identified by win to buffer\n coordinates, storing the result in (buffer_x,buffer_y).\n Note that you can't convert coordinates for a nonexisting window (see\n gtk_text_view_set_border_window_size()).\n Params:\n win = a GtkTextWindowType except GTK_TEXT_WINDOW_PRIVATE\n windowX = window x coordinate\n windowY = window y coordinate\n bufferX = buffer x coordinate return location or NULL. [out][allow-none]\n bufferY = buffer y coordinate return location or NULL. [out][allow-none]\n\t \n",
"line" : 1026}
,
{
"name" : "getWindow",
"kind" : "function",
"protection" : "public",
"type" : "Window(GtkTextWindowType win)",
"comment" : "\n Retrieves the GdkWindow corresponding to an area of the text view;\n possible windows include the overall widget window, child windows\n on the left, right, top, bottom, and the window that displays the\n text buffer. Windows are NULL and nonexistent if their width or\n height is 0, and are nonexistent before the widget has been\n realized.\n Params:\n win = window to get\n Returns: a GdkWindow, or NULL. [transfer none]\n\t \n",
"line" : 1043}
,
{
"name" : "getWindowType",
"kind" : "function",
"protection" : "public",
"type" : "GtkTextWindowType(Window window)",
"comment" : "\n Usually used to find out which window an event corresponds to.\n If you connect to an event signal on text_view, this function\n should be called on event->window to\n see which window it was.\n Params:\n window = a window type\n Returns: the window type.\n\t \n",
"line" : 1063}
,
{
"name" : "setBorderWindowSize",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkTextWindowType type, int size)",
"comment" : "\n Sets the width of GTK_TEXT_WINDOW_LEFT or GTK_TEXT_WINDOW_RIGHT,\n or the height of GTK_TEXT_WINDOW_TOP or GTK_TEXT_WINDOW_BOTTOM.\n Automatically destroys the corresponding window if the size is set\n to 0, and creates the window if the size is set to non-zero. This\n function can only be used for the \"border windows,\" it doesn't work\n with GTK_TEXT_WINDOW_WIDGET, GTK_TEXT_WINDOW_TEXT, or\n GTK_TEXT_WINDOW_PRIVATE.\n Params:\n type = window to affect\n size = width or height of the window\n\t \n",
"line" : 1081}
,
{
"name" : "getBorderWindowSize",
"kind" : "function",
"protection" : "public",
"type" : "int(GtkTextWindowType type)",
"comment" : "\n Gets the width of the specified border window. See\n gtk_text_view_set_border_window_size().\n Params:\n type = window to return size from\n Returns: width of window\n\t \n",
"line" : 1094}
,
{
"name" : "forwardDisplayLine",
"kind" : "function",
"protection" : "public",
"type" : "int(TextIter iter)",
"comment" : "\n Moves the given iter forward by one display (wrapped) line.\n A display line is different from a paragraph. Paragraphs are\n separated by newlines or other paragraph separator characters.\n Display lines are created by line-wrapping a paragraph. If\n wrapping is turned off, display lines and paragraphs will be the\n same. Display lines are divided differently for each view, since\n they depend on the view's width; paragraphs are the same in all\n views, since they depend on the contents of the GtkTextBuffer.\n Params:\n iter = a GtkTextIter\n Returns: TRUE if iter was moved and is not on the end iterator\n\t \n",
"line" : 1113}
,
{
"name" : "backwardDisplayLine",
"kind" : "function",
"protection" : "public",
"type" : "int(TextIter iter)",
"comment" : "\n Moves the given iter backward by one display (wrapped) line.\n A display line is different from a paragraph. Paragraphs are\n separated by newlines or other paragraph separator characters.\n Display lines are created by line-wrapping a paragraph. If\n wrapping is turned off, display lines and paragraphs will be the\n same. Display lines are divided differently for each view, since\n they depend on the view's width; paragraphs are the same in all\n views, since they depend on the contents of the GtkTextBuffer.\n Params:\n iter = a GtkTextIter\n Returns: TRUE if iter was moved and is not on the end iterator\n\t \n",
"line" : 1132}
,
{
"name" : "forwardDisplayLineEnd",
"kind" : "function",
"protection" : "public",
"type" : "int(TextIter iter)",
"comment" : "\n Moves the given iter forward to the next display line end.\n A display line is different from a paragraph. Paragraphs are\n separated by newlines or other paragraph separator characters.\n Display lines are created by line-wrapping a paragraph. If\n wrapping is turned off, display lines and paragraphs will be the\n same. Display lines are divided differently for each view, since\n they depend on the view's width; paragraphs are the same in all\n views, since they depend on the contents of the GtkTextBuffer.\n Params:\n iter = a GtkTextIter\n Returns: TRUE if iter was moved and is not on the end iterator\n\t \n",
"line" : 1151}
,
{
"name" : "backwardDisplayLineStart",
"kind" : "function",
"protection" : "public",
"type" : "int(TextIter iter)",
"comment" : "\n Moves the given iter backward to the next display line start.\n A display line is different from a paragraph. Paragraphs are\n separated by newlines or other paragraph separator characters.\n Display lines are created by line-wrapping a paragraph. If\n wrapping is turned off, display lines and paragraphs will be the\n same. Display lines are divided differently for each view, since\n they depend on the view's width; paragraphs are the same in all\n views, since they depend on the contents of the GtkTextBuffer.\n Params:\n iter = a GtkTextIter\n Returns: TRUE if iter was moved and is not on the end iterator\n\t \n",
"line" : 1170}
,
{
"name" : "startsDisplayLine",
"kind" : "function",
"protection" : "public",
"type" : "int(TextIter iter)",
"comment" : "\n Determines whether iter is at the start of a display line.\n See gtk_text_view_forward_display_line() for an explanation of\n display lines vs. paragraphs.\n Params:\n iter = a GtkTextIter\n Returns: TRUE if iter begins a wrapped line\n\t \n",
"line" : 1184}
,
{
"name" : "moveVisually",
"kind" : "function",
"protection" : "public",
"type" : "int(TextIter iter, int count)",
"comment" : "\n Move the iterator a given number of characters visually, treating\n it as the strong cursor position. If count is positive, then the\n new strong cursor position will be count positions to the right of\n the old cursor position. If count is negative then the new strong\n cursor position will be count positions to the left of the old\n cursor position.\n In the presence of bi-directional text, the correspondence\n between logical and visual order will depend on the direction\n of the current run, and there may be jumps when the cursor\n is moved off of the end of a run.\n Params:\n iter = a GtkTextIter\n count = number of characters to move (negative moves left,\n positive moves right)\n Returns: TRUE if iter moved and is not on the end iterator\n\t \n",
"line" : 1207}
,
{
"name" : "addChildAtAnchor",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, TextChildAnchor anchor)",
"comment" : "\n Adds a child widget in the text buffer, at the given anchor.\n Params:\n child = a GtkWidget\n anchor = a GtkTextChildAnchor in the GtkTextBuffer for text_view\n\t \n",
"line" : 1219}
,
{
"name" : "addChildInWindow",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, GtkTextWindowType whichWindow, int xpos, int ypos)",
"comment" : "\n Adds a child at fixed coordinates in one of the text widget's\n windows. The window must have nonzero size (see\n gtk_text_view_set_border_window_size()). Note that the child\n coordinates are given relative to the GdkWindow in question, and\n that these coordinates have no sane relationship to scrolling. When\n placing a child in GTK_TEXT_WINDOW_WIDGET, scrolling is\n irrelevant, the child floats above all scrollable areas. But when\n placing a child in one of the scrollable windows (border windows or\n text window), you'll need to compute the child's correct position\n in buffer coordinates any time scrolling occurs or buffer changes\n occur, and then call gtk_text_view_move_child() to update the\n child's position. Unfortunately there's no good way to detect that\n scrolling has occurred, using the current API; a possible hack\n would be to update all child positions when the scroll adjustments\n change or the text buffer changes. See bug 64518 on\n bugzilla.gnome.org for status of fixing this issue.\n Params:\n child = a GtkWidget\n whichWindow = which window the child should appear in\n xpos = X position of child in window coordinates\n ypos = Y position of child in window coordinates\n\t \n",
"line" : 1248}
,
{
"name" : "moveChild",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget child, int xpos, int ypos)",
"comment" : "\n Updates the position of a child, as for gtk_text_view_add_child_in_window().\n Params:\n child = child widget already added to the text view\n xpos = new X position in window coordinates\n ypos = new Y position in window coordinates\n\t \n",
"line" : 1261}
,
{
"name" : "setWrapMode",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkWrapMode wrapMode)",
"comment" : "\n Sets the line wrapping for the view.\n Params:\n wrapMode = a GtkWrapMode\n\t \n",
"line" : 1272}
,
{
"name" : "getWrapMode",
"kind" : "function",
"protection" : "public",
"type" : "GtkWrapMode()",
"comment" : "\n Gets the line wrapping for the view.\n Returns: the line wrap setting\n\t \n",
"line" : 1282}
,
{
"name" : "setEditable",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n Sets the default editability of the GtkTextView. You can override\n this default setting with tags in the buffer, using the \"editable\"\n attribute of tags.\n Params:\n setting = whether it's editable\n\t \n",
"line" : 1295}
,
{
"name" : "getEditable",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the default editability of the GtkTextView. Tags in the\n buffer may override this setting for some ranges of text.\n Returns: whether text is editable by default\n\t \n",
"line" : 1306}
,
{
"name" : "setCursorVisible",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n Toggles whether the insertion point is displayed. A buffer with no editable\n text probably shouldn't have a visible cursor, so you may want to turn\n the cursor off.\n Params:\n setting = whether to show the insertion cursor\n\t \n",
"line" : 1319}
,
{
"name" : "getCursorVisible",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Find out whether the cursor is being displayed.\n Returns: whether the insertion mark is visible\n\t \n",
"line" : 1329}
,
{
"name" : "setOverwrite",
"kind" : "function",
"protection" : "public",
"type" : "void(int overwrite)",
"comment" : "\n Changes the GtkTextView overwrite mode.\n Since 2.4\n Params:\n overwrite = TRUE to turn on overwrite mode, FALSE to turn it off\n\t \n",
"line" : 1341}
,
{
"name" : "getOverwrite",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the GtkTextView is in overwrite mode or not.\n Since 2.4\n Returns: whether text_view is in overwrite mode or not.\n\t \n",
"line" : 1352}
,
{
"name" : "setPixelsAboveLines",
"kind" : "function",
"protection" : "public",
"type" : "void(int pixelsAboveLines)",
"comment" : "\n Sets the default number of blank pixels above paragraphs in text_view.\n Tags in the buffer for text_view may override the defaults.\n Params:\n pixelsAboveLines = pixels above paragraphs\n\t \n",
"line" : 1364}
,
{
"name" : "getPixelsAboveLines",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the default number of pixels to put above paragraphs.\n Returns: default number of pixels above paragraphs\n\t \n",
"line" : 1374}
,
{
"name" : "setPixelsBelowLines",
"kind" : "function",
"protection" : "public",
"type" : "void(int pixelsBelowLines)",
"comment" : "\n Sets the default number of pixels of blank space\n to put below paragraphs in text_view. May be overridden\n by tags applied to text_view's buffer.\n Params:\n pixelsBelowLines = pixels below paragraphs\n\t \n",
"line" : 1387}
,
{
"name" : "getPixelsBelowLines",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value set by gtk_text_view_set_pixels_below_lines().\n Returns: default number of blank pixels below paragraphs\n\t \n",
"line" : 1397}
,
{
"name" : "setPixelsInsideWrap",
"kind" : "function",
"protection" : "public",
"type" : "void(int pixelsInsideWrap)",
"comment" : "\n Sets the default number of pixels of blank space to leave between\n display\/wrapped lines within a paragraph. May be overridden by\n tags in text_view's buffer.\n Params:\n pixelsInsideWrap = default number of pixels between wrapped lines\n\t \n",
"line" : 1410}
,
{
"name" : "getPixelsInsideWrap",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value set by gtk_text_view_set_pixels_inside_wrap().\n Returns: default number of pixels of blank space between wrapped lines\n\t \n",
"line" : 1420}
,
{
"name" : "setJustification",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkJustification justification)",
"comment" : "\n Sets the default justification of text in text_view.\n Tags in the view's buffer may override the default.\n Params:\n justification = justification\n\t \n",
"line" : 1432}
,
{
"name" : "getJustification",
"kind" : "function",
"protection" : "public",
"type" : "GtkJustification()",
"comment" : "\n Gets the default justification of paragraphs in text_view.\n Tags in the buffer may override the default.\n Returns: default justification\n\t \n",
"line" : 1443}
,
{
"name" : "setLeftMargin",
"kind" : "function",
"protection" : "public",
"type" : "void(int leftMargin)",
"comment" : "\n Sets the default left margin for text in text_view.\n Tags in the buffer may override the default.\n Params:\n leftMargin = left margin in pixels\n\t \n",
"line" : 1455}
,
{
"name" : "getLeftMargin",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the default left margin size of paragraphs in the text_view.\n Tags in the buffer may override the default.\n Returns: left margin in pixels\n\t \n",
"line" : 1466}
,
{
"name" : "setRightMargin",
"kind" : "function",
"protection" : "public",
"type" : "void(int rightMargin)",
"comment" : "\n Sets the default right margin for text in the text view.\n Tags in the buffer may override the default.\n Params:\n rightMargin = right margin in pixels\n\t \n",
"line" : 1478}
,
{
"name" : "getRightMargin",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the default right margin for text in text_view. Tags\n in the buffer may override the default.\n Returns: right margin in pixels\n\t \n",
"line" : 1489}
,
{
"name" : "setIndent",
"kind" : "function",
"protection" : "public",
"type" : "void(int indent)",
"comment" : "\n Sets the default indentation for paragraphs in text_view.\n Tags in the buffer may override the default.\n Params:\n indent = indentation in pixels\n\t \n",
"line" : 1501}
,
{
"name" : "getIndent",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the default indentation of paragraphs in text_view.\n Tags in the view's buffer may override the default.\n The indentation may be negative.\n Returns: number of pixels of indentation\n\t \n",
"line" : 1513}
,
{
"name" : "setTabs",
"kind" : "function",
"protection" : "public",
"type" : "void(PgTabArray tabs)",
"comment" : "\n Sets the default tab stops for paragraphs in text_view.\n Tags in the buffer may override the default.\n Params:\n tabs = tabs as a PangoTabArray\n\t \n",
"line" : 1525}
,
{
"name" : "getTabs",
"kind" : "function",
"protection" : "public",
"type" : "PgTabArray()",
"comment" : "\n Gets the default tabs for text_view. Tags in the buffer may\n override the defaults. The returned array will be NULL if\n \"standard\" (8-space) tabs are used. Free the return value\n with pango_tab_array_free().\n Returns: copy of default tab array, or NULL if \"standard\" tabs are used; must be freed with pango_tab_array_free().\n\t \n",
"line" : 1538}
,
{
"name" : "setAcceptsTab",
"kind" : "function",
"protection" : "public",
"type" : "void(int acceptsTab)",
"comment" : "\n Sets the behavior of the text widget when the Tab key is pressed.\n If accepts_tab is TRUE, a tab character is inserted. If accepts_tab\n is FALSE the keyboard focus is moved to the next widget in the focus\n chain.\n Since 2.4\n Params:\n acceptsTab = TRUE if pressing the Tab key should insert a tab\n character, FALSE, if pressing the Tab key should move the\n keyboard focus.\n\t \n",
"line" : 1560}
,
{
"name" : "getAcceptsTab",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether pressing the Tab key inserts a tab characters.\n gtk_text_view_set_accepts_tab().\n Since 2.4\n Returns: TRUE if pressing the Tab key inserts a tab character, FALSE if pressing the Tab key moves the keyboard focus.\n\t \n",
"line" : 1572}
,
{
"name" : "getDefaultAttributes",
"kind" : "function",
"protection" : "public",
"type" : "TextAttributes()",
"comment" : "\n Obtains a copy of the default text attributes. These are the\n attributes used for text unless a tag overrides them.\n You'd typically pass the default attributes in to\n gtk_text_iter_get_attributes() in order to get the\n attributes in effect at a given text position.\n The return value is a copy owned by the caller of this function,\n and should be freed.\n Returns: a new GtkTextAttributes\n\t \n",
"line" : 1588}
,
{
"name" : "imContextFilterKeypress",
"kind" : "function",
"protection" : "public",
"type" : "int(GdkEventKey* event)",
"comment" : "\n Allow the GtkTextView input method to internally handle key press\n and release events. If this function returns TRUE, then no further\n processing should be done for this key event. See\n gtk_im_context_filter_keypress().\n Note that you are expected to call this function from your handler\n when overriding key event handling. This is needed in the case when\n you need to insert your own key handling between the input method\n and the default key event handling of the GtkTextView.\n $(DDOC_COMMENT example)\n Since 2.22\n Params:\n event = the key event\n Returns: TRUE if the input method handled the key event.\n\t \n",
"line" : 1614}
,
{
"name" : "resetImContext",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Reset the input method context of the text view if needed.\n This can be necessary in the case where modifying the buffer\n would confuse on-going input method behavior.\n Since 2.22\n\t \n",
"line" : 1626}
,
{
"name" : "getHadjustment",
"kind" : "function",
"protection" : "public",
"type" : "Adjustment()",
"comment" : "\n Gets the horizontal-scrolling GtkAdjustment.\n Since 2.22\n Returns: pointer to the horizontal GtkAdjustment. [transfer none]\n\t \n",
"line" : 1637}
,
{
"name" : "getVadjustment",
"kind" : "function",
"protection" : "public",
"type" : "Adjustment()",
"comment" : "\n Gets the vertical-scrolling GtkAdjustment.\n Since 2.22\n Returns: pointer to the vertical GtkAdjustment. [transfer none]\n\t \n",
"line" : 1653}
]
}
]
}
,
{
"name" : "gtk.Timeout",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Timeout.d",
"members" : [
{
"name" : "Timeout",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n Before using GTK+, you need to initialize it; initialization connects\n to the window system display, and parses some standard command line\n arguments. The gtk_init() function initializes GTK+. gtk_init() exits\n the application if errors occur; to avoid this, use gtk_init_check().\n gtk_init_check() allows you to recover from a failed GTK+\n initialization - you might start up your application in text mode instead.\n Like all GUI toolkits, GTK+ uses an event-driven programming\n model. When the user is doing nothing, GTK+ sits in the\n main loop and waits for input. If the user\n performs some action - say, a mouse click - then the main loop \"wakes\n up\" and delivers an event to GTK+. GTK+ forwards the event to one or\n more widgets.\n When widgets receive an event, they frequently emit one or more\n signals. Signals notify your program that\n \"something interesting happened\" by invoking functions you've\n connected to the signal with g_signal_connect(). Functions connected\n to a signal are often termed callbacks.\n When your callbacks are invoked, you would typically take some action\n - for example, when an Open button is clicked you might display a\n GtkFileSelectionDialog. After a callback finishes, GTK+ will return\n to the main loop and await more user input.\n $(DDOC_COMMENT example)\n It's OK to use the GLib main loop directly instead of gtk_main(),\n though it involves slightly more typing. See GMainLoop in the GLib\n documentation.\n \n",
"line" : 93,
"base" : "Object",
"members" : [
{
"name" : "timeoutListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate()[]",
"comment" : " Holds all timeout delegates \n",
"line" : 96}
,
{
"name" : "timeoutID",
"kind" : "variable",
"protection" : "public",
"type" : "uint",
"comment" : " our gtk timeout ID \n",
"line" : 98}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Timeout(uint interval, bool delegate() dlg, bool fireNow = false)",
"comment" : "\n Creates a new timeout cycle.\n Params:\n    \tinterval = \tthe timeout in milieconds\n    \tdelegate() = \tthe delegate to be executed\n    \tfireNow = \tWhen true the delegate will be executed emmidiatly\n\t \n",
"line" : 108}
,
{
"name" : "stop",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : " \n",
"line" : 122}
,
{
"name" : "addListener",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate() dlg, bool fireNow = false)",
"comment" : "\n Adds a new delegate to this timeout cycle\n Params:\n    \tdlg =\n    \tfireNow =\n\t \n",
"line" : 145}
,
{
"name" : "timeoutCallback",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) bool(Timeout timeout)",
"comment" : "\n The callback execution from glib\n Params:\n    \ttimeout =\n Returns:\n\t \n",
"line" : 163}
,
{
"name" : "callAllListeners",
"kind" : "function",
"protection" : "private",
"type" : "bool()",
"comment" : "\n Executes all delegates on the execution list\n Returns:\n\t \n",
"line" : 172}
,
{
"name" : "addFull",
"kind" : "function",
"protection" : "public",
"type" : "uint(uint interval, extern (C) int function(void*) funct, extern (C) void function(GtkObject*, void*, uint, GtkArg*) marshal, void* data, extern (C) void function(void* cbData) destroy)",
"comment" : "\n\t \n\n Warning\n gtk_timeout_add_full has been deprecated since version 2.4 and should not be used in newly-written code. Use g_timeout_add_full() instead.\n Registers a function to be called periodically. The function will be called\n repeatedly after interval milliseconds until it returns FALSE at which\n point the timeout is destroyed and will not be called again.\n Params:\n interval = The time between calls to the function, in milliseconds\n (1\/1000ths of a second.)\n marshal = The marshaller to use instead of the function (if non-NULL).\n data = The data to pass to the function.\n destroy = Function to call when the timeout is destroyed or NULL.\n Returns: A unique id for the event source.\n\t \n",
"line" : 210}
,
{
"name" : "add",
"kind" : "function",
"protection" : "public",
"type" : "uint(uint interval, extern (C) int function(void*) funct, void* data)",
"comment" : "\n Warning\n gtk_timeout_add has been deprecated since version 2.4 and should not be used in newly-written code. Use g_timeout_add() instead.\n Registers a function to be called periodically. The function will be called\n repeatedly after interval milliseconds until it returns FALSE at which\n point the timeout is destroyed and will not be called again.\n Params:\n interval = The time between calls to the function, in milliseconds\n (1\/1000ths of a second.)\n data = The data to pass to the function.\n Returns: A unique id for the event source.\n\t \n",
"line" : 228}
,
{
"name" : "remove",
"kind" : "function",
"protection" : "public",
"type" : "void(uint timeoutHandlerId)",
"comment" : "\n Warning\n gtk_timeout_remove has been deprecated since version 2.4 and should not be used in newly-written code. Use g_source_remove() instead.\n Removes the given timeout destroying all information about it.\n Params:\n timeoutHandlerId = The identifier returned when installing the timeout.\n\t \n",
"line" : 241}
]
}
]
}
,
{
"name" : "gtk.ToggleAction",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/ToggleAction.d",
"members" : [
{
"name" : "ToggleAction",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkToggleAction corresponds roughly to a GtkCheckMenuItem. It has an\n \"active\" state specifying whether the action has been checked or not.\n \n",
"line" : 75,
"base" : "Action",
"members" : [
{
"name" : "gtkToggleAction",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkToggleAction*",
"comment" : " the main Gtk struct \n",
"line" : 79}
,
{
"name" : "getToggleActionStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkToggleAction*()",
"line" : 82}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 89}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ToggleAction(GtkToggleAction* gtkToggleAction)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 97}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 115}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ToggleAction(string name, string label, string tooltip, StockID stockId)",
"comment" : "\n Creates a new GtkToggleAction object. To add the action to\n a GtkActionGroup and set the accelerator for the action,\n call gtk_action_group_add_action_with_accel().\n Since 2.4\n Params:\n name =  A unique name for the action\n label =  The label displayed in menu items and on buttons, or NULL\n tooltip =  A tooltip for the action, or NULL\n stockId =  The stock icon to display in widgets representing the\n  action, or NULL\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 134}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 141}
,
{
"name" : "onToggledListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(ToggleAction)[]",
"line" : 143}
,
{
"name" : "addOnToggled",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(ToggleAction) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 146}
,
{
"name" : "callBackToggled",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkToggleAction* toggleactionStruct, ToggleAction toggleAction)",
"line" : 161}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ToggleAction(string name, string label, string tooltip, string stockId)",
"comment" : "\n Creates a new GtkToggleAction object. To add the action to\n a GtkActionGroup and set the accelerator for the action,\n call gtk_action_group_add_action_with_accel().\n Since 2.4\n Params:\n name = A unique name for the action\n label = The label displayed in menu items and on buttons, or NULL. [allow-none]\n tooltip = A tooltip for the action, or NULL. [allow-none]\n stockId = The stock icon to display in widgets representing the\n action, or NULL\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 183}
,
{
"name" : "toggled",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Emits the \"toggled\" signal on the toggle action.\n Since 2.4\n\t \n",
"line" : 198}
,
{
"name" : "setActive",
"kind" : "function",
"protection" : "public",
"type" : "void(int isActive)",
"comment" : "\n Sets the checked state on the toggle action.\n Since 2.4\n Params:\n isActive = whether the action should be checked or not\n\t \n",
"line" : 210}
,
{
"name" : "getActive",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the checked state of the toggle action.\n Since 2.4\n Returns: the checked state of the toggle action\n\t \n",
"line" : 221}
,
{
"name" : "setDrawAsRadio",
"kind" : "function",
"protection" : "public",
"type" : "void(int drawAsRadio)",
"comment" : "\n Sets whether the action should have proxies like a radio action.\n Since 2.4\n Params:\n drawAsRadio = whether the action should have proxies like a radio\n action\n\t \n",
"line" : 234}
,
{
"name" : "getDrawAsRadio",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the action should have proxies like a radio action.\n Since 2.4\n Returns: whether the action should have proxies like a radio action.\n\t \n",
"line" : 245}
]
}
]
}
,
{
"name" : "gtk.ToggleButton",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/ToggleButton.d",
"members" : [
{
"name" : "ToggleButton",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkToggleButton is a GtkButton which will remain 'pressed-in' when\n clicked. Clicking again will cause the toggle button to return to its\n normal state.\n A toggle button is created by calling either gtk_toggle_button_new() or\n gtk_toggle_button_new_with_label(). If using the former, it is advisable to\n pack a widget, (such as a GtkLabel and\/or a GtkPixmap), into the toggle\n button's container. (See GtkButton for more information).\n The state of a GtkToggleButton can be set specifically using\n gtk_toggle_button_set_active(), and retrieved using\n gtk_toggle_button_get_active().\n To simply switch the state of a toggle button, use gtk_toggle_button_toggled.\n $(DDOC_COMMENT example)\n \n",
"line" : 87,
"base" : "Button",
"members" : [
{
"name" : "gtkToggleButton",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkToggleButton*",
"comment" : " the main Gtk struct \n",
"line" : 91}
,
{
"name" : "getToggleButtonStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkToggleButton*()",
"line" : 94}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 101}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ToggleButton(GtkToggleButton* gtkToggleButton)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 109}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 127}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ToggleButton(string label, bool mnemonic = true)",
"comment" : "\n Creates a new toggle button with a text label.\n Params:\n  label = a string containing the message to be placed in the toggle button.\n  mnemonic =  if true the label\n  will be created using gtk_label_new_with_mnemonic(), so underscores\n  in label indicate the mnemonic for the button.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 142}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 167}
,
{
"name" : "onToggledListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(ToggleButton)[]",
"line" : 169}
,
{
"name" : "addOnToggled",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(ToggleButton) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Should be connected if you wish to perform an action whenever the\n GtkToggleButton's state is changed.\n See Also\n GtkButton\n a more general button.\n GtkCheckButton\n another way of presenting a toggle option.\n GtkCheckMenuItem\n a GtkToggleButton as a menu item.\n\t \n",
"line" : 181}
,
{
"name" : "callBackToggled",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkToggleButton* togglebuttonStruct, ToggleButton toggleButton)",
"line" : 196}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ToggleButton()",
"comment" : "\n Creates a new toggle button. A widget should be packed into the button, as in gtk_button_new().\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 209}
,
{
"name" : "setMode",
"kind" : "function",
"protection" : "public",
"type" : "void(int drawIndicator)",
"comment" : "\n Sets whether the button is displayed as a separate indicator and label.\n You can call this function on a checkbutton or a radiobutton with\n draw_indicator = FALSE to make the button look like a normal button\n This function only affects instances of classes like GtkCheckButton\n and GtkRadioButton that derive from GtkToggleButton,\n not instances of GtkToggleButton itself.\n Params:\n drawIndicator = if TRUE, draw the button as a separate indicator\n and label; if FALSE, draw the button like a normal button\n\t \n",
"line" : 231}
,
{
"name" : "getMode",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Retrieves whether the button is displayed as a separate indicator\n and label. See gtk_toggle_button_set_mode().\n Returns: TRUE if the togglebutton is drawn as a separate indicator and label.\n\t \n",
"line" : 242}
,
{
"name" : "toggled",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Emits the toggled\n signal on the GtkToggleButton. There is no good reason for an\n application ever to call this function.\n\t \n",
"line" : 253}
,
{
"name" : "getActive",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Queries a GtkToggleButton and returns its current state. Returns TRUE if\n the toggle button is pressed in and FALSE if it is raised.\n Returns: a gboolean value.\n\t \n",
"line" : 264}
,
{
"name" : "setActive",
"kind" : "function",
"protection" : "public",
"type" : "void(int isActive)",
"comment" : "\n Sets the status of the toggle button. Set to TRUE if you want the\n GtkToggleButton to be 'pressed in', and FALSE to raise it.\n This action causes the toggled signal to be emitted.\n Params:\n isActive = TRUE or FALSE.\n\t \n",
"line" : 277}
,
{
"name" : "getInconsistent",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value set by gtk_toggle_button_set_inconsistent().\n Returns: TRUE if the button is displayed as inconsistent, FALSE otherwise\n\t \n",
"line" : 287}
,
{
"name" : "setInconsistent",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n If the user has selected a range of elements (such as some text or\n spreadsheet cells) that are affected by a toggle button, and the\n current values in that range are inconsistent, you may want to\n display the toggle in an \"in between\" state. This function turns on\n \"in between\" display. Normally you would turn off the inconsistent\n state again if the user toggles the toggle button. This has to be\n done manually, gtk_toggle_button_set_inconsistent() only affects\n visual appearance, it doesn't affect the semantics of the button.\n Params:\n setting = TRUE if state is inconsistent\n\t \n",
"line" : 305}
]
}
]
}
,
{
"name" : "gtk.ToggleToolButton",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/ToggleToolButton.d",
"members" : [
{
"name" : "ToggleToolButton",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n  A GtkToggleToolButton is a GtkToolItem that contains a toggle\n  button.\n  Use gtk_toggle_tool_button_new() to create a new\n  GtkToggleToolButton. Use gtk_toggle_tool_button_new_from_stock() to\n  create a new GtkToggleToolButton containing a stock item.\n \n",
"line" : 81,
"base" : "ToolButton",
"members" : [
{
"name" : "gtkToggleToolButton",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkToggleToolButton*",
"comment" : " the main Gtk struct \n",
"line" : 85}
,
{
"name" : "getToggleToolButtonStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkToggleToolButton*()",
"line" : 88}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 95}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ToggleToolButton(GtkToggleToolButton* gtkToggleToolButton)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 103}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 121}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 129}
,
{
"name" : "onToggledListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(ToggleToolButton)[]",
"line" : 131}
,
{
"name" : "addOnToggled",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(ToggleToolButton) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted whenever the toggle tool button changes state.\n See Also\n\n GtkToolbar, GtkToolButton, GtkSeparatorToolItem\n The toolbar widget\n  The parent class of GtkToggleToolButton. The properties\n  \"label_widget\", \"label\", \"icon_widget\", and \"stock_id\" on\n  GtkToolButton determine the label and icon used on\n  GtkToggleToolButtons.\n\n A subclass of GtkToolItem that separates groups of\n  items on a toolbar.\n\n\t \n",
"line" : 147}
,
{
"name" : "callBackToggled",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkToggleToolButton* toggleToolButtonStruct, ToggleToolButton toggleToolButton)",
"line" : 162}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ToggleToolButton()",
"comment" : "\n Returns a new GtkToggleToolButton\n Since 2.4\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 176}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ToggleToolButton(string stockId)",
"comment" : "\n Creates a new GtkToggleToolButton containing the image and text from a\n stock item. Some stock ids have preprocessor macros like GTK_STOCK_OK\n and GTK_STOCK_APPLY.\n It is an error if stock_id is not a name of a stock item.\n Since 2.4\n Params:\n stockId = the name of the stock item\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 197}
,
{
"name" : "setActive",
"kind" : "function",
"protection" : "public",
"type" : "void(int isActive)",
"comment" : "\n Sets the status of the toggle tool button. Set to TRUE if you\n want the GtkToggleButton to be 'pressed in', and FALSE to raise it.\n This action causes the toggled signal to be emitted.\n Since 2.4\n Params:\n isActive = whether button should be active\n\t \n",
"line" : 216}
,
{
"name" : "getActive",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Queries a GtkToggleToolButton and returns its current state.\n Returns TRUE if the toggle button is pressed in and FALSE if it is raised.\n Since 2.4\n Returns: TRUE if the toggle tool button is pressed in, FALSE if not\n\t \n",
"line" : 228}
]
}
]
}
,
{
"name" : "gtk.Toolbar",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Toolbar.d",
"members" : [
{
"name" : "Toolbar",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A toolbar is created with a call to gtk_toolbar_new().\n A toolbar can contain instances of a subclass of GtkToolItem. To add\n a GtkToolItem to the a toolbar, use gtk_toolbar_insert(). To remove\n an item from the toolbar use gtk_container_remove(). To add a button\n to the toolbar, add an instance of GtkToolButton.\n Toolbar items can be visually grouped by adding instances of\n GtkSeparatorToolItem to the toolbar. If a GtkSeparatorToolItem has\n the \"expand\" property set to TRUE and the \"draw\" property set to\n FALSE the effect is to force all following items to the end of the\n toolbar.\n Creating a context menu for the toolbar can be done by connecting to\n the \"popup-context-menu\" signal.\n \n",
"line" : 109,
"base" : "Container",
"interfaces" : [
"OrientableIF",
"ToolShellIF"],
"members" : [
{
"name" : "gtkToolbar",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkToolbar*",
"comment" : " the main Gtk struct \n",
"line" : 113}
,
{
"name" : "getToolbarStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkToolbar*()",
"line" : 116}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 123}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Toolbar(GtkToolbar* gtkToolbar)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 131}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 149}
,
{
"name" : "insert",
"kind" : "function",
"protection" : "public",
"type" : "void(ToolItem toolItem, int pos = -1)",
"comment" : "\n Insert a GtkToolItem into the toolbar at position pos.\n If pos is 0 the item is prepended to the start of the toolbar. If pos is negative, the item is appended to the end of the toolbar.\n Since 2.4\n Params:\n toolItem  = a GtkToolItem\n pos = the position of the new item\n\t \n",
"line" : 169}
,
{
"name" : "insertStock",
"kind" : "function",
"protection" : "public",
"type" : "Widget(StockID stockId, string tooltipText, string tooltipPrivateText, extern (C) void function() callback, void* userData, int position)",
"comment" : " \n",
"line" : 175}
,
{
"name" : "insertStock",
"kind" : "function",
"protection" : "public",
"type" : "Widget(string stockId, string tooltipText, string tooltipPrivateText, int position)",
"comment" : " \n",
"line" : 181}
,
{
"name" : "insertStock",
"kind" : "function",
"protection" : "public",
"type" : "Widget(StockID stockId, string tooltipText, string tooltipPrivateText, int position)",
"comment" : " \n",
"line" : 187}
,
{
"name" : "insertButton",
"kind" : "function",
"protection" : "public",
"type" : "Button(StockID stockID, string tooltipText, string tooltipPrivateText, int position)",
"comment" : " \n",
"line" : 193}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 211}
,
{
"name" : "onFocusHomeOrEndListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(int, Toolbar)[]",
"line" : 213}
,
{
"name" : "addOnFocusHomeOrEnd",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(int, Toolbar) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n A keybinding signal used internally by GTK+. This signal can't\n be used in application code\n TRUE if the first item should be focused\n TRUE if the signal was handled, FALSE if not\n\t \n",
"line" : 220}
,
{
"name" : "callBackFocusHomeOrEnd",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkToolbar* toolbarStruct, int focusHome, Toolbar toolbar)",
"line" : 235}
,
{
"name" : "onOrientationChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkOrientation, Toolbar)[]",
"line" : 248}
,
{
"name" : "addOnOrientationChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkOrientation, Toolbar) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when the orientation of the toolbar changes.\n\t \n",
"line" : 252}
,
{
"name" : "callBackOrientationChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkToolbar* toolbarStruct, GtkOrientation orientation, Toolbar toolbar)",
"line" : 267}
,
{
"name" : "onPopupContextMenuListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(int, int, int, Toolbar)[]",
"line" : 275}
,
{
"name" : "addOnPopupContextMenu",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(int, int, int, Toolbar) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when the user right-clicks the toolbar or uses the\n keybinding to display a popup menu.\n Application developers should handle this signal if they want\n to display a context menu on the toolbar. The context-menu should\n appear at the coordinates given by x and y. The mouse button\n number is given by the button parameter. If the menu was popped\n up using the keybaord, button is -1.\n\t \n",
"line" : 285}
,
{
"name" : "callBackPopupContextMenu",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkToolbar* toolbarStruct, int x, int y, int button, Toolbar toolbar)",
"line" : 300}
,
{
"name" : "onStyleChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkToolbarStyle, Toolbar)[]",
"line" : 313}
,
{
"name" : "addOnStyleChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkToolbarStyle, Toolbar) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when the style of the toolbar changes.\n See Also\n GtkToolItem\n Base class of widgets that can be added to a toolbar.\n\t \n",
"line" : 320}
,
{
"name" : "callBackStyleChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkToolbar* toolbarStruct, GtkToolbarStyle style, Toolbar toolbar)",
"line" : 335}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Toolbar()",
"comment" : "\n Creates a new toolbar.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 348}
,
{
"name" : "getItemIndex",
"kind" : "function",
"protection" : "public",
"type" : "int(ToolItem item)",
"comment" : "\n Returns the position of item on the toolbar, starting from 0.\n It is an error if item is not a child of the toolbar.\n Since 2.4\n Params:\n item = a GtkToolItem that is a child of toolbar\n Returns: the position of item on the toolbar.\n\t \n",
"line" : 367}
,
{
"name" : "getNItems",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the number of items on the toolbar.\n Since 2.4\n Returns: the number of items on the toolbar\n\t \n",
"line" : 378}
,
{
"name" : "getNthItem",
"kind" : "function",
"protection" : "public",
"type" : "ToolItem(int n)",
"comment" : "\n Returns the n'th item on toolbar, or NULL if the\n toolbar does not contain an n'th item.\n Since 2.4\n Params:\n n = A position on the toolbar\n Returns: The n'th GtkToolItem on toolbar, or NULL if there isn't an n'th item. [transfer none]\n\t \n",
"line" : 392}
,
{
"name" : "getDropIndex",
"kind" : "function",
"protection" : "public",
"type" : "int(int x, int y)",
"comment" : "\n Returns the position corresponding to the indicated point on\n Since 2.4\n Params:\n x = x coordinate of a point on the toolbar\n y = y coordinate of a point on the toolbar\n Returns: The position corresponding to the point (x, y) on the toolbar.\n\t \n",
"line" : 411}
,
{
"name" : "setDropHighlightItem",
"kind" : "function",
"protection" : "public",
"type" : "void(ToolItem toolItem, int index)",
"comment" : "\n Highlights toolbar to give an idea of what it would look like\n if item was added to toolbar at the position indicated by index_.\n If item is NULL, highlighting is turned off. In that case index_\n is ignored.\n The tool_item passed to this function must not be part of any widget\n hierarchy. When an item is set as drop highlight item it can not\n added to any widget hierarchy or used as highlight item for another\n toolbar.\n Since 2.4\n Params:\n toolItem = a GtkToolItem, or NULL to turn of highlighting. [allow-none]\n index = a position on toolbar\n\t \n",
"line" : 431}
,
{
"name" : "setShowArrow",
"kind" : "function",
"protection" : "public",
"type" : "void(int showArrow)",
"comment" : "\n Sets whether to show an overflow menu when\n toolbar doesn't have room for all items on it. If TRUE,\n items that there are not room are available through an\n overflow menu.\n Since 2.4\n Params:\n showArrow = Whether to show an overflow menu\n\t \n",
"line" : 446}
,
{
"name" : "setTooltips",
"kind" : "function",
"protection" : "public",
"type" : "void(int enable)",
"comment" : "\n Warning\n gtk_toolbar_set_tooltips has been deprecated since version 2.14 and should not be used in newly-written code. The toolkit-wide \"gtk-enable-tooltips\" property\n is now used instead.\n Sets if the tooltips of a toolbar should be active or not.\n Params:\n enable = set to FALSE to disable the tooltips, or TRUE to enable them.\n\t \n",
"line" : 460}
,
{
"name" : "unsetIconSize",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Unsets toolbar icon size set with gtk_toolbar_set_icon_size(), so that\n user preferences will be used to determine the icon size.\n\t \n",
"line" : 470}
,
{
"name" : "getShowArrow",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the toolbar has an overflow menu.\n See gtk_toolbar_set_show_arrow().\n Since 2.4\n Returns: TRUE if the toolbar has an overflow menu.\n\t \n",
"line" : 482}
,
{
"name" : "toolbarGetStyle",
"kind" : "function",
"protection" : "public",
"type" : "GtkToolbarStyle()",
"comment" : "\n Retrieves whether the toolbar has text, icons, or both . See\n gtk_toolbar_set_style().\n Params:\n toolbar = a GtkToolbar\n Returns: the current style of toolbar\n\t \n",
"line" : 495}
,
{
"name" : "getTooltips",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Warning\n gtk_toolbar_get_tooltips has been deprecated since version 2.14 and should not be used in newly-written code. The toolkit-wide \"gtk-enable-tooltips\" property\n is now used instead.\n Retrieves whether tooltips are enabled. See\n gtk_toolbar_set_tooltips().\n Returns: TRUE if tooltips are enabled\n\t \n",
"line" : 509}
,
{
"name" : "appendItem",
"kind" : "function",
"protection" : "public",
"type" : "Widget(string text, string tooltipText, string tooltipPrivateText, Widget icon, extern (C) void function() callback, void* userData)",
"comment" : "\n Warning\n gtk_toolbar_append_item has been deprecated since version 2.4 and should not be used in newly-written code. Use gtk_toolbar_insert() instead.\n Inserts a new item into the toolbar. You must specify the position\n in the toolbar where it will be inserted.\n callback must be a pointer to a function taking a GtkWidget and a gpointer as\n arguments. Use G_CALLBACK() to cast the function to GCallback.\n Params:\n text = give your toolbar button a label.\n tooltipText = a string that appears when the user holds the mouse over this item.\n tooltipPrivateText = use with GtkTipsQuery.\n icon = a GtkWidget that should be used as the button's icon.\n callback = the function to be executed when the button is pressed.\n userData = a pointer to any data you wish to be passed to the callback.\n Returns: the new toolbar item as a GtkWidget.\n\t \n",
"line" : 531}
,
{
"name" : "prependItem",
"kind" : "function",
"protection" : "public",
"type" : "Widget(string text, string tooltipText, string tooltipPrivateText, Widget icon, extern (C) void function() callback, void* userData)",
"comment" : "\n Warning\n gtk_toolbar_prepend_item has been deprecated since version 2.4 and should not be used in newly-written code. Use gtk_toolbar_insert() instead.\n Adds a new button to the beginning (top or left edges) of the given toolbar.\n callback must be a pointer to a function taking a GtkWidget and a gpointer as\n arguments. Use G_CALLBACK() to cast the function to GCallback.\n Params:\n text = give your toolbar button a label.\n tooltipText = a string that appears when the user holds the mouse over this item.\n tooltipPrivateText = use with GtkTipsQuery.\n icon = a GtkWidget that should be used as the button's icon.\n callback = the function to be executed when the button is pressed.\n userData = a pointer to any data you wish to be passed to the callback.\n Returns: the new toolbar item as a GtkWidget.\n\t \n",
"line" : 557}
,
{
"name" : "insertItem",
"kind" : "function",
"protection" : "public",
"type" : "Widget(string text, string tooltipText, string tooltipPrivateText, Widget icon, extern (C) void function() callback, void* userData, int position)",
"comment" : "\n Warning\n gtk_toolbar_insert_item has been deprecated since version 2.4 and should not be used in newly-written code. Use gtk_toolbar_insert() instead.\n Inserts a new item into the toolbar. You must specify the position in the\n toolbar where it will be inserted.\n callback must be a pointer to a function taking a GtkWidget and a gpointer as\n arguments. Use G_CALLBACK() to cast the function to GCallback.\n Params:\n text = give your toolbar button a label.\n tooltipText = a string that appears when the user holds the mouse over this item.\n tooltipPrivateText = use with GtkTipsQuery.\n icon = a GtkWidget that should be used as the button's icon.\n callback = the function to be executed when the button is pressed.\n userData = a pointer to any data you wish to be passed to the callback.\n position = the number of widgets to insert this item after.\n Returns: the new toolbar item as a GtkWidget.\n\t \n",
"line" : 585}
,
{
"name" : "appendSpace",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_toolbar_append_space has been deprecated since version 2.4 and should not be used in newly-written code. Use gtk_toolbar_insert() instead.\n Adds a new space to the end of the toolbar.\n\t \n",
"line" : 601}
,
{
"name" : "prependSpace",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_toolbar_prepend_space has been deprecated since version 2.4 and should not be used in newly-written code. Use gtk_toolbar_insert() instead.\n Adds a new space to the beginning of the toolbar.\n\t \n",
"line" : 612}
,
{
"name" : "insertSpace",
"kind" : "function",
"protection" : "public",
"type" : "void(int position)",
"comment" : "\n Warning\n gtk_toolbar_insert_space has been deprecated since version 2.4 and should not be used in newly-written code. Use gtk_toolbar_insert() instead.\n Inserts a new space in the toolbar at the specified position.\n Params:\n position = the number of widgets after which a space should be inserted.\n\t \n",
"line" : 625}
,
{
"name" : "appendElement",
"kind" : "function",
"protection" : "public",
"type" : "Widget(GtkToolbarChildType type, Widget widget, string text, string tooltipText, string tooltipPrivateText, Widget icon, extern (C) void function() callback, void* userData)",
"comment" : "\n Warning\n gtk_toolbar_append_element has been deprecated since version 2.4 and should not be used in newly-written code. Use gtk_toolbar_insert() instead.\n Adds a new element to the end of a toolbar.\n If type == GTK_TOOLBAR_CHILD_WIDGET, widget is used as the new element.\n If type == GTK_TOOLBAR_CHILD_RADIOBUTTON, widget is used to determine\n the radio group for the new element. In all other cases, widget must\n be NULL.\n callback must be a pointer to a function taking a GtkWidget and a gpointer as\n arguments. Use G_CALLBACK() to cast the function to GCallback.\n Params:\n type = a value of type GtkToolbarChildType that determines what widget will be.\n widget = a GtkWidget, or NULL. [allow-none]\n text = the element's label.\n tooltipText = the element's tooltip.\n tooltipPrivateText = used for context-sensitive help about this toolbar element.\n icon = a GtkWidget that provides pictorial representation of the element's function.\n callback = the function to be executed when the button is pressed.\n userData = any data you wish to pass to the callback.\n Returns: the new toolbar element as a GtkWidget.\n\t \n",
"line" : 652}
,
{
"name" : "prependElement",
"kind" : "function",
"protection" : "public",
"type" : "Widget(GtkToolbarChildType type, Widget widget, string text, string tooltipText, string tooltipPrivateText, Widget icon, extern (C) void function() callback, void* userData)",
"comment" : "\n Warning\n gtk_toolbar_prepend_element has been deprecated since version 2.4 and should not be used in newly-written code. Use gtk_toolbar_insert() instead.\n Adds a new element to the beginning of a toolbar.\n If type == GTK_TOOLBAR_CHILD_WIDGET, widget is used as the new element.\n If type == GTK_TOOLBAR_CHILD_RADIOBUTTON, widget is used to determine\n the radio group for the new element. In all other cases, widget must\n be NULL.\n callback must be a pointer to a function taking a GtkWidget and a gpointer as\n arguments. Use G_CALLBACK() to cast the function to GCallback.\n Params:\n type = a value of type GtkToolbarChildType that determines what widget will be.\n widget = a GtkWidget, or NULL. [allow-none]\n text = the element's label.\n tooltipText = the element's tooltip.\n tooltipPrivateText = used for context-sensitive help about this toolbar element.\n icon = a GtkWidget that provides pictorial representation of the element's function.\n callback = the function to be executed when the button is pressed.\n userData = any data you wish to pass to the callback.\n Returns: the new toolbar element as a GtkWidget.\n\t \n",
"line" : 684}
,
{
"name" : "insertElement",
"kind" : "function",
"protection" : "public",
"type" : "Widget(GtkToolbarChildType type, Widget widget, string text, string tooltipText, string tooltipPrivateText, Widget icon, extern (C) void function() callback, void* userData, int position)",
"comment" : "\n Warning\n gtk_toolbar_insert_element has been deprecated since version 2.4 and should not be used in newly-written code. Use gtk_toolbar_insert() instead.\n Inserts a new element in the toolbar at the given position.\n If type == GTK_TOOLBAR_CHILD_WIDGET, widget is used as the new element.\n If type == GTK_TOOLBAR_CHILD_RADIOBUTTON, widget is used to determine\n the radio group for the new element. In all other cases, widget must\n be NULL.\n callback must be a pointer to a function taking a GtkWidget and a gpointer as\n arguments. Use G_CALLBACK() to cast the function to GCallback.\n Params:\n type = a value of type GtkToolbarChildType that determines what widget\n will be.\n widget = a GtkWidget, or NULL. [allow-none]\n text = the element's label.\n tooltipText = the element's tooltip.\n tooltipPrivateText = used for context-sensitive help about this toolbar element.\n icon = a GtkWidget that provides pictorial representation of the element's function.\n callback = the function to be executed when the button is pressed.\n userData = any data you wish to pass to the callback.\n position = the number of widgets to insert this element after.\n Returns: the new toolbar element as a GtkWidget.\n\t \n",
"line" : 718}
,
{
"name" : "appendWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, string tooltipText, string tooltipPrivateText)",
"comment" : "\n Warning\n gtk_toolbar_append_widget has been deprecated since version 2.4 and should not be used in newly-written code. Use gtk_toolbar_insert() instead.\n Adds a widget to the end of the given toolbar.\n Params:\n widget = a GtkWidget to add to the toolbar.\n tooltipText = the element's tooltip. [allow-none]\n tooltipPrivateText = used for context-sensitive help about this toolbar element. [allow-none]\n\t \n",
"line" : 738}
,
{
"name" : "prependWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, string tooltipText, string tooltipPrivateText)",
"comment" : "\n Warning\n gtk_toolbar_prepend_widget has been deprecated since version 2.4 and should not be used in newly-written code. Use gtk_toolbar_insert() instead.\n Adds a widget to the beginning of the given toolbar.\n Params:\n widget = a GtkWidget to add to the toolbar.\n tooltipText = the element's tooltip. [allow-none]\n tooltipPrivateText = used for context-sensitive help about this toolbar element. [allow-none]\n\t \n",
"line" : 753}
,
{
"name" : "insertWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, string tooltipText, string tooltipPrivateText, int position)",
"comment" : "\n Warning\n gtk_toolbar_insert_widget has been deprecated since version 2.4 and should not be used in newly-written code. Use gtk_toolbar_insert() instead.\n Inserts a widget in the toolbar at the given position.\n Params:\n widget = a GtkWidget to add to the toolbar.\n tooltipText = the element's tooltip. [allow-none]\n tooltipPrivateText = used for context-sensitive help about this toolbar element. [allow-none]\n position = the number of widgets to insert this widget after.\n\t \n",
"line" : 769}
,
{
"name" : "setStyle",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkToolbarStyle style)",
"comment" : "\n Alters the view of toolbar to display either icons only, text only, or both.\n Params:\n style = the new style for toolbar.\n\t \n",
"line" : 780}
,
{
"name" : "insertStock",
"kind" : "function",
"protection" : "public",
"type" : "Widget(string stockId, string tooltipText, string tooltipPrivateText, extern (C) void function() callback, void* userData, int position)",
"comment" : "\n Warning\n gtk_toolbar_insert_stock has been deprecated since version 2.4 and should not be used in newly-written code. Use gtk_toolbar_insert() instead.\n Inserts a stock item at the specified position of the toolbar. If\n stock_id is not a known stock item ID, it's inserted verbatim,\n except that underscores used to mark mnemonics are removed.\n callback must be a pointer to a function taking a GtkWidget and a gpointer as\n arguments. Use G_CALLBACK() to cast the function to GCallback.\n Params:\n stockId = The id of the stock item you want to insert\n tooltipText = The text in the tooltip of the toolbar button\n tooltipPrivateText = The private text of the tooltip\n callback = The callback called when the toolbar button is clicked.\n userData = user data passed to callback\n position = The position the button shall be inserted at.\n -1 means at the end.\n Returns: the inserted widget\n\t \n",
"line" : 804}
,
{
"name" : "setIconSize",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkIconSize iconSize)",
"comment" : "\n This function sets the size of stock icons in the toolbar. You\n can call it both before you add the icons and after they've been\n added. The size you set will override user preferences for the default\n icon size.\n This should only be used for special-purpose toolbars, normal\n application toolbars should respect the user preferences for the\n size of icons.\n Params:\n iconSize = The GtkIconSize that stock icons in the\n toolbar shall have. [type int]\n\t \n",
"line" : 827}
,
{
"name" : "removeSpace",
"kind" : "function",
"protection" : "public",
"type" : "void(int position)",
"comment" : "\n Warning\n gtk_toolbar_remove_space has been deprecated since version 2.4 and should not be used in newly-written code. Use gtk_toolbar_insert() instead.\n Removes a space from the specified position.\n Params:\n position = the index of the space to remove.\n\t \n",
"line" : 840}
,
{
"name" : "unsetStyle",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Unsets a toolbar style set with gtk_toolbar_set_style(), so that\n user preferences will be used to determine the toolbar style.\n\t \n",
"line" : 850}
]
}
]
}
,
{
"name" : "gtk.ToolButton",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/ToolButton.d",
"members" : [
{
"name" : "ToolButton",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkToolButtons are GtkToolItems containing buttons.\n Use gtk_tool_button_new() to create a new GtkToolButton. Use\n gtk_tool_button_new_with_stock() to create a GtkToolButton\n containing a stock item.\n The label of a GtkToolButton is determined by the properties\n \"label-widget\", \"label\", and \"stock-id\". If \"label-widget\" is\n non-NULL, then that widget is used as the label. Otherwise, if\n \"label\" is non-NULL, that string is used as the label. Otherwise, if\n \"stock-id\" is non-NULL, the label is determined by the stock\n item. Otherwise, the button does not have a label.\n The icon of a GtkToolButton is determined by the properties\n \"icon-widget\" and \"stock-id\". If \"icon-widget\" is non-NULL, then\n that widget is used as the icon. Otherwise, if \"stock-id\" is\n non-NULL, the icon is determined by the stock item. Otherwise,\n the button does not have a icon.\n \n",
"line" : 93,
"base" : "ToolItem",
"members" : [
{
"name" : "gtkToolButton",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkToolButton*",
"comment" : " the main Gtk struct \n",
"line" : 97}
,
{
"name" : "getToolButtonStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkToolButton*()",
"line" : 100}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 107}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ToolButton(GtkToolButton* gtkToolButton)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 115}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 133}
,
{
"name" : "action",
"kind" : "variable",
"protection" : "private",
"type" : "string",
"comment" : " An arbitrary string to be used by the application \n",
"line" : 140}
,
{
"name" : "setActionName",
"kind" : "function",
"protection" : "public",
"type" : "void(string action)",
"comment" : " \n",
"line" : 143}
,
{
"name" : "getActionName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : " \n",
"line" : 149}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ToolButton(StockID stockID)",
"comment" : " \n",
"line" : 155}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 162}
,
{
"name" : "onClickedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(ToolButton)[]",
"line" : 164}
,
{
"name" : "addOnClicked",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(ToolButton) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted when the tool button is clicked with the mouse\n or activated with the keyboard.\n See Also\n GtkToolbar\n The toolbar widget\n GtkMenuToolButton\n A subclass of GtkToolButton that displays on\n  the toolbar a button with an additional dropdown\n  menu\n GtkToggleToolButton\n A subclass of GtkToolButton that displays toggle\n  buttons on the toolbar\n GtkRadioToolButton\n A subclass of GtkToolButton that displays radio\n  buttons on the toolbar\n GtkSeparatorToolItem\n A subclass of GtkToolItem that separates groups of\n  items on a toolbar\n\t \n",
"line" : 185}
,
{
"name" : "callBackClicked",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkToolButton* toolbuttonStruct, ToolButton toolButton)",
"line" : 200}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ToolButton(Widget iconWidget, string label)",
"comment" : "\n Creates a new GtkToolButton using icon_widget as icon and label as\n label.\n Since 2.4\n Params:\n iconWidget = a GtkMisc widget that will be used as icon widget, or NULL. [allow-none]\n label = a string that will be used as label, or NULL. [allow-none]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 218}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ToolButton(string stockId)",
"comment" : "\n Creates a new GtkToolButton containing the image and text from a\n stock item. Some stock ids have preprocessor macros like GTK_STOCK_OK\n and GTK_STOCK_APPLY.\n It is an error if stock_id is not a name of a stock item.\n Since 2.4\n Params:\n stockId = the name of the stock item\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 239}
,
{
"name" : "setLabel",
"kind" : "function",
"protection" : "public",
"type" : "void(string label)",
"comment" : "\n Sets label as the label used for the tool button. The \"label\" property\n only has an effect if not overridden by a non-NULL \"label_widget\" property.\n If both the \"label_widget\" and \"label\" properties are NULL, the label\n is determined by the \"stock_id\" property. If the \"stock_id\" property is also\n NULL, button will not have a label.\n Since 2.4\n Params:\n label = a string that will be used as label, or NULL. [allow-none]\n\t \n",
"line" : 260}
,
{
"name" : "getLabel",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns the label used by the tool button, or NULL if the tool button\n doesn't have a label. or uses a the label from a stock item. The returned\n string is owned by GTK+, and must not be modified or freed.\n Since 2.4\n Returns: The label, or NULL\n\t \n",
"line" : 273}
,
{
"name" : "setUseUnderline",
"kind" : "function",
"protection" : "public",
"type" : "void(int useUnderline)",
"comment" : "\n If set, an underline in the label property indicates that the next character\n should be used for the mnemonic accelerator key in the overflow menu. For\n example, if the label property is \"_Open\" and use_underline is TRUE,\n the label on the tool button will be \"Open\" and the item on the overflow\n menu will have an underlined 'O'.\n Labels shown on tool buttons never have mnemonics on them; this property\n only affects the menu item on the overflow menu.\n Since 2.4\n Params:\n useUnderline = whether the button label has the form \"_Open\"\n\t \n",
"line" : 291}
,
{
"name" : "getUseUnderline",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether underscores in the label property are used as mnemonics\n on menu items on the overflow menu. See gtk_tool_button_set_use_underline().\n Since 2.4\n Returns: TRUE if underscores in the label property are used as mnemonics on menu items on the overflow menu.\n\t \n",
"line" : 303}
,
{
"name" : "setStockId",
"kind" : "function",
"protection" : "public",
"type" : "void(string stockId)",
"comment" : "\n Sets the name of the stock item. See gtk_tool_button_new_from_stock().\n The stock_id property only has an effect if not\n overridden by non-NULL \"label\" and \"icon_widget\" properties.\n Since 2.4\n Params:\n stockId = a name of a stock item, or NULL. [allow-none]\n\t \n",
"line" : 317}
,
{
"name" : "getStockId",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns the name of the stock item. See gtk_tool_button_set_stock_id().\n The returned string is owned by GTK+ and must not be freed or modifed.\n Since 2.4\n Returns: the name of the stock item for button.\n\t \n",
"line" : 329}
,
{
"name" : "setIconName",
"kind" : "function",
"protection" : "public",
"type" : "void(string iconName)",
"comment" : "\n Sets the icon for the tool button from a named themed icon.\n See the docs for GtkIconTheme for more details.\n The \"icon_name\" property only has an effect if not\n overridden by non-NULL \"label\", \"icon_widget\" and \"stock_id\"\n properties.\n Since 2.8\n Params:\n iconName = the name of the themed icon. [allow-none]\n\t \n",
"line" : 345}
,
{
"name" : "getIconName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns the name of the themed icon for the tool button,\n see gtk_tool_button_set_icon_name().\n Since 2.8\n Returns: the icon name or NULL if the tool button has no themed icon\n\t \n",
"line" : 357}
,
{
"name" : "setIconWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget iconWidget)",
"comment" : "\n Sets icon as the widget used as icon on button. If icon_widget is\n NULL the icon is determined by the \"stock_id\" property. If the\n \"stock_id\" property is also NULL, button will not have an icon.\n Since 2.4\n Params:\n iconWidget = the widget used as icon, or NULL. [allow-none]\n\t \n",
"line" : 371}
,
{
"name" : "getIconWidget",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Return the widget used as icon widget on button.\n See gtk_tool_button_set_icon_widget().\n Since 2.4\n Returns: The widget used as icon on button, or NULL. [transfer none]\n\t \n",
"line" : 383}
,
{
"name" : "setLabelWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget labelWidget)",
"comment" : "\n Sets label_widget as the widget that will be used as the label\n for button. If label_widget is NULL the \"label\" property is used\n as label. If \"label\" is also NULL, the label in the stock item\n determined by the \"stock_id\" property is used as label. If\n \"stock_id\" is also NULL, button does not have a label.\n Since 2.4\n Params:\n labelWidget = the widget used as label, or NULL. [allow-none]\n\t \n",
"line" : 404}
,
{
"name" : "getLabelWidget",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Returns the widget used as label on button.\n See gtk_tool_button_set_label_widget().\n Since 2.4\n Returns: The widget used as label on button, or NULL. [transfer none]\n\t \n",
"line" : 416}
]
}
]
}
,
{
"name" : "gtk.ToolItem",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/ToolItem.d",
"members" : [
{
"name" : "ToolItem",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkToolItems are widgets that can appear on a toolbar. To\n create a toolbar item that contain something else than a button, use\n gtk_tool_item_new(). Use gtk_container_add() to add a child\n widget to the tool item.\n For toolbar items that contain buttons, see the GtkToolButton,\n GtkToggleToolButton and GtkRadioToolButton classes.\n See the GtkToolbar class for a description of the toolbar widget, and\n GtkToolShell for a description of the tool shell interface.\n \n",
"line" : 97,
"base" : "Bin",
"interfaces" : [
"ActivatableIF"],
"members" : [
{
"name" : "gtkToolItem",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkToolItem*",
"comment" : " the main Gtk struct \n",
"line" : 101}
,
{
"name" : "getToolItemStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkToolItem*()",
"line" : 104}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 111}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ToolItem(GtkToolItem* gtkToolItem)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 119}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 137}
,
{
"name" : "setTooltip",
"kind" : "function",
"protection" : "public",
"type" : "void(string tipText, string tipPrivate)",
"comment" : "\n Sets this widget tooltip\n Deprecated: Since 2.12 use setTooltipText() or setTooltipMarkup()\n Params:\n  tipText = the tooltip\n  tipPrivate = a private text\n\t \n",
"line" : 153}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 161}
,
{
"name" : "onCreateMenuProxyListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(ToolItem)[]",
"line" : 163}
,
{
"name" : "addOnCreateMenuProxy",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(ToolItem) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted when the toolbar needs information from tool_item\n about whether the item should appear in the toolbar overflow menu. In\n response the tool item should either\n call gtk_tool_item_set_proxy_menu_item() with a NULL\n pointer and return TRUE to indicate that the item should not appear\n in the overflow menu\n  call gtk_tool_item_set_proxy_menu_item() with a new menu\n item and return TRUE, or\n  return FALSE to indicate that the signal was not\n handled by the item. This means that\n the item will not appear in the overflow menu unless a later handler\n installs a menu item.\n The toolbar may cache the result of this signal. When the tool item changes\n how it will respond to this signal it must call gtk_tool_item_rebuild_menu()\n to invalidate the cache and ensure that the toolbar rebuilds its overflow\n menu.\n TRUE if the signal was handled, FALSE if not\n\t \n",
"line" : 183}
,
{
"name" : "callBackCreateMenuProxy",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkToolItem* toolItemStruct, ToolItem toolItem)",
"line" : 198}
,
{
"name" : "onSetTooltipListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(Tooltips, string, string, ToolItem)[]",
"line" : 211}
,
{
"name" : "addOnSetTooltip",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(Tooltips, string, string, ToolItem) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Warning\n GtkToolItem::set-tooltip has been deprecated since version 2.12 and should not be used in newly-written code. With the new tooltip API, there is no\n  need to use this signal anymore.\n This signal is emitted when the toolitem's tooltip changes.\n Application developers can use gtk_tool_item_set_tooltip() to\n set the item's tooltip.\n TRUE if the signal was handled, FALSE if not\n\t \n",
"line" : 221}
,
{
"name" : "callBackSetTooltip",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkToolItem* toolItemStruct, GtkTooltips* tooltips, char* tipText, char* tipPrivate, ToolItem toolItem)",
"line" : 236}
,
{
"name" : "onToolbarReconfiguredListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(ToolItem)[]",
"line" : 249}
,
{
"name" : "addOnToolbarReconfigured",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(ToolItem) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted when some property of the toolbar that the\n item is a child of changes. For custom subclasses of GtkToolItem,\n the default handler of this signal use the functions\n gtk_tool_shell_get_orientation()\n gtk_tool_shell_get_style()\n gtk_tool_shell_get_icon_size()\n gtk_tool_shell_get_relief_style()\n to find out what the toolbar should look like and change\n themselves accordingly.\n See Also\n GtkToolbar\n The toolbar widget\n GtkToolButton\n A subclass of GtkToolItem that displays buttons on\n  the toolbar\n GtkSeparatorToolItem\n A subclass of GtkToolItem that separates groups of\n  items on a toolbar\n\t \n",
"line" : 270}
,
{
"name" : "callBackToolbarReconfigured",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkToolItem* toolItemStruct, ToolItem toolItem)",
"line" : 285}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ToolItem()",
"comment" : "\n Creates a new GtkToolItem\n Since 2.4\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 299}
,
{
"name" : "setHomogeneous",
"kind" : "function",
"protection" : "public",
"type" : "void(int homogeneous)",
"comment" : "\n Sets whether tool_item is to be allocated the same size as other\n homogeneous items. The effect is that all homogeneous items will have\n the same width as the widest of the items.\n Since 2.4\n Params:\n homogeneous = whether tool_item is the same size as other homogeneous items\n\t \n",
"line" : 318}
,
{
"name" : "getHomogeneous",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether tool_item is the same size as other homogeneous\n items. See gtk_tool_item_set_homogeneous().\n Since 2.4\n Returns: TRUE if the item is the same size as other homogeneous items.\n\t \n",
"line" : 330}
,
{
"name" : "setExpand",
"kind" : "function",
"protection" : "public",
"type" : "void(int expand)",
"comment" : "\n Sets whether tool_item is allocated extra space when there\n is more room on the toolbar then needed for the items. The\n effect is that the item gets bigger when the toolbar gets bigger\n and smaller when the toolbar gets smaller.\n Since 2.4\n Params:\n expand = Whether tool_item is allocated extra space\n\t \n",
"line" : 345}
,
{
"name" : "getExpand",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether tool_item is allocated extra space.\n See gtk_tool_item_set_expand().\n Since 2.4\n Returns: TRUE if tool_item is allocated extra space.\n\t \n",
"line" : 357}
,
{
"name" : "setTooltip",
"kind" : "function",
"protection" : "public",
"type" : "void(Tooltips tooltips, string tipText, string tipPrivate)",
"comment" : "\n Warning\n gtk_tool_item_set_tooltip has been deprecated since version 2.12 and should not be used in newly-written code. Use gtk_tool_item_set_tooltip_text() instead.\n Sets the GtkTooltips object to be used for tool_item, the\n text to be displayed as tooltip on the item and the private text\n to be used. See gtk_tooltips_set_tip().\n Since 2.4\n Params:\n tooltips = The GtkTooltips object to be used\n tipText = text to be used as tooltip text for tool_item. [allow-none]\n tipPrivate = text to be used as private tooltip text. [allow-none]\n\t \n",
"line" : 375}
,
{
"name" : "setTooltipText",
"kind" : "function",
"protection" : "public",
"type" : "void(string text)",
"comment" : "\n Sets the text to be displayed as tooltip on the item.\n See gtk_widget_set_tooltip_text().\n Since 2.12\n Params:\n text = text to be used as tooltip for tool_item\n\t \n",
"line" : 388}
,
{
"name" : "setTooltipMarkup",
"kind" : "function",
"protection" : "public",
"type" : "void(string markup)",
"comment" : "\n Sets the markup text to be displayed as tooltip on the item.\n See gtk_widget_set_tooltip_markup().\n Since 2.12\n Params:\n markup = markup text to be used as tooltip for tool_item\n\t \n",
"line" : 401}
,
{
"name" : "setUseDragWindow",
"kind" : "function",
"protection" : "public",
"type" : "void(int useDragWindow)",
"comment" : "\n Sets whether tool_item has a drag window. When TRUE the\n toolitem can be used as a drag source through gtk_drag_source_set().\n When tool_item has a drag window it will intercept all events,\n even those that would otherwise be sent to a child of tool_item.\n Since 2.4\n Params:\n useDragWindow = Whether tool_item has a drag window.\n\t \n",
"line" : 416}
,
{
"name" : "getUseDragWindow",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether tool_item has a drag window. See\n gtk_tool_item_set_use_drag_window().\n Since 2.4\n Returns: TRUE if tool_item uses a drag window.\n\t \n",
"line" : 428}
,
{
"name" : "setVisibleHorizontal",
"kind" : "function",
"protection" : "public",
"type" : "void(int visibleHorizontal)",
"comment" : "\n Sets whether tool_item is visible when the toolbar is docked horizontally.\n Since 2.4\n Params:\n visibleHorizontal = Whether tool_item is visible when in horizontal mode\n\t \n",
"line" : 440}
,
{
"name" : "getVisibleHorizontal",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the tool_item is visible on toolbars that are\n docked horizontally.\n Since 2.4\n Returns: TRUE if tool_item is visible on toolbars that are docked horizontally.\n\t \n",
"line" : 452}
,
{
"name" : "setVisibleVertical",
"kind" : "function",
"protection" : "public",
"type" : "void(int visibleVertical)",
"comment" : "\n Sets whether tool_item is visible when the toolbar is docked\n vertically. Some tool items, such as text entries, are too wide to be\n useful on a vertically docked toolbar. If visible_vertical is FALSE\n tool_item will not appear on toolbars that are docked vertically.\n Since 2.4\n Params:\n visibleVertical = whether tool_item is visible when the toolbar\n is in vertical mode\n\t \n",
"line" : 468}
,
{
"name" : "getVisibleVertical",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether tool_item is visible when the toolbar is docked vertically.\n See gtk_tool_item_set_visible_vertical().\n Since 2.4\n Returns: Whether tool_item is visible when the toolbar is docked vertically\n\t \n",
"line" : 480}
,
{
"name" : "setIsImportant",
"kind" : "function",
"protection" : "public",
"type" : "void(int isImportant)",
"comment" : "\n Sets whether tool_item should be considered important. The GtkToolButton\n class uses this property to determine whether to show or hide its label\n when the toolbar style is GTK_TOOLBAR_BOTH_HORIZ. The result is that\n only tool buttons with the \"is_important\" property set have labels, an\n effect known as \"priority text\"\n Since 2.4\n Params:\n isImportant = whether the tool item should be considered important\n\t \n",
"line" : 496}
,
{
"name" : "getIsImportant",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether tool_item is considered important. See\n gtk_tool_item_set_is_important()\n Since 2.4\n Returns: TRUE if tool_item is considered important.\n\t \n",
"line" : 508}
,
{
"name" : "getEllipsizeMode",
"kind" : "function",
"protection" : "public",
"type" : "PangoEllipsizeMode()",
"comment" : "\n Returns the ellipsize mode used for tool_item. Custom subclasses of\n GtkToolItem should call this function to find out how text should\n be ellipsized.\n Since 2.20\n Returns: a PangoEllipsizeMode indicating how text in tool_item should be ellipsized.\n\t \n",
"line" : 521}
,
{
"name" : "getIconSize",
"kind" : "function",
"protection" : "public",
"type" : "GtkIconSize()",
"comment" : "\n Returns the icon size used for tool_item. Custom subclasses of\n GtkToolItem should call this function to find out what size icons\n they should use.\n Since 2.4\n Returns: a GtkIconSize indicating the icon size used for tool_item. [type int]\n\t \n",
"line" : 534}
,
{
"name" : "getOrientation",
"kind" : "function",
"protection" : "public",
"type" : "GtkOrientation()",
"comment" : "\n Returns the orientation used for tool_item. Custom subclasses of\n GtkToolItem should call this function to find out what size icons\n they should use.\n Since 2.4\n Returns: a GtkOrientation indicating the orientation used for tool_item\n\t \n",
"line" : 547}
,
{
"name" : "getToolbarStyle",
"kind" : "function",
"protection" : "public",
"type" : "GtkToolbarStyle()",
"comment" : "\n Returns the toolbar style used for tool_item. Custom subclasses of\n GtkToolItem should call this function in the handler of the\n GtkToolItem::toolbar_reconfigured signal to find out in what style\n the toolbar is displayed and change themselves accordingly\n Since 2.4\n Returns: A GtkToolbarStyle indicating the toolbar style used for tool_item.\n\t \n",
"line" : 561}
,
{
"name" : "getReliefStyle",
"kind" : "function",
"protection" : "public",
"type" : "GtkReliefStyle()",
"comment" : "\n Returns the relief style of tool_item. See gtk_button_set_relief_style().\n Custom subclasses of GtkToolItem should call this function in the handler\n of the \"toolbar_reconfigured\" signal to find out the\n relief style of buttons.\n Since 2.4\n Returns: a GtkReliefStyle indicating the relief style used for tool_item.\n\t \n",
"line" : 575}
,
{
"name" : "getTextAlignment",
"kind" : "function",
"protection" : "public",
"type" : "float()",
"comment" : "\n Returns the text alignment used for tool_item. Custom subclasses of\n GtkToolItem should call this function to find out how text should\n be aligned.\n Since 2.20\n Returns: a gfloat indicating the horizontal text alignment used for tool_item\n\t \n",
"line" : 588}
,
{
"name" : "getTextOrientation",
"kind" : "function",
"protection" : "public",
"type" : "GtkOrientation()",
"comment" : "\n Returns the text orientation used for tool_item. Custom subclasses of\n GtkToolItem should call this function to find out how text should\n be orientated.\n Since 2.20\n Returns: a GtkOrientation indicating the text orientation used for tool_item\n\t \n",
"line" : 601}
,
{
"name" : "retrieveProxyMenuItem",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Returns the GtkMenuItem that was last set by\n gtk_tool_item_set_proxy_menu_item(), ie. the GtkMenuItem\n that is going to appear in the overflow menu.\n Since 2.4\n Returns: The GtkMenuItem that is going to appear in the overflow menu for tool_item. [transfer none]\n\t \n",
"line" : 614}
,
{
"name" : "getProxyMenuItem",
"kind" : "function",
"protection" : "public",
"type" : "Widget(string menuItemId)",
"comment" : "\n If menu_item_id matches the string passed to\n gtk_tool_item_set_proxy_menu_item() return the corresponding GtkMenuItem.\n Custom subclasses of GtkToolItem should use this function to\n update their menu item when the GtkToolItem changes. That the\n menu_item_ids must match ensures that a GtkToolItem\n will not inadvertently change a menu item that they did not create.\n Since 2.4\n Params:\n menuItemId = a string used to identify the menu item\n Returns: The GtkMenuItem passed to gtk_tool_item_set_proxy_menu_item(), if the menu_item_ids match. [transfer none]\n\t \n",
"line" : 637}
,
{
"name" : "setProxyMenuItem",
"kind" : "function",
"protection" : "public",
"type" : "void(string menuItemId, Widget menuItem)",
"comment" : "\n Sets the GtkMenuItem used in the toolbar overflow menu. The\n menu_item_id is used to identify the caller of this function and\n should also be used with gtk_tool_item_get_proxy_menu_item().\n Since 2.4\n Params:\n menuItemId = a string used to identify menu_item\n menuItem = a GtkMenuItem to be used in the overflow menu\n\t \n",
"line" : 657}
,
{
"name" : "rebuildMenu",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Calling this function signals to the toolbar that the\n overflow menu item for tool_item has changed. If the\n overflow menu is visible when this function it called,\n the menu will be rebuilt.\n The function must be called when the tool item changes what it\n will do in response to the \"create-menu-proxy\" signal.\n Since 2.6\n\t \n",
"line" : 672}
,
{
"name" : "toolbarReconfigured",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Emits the signal \"toolbar_reconfigured\" on tool_item.\n GtkToolbar and other GtkToolShell implementations use this function\n to notify children, when some aspect of their configuration changes.\n Since 2.14\n\t \n",
"line" : 684}
,
{
"name" : "getTextSizeGroup",
"kind" : "function",
"protection" : "public",
"type" : "SizeGroup()",
"comment" : "\n Returns the size group used for labels in tool_item.\n Custom subclasses of GtkToolItem should call this function\n and use the size group for labels.\n Since 2.20\n Returns: a GtkSizeGroup. [transfer none]\n\t \n",
"line" : 697}
]
}
]
}
,
{
"name" : "gtk.ToolItemGroup",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/ToolItemGroup.d",
"members" : [
{
"name" : "ToolItemGroup",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkToolItemGroup is used together with GtkToolPalette to add\n GtkToolItems to a palette like container with different\n categories and drag and drop support.\n \n",
"line" : 85,
"base" : "Container",
"interfaces" : [
"ToolShellIF"],
"members" : [
{
"name" : "gtkToolItemGroup",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkToolItemGroup*",
"comment" : " the main Gtk struct \n",
"line" : 89}
,
{
"name" : "getToolItemGroupStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkToolItemGroup*()",
"line" : 92}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 99}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ToolItemGroup(GtkToolItemGroup* gtkToolItemGroup)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 107}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 125}
,
{
"name" : "getOrientation",
"kind" : "function",
"protection" : "public",
"type" : "GtkOrientation()",
"comment" : "\n Retrieves the current orientation for the tool shell. Tool items must not\n call this function directly, but rely on gtk_tool_item_get_orientation()\n instead.\n Since 2.14\n Returns: the current orientation of shell\n\t \n",
"line" : 141}
,
{
"name" : "getCollapsed",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n\t \n\n Gets whether group is collapsed or expanded.\n Since 2.20\n Returns: TRUE if group is collapsed, FALSE if it is expanded\n\t \n",
"line" : 155}
,
{
"name" : "getDropItem",
"kind" : "function",
"protection" : "public",
"type" : "ToolItem(int x, int y)",
"comment" : "\n Gets the tool item at position (x, y).\n Since 2.20\n Params:\n x = the x position\n y = the y position\n Returns: the GtkToolItem at position (x, y). [transfer none]\n\t \n",
"line" : 169}
,
{
"name" : "getEllipsize",
"kind" : "function",
"protection" : "public",
"type" : "PangoEllipsizeMode()",
"comment" : "\n Gets the ellipsization mode of group.\n Since 2.20\n Returns: the PangoEllipsizeMode of group\n\t \n",
"line" : 185}
,
{
"name" : "getItemPosition",
"kind" : "function",
"protection" : "public",
"type" : "int(ToolItem item)",
"comment" : "\n Gets the position of item in group as index.\n Since 2.20\n Params:\n item = a GtkToolItem\n Returns: the index of item in group or -1 if item is no child of group\n\t \n",
"line" : 198}
,
{
"name" : "getNItems",
"kind" : "function",
"protection" : "public",
"type" : "uint()",
"comment" : "\n Gets the number of tool items in group.\n Since 2.20\n Returns: the number of tool items in group\n\t \n",
"line" : 209}
,
{
"name" : "getLabel",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the label of group.\n Since 2.20\n Returns: the label of group. The label is an internal string of group and must not be modified. Note that NULL is returned if a custom label has been set with gtk_tool_item_group_set_label_widget()\n\t \n",
"line" : 220}
,
{
"name" : "getLabelWidget",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Gets the label widget of group.\n See gtk_tool_item_group_set_label_widget().\n Since 2.20\n Returns: the label widget of group. [transfer none]\n\t \n",
"line" : 232}
,
{
"name" : "getNthItem",
"kind" : "function",
"protection" : "public",
"type" : "ToolItem(uint index)",
"comment" : "\n Gets the tool item at index in group.\n Since 2.20\n Params:\n index = the index\n Returns: the GtkToolItem at index. [transfer none]\n\t \n",
"line" : 250}
,
{
"name" : "getHeaderRelief",
"kind" : "function",
"protection" : "public",
"type" : "GtkReliefStyle()",
"comment" : "\n Gets the relief mode of the header button of group.\n Since 2.20\n Returns: the GtkReliefStyle\n\t \n",
"line" : 266}
,
{
"name" : "insert",
"kind" : "function",
"protection" : "public",
"type" : "void(ToolItem item, int position)",
"comment" : "\n Inserts item at position in the list of children of group.\n Since 2.20\n Params:\n item = the GtkToolItem to insert into group\n position = the position of item in group, starting with 0.\n The position -1 means end of list.\n\t \n",
"line" : 280}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ToolItemGroup(string label)",
"comment" : "\n Creates a new tool item group with label label.\n Since 2.20\n Params:\n label = the label of the new group\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 293}
,
{
"name" : "setCollapsed",
"kind" : "function",
"protection" : "public",
"type" : "void(int collapsed)",
"comment" : "\n Sets whether the group should be collapsed or expanded.\n Since 2.20\n Params:\n collapsed = whether the group should be collapsed or expanded\n\t \n",
"line" : 310}
,
{
"name" : "setEllipsize",
"kind" : "function",
"protection" : "public",
"type" : "void(PangoEllipsizeMode ellipsize)",
"comment" : "\n Sets the ellipsization mode which should be used by labels in group.\n Since 2.20\n Params:\n ellipsize = the PangoEllipsizeMode labels in group should use\n\t \n",
"line" : 322}
,
{
"name" : "setItemPosition",
"kind" : "function",
"protection" : "public",
"type" : "void(ToolItem item, int position)",
"comment" : "\n Sets the position of item in the list of children of group.\n Since 2.20\n Params:\n item = the GtkToolItem to move to a new position, should\n be a child of group.\n position = the new position of item in group, starting with 0.\n The position -1 means end of list.\n\t \n",
"line" : 337}
,
{
"name" : "setLabel",
"kind" : "function",
"protection" : "public",
"type" : "void(string label)",
"comment" : "\n Sets the label of the tool item group. The label is displayed in the header\n of the group.\n Since 2.20\n Params:\n label = the new human-readable label of of the group\n\t \n",
"line" : 350}
,
{
"name" : "setLabelWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget labelWidget)",
"comment" : "\n Sets the label of the tool item group.\n The label widget is displayed in the header of the group, in place\n of the usual label.\n Since 2.20\n Params:\n labelWidget = the widget to be displayed in place of the usual label\n\t \n",
"line" : 364}
,
{
"name" : "setHeaderRelief",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkReliefStyle style)",
"comment" : "\n Set the button relief of the group header.\n See gtk_button_set_relief() for details.\n Since 2.20\n Params:\n style = the GtkReliefStyle\n\t \n",
"line" : 377}
]
}
]
}
,
{
"name" : "gtk.ToolPalette",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/ToolPalette.d",
"members" : [
{
"name" : "ToolPalette",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkToolPalette allows you to add GtkToolItems to a palette-like\n container with different categories and drag and drop support.\n A GtkToolPalette is created with a call to gtk_tool_palette_new().\n GtkToolItems cannot be added directly to a GtkToolPalette -\n instead they are added to a GtkToolItemGroup which can than be added\n to a GtkToolPalette. To add a GtkToolItemGroup to a GtkToolPalette,\n use gtk_container_add().\n $(DDOC_COMMENT example)\n The easiest way to use drag and drop with GtkToolPalette is to call\n gtk_tool_palette_add_drag_dest() with the desired drag source palette\n and the desired drag target widget. Then gtk_tool_palette_get_drag_item()\n can be used to get the dragged item in the \"drag-data-received\"\n signal handler of the drag target.\n $(DDOC_COMMENT example)\n \n",
"line" : 104,
"base" : "Container",
"interfaces" : [
"OrientableIF"],
"members" : [
{
"name" : "gtkToolPalette",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkToolPalette*",
"comment" : " the main Gtk struct \n",
"line" : 108}
,
{
"name" : "getToolPaletteStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkToolPalette*()",
"line" : 111}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 118}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ToolPalette(GtkToolPalette* gtkToolPalette)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 126}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 144}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 155}
,
{
"name" : "onSetScrollAdjustmentsListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Adjustment, Adjustment, ToolPalette)[]",
"line" : 157}
,
{
"name" : "addOnSetScrollAdjustments",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Adjustment, Adjustment, ToolPalette) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Set the scroll adjustments for the viewport.\n Usually scrolled containers like GtkScrolledWindow will emit this\n signal to connect two instances of GtkScrollbar to the scroll\n directions of the GtkToolpalette.\n Since 2.20\n\t \n",
"line" : 165}
,
{
"name" : "callBackSetScrollAdjustments",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkToolPalette* widgetStruct, GtkAdjustment* hadjustment, GtkAdjustment* vadjustment, ToolPalette toolPalette)",
"line" : 180}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ToolPalette()",
"comment" : "\n Creates a new tool palette.\n Since 2.20\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 194}
,
{
"name" : "getExclusive",
"kind" : "function",
"protection" : "public",
"type" : "int(ToolItemGroup group)",
"comment" : "\n Gets whether group is exclusive or not.\n See gtk_tool_palette_set_exclusive().\n Since 2.20\n Params:\n group = a GtkToolItemGroup which is a child of palette\n Returns: TRUE if group is exclusive\n\t \n",
"line" : 213}
,
{
"name" : "setExclusive",
"kind" : "function",
"protection" : "public",
"type" : "void(ToolItemGroup group, int exclusive)",
"comment" : "\n Sets whether the group should be exclusive or not.\n If an exclusive group is expanded all other groups are collapsed.\n Since 2.20\n Params:\n group = a GtkToolItemGroup which is a child of palette\n exclusive = whether the group should be exclusive or not\n\t \n",
"line" : 227}
,
{
"name" : "getExpand",
"kind" : "function",
"protection" : "public",
"type" : "int(ToolItemGroup group)",
"comment" : "\n Gets whether group should be given extra space.\n See gtk_tool_palette_set_expand().\n Since 2.20\n Params:\n group = a GtkToolItemGroup which is a child of palette\n Returns: TRUE if group should be given extra space, FALSE otherwise\n\t \n",
"line" : 241}
,
{
"name" : "setExpand",
"kind" : "function",
"protection" : "public",
"type" : "void(ToolItemGroup group, int expand)",
"comment" : "\n Sets whether the group should be given extra space.\n Since 2.20\n Params:\n group = a GtkToolItemGroup which is a child of palette\n expand = whether the group should be given extra space\n\t \n",
"line" : 254}
,
{
"name" : "getGroupPosition",
"kind" : "function",
"protection" : "public",
"type" : "int(ToolItemGroup group)",
"comment" : "\n Gets the position of group in palette as index.\n See gtk_tool_palette_set_group_position().\n Since 2.20\n Params:\n group = a GtkToolItemGroup\n Returns: the index of group or -1 if group is not a child of palette\n\t \n",
"line" : 268}
,
{
"name" : "setGroupPosition",
"kind" : "function",
"protection" : "public",
"type" : "void(ToolItemGroup group, int position)",
"comment" : "\n Sets the position of the group as an index of the tool palette.\n If position is 0 the group will become the first child, if position is\n -1 it will become the last child.\n Since 2.20\n Params:\n group = a GtkToolItemGroup which is a child of palette\n position = a new index for group\n\t \n",
"line" : 283}
,
{
"name" : "getIconSize",
"kind" : "function",
"protection" : "public",
"type" : "GtkIconSize()",
"comment" : "\n Gets the size of icons in the tool palette.\n See gtk_tool_palette_set_icon_size().\n Since 2.20\n Returns: the GtkIconSize of icons in the tool palette. [type int]\n\t \n",
"line" : 295}
,
{
"name" : "setIconSize",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkIconSize iconSize)",
"comment" : "\n Sets the size of icons in the tool palette.\n Since 2.20\n Params:\n iconSize = the GtkIconSize that icons in the tool\n palette shall have. [type int]\n\t \n",
"line" : 308}
,
{
"name" : "unsetIconSize",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Unsets the tool palette icon size set with gtk_tool_palette_set_icon_size(),\n so that user preferences will be used to determine the icon size.\n Since 2.20\n\t \n",
"line" : 319}
,
{
"name" : "getToolbarStyle",
"kind" : "function",
"protection" : "public",
"type" : "GtkToolbarStyle()",
"comment" : "\n Gets the style (icons, text or both) of items in the tool palette.\n Since 2.20\n Returns: the GtkToolbarStyle of items in the tool palette.\n\t \n",
"line" : 330}
,
{
"name" : "setStyle",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkToolbarStyle style)",
"comment" : "\n Sets the style (text, icons or both) of items in the tool palette.\n Since 2.20\n Params:\n style = the GtkToolbarStyle that items in the tool palette shall have\n\t \n",
"line" : 342}
,
{
"name" : "unsetStyle",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Unsets a toolbar style set with gtk_tool_palette_set_style(),\n so that user preferences will be used to determine the toolbar style.\n Since 2.20\n\t \n",
"line" : 353}
,
{
"name" : "addDragDest",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, GtkDestDefaults flags, GtkToolPaletteDragTargets targets, GdkDragAction actions)",
"comment" : "\n Sets palette as drag source (see gtk_tool_palette_set_drag_source())\n and sets widget as a drag destination for drags from palette.\n See gtk_drag_dest_set().\n Since 2.20\n Params:\n widget = a GtkWidget which should be a drag destination for palette\n flags = the flags that specify what actions GTK+ should take for drops\n on that widget\n targets = the GtkToolPaletteDragTargets which the widget\n should support\n actions = the GdkDragActions which the widget should suppport\n\t \n",
"line" : 372}
,
{
"name" : "getDragItem",
"kind" : "function",
"protection" : "public",
"type" : "Widget(GtkSelectionData* selection)",
"comment" : "\n Get the dragged item from the selection.\n This could be a GtkToolItem or a GtkToolItemGroup.\n Since 2.20\n Params:\n selection = a GtkSelectionData\n Returns: the dragged item in selection. [transfer none]\n\t \n",
"line" : 386}
,
{
"name" : "getDragTargetGroup",
"kind" : "function",
"protection" : "public",
"type" : "GtkTargetEntry*()",
"comment" : "\n Get the target entry for a dragged GtkToolItemGroup.\n Since 2.20\n Returns: the GtkTargetEntry for a dragged group. [transfer none]\n\t \n",
"line" : 402}
,
{
"name" : "getDragTargetItem",
"kind" : "function",
"protection" : "public",
"type" : "GtkTargetEntry*()",
"comment" : "\n Gets the target entry for a dragged GtkToolItem.\n Since 2.20\n Returns: the GtkTargetEntry for a dragged item. [transfer none]\n\t \n",
"line" : 413}
,
{
"name" : "getDropGroup",
"kind" : "function",
"protection" : "public",
"type" : "ToolItemGroup(int x, int y)",
"comment" : "\n Gets the group at position (x, y).\n Since 2.20\n Params:\n x = the x position\n y = the y position\n Returns: the GtkToolItemGroup at position or NULL if there is no such group. [transfer none]\n\t \n",
"line" : 427}
,
{
"name" : "getDropItem",
"kind" : "function",
"protection" : "public",
"type" : "ToolItem(int x, int y)",
"comment" : "\n Gets the item at position (x, y).\n See gtk_tool_palette_get_drop_group().\n Since 2.20\n Params:\n x = the x position\n y = the y position\n Returns: the GtkToolItem at position or NULL if there is no such item. [transfer none]\n\t \n",
"line" : 447}
,
{
"name" : "setDragSource",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkToolPaletteDragTargets targets)",
"comment" : "\n Sets the tool palette as a drag source.\n Enables all groups and items in the tool palette as drag sources\n on button 1 and button 3 press with copy and move actions.\n See gtk_drag_source_set().\n Since 2.20\n Params:\n targets = the GtkToolPaletteDragTargets\n which the widget should support\n\t \n",
"line" : 468}
,
{
"name" : "getHadjustment",
"kind" : "function",
"protection" : "public",
"type" : "Adjustment()",
"comment" : "\n Gets the horizontal adjustment of the tool palette.\n Since 2.20\n Returns: the horizontal adjustment of palette. [transfer none]\n\t \n",
"line" : 479}
,
{
"name" : "getVadjustment",
"kind" : "function",
"protection" : "public",
"type" : "Adjustment()",
"comment" : "\n Gets the vertical adjustment of the tool palette.\n Since 2.20\n Returns: the vertical adjustment of palette. [transfer none]\n\t \n",
"line" : 495}
]
}
]
}
,
{
"name" : "gtk.ToolShellIF",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/ToolShellIF.d",
"members" : [
{
"name" : "ToolShellIF",
"kind" : "interface",
"protection" : "public",
"comment" : "\n Description\n The GtkToolShell interface allows container widgets to provide additional\n information when embedding GtkToolItem widgets.\n see_also: GtkToolbar, GtkToolItem\n \n",
"line" : 76,
"members" : [
{
"name" : "getToolShellTStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkToolShell*()",
"line" : 79}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 82}
,
{
"name" : "getOrientation",
"kind" : "function",
"protection" : "public",
"type" : "GtkOrientation()",
"comment" : "\n Retrieves the current orientation for the tool shell. Tool items must not\n call this function directly, but rely on gtk_tool_item_get_orientation()\n instead.\n Since 2.14\n Returns: the current orientation of shell\n\t \n",
"line" : 92}
,
{
"name" : "getEllipsizeMode",
"kind" : "function",
"protection" : "public",
"type" : "PangoEllipsizeMode()",
"comment" : "\n\t \n\n Retrieves the current ellipsize mode for the tool shell. Tool items must not\n call this function directly, but rely on gtk_tool_item_get_ellipsize_mode()\n instead.\n Since 2.20\n Returns: the current ellipsize mode of shell\n\t \n",
"line" : 104}
,
{
"name" : "getIconSize",
"kind" : "function",
"protection" : "public",
"type" : "GtkIconSize()",
"comment" : "\n Retrieves the icon size for the tool shell. Tool items must not call this\n function directly, but rely on gtk_tool_item_get_icon_size() instead.\n Since 2.14\n Returns: the current size for icons of shell. [type int]\n\t \n",
"line" : 112}
,
{
"name" : "getReliefStyle",
"kind" : "function",
"protection" : "public",
"type" : "GtkReliefStyle()",
"comment" : "\n Returns the relief style of buttons on shell. Tool items must not call this\n function directly, but rely on gtk_tool_item_get_relief_style() instead.\n Since 2.14\n Returns: The relief style of buttons on shell.\n\t \n",
"line" : 120}
,
{
"name" : "toolShellGetStyle",
"kind" : "function",
"protection" : "public",
"type" : "GtkToolbarStyle()",
"comment" : "\n Retrieves whether the tool shell has text, icons, or both. Tool items must\n not call this function directly, but rely on gtk_tool_item_get_style()\n instead.\n Since 2.14\n Returns: the current style of shell\n\t \n",
"line" : 129}
,
{
"name" : "getTextAlignment",
"kind" : "function",
"protection" : "public",
"type" : "float()",
"comment" : "\n Retrieves the current text alignment for the tool shell. Tool items must not\n call this function directly, but rely on gtk_tool_item_get_text_alignment()\n instead.\n Since 2.20\n Returns: the current text alignment of shell\n\t \n",
"line" : 138}
,
{
"name" : "getTextOrientation",
"kind" : "function",
"protection" : "public",
"type" : "GtkOrientation()",
"comment" : "\n Retrieves the current text orientation for the tool shell. Tool items must not\n call this function directly, but rely on gtk_tool_item_get_text_orientation()\n instead.\n Since 2.20\n Returns: the current text orientation of shell\n\t \n",
"line" : 147}
,
{
"name" : "rebuildMenu",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Calling this function signals the tool shell that the overflow menu item for\n tool items have changed. If there is an overflow menu and if it is visible\n when this function it called, the menu will be rebuilt.\n Tool items must not call this function directly, but rely on\n gtk_tool_item_rebuild_menu() instead.\n Since 2.14\n\t \n",
"line" : 157}
,
{
"name" : "getTextSizeGroup",
"kind" : "function",
"protection" : "public",
"type" : "SizeGroup()",
"comment" : "\n Retrieves the current text size group for the tool shell. Tool items must not\n call this function directly, but rely on gtk_tool_item_get_text_size_group()\n instead.\n Since 2.20\n Returns: the current text size group of shell. [transfer none]\n\t \n",
"line" : 166}
]
}
]
}
,
{
"name" : "gtk.ToolShellT",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/ToolShellT.d",
"members" : [
{
"name" : "ToolShellT(TStruct)",
"kind" : "template",
"protection" : "public",
"comment" : "\n Description\n The GtkToolShell interface allows container widgets to provide additional\n information when embedding GtkToolItem widgets.\n see_also: GtkToolbar, GtkToolItem\n \n",
"line" : 76,
"members" : [
{
"name" : "gtkToolShell",
"kind" : "variable",
"type" : "GtkToolShell*",
"comment" : " the main Gtk struct \n",
"line" : 80}
,
{
"name" : "getToolShellTStruct",
"kind" : "function",
"type" : "GtkToolShell*()",
"line" : 83}
,
{
"name" : "getEllipsizeMode",
"kind" : "function",
"type" : "PangoEllipsizeMode()",
"comment" : "\n\t \n\n Retrieves the current ellipsize mode for the tool shell. Tool items must not\n call this function directly, but rely on gtk_tool_item_get_ellipsize_mode()\n instead.\n Since 2.20\n Returns: the current ellipsize mode of shell\n\t \n",
"line" : 99}
,
{
"name" : "getIconSize",
"kind" : "function",
"type" : "GtkIconSize()",
"comment" : "\n Retrieves the icon size for the tool shell. Tool items must not call this\n function directly, but rely on gtk_tool_item_get_icon_size() instead.\n Since 2.14\n Returns: the current size for icons of shell. [type int]\n\t \n",
"line" : 111}
,
{
"name" : "getReliefStyle",
"kind" : "function",
"type" : "GtkReliefStyle()",
"comment" : "\n Returns the relief style of buttons on shell. Tool items must not call this\n function directly, but rely on gtk_tool_item_get_relief_style() instead.\n Since 2.14\n Returns: The relief style of buttons on shell.\n\t \n",
"line" : 123}
,
{
"name" : "toolShellGetStyle",
"kind" : "function",
"type" : "GtkToolbarStyle()",
"comment" : "\n Retrieves whether the tool shell has text, icons, or both. Tool items must\n not call this function directly, but rely on gtk_tool_item_get_style()\n instead.\n Since 2.14\n Returns: the current style of shell\n\t \n",
"line" : 136}
,
{
"name" : "getTextAlignment",
"kind" : "function",
"type" : "float()",
"comment" : "\n Retrieves the current text alignment for the tool shell. Tool items must not\n call this function directly, but rely on gtk_tool_item_get_text_alignment()\n instead.\n Since 2.20\n Returns: the current text alignment of shell\n\t \n",
"line" : 149}
,
{
"name" : "getTextOrientation",
"kind" : "function",
"type" : "GtkOrientation()",
"comment" : "\n Retrieves the current text orientation for the tool shell. Tool items must not\n call this function directly, but rely on gtk_tool_item_get_text_orientation()\n instead.\n Since 2.20\n Returns: the current text orientation of shell\n\t \n",
"line" : 162}
,
{
"name" : "rebuildMenu",
"kind" : "function",
"type" : "void()",
"comment" : "\n Calling this function signals the tool shell that the overflow menu item for\n tool items have changed. If there is an overflow menu and if it is visible\n when this function it called, the menu will be rebuilt.\n Tool items must not call this function directly, but rely on\n gtk_tool_item_rebuild_menu() instead.\n Since 2.14\n\t \n",
"line" : 176}
,
{
"name" : "getTextSizeGroup",
"kind" : "function",
"type" : "SizeGroup()",
"comment" : "\n Retrieves the current text size group for the tool shell. Tool items must not\n call this function directly, but rely on gtk_tool_item_get_text_size_group()\n instead.\n Since 2.20\n Returns: the current text size group of shell. [transfer none]\n\t \n",
"line" : 189}
]
}
]
}
,
{
"name" : "gtk.Tooltip",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Tooltip.d",
"members" : [
{
"name" : "Tooltip",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkTooltip belongs to the new tooltips API that was\n introduced in GTK+ 2.12 and which deprecates the old\n GtkTooltips API.\n Basic tooltips can be realized simply by using gtk_widget_set_tooltip_text()\n or gtk_widget_set_tooltip_markup() without any explicit tooltip object.\n When you need a tooltip with a little more fancy contents, like\n adding an image, or you want the tooltip to have different contents\n per GtkTreeView row or cell, you will have to do a little more work:\n Set the \"has-tooltip\" property to TRUE, this will\n make GTK+ monitor the widget for motion and related events\n which are needed to determine when and where to show a tooltip.\n Connect to the \"query-tooltip\" signal. This signal\n will be emitted when a tooltip is supposed to be shown. One\n of the arguments passed to the signal handler is a GtkTooltip\n object. This is the object that we are about to display as a\n tooltip, and can be manipulated in your callback using functions\n like gtk_tooltip_set_icon(). There are functions for setting\n the tooltip's markup, setting an image from a stock icon, or\n even putting in a custom widget.\n Return TRUE from your query-tooltip handler. This causes\n the tooltip to be show. If you return FALSE, it will not be shown.\n In the probably rare case where you want to have even more control\n over the tooltip that is about to be shown, you can set your own\n GtkWindow which will be used as tooltip window. This works as\n follows:\n Set \"has-tooltip\" and connect to \"query-tooltip\" as\n before.\n Use gtk_widget_set_tooltip_window() to set a GtkWindow created\n by you as tooltip window.\n In the ::query-tooltip callback you can access your window\n using gtk_widget_get_tooltip_window() and manipulate as you\n wish. The semantics of the return value are exactly as before,\n return TRUE to show the window, FALSE to not show it.\n \n",
"line" : 119,
"base" : "ObjectG",
"members" : [
{
"name" : "gtkTooltip",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkTooltip*",
"comment" : " the main Gtk struct \n",
"line" : 123}
,
{
"name" : "getTooltipStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkTooltip*()",
"line" : 126}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 133}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Tooltip(GtkTooltip* gtkTooltip)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 141}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 159}
,
{
"name" : "setMarkup",
"kind" : "function",
"protection" : "public",
"type" : "void(string markup)",
"comment" : "\n\t \n\n Sets the text of the tooltip to be markup, which is marked up\n with the Pango text markup language.\n If markup is NULL, the label will be hidden.\n Since 2.12\n Params:\n markup = a markup string (see Pango markup format) or NULL. [allow-none]\n\t \n",
"line" : 176}
,
{
"name" : "setText",
"kind" : "function",
"protection" : "public",
"type" : "void(string text)",
"comment" : "\n Sets the text of the tooltip to be text. If text is NULL, the label\n will be hidden. See also gtk_tooltip_set_markup().\n Since 2.12\n Params:\n text = a text string or NULL. [allow-none]\n\t \n",
"line" : 189}
,
{
"name" : "setIcon",
"kind" : "function",
"protection" : "public",
"type" : "void(Pixbuf pixbuf)",
"comment" : "\n Sets the icon of the tooltip (which is in front of the text) to be\n pixbuf. If pixbuf is NULL, the image will be hidden.\n Since 2.12\n Params:\n pixbuf = a GdkPixbuf, or NULL. [allow-none]\n\t \n",
"line" : 202}
,
{
"name" : "setIconFromStock",
"kind" : "function",
"protection" : "public",
"type" : "void(string stockId, GtkIconSize size)",
"comment" : "\n Sets the icon of the tooltip (which is in front of the text) to be\n the stock item indicated by stock_id with the size indicated\n by size. If stock_id is NULL, the image will be hidden.\n Since 2.12\n Params:\n stockId = a stock id, or NULL. [allow-none]\n size = a stock icon size. [type int]\n\t \n",
"line" : 217}
,
{
"name" : "setIconFromIconName",
"kind" : "function",
"protection" : "public",
"type" : "void(string iconName, GtkIconSize size)",
"comment" : "\n Sets the icon of the tooltip (which is in front of the text) to be\n the icon indicated by icon_name with the size indicated\n by size. If icon_name is NULL, the image will be hidden.\n Since 2.14\n Params:\n iconName = an icon name, or NULL. [allow-none]\n size = a stock icon size. [type int]\n\t \n",
"line" : 232}
,
{
"name" : "setIconFromGicon",
"kind" : "function",
"protection" : "public",
"type" : "void(IconIF gicon, GtkIconSize size)",
"comment" : "\n Sets the icon of the tooltip (which is in front of the text)\n to be the icon indicated by gicon with the size indicated\n by size. If gicon is NULL, the image will be hidden.\n Since 2.20\n Params:\n gicon = a GIcon representing the icon, or NULL. [allow-none]\n size = a stock icon size. [type int]\n\t \n",
"line" : 247}
,
{
"name" : "setCustom",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget customWidget)",
"comment" : "\n Replaces the widget packed into the tooltip with\n custom_widget. custom_widget does not get destroyed when the tooltip goes\n away.\n By default a box with a GtkImage and GtkLabel is embedded in\n the tooltip, which can be configured using gtk_tooltip_set_markup()\n and gtk_tooltip_set_icon().\n Since 2.12\n Params:\n customWidget = a GtkWidget, or NULL to unset the old custom widget. [allow-none]\n\t \n",
"line" : 264}
,
{
"name" : "triggerTooltipQuery",
"kind" : "function",
"protection" : "public",
"type" : "void(Display display)",
"comment" : "\n Triggers a new tooltip query on display, in order to update the current\n visible tooltip, or to show\/hide the current tooltip. This function is\n useful to call when, for example, the state of the widget changed by a\n key press.\n Since 2.12\n Params:\n display = a GdkDisplay\n\t \n",
"line" : 279}
,
{
"name" : "setTipArea",
"kind" : "function",
"protection" : "public",
"type" : "void(Rectangle rect)",
"comment" : "\n Sets the area of the widget, where the contents of this tooltip apply,\n to be rect (in widget coordinates). This is especially useful for\n properly setting tooltips on GtkTreeView rows and cells, GtkIconViews,\n etc.\n For setting tooltips on GtkTreeView, please refer to the convenience\n functions for this: gtk_tree_view_set_tooltip_row() and\n gtk_tree_view_set_tooltip_cell().\n Since 2.12\n Params:\n rect = a GdkRectangle\n\t \n",
"line" : 297}
]
}
]
}
,
{
"name" : "gtk.Tooltips",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Tooltips.d",
"members" : [
{
"name" : "Tooltips",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkTooltips has been deprecated in GTK+ 2.12, in favor of the new\n GtkTooltip API.\n Tooltips are the messages that appear next to a widget when the mouse pointer is held over it for a short amount of time. They are especially helpful for adding more verbose descriptions of things such as buttons in a toolbar.\n An individual tooltip belongs to a group of tooltips. A group is created with a call to gtk_tooltips_new(). Every tooltip in the group can then be turned off with a call to gtk_tooltips_disable() and enabled with gtk_tooltips_enable().\n The length of time the user must keep the mouse over a widget before the tip is shown, can be altered with gtk_tooltips_set_delay(). This is set on a 'per group of tooltips' basis.\n To assign a tip to a particular GtkWidget, gtk_tooltips_set_tip() is used.\n Note\n Tooltips can only be set on widgets which have their own X window and\n receive enter and leave events.\n To check if a widget has its own window use GTK_WIDGET_NO_WINDOW().\n To add a tooltip to a widget that doesn't have its own window, place the\n widget inside a GtkEventBox and add a tooltip to that instead.\n The default appearance of all tooltips in a program is determined by the current GTK+ theme that the user has selected.\n Information about the tooltip (if any) associated with an arbitrary widget can be retrieved using gtk_tooltips_data_get().\n $(DDOC_COMMENT example)\n \n",
"line" : 92,
"base" : "ObjectGtk",
"members" : [
{
"name" : "gtkTooltips",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkTooltips*",
"comment" : " the main Gtk struct \n",
"line" : 96}
,
{
"name" : "getTooltipsStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkTooltips*()",
"line" : 99}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 106}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Tooltips(GtkTooltips* gtkTooltips)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 114}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 132}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Tooltips()",
"comment" : "\n\t \n\n Warning\n gtk_tooltips_new has been deprecated since version 2.12 and should not be used in newly-written code.\n Creates an empty group of tooltips. This function initialises a GtkTooltips structure. Without at least one such structure, you can not add tips to your application.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 147}
,
{
"name" : "enable",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_tooltips_enable has been deprecated since version 2.12 and should not be used in newly-written code.\n Allows the user to see your tooltips as they navigate your application.\n\t \n",
"line" : 163}
,
{
"name" : "disable",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_tooltips_disable has been deprecated since version 2.12 and should not be used in newly-written code.\n Causes all tooltips in tooltips to become inactive. Any widgets that have tips associated with that group will no longer display their tips until they are enabled again with gtk_tooltips_enable().\n\t \n",
"line" : 174}
,
{
"name" : "setDelay",
"kind" : "function",
"protection" : "public",
"type" : "void(uint delay)",
"comment" : "\n Warning\n gtk_tooltips_set_delay has been deprecated since version 2.12 and should not be used in newly-written code.\n Sets the time between the user moving the mouse over a widget and the widget's tooltip appearing.\n Params:\n delay = an integer value representing milliseconds.\n\t \n",
"line" : 187}
,
{
"name" : "setTip",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget, string tipText, string tipPrivate)",
"comment" : "\n Warning\n gtk_tooltips_set_tip has been deprecated since version 2.12 and should not be used in newly-written code.\n Adds a tooltip containing the message tip_text to the specified GtkWidget.\n Params:\n widget = the GtkWidget you wish to associate the tip with.\n tipText = a string containing the tip itself. [allow-none]\n tipPrivate = a string of any further information that may be useful if the user gets stuck. [allow-none]\n\t \n",
"line" : 202}
,
{
"name" : "dataGet",
"kind" : "function",
"protection" : "public",
"type" : "GtkTooltipsData*(Widget widget)",
"comment" : "\n Warning\n gtk_tooltips_data_get has been deprecated since version 2.12 and should not be used in newly-written code.\n Retrieves any GtkTooltipsData previously associated with the given widget.\n Params:\n widget = a GtkWidget.\n Returns: a GtkTooltipsData struct, or NULL if the widget has no tooltip.\n\t \n",
"line" : 216}
,
{
"name" : "forceWindow",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_tooltips_force_window has been deprecated since version 2.12 and should not be used in newly-written code.\n Ensures that the window used for displaying the given tooltips is created.\n Applications should never have to call this function, since GTK+ takes\n care of this.\n\t \n",
"line" : 229}
,
{
"name" : "getInfoFromTipWindow",
"kind" : "function",
"protection" : "public",
"type" : "int(Window tipWindow, out GtkTooltips* tooltips, out Widget currentWidget)",
"comment" : "\n Warning\n gtk_tooltips_get_info_from_tip_window has been deprecated since version 2.12 and should not be used in newly-written code.\n Determines the tooltips and the widget they belong to from the window in\n which they are displayed.\n This function is mostly intended for use by accessibility technologies;\n applications should have little use for it.\n Since 2.4\n Params:\n tipWindow = a GtkWindow\n tooltips = the return location for the tooltips which are displayed\n in tip_window, or NULL\n currentWidget = the return location for the widget whose tooltips\n are displayed, or NULL\n Returns: TRUE if tip_window is displaying tooltips, otherwise FALSE.\n\t \n",
"line" : 251}
]
}
]
}
,
{
"name" : "gtk.TreeDragDestIF",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TreeDragDestIF.d",
"members" : [
{
"name" : "TreeDragDestIF",
"kind" : "interface",
"protection" : "public",
"comment" : "\n Description\n GTK+ supports Drag-and-Drop in tree views with a high-level and a low-level\n API.\n The low-level API consists of the GTK+ DND API, augmented by some treeview\n utility functions: gtk_tree_view_set_drag_dest_row(),\n gtk_tree_view_get_drag_dest_row(), gtk_tree_view_get_dest_row_at_pos(),\n gtk_tree_view_create_row_drag_icon(), gtk_tree_set_row_drag_data() and\n gtk_tree_get_row_drag_data(). This API leaves a lot of flexibility, but\n nothing is done automatically, and implementing advanced features like\n hover-to-open-rows or autoscrolling on top of this API is a lot of work.\n On the other hand, if you write to the high-level API, then all the\n bookkeeping of rows is done for you, as well as things like hover-to-open\n and auto-scroll, but your models have to implement the\n GtkTreeDragSource and GtkTreeDragDest interfaces.\n \n",
"line" : 86,
"members" : [
{
"name" : "getTreeDragDestTStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkTreeDragDest*()",
"line" : 89}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 92}
,
{
"name" : "setRowDragData",
"kind" : "function",
"protection" : "public",
"type" : "int(GtkSelectionData* selectionData, TreeModelIF treeModel, TreePath path)",
"comment" : "\n Sets selection data of target type GTK_TREE_MODEL_ROW. Normally used\n in a drag_data_get handler.\n Params:\n selectionData =  some GtkSelectionData\n treeModel =  a GtkTreeModel\n path =  a row in tree_model\n Returns: TRUE if the GtkSelectionData had the proper target type to allow us to set a tree row\n\t \n",
"line" : 104}
,
{
"name" : "getRowDragData",
"kind" : "function",
"protection" : "public",
"type" : "int(GtkSelectionData* selectionData, GtkTreeModel** treeModel, GtkTreePath** path)",
"comment" : "\n Obtains a tree_model and path from selection data of target type\n GTK_TREE_MODEL_ROW. Normally called from a drag_data_received handler.\n This function can only be used if selection_data originates from the same\n process that's calling this function, because a pointer to the tree model\n is being passed around. If you aren't in the same process, then you'll\n get memory corruption. In the GtkTreeDragDest drag_data_received handler,\n you can assume that selection data of type GTK_TREE_MODEL_ROW is\n in from the current process. The returned path must be freed with\n gtk_tree_path_free().\n Params:\n selectionData =  a GtkSelectionData\n treeModel =  a GtkTreeModel\n path =  row in tree_model\n Returns: TRUE if selection_data had target type GTK_TREE_MODEL_ROW and is otherwise valid\n\t \n",
"line" : 122}
,
{
"name" : "dragDataReceived",
"kind" : "function",
"protection" : "public",
"type" : "int(TreePath dest, GtkSelectionData* selectionData)",
"comment" : "\n\t \n\n Asks the GtkTreeDragDest to insert a row before the path dest,\n deriving the contents of the row from selection_data. If dest is\n outside the tree so that inserting before it is impossible, FALSE\n will be returned. Also, FALSE may be returned if the new row is\n not created for some model-specific reason. Should robustly handle\n a dest no longer found in the model!\n Params:\n dest = row to drop in front of\n selectionData = data to drop\n Returns: whether a new row was created before position dest\n\t \n",
"line" : 139}
,
{
"name" : "rowDropPossible",
"kind" : "function",
"protection" : "public",
"type" : "int(TreePath destPath, GtkSelectionData* selectionData)",
"comment" : "\n Determines whether a drop is possible before the given dest_path,\n at the same depth as dest_path. i.e., can we drop the data in\n selection_data at that location. dest_path does not have to\n exist; the return value will almost certainly be FALSE if the\n parent of dest_path doesn't exist, though.\n Params:\n destPath = destination row\n selectionData = the data being dragged\n Returns: TRUE if a drop is possible before dest_path\n\t \n",
"line" : 152}
]
}
]
}
,
{
"name" : "gtk.TreeDragDestT",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TreeDragDestT.d",
"members" : [
{
"name" : "TreeDragDestT(TStruct)",
"kind" : "template",
"protection" : "public",
"comment" : "\n Description\n GTK+ supports Drag-and-Drop in tree views with a high-level and a low-level\n API.\n The low-level API consists of the GTK+ DND API, augmented by some treeview\n utility functions: gtk_tree_view_set_drag_dest_row(),\n gtk_tree_view_get_drag_dest_row(), gtk_tree_view_get_dest_row_at_pos(),\n gtk_tree_view_create_row_drag_icon(), gtk_tree_set_row_drag_data() and\n gtk_tree_get_row_drag_data(). This API leaves a lot of flexibility, but\n nothing is done automatically, and implementing advanced features like\n hover-to-open-rows or autoscrolling on top of this API is a lot of work.\n On the other hand, if you write to the high-level API, then all the\n bookkeeping of rows is done for you, as well as things like hover-to-open\n and auto-scroll, but your models have to implement the\n GtkTreeDragSource and GtkTreeDragDest interfaces.\n \n",
"line" : 86,
"members" : [
{
"name" : "gtkTreeDragDest",
"kind" : "variable",
"type" : "GtkTreeDragDest*",
"comment" : " the main Gtk struct \n",
"line" : 90}
,
{
"name" : "getTreeDragDestTStruct",
"kind" : "function",
"type" : "GtkTreeDragDest*()",
"line" : 93}
,
{
"name" : "dragDataReceived",
"kind" : "function",
"type" : "int(TreePath dest, GtkSelectionData* selectionData)",
"comment" : "\n\t \n\n Asks the GtkTreeDragDest to insert a row before the path dest,\n deriving the contents of the row from selection_data. If dest is\n outside the tree so that inserting before it is impossible, FALSE\n will be returned. Also, FALSE may be returned if the new row is\n not created for some model-specific reason. Should robustly handle\n a dest no longer found in the model!\n Params:\n dest = row to drop in front of\n selectionData = data to drop\n Returns: whether a new row was created before position dest\n\t \n",
"line" : 114}
,
{
"name" : "rowDropPossible",
"kind" : "function",
"type" : "int(TreePath destPath, GtkSelectionData* selectionData)",
"comment" : "\n Determines whether a drop is possible before the given dest_path,\n at the same depth as dest_path. i.e., can we drop the data in\n selection_data at that location. dest_path does not have to\n exist; the return value will almost certainly be FALSE if the\n parent of dest_path doesn't exist, though.\n Params:\n destPath = destination row\n selectionData = the data being dragged\n Returns: TRUE if a drop is possible before dest_path\n\t \n",
"line" : 131}
]
}
]
}
,
{
"name" : "gtk.TreeDragSourceIF",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TreeDragSourceIF.d",
"members" : [
{
"name" : "TreeDragSourceIF",
"kind" : "interface",
"protection" : "public",
"comment" : "\n Description\n GTK+ supports Drag-and-Drop in tree views with a high-level and a low-level\n API.\n The low-level API consists of the GTK+ DND API, augmented by some treeview\n utility functions: gtk_tree_view_set_drag_dest_row(),\n gtk_tree_view_get_drag_dest_row(), gtk_tree_view_get_dest_row_at_pos(),\n gtk_tree_view_create_row_drag_icon(), gtk_tree_set_row_drag_data() and\n gtk_tree_get_row_drag_data(). This API leaves a lot of flexibility, but\n nothing is done automatically, and implementing advanced features like\n hover-to-open-rows or autoscrolling on top of this API is a lot of work.\n On the other hand, if you write to the high-level API, then all the\n bookkeeping of rows is done for you, as well as things like hover-to-open\n and auto-scroll, but your models have to implement the\n GtkTreeDragSource and GtkTreeDragDest interfaces.\n \n",
"line" : 91,
"members" : [
{
"name" : "getTreeDragSourceTStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkTreeDragSource*()",
"line" : 94}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 97}
,
{
"name" : "dragDataDelete",
"kind" : "function",
"protection" : "public",
"type" : "int(TreePath path)",
"comment" : "\n\t \n\n Asks the GtkTreeDragSource to delete the row at path, because\n it was moved somewhere else via drag-and-drop. Returns FALSE\n if the deletion fails because path no longer exists, or for\n some model-specific reason. Should robustly handle a path no\n longer found in the model!\n Params:\n path = row that was being dragged\n Returns: TRUE if the row was successfully deleted\n\t \n",
"line" : 113}
,
{
"name" : "dragDataGet",
"kind" : "function",
"protection" : "public",
"type" : "int(TreePath path, GtkSelectionData* selectionData)",
"comment" : "\n Asks the GtkTreeDragSource to fill in selection_data with a\n representation of the row at path. selection_data->target gives\n the required type of the data. Should robustly handle a path no\n longer found in the model!\n Params:\n path = row that was dragged\n selectionData = a GtkSelectionData to fill with data\n from the dragged row. [out]\n Returns: TRUE if data of the required type was provided\n\t \n",
"line" : 126}
,
{
"name" : "rowDraggable",
"kind" : "function",
"protection" : "public",
"type" : "int(TreePath path)",
"comment" : "\n Asks the GtkTreeDragSource whether a particular row can be used as\n the source of a DND operation. If the source doesn't implement\n this interface, the row is assumed draggable.\n Params:\n path = row on which user is initiating a drag\n Returns: TRUE if the row can be dragged\n\t \n",
"line" : 136}
,
{
"name" : "setRowDragData",
"kind" : "function",
"protection" : "public",
"type" : "int(GtkSelectionData* selectionData, TreeModelIF treeModel, TreePath path)",
"comment" : "\n Sets selection data of target type GTK_TREE_MODEL_ROW. Normally used\n in a drag_data_get handler.\n Params:\n selectionData = some GtkSelectionData\n treeModel = a GtkTreeModel\n path = a row in tree_model\n Returns: TRUE if the GtkSelectionData had the proper target type to allow us to set a tree row\n\t \n",
"line" : 147}
,
{
"name" : "getRowDragData",
"kind" : "function",
"protection" : "public",
"type" : "int(GtkSelectionData* selectionData, out TreeModelIF treeModel, out TreePath path)",
"comment" : "\n Obtains a tree_model and path from selection data of target type\n GTK_TREE_MODEL_ROW. Normally called from a drag_data_received handler.\n This function can only be used if selection_data originates from the same\n process that's calling this function, because a pointer to the tree model\n is being passed around. If you aren't in the same process, then you'll\n get memory corruption. In the GtkTreeDragDest drag_data_received handler,\n you can assume that selection data of type GTK_TREE_MODEL_ROW is\n in from the current process. The returned path must be freed with\n gtk_tree_path_free().\n Params:\n selectionData = a GtkSelectionData\n treeModel = a GtkTreeModel. [out]\n path = row in tree_model. [out]\n Returns: TRUE if selection_data had target type GTK_TREE_MODEL_ROW and is otherwise valid\n\t \n",
"line" : 165}
]
}
]
}
,
{
"name" : "gtk.TreeDragSourceT",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TreeDragSourceT.d",
"members" : [
{
"name" : "TreeDragSourceT(TStruct)",
"kind" : "template",
"protection" : "public",
"comment" : "\n Description\n GTK+ supports Drag-and-Drop in tree views with a high-level and a low-level\n API.\n The low-level API consists of the GTK+ DND API, augmented by some treeview\n utility functions: gtk_tree_view_set_drag_dest_row(),\n gtk_tree_view_get_drag_dest_row(), gtk_tree_view_get_dest_row_at_pos(),\n gtk_tree_view_create_row_drag_icon(), gtk_tree_set_row_drag_data() and\n gtk_tree_get_row_drag_data(). This API leaves a lot of flexibility, but\n nothing is done automatically, and implementing advanced features like\n hover-to-open-rows or autoscrolling on top of this API is a lot of work.\n On the other hand, if you write to the high-level API, then all the\n bookkeeping of rows is done for you, as well as things like hover-to-open\n and auto-scroll, but your models have to implement the\n GtkTreeDragSource and GtkTreeDragDest interfaces.\n \n",
"line" : 91,
"members" : [
{
"name" : "gtkTreeDragSource",
"kind" : "variable",
"type" : "GtkTreeDragSource*",
"comment" : " the main Gtk struct \n",
"line" : 95}
,
{
"name" : "getTreeDragSourceTStruct",
"kind" : "function",
"type" : "GtkTreeDragSource*()",
"line" : 98}
,
{
"name" : "dragDataDelete",
"kind" : "function",
"type" : "int(TreePath path)",
"comment" : "\n\t \n\n Asks the GtkTreeDragSource to delete the row at path, because\n it was moved somewhere else via drag-and-drop. Returns FALSE\n if the deletion fails because path no longer exists, or for\n some model-specific reason. Should robustly handle a path no\n longer found in the model!\n Params:\n path = row that was being dragged\n Returns: TRUE if the row was successfully deleted\n\t \n",
"line" : 117}
,
{
"name" : "dragDataGet",
"kind" : "function",
"type" : "int(TreePath path, GtkSelectionData* selectionData)",
"comment" : "\n Asks the GtkTreeDragSource to fill in selection_data with a\n representation of the row at path. selection_data->target gives\n the required type of the data. Should robustly handle a path no\n longer found in the model!\n Params:\n path = row that was dragged\n selectionData = a GtkSelectionData to fill with data\n from the dragged row. [out]\n Returns: TRUE if data of the required type was provided\n\t \n",
"line" : 134}
,
{
"name" : "rowDraggable",
"kind" : "function",
"type" : "int(TreePath path)",
"comment" : "\n Asks the GtkTreeDragSource whether a particular row can be used as\n the source of a DND operation. If the source doesn't implement\n this interface, the row is assumed draggable.\n Params:\n path = row on which user is initiating a drag\n Returns: TRUE if the row can be dragged\n\t \n",
"line" : 148}
,
{
"name" : "setRowDragData",
"kind" : "function",
"type" : "int(GtkSelectionData* selectionData, TreeModelIF treeModel, TreePath path)",
"comment" : "\n Sets selection data of target type GTK_TREE_MODEL_ROW. Normally used\n in a drag_data_get handler.\n Params:\n selectionData = some GtkSelectionData\n treeModel = a GtkTreeModel\n path = a row in tree_model\n Returns: TRUE if the GtkSelectionData had the proper target type to allow us to set a tree row\n\t \n",
"line" : 163}
,
{
"name" : "getRowDragData",
"kind" : "function",
"type" : "int(GtkSelectionData* selectionData, out TreeModelIF treeModel, out TreePath path)",
"comment" : "\n Obtains a tree_model and path from selection data of target type\n GTK_TREE_MODEL_ROW. Normally called from a drag_data_received handler.\n This function can only be used if selection_data originates from the same\n process that's calling this function, because a pointer to the tree model\n is being passed around. If you aren't in the same process, then you'll\n get memory corruption. In the GtkTreeDragDest drag_data_received handler,\n you can assume that selection data of type GTK_TREE_MODEL_ROW is\n in from the current process. The returned path must be freed with\n gtk_tree_path_free().\n Params:\n selectionData = a GtkSelectionData\n treeModel = a GtkTreeModel. [out]\n path = row in tree_model. [out]\n Returns: TRUE if selection_data had target type GTK_TREE_MODEL_ROW and is otherwise valid\n\t \n",
"line" : 185}
]
}
]
}
,
{
"name" : "gtk.TreeIter",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TreeIter.d",
"members" : [
{
"name" : "TreeIter",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkTreeModel interface defines a generic tree interface for use by\n the GtkTreeView widget. It is an abstract interface, and is designed\n to be usable with any appropriate data structure. The programmer just\n has to implement this interface on their own data type for it to be\n viewable by a GtkTreeView widget.\n The model is represented as a hierarchical tree of strongly-typed,\n columned data. In other words, the model can be seen as a tree where\n every node has different values depending on which column is being\n queried. The type of data found in a column is determined by using the\n GType system (ie. G_TYPE_INT, GTK_TYPE_BUTTON, G_TYPE_POINTER, etc.).\n The types are homogeneous per column across all nodes. It is important\n to note that this interface only provides a way of examining a model and\n observing changes. The implementation of each individual model decides\n how and if changes are made.\n In order to make life simpler for programmers who do not need to write\n their own specialized model, two generic models are provided — the\n GtkTreeStore and the GtkListStore. To use these, the developer simply\n pushes data into these models as necessary. These models provide the\n data structure as well as all appropriate tree interfaces. As a result,\n implementing drag and drop, sorting, and storing data is trivial. For\n the vast majority of trees and lists, these two models are sufficient.\n Models are accessed on a node\/column level of granularity. One can\n query for the value of a model at a certain node and a certain column\n on that node. There are two structures used to reference a particular\n node in a model. They are the GtkTreePath and the GtkTreeIter\n [4]\n Most of the interface consists of operations on a GtkTreeIter.\n A path is essentially a potential node. It is a location on a model\n that may or may not actually correspond to a node on a specific model.\n The GtkTreePath struct can be converted into either an array of\n unsigned integers or a string. The string form is a list of numbers\n separated by a colon. Each number refers to the offset at that level.\n Thus, the path “0” refers to the root node and the path\n “2:4” refers to the fifth child of the third node.\n By contrast, a GtkTreeIter is a reference to a specific node on a\n specific model. It is a generic struct with an integer and three\n generic pointers. These are filled in by the model in a model-specific\n way. One can convert a path to an iterator by calling\n gtk_tree_model_get_iter(). These iterators are the primary way of\n accessing a model and are similar to the iterators used by\n GtkTextBuffer. They are generally statically allocated on the stack and\n only used for a short time. The model interface defines a set of\n operations using them for navigating the model.\n It is expected that models fill in the iterator with private data. For\n example, the GtkListStore model, which is internally a simple linked\n list, stores a list node in one of the pointers. The GtkTreeModelSort\n stores an array and an offset in two of the pointers. Additionally,\n there is an integer field. This field is generally filled with a unique\n stamp per model. This stamp is for catching errors resulting from using\n invalid iterators with a model.\n The lifecycle of an iterator can be a little confusing at first.\n Iterators are expected to always be valid for as long as the model is\n unchanged (and doesn't emit a signal). The model is considered to own\n all outstanding iterators and nothing needs to be done to free them from\n the user's point of view. Additionally, some models guarantee that an\n iterator is valid for as long as the node it refers to is valid (most\n notably the GtkTreeStore and GtkListStore). Although generally\n uninteresting, as one always has to allow for the case where iterators\n do not persist beyond a signal, some very important performance\n enhancements were made in the sort model. As a result, the\n GTK_TREE_MODEL_ITERS_PERSIST flag was added to indicate this behavior.\n To help show some common operation of a model, some examples are\n provided. The first example shows three ways of getting the iter at the\n location “3:2:5”. While the first method shown is easier,\n the second is much more common, as you often get paths from callbacks.\n $(DDOC_COMMENT example)\n This second example shows a quick way of iterating through a list and\n getting a string and an integer from each row. The\n populate_model function used below is not shown, as\n it is specific to the GtkListStore. For information on how to write\n such a function, see the GtkListStore documentation.\n $(DDOC_COMMENT example)\n \n",
"line" : 158,
"base" : "Object",
"members" : [
{
"name" : "gtkTreeIter",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkTreeIter*",
"comment" : " the main Gtk struct \n",
"line" : 161}
,
{
"name" : "getTreeIterStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkTreeIter*()",
"line" : 164}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 171}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TreeIter(GtkTreeIter* gtkTreeIter)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 179}
,
{
"name" : "gtkTreeModel",
"kind" : "variable",
"protection" : "public",
"type" : "GtkTreeModel*",
"comment" : "\n this will be set only when the iter\n is created from the model.\n\t \n",
"line" : 193}
,
{
"name" : "setModel",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkTreeModel* gtkTreeModel)",
"comment" : " \n",
"line" : 196}
,
{
"name" : "setModel",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeModelIF treeModel)",
"comment" : " \n",
"line" : 202}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TreeIter(TreeModelIF treeModel, string treePath)",
"comment" : "\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 210}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TreeIter(TreeModelIF treeModel, TreePath treePath)",
"comment" : "\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 218}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TreeIter()",
"comment" : "\n creates a new tree iteractor.\n used TreeView.createIter and TreeView.append() to create iteractor for a tree or list\n\t \n",
"line" : 234}
,
{
"name" : "getValue",
"kind" : "function",
"protection" : "public",
"type" : "void(int column, Value value)",
"comment" : "\n Get Value\n Params:\n  column =\n  value =\n\t \n",
"line" : 245}
,
{
"name" : "getValueString",
"kind" : "function",
"protection" : "public",
"type" : "string(int column)",
"comment" : "\n Get the value of a column as a string\n Params:\n  column = the column number\n Returns: a string representing the value of the column\n\t \n",
"line" : 260}
,
{
"name" : "getValueInt",
"kind" : "function",
"protection" : "public",
"type" : "int(int column)",
"comment" : "\n Get the value of a column as an int\n Params:\n  column = the column number\n Returns: a string representing the value of the column\n\t \n",
"line" : 278}
,
{
"name" : "getTreePath",
"kind" : "function",
"protection" : "public",
"type" : "TreePath()",
"comment" : " \n",
"line" : 290}
,
{
"name" : "getVisiblePath",
"kind" : "function",
"protection" : "public",
"type" : "string(string separator)",
"comment" : "\n This return the path visible to the user.\n\t \n",
"line" : 302}
,
{
"name" : "getParent",
"kind" : "function",
"protection" : "public",
"type" : "TreeIter()",
"comment" : "\n Gets the parent of this iter\n Returns: the parent iter or null if can't get parent or an error occured\n\t \n",
"line" : 328}
,
{
"name" : "getGrandParent",
"kind" : "function",
"protection" : "public",
"type" : "TreeIter()",
"comment" : " \n",
"line" : 345}
,
{
"name" : "stamp",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : " A unique stamp to catch invalid iterators \n",
"line" : 363}
,
{
"name" : "stamp",
"kind" : "function",
"protection" : "public",
"type" : "void(int stamp)",
"comment" : " Ditto \n",
"line" : 369}
,
{
"name" : "userData",
"kind" : "function",
"protection" : "public",
"type" : "void*()",
"comment" : " Model specific data \n",
"line" : 375}
,
{
"name" : "userData",
"kind" : "function",
"protection" : "public",
"type" : "void(void* data)",
"comment" : " Ditto \n",
"line" : 381}
,
{
"name" : "IterData",
"kind" : "struct",
"protection" : "public",
"line" : 387,
"members" : [
{
"name" : "dataInt",
"kind" : "variable",
"protection" : "public",
"type" : "int",
"comment" : " Data fields.\n",
"line" : 391}
,
{
"name" : "dataLong",
"kind" : "variable",
"protection" : "public",
"type" : "long",
"comment" : " Data fields.\n",
"line" : 392}
,
{
"name" : "dataFloat",
"kind" : "variable",
"protection" : "public",
"type" : "double",
"comment" : " Data fields.\n",
"line" : 393}
,
{
"name" : "dataDouble",
"kind" : "variable",
"protection" : "public",
"type" : "double",
"comment" : " Data fields.\n",
"line" : 394}
,
{
"name" : "dataString",
"kind" : "variable",
"protection" : "public",
"type" : "string",
"comment" : " Data fields.\n",
"line" : 395}
,
{
"name" : "dataUser",
"kind" : "variable",
"protection" : "public",
"type" : "void*",
"comment" : " Data fields.\n",
"line" : 397}
,
{
"name" : "type",
"kind" : "variable",
"protection" : "public",
"type" : "object.TypeInfo",
"line" : 400}
]
}
,
{
"name" : "setUserData(T)",
"kind" : "template",
"protection" : "public",
"comment" : "\n setUserData and getUserData provide simple boxing\n around the userData field in the TreeIter struct.\n Throws: TreeIterError for unsuported types or a type mismatch.\n Example:\n ---\n Treeiter iter = new TreeIter();\n\n iter.setUserData(20);\n int i = iter.getUserData!(int)();\n ---\n\t \n",
"line" : 415,
"members" : [
{
"name" : "setUserData",
"kind" : "function",
"type" : "void(T data)",
"line" : 415}
]
}
,
{
"name" : "getUserData(T)",
"kind" : "template",
"protection" : "public",
"comment" : " Ditto \n",
"line" : 455,
"members" : [
{
"name" : "getUserData",
"kind" : "function",
"type" : "T()",
"line" : 455}
]
}
,
{
"name" : "copy",
"kind" : "function",
"protection" : "public",
"type" : "TreeIter()",
"comment" : "\n\t \n\n Creates a dynamically allocated tree iterator as a copy of iter.\n This function is not intended for use in applications, because you\n can just copy the structs by value\n (GtkTreeIter new_iter = iter;).\n You must free this iter with gtk_tree_iter_free().\n Returns: a newly-allocated copy of iter.\n\t \n",
"line" : 544}
,
{
"name" : "free",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Frees an iterator that has been allocated by gtk_tree_iter_copy().\n This function is mainly used for language bindings.\n\t \n",
"line" : 559}
]
}
]
}
,
{
"name" : "gtk.TreeIterError",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TreeIterError.d",
"members" : [
{
"name" : "TreeIterError",
"kind" : "class",
"protection" : "public",
"comment" : "\n \n",
"line" : 65,
"base" : "Exception",
"members" : [
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TreeIterError(string method, string message)",
"comment" : "\n A TreeIter error.\n thrown<br>\n - trying to access a method that requires a tree model and the tree model was never set\n\t \n",
"line" : 73}
]
}
]
}
,
{
"name" : "gtk.TreeModel",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TreeModel.d",
"members" : [
{
"name" : "CustomTreeModelClass",
"kind" : "struct",
"protection" : "public",
"line" : 88,
"members" : [
{
"name" : "parentClass",
"kind" : "variable",
"protection" : "public",
"type" : "GObjectClass",
"line" : 89}
]
}
,
{
"name" : "c_gtk_tree_model_get_type",
"kind" : "variable",
"protection" : "public",
"type" : "extern (C) GType function()",
"line" : 93}
,
{
"name" : "gtk_tree_model_get_type",
"kind" : "alias",
"protection" : "public",
"line" : 94}
,
{
"name" : "TreeModel",
"kind" : "class",
"protection" : "public",
"comment" : "\n \n",
"line" : 98,
"base" : "ObjectG",
"interfaces" : [
"TreeModelIF"],
"members" : [
{
"name" : "parentClass",
"kind" : "variable",
"protection" : "public",
"type" : "GObjectClass*",
"line" : 100}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 111}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TreeModel()",
"line" : 116}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TreeModel(GtkTreeModel* gtkTreeModel)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 127}
,
{
"name" : "customTreeModelgetType",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) GType()",
"line" : 157}
,
{
"name" : "customTreeModelClassInit",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(void* klass)",
"line" : 201}
,
{
"name" : "customTreeModelInit",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTreeModelIface* iface)",
"line" : 218}
,
{
"name" : "customTreeModelFinalize",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GObject* object)",
"line" : 239}
,
{
"name" : "customTreeModelGetFlags",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) GtkTreeModelFlags(GtkTreeModel* tree_model)",
"line" : 245}
,
{
"name" : "customTreeModelGetNColumns",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkTreeModel* tree_model)",
"line" : 252}
,
{
"name" : "customTreeModelGetColumnType",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) GType(GtkTreeModel* tree_model, int index)",
"line" : 259}
,
{
"name" : "customTreeModelGetIter",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkTreeModel* tree_model, GtkTreeIter* iter, GtkTreePath* path)",
"line" : 266}
,
{
"name" : "customTreeModelGetPath",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) GtkTreePath*(GtkTreeModel* tree_model, GtkTreeIter* iter)",
"line" : 273}
,
{
"name" : "customTreeModelGetValue",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTreeModel* tree_model, GtkTreeIter* iter, int column, GValue* value)",
"line" : 281}
,
{
"name" : "customTreeModelIterNext",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkTreeModel* tree_model, GtkTreeIter* iter)",
"line" : 288}
,
{
"name" : "customTreeModelIterChildren",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkTreeModel* tree_model, GtkTreeIter* iter, GtkTreeIter* parent)",
"line" : 295}
,
{
"name" : "customTreeModelIterHasChild",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkTreeModel* tree_model, GtkTreeIter* iter)",
"line" : 302}
,
{
"name" : "customTreeModelIterNChildren",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkTreeModel* tree_model, GtkTreeIter* iter)",
"line" : 309}
,
{
"name" : "customTreeModelIterNthChild",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkTreeModel* tree_model, GtkTreeIter* iter, GtkTreeIter* parent, int n)",
"line" : 316}
,
{
"name" : "customTreeModelIterParent",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkTreeModel* tree_model, GtkTreeIter* iter, GtkTreeIter* child)",
"line" : 323}
]
}
]
}
,
{
"name" : "gtk.TreeModelFilter",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TreeModelFilter.d",
"members" : [
{
"name" : "TreeModelFilter",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkTreeModelFilter is a tree model which wraps another tree model,\n and can do the following things:\n Filter specific rows, based on data from a \"visible column\", a column\n storing booleans indicating whether the row should be filtered or not,\n or based on the return value of a \"visible function\", which gets a\n model, iter and user_data and returns a boolean indicating whether the\n row should be filtered or not.\n Modify the \"appearance\" of the model, using a modify function.\n This is extremely powerful and allows for just changing\n some values and also for creating a completely different model based on\n the given child model.\n Set a different root node, also known as a \"virtual root\". You can pass in\n a GtkTreePath indicating the root node for the filter at construction time.\n \n",
"line" : 101,
"base" : "ObjectG",
"interfaces" : [
"TreeModelIF",
"TreeDragSourceIF"],
"members" : [
{
"name" : "gtkTreeModelFilter",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkTreeModelFilter*",
"comment" : " the main Gtk struct \n",
"line" : 105}
,
{
"name" : "getTreeModelFilterStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkTreeModelFilter*()",
"line" : 108}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 115}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TreeModelFilter(GtkTreeModelFilter* gtkTreeModelFilter)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 123}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 141}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TreeModelFilter(TreeModelIF childModel, TreePath root)",
"comment" : "\n\t \n\n Creates a new GtkTreeModel, with child_model as the child_model\n and root as the virtual root.\n Since 2.4\n Params:\n childModel = A GtkTreeModel.\n root = A GtkTreePath or NULL. [allow-none]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 165}
,
{
"name" : "setVisibleFunc",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) int function(GtkTreeModel*, GtkTreeIter*, void*) func, void* data, extern (C) void function(void* cbData) destroy)",
"comment" : "\n Sets the visible function used when filtering the filter to be func. The\n function should return TRUE if the given row should be visible and\n FALSE otherwise.\n If the condition calculated by the function changes over time (e.g. because\n it depends on some global parameters), you must call\n gtk_tree_model_filter_refilter() to keep the visibility information of\n the model uptodate.\n Note that func is called whenever a row is inserted, when it may still be\n empty. The visible function should therefore take special care of empty\n rows, like in the example below.\n $(DDOC_COMMENT example)\n Since 2.4\n Params:\n func = A GtkTreeModelFilterVisibleFunc, the visible function.\n data = User data to pass to the visible function, or NULL. [allow-none]\n destroy = Destroy notifier of data, or NULL. [allow-none]\n\t \n",
"line" : 194}
,
{
"name" : "setModifyFunc",
"kind" : "function",
"protection" : "public",
"type" : "void(GType[] types, extern (C) void function(GtkTreeModel*, GtkTreeIter*, GValue*, int, void*) func, void* data, extern (C) void function(void* cbData) destroy)",
"comment" : "\n With the n_columns and types parameters, you give an array of column\n types for this model (which will be exposed to the parent model\/view).\n The func, data and destroy parameters are for specifying the modify\n function. The modify function will get called for each\n data access, the goal of the modify function is to return the data which\n should be displayed at the location specified using the parameters of the\n modify function.\n Since 2.4\n Params:\n types = The GTypes of the columns. [array length=n_columns]\n func = A GtkTreeModelFilterModifyFunc\n data = User data to pass to the modify function, or NULL. [allow-none]\n destroy = Destroy notifier of data, or NULL. [allow-none]\n\t \n",
"line" : 215}
,
{
"name" : "setVisibleColumn",
"kind" : "function",
"protection" : "public",
"type" : "void(int column)",
"comment" : "\n Sets column of the child_model to be the column where filter should\n look for visibility information. columns should be a column of type\n G_TYPE_BOOLEAN, where TRUE means that a row is visible, and FALSE\n if not.\n Since 2.4\n Params:\n column = A gint which is the column containing the visible information.\n\t \n",
"line" : 230}
,
{
"name" : "getModel",
"kind" : "function",
"protection" : "public",
"type" : "TreeModelIF()",
"comment" : "\n Returns a pointer to the child model of filter.\n Since 2.4\n Returns: A pointer to a GtkTreeModel. [transfer none]\n\t \n",
"line" : 241}
,
{
"name" : "convertChildIterToIter",
"kind" : "function",
"protection" : "public",
"type" : "int(TreeIter filterIter, TreeIter childIter)",
"comment" : "\n Sets filter_iter to point to the row in filter that corresponds to the\n row pointed at by child_iter. If filter_iter was not set, FALSE is\n returned.\n Since 2.4\n Params:\n filter = A GtkTreeModelFilter.\n filterIter = An uninitialized GtkTreeIter. [out]\n childIter = A valid GtkTreeIter pointing to a row on the child model.\n Returns: TRUE, if filter_iter was set, i.e. if child_iter is a valid iterator pointing to a visible row in child model.\n\t \n",
"line" : 263}
,
{
"name" : "convertIterToChildIter",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter childIter, TreeIter filterIter)",
"comment" : "\n Sets child_iter to point to the row pointed to by filter_iter.\n Since 2.4\n Params:\n filter = A GtkTreeModelFilter.\n childIter = An uninitialized GtkTreeIter. [out]\n filterIter = A valid GtkTreeIter pointing to a row on filter.\n\t \n",
"line" : 277}
,
{
"name" : "convertChildPathToPath",
"kind" : "function",
"protection" : "public",
"type" : "TreePath(TreePath childPath)",
"comment" : "\n Converts child_path to a path relative to filter. That is, child_path\n points to a path in the child model. The rerturned path will point to the\n same row in the filtered model. If child_path isn't a valid path on the\n child model or points to a row which is not visible in filter, then NULL\n is returned.\n Since 2.4\n Params:\n childPath = A GtkTreePath to convert.\n Returns: A newly allocated GtkTreePath, or NULL.\n\t \n",
"line" : 294}
,
{
"name" : "convertPathToChildPath",
"kind" : "function",
"protection" : "public",
"type" : "TreePath(TreePath filterPath)",
"comment" : "\n Converts filter_path to a path on the child model of filter. That is,\n filter_path points to a location in filter. The returned path will\n point to the same location in the model not being filtered. If filter_path\n does not point to a location in the child model, NULL is returned.\n Since 2.4\n Params:\n filter = A GtkTreeModelFilter.\n filterPath = A GtkTreePath to convert.\n Returns: A newly allocated GtkTreePath, or NULL.\n\t \n",
"line" : 316}
,
{
"name" : "refilter",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Emits ::row_changed for each row in the child model, which causes\n the filter to re-evaluate whether a row is visible or not.\n Since 2.4\n Params:\n filter = A GtkTreeModelFilter.\n\t \n",
"line" : 334}
,
{
"name" : "clearCache",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n This function should almost never be called. It clears the filter\n of any cached iterators that haven't been reffed with\n gtk_tree_model_ref_node(). This might be useful if the child model\n being filtered is static (and doesn't change often) and there has been\n a lot of unreffed access to nodes. As a side effect of this function,\n all unreffed iters will be invalid.\n Since 2.4\n\t \n",
"line" : 349}
]
}
]
}
,
{
"name" : "gtk.TreeModelIF",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TreeModelIF.d",
"members" : [
{
"name" : "TreeModelIF",
"kind" : "interface",
"protection" : "public",
"comment" : "\n Description\n The GtkTreeModel interface defines a generic tree interface for use by\n the GtkTreeView widget. It is an abstract interface, and is designed\n to be usable with any appropriate data structure. The programmer just\n has to implement this interface on their own data type for it to be\n viewable by a GtkTreeView widget.\n The model is represented as a hierarchical tree of strongly-typed,\n columned data. In other words, the model can be seen as a tree where\n every node has different values depending on which column is being\n queried. The type of data found in a column is determined by using the\n GType system (ie. G_TYPE_INT, GTK_TYPE_BUTTON, G_TYPE_POINTER, etc.).\n The types are homogeneous per column across all nodes. It is important\n to note that this interface only provides a way of examining a model and\n observing changes. The implementation of each individual model decides\n how and if changes are made.\n In order to make life simpler for programmers who do not need to write\n their own specialized model, two generic models are provided — the\n GtkTreeStore and the GtkListStore. To use these, the developer simply\n pushes data into these models as necessary. These models provide the\n data structure as well as all appropriate tree interfaces. As a result,\n implementing drag and drop, sorting, and storing data is trivial. For\n the vast majority of trees and lists, these two models are sufficient.\n Models are accessed on a node\/column level of granularity. One can\n query for the value of a model at a certain node and a certain column\n on that node. There are two structures used to reference a particular\n node in a model. They are the GtkTreePath and the GtkTreeIter\n [4]\n Most of the interface consists of operations on a GtkTreeIter.\n A path is essentially a potential node. It is a location on a model\n that may or may not actually correspond to a node on a specific model.\n The GtkTreePath struct can be converted into either an array of\n unsigned integers or a string. The string form is a list of numbers\n separated by a colon. Each number refers to the offset at that level.\n Thus, the path “0” refers to the root node and the path\n “2:4” refers to the fifth child of the third node.\n By contrast, a GtkTreeIter is a reference to a specific node on a\n specific model. It is a generic struct with an integer and three\n generic pointers. These are filled in by the model in a model-specific\n way. One can convert a path to an iterator by calling\n gtk_tree_model_get_iter(). These iterators are the primary way of\n accessing a model and are similar to the iterators used by\n GtkTextBuffer. They are generally statically allocated on the stack and\n only used for a short time. The model interface defines a set of\n operations using them for navigating the model.\n It is expected that models fill in the iterator with private data. For\n example, the GtkListStore model, which is internally a simple linked\n list, stores a list node in one of the pointers. The GtkTreeModelSort\n stores an array and an offset in two of the pointers. Additionally,\n there is an integer field. This field is generally filled with a unique\n stamp per model. This stamp is for catching errors resulting from using\n invalid iterators with a model.\n The lifecycle of an iterator can be a little confusing at first.\n Iterators are expected to always be valid for as long as the model is\n unchanged (and doesn't emit a signal). The model is considered to own\n all outstanding iterators and nothing needs to be done to free them from\n the user's point of view. Additionally, some models guarantee that an\n iterator is valid for as long as the node it refers to is valid (most\n notably the GtkTreeStore and GtkListStore). Although generally\n uninteresting, as one always has to allow for the case where iterators\n do not persist beyond a signal, some very important performance\n enhancements were made in the sort model. As a result, the\n GTK_TREE_MODEL_ITERS_PERSIST flag was added to indicate this behavior.\n To help show some common operation of a model, some examples are\n provided. The first example shows three ways of getting the iter at the\n location “3:2:5”. While the first method shown is easier,\n the second is much more common, as you often get paths from callbacks.\n $(DDOC_COMMENT example)\n This second example shows a quick way of iterating through a list and\n getting a string and an integer from each row. The\n populate_model function used below is not shown, as\n it is specific to the GtkListStore. For information on how to write\n such a function, see the GtkListStore documentation.\n $(DDOC_COMMENT example)\n \n",
"line" : 158,
"members" : [
{
"name" : "getTreeModelTStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkTreeModel*()",
"line" : 161}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 164}
,
{
"name" : "getValueString",
"kind" : "function",
"protection" : "public",
"type" : "string(TreeIter iter, int column)",
"comment" : "\n Get the value of a column as a char array.\n this is the same calling getValue and get the string from the value object\n\t \n",
"line" : 171}
,
{
"name" : "getValueInt",
"kind" : "function",
"protection" : "public",
"type" : "int(TreeIter iter, int column)",
"comment" : "\n Get the value of a column as a char array.\n this is the same calling getValue and get the int from the value object\n\t \n",
"line" : 177}
,
{
"name" : "getIter",
"kind" : "function",
"protection" : "public",
"type" : "int(TreeIter iter, TreePath path)",
"comment" : "\n Sets iter to a valid iterator pointing to path.\n Params:\n  iter = The uninitialized GtkTreeIter.\n  path = The GtkTreePath.\n Returns:\n  TRUE, if iter was set.\n\t \n",
"line" : 187}
,
{
"name" : "getValue",
"kind" : "function",
"protection" : "public",
"type" : "Value(TreeIter iter, int column, Value value = null)",
"comment" : "\n Initializes and sets value to that at column.\n When done with value, g_value_unset() needs to be called\n to free any allocated memory.\n Params:\n iter = The GtkTreeIter.\n column = The column to lookup the value at.\n value = (inout) (transfer none) An empty GValue to set.\n\t \n",
"line" : 198}
,
{
"name" : "onRowChangedListeners",
"kind" : "function",
"protection" : "public",
"type" : "void delegate(TreePath, TreeIter, TreeModelIF)[]()",
"comment" : "\n\t \n",
"line" : 203}
,
{
"name" : "addOnRowChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TreePath, TreeIter, TreeModelIF) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted when a row in the model has changed.\n\t \n",
"line" : 207}
,
{
"name" : "onRowDeletedListeners",
"kind" : "function",
"protection" : "public",
"type" : "void delegate(TreePath, TreeModelIF)[]()",
"line" : 208}
,
{
"name" : "addOnRowDeleted",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TreePath, TreeModelIF) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted when a row has been deleted.\n Note that no iterator is passed to the signal handler,\n since the row is already deleted.\n This should be called by models after a row has been removed.\n The location pointed to by path should be the location that\n the row previously was at. It may not be a valid location anymore.\n\t \n",
"line" : 217}
,
{
"name" : "onRowHasChildToggledListeners",
"kind" : "function",
"protection" : "public",
"type" : "void delegate(TreePath, TreeIter, TreeModelIF)[]()",
"line" : 218}
,
{
"name" : "addOnRowHasChildToggled",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TreePath, TreeIter, TreeModelIF) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted when a row has gotten the first child row or lost\n its last child row.\n\t \n",
"line" : 223}
,
{
"name" : "onRowInsertedListeners",
"kind" : "function",
"protection" : "public",
"type" : "void delegate(TreePath, TreeIter, TreeModelIF)[]()",
"line" : 224}
,
{
"name" : "addOnRowInserted",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TreePath, TreeIter, TreeModelIF) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted when a new row has been inserted in the model.\n Note that the row may still be empty at this point, since\n it is a common pattern to first insert an empty row, and\n then fill it with the desired values.\n\t \n",
"line" : 231}
,
{
"name" : "onRowsReorderedListeners",
"kind" : "function",
"protection" : "public",
"type" : "void delegate(TreePath, TreeIter, void*, TreeModelIF)[]()",
"line" : 232}
,
{
"name" : "addOnRowsReordered",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TreePath, TreeIter, void*, TreeModelIF) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal is emitted when the children of a node in the GtkTreeModel\n have been reordered.\n Note that this signal is not emitted\n when rows are reordered by DND, since this is implemented\n by removing and then reinserting the row.\n See Also\n GtkTreeView, GtkTreeStore, GtkListStore, GtkTreeDnd, GtkTreeSortable\n [4]\n Here, iter is short for “iterator”\n\t \n",
"line" : 244}
,
{
"name" : "getFlags",
"kind" : "function",
"protection" : "public",
"type" : "GtkTreeModelFlags()",
"comment" : "\n Returns a set of flags supported by this interface. The flags are a bitwise\n combination of GtkTreeModelFlags. The flags supported should not change\n during the lifecycle of the tree_model.\n Returns: The flags supported by this interface.\n\t \n",
"line" : 252}
,
{
"name" : "getNColumns",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the number of columns supported by tree_model.\n Returns: The number of columns.\n\t \n",
"line" : 258}
,
{
"name" : "getColumnType",
"kind" : "function",
"protection" : "public",
"type" : "GType(int index)",
"comment" : "\n Returns the type of the column.\n Params:\n index = The column index.\n Returns: The type of the column. [transfer none]\n\t \n",
"line" : 266}
,
{
"name" : "getIterFromString",
"kind" : "function",
"protection" : "public",
"type" : "int(TreeIter iter, string pathString)",
"comment" : "\n Sets iter to a valid iterator pointing to path_string, if it\n exists. Otherwise, iter is left invalid and FALSE is returned.\n Params:\n iter = An uninitialized GtkTreeIter. [out]\n pathString = A string representation of a GtkTreePath.\n Returns: TRUE, if iter was set.\n\t \n",
"line" : 276}
,
{
"name" : "getIterFirst",
"kind" : "function",
"protection" : "public",
"type" : "int(TreeIter iter)",
"comment" : "\n Initializes iter with the first iterator in the tree (the one at the path\n \"0\") and returns TRUE. Returns FALSE if the tree is empty.\n Params:\n iter = The uninitialized GtkTreeIter. [out]\n Returns: TRUE, if iter was set.\n\t \n",
"line" : 285}
,
{
"name" : "getPath",
"kind" : "function",
"protection" : "public",
"type" : "TreePath(TreeIter iter)",
"comment" : "\n Returns a newly-created GtkTreePath referenced by iter. This path should\n be freed with gtk_tree_path_free().\n Params:\n iter = The GtkTreeIter.\n Returns: a newly-created GtkTreePath.\n\t \n",
"line" : 294}
,
{
"name" : "iterNext",
"kind" : "function",
"protection" : "public",
"type" : "int(TreeIter iter)",
"comment" : "\n Sets iter to point to the node following it at the current level. If there\n is no next iter, FALSE is returned and iter is set to be invalid.\n Params:\n iter = The GtkTreeIter. [in]\n Returns: TRUE if iter has been changed to the next node.\n\t \n",
"line" : 303}
,
{
"name" : "iterChildren",
"kind" : "function",
"protection" : "public",
"type" : "int(TreeIter iter, TreeIter parent)",
"comment" : "\n Sets iter to point to the first child of parent. If parent has no\n children, FALSE is returned and iter is set to be invalid. parent\n will remain a valid node after this function has been called.\n If parent is NULL returns the first node, equivalent to\n gtk_tree_model_get_iter_first (tree_model, iter);\n Params:\n iter = The new GtkTreeIter to be set to the child. [out]\n parent = The GtkTreeIter, or NULL. [allow-none]\n Returns: TRUE, if child has been set to the first child.\n\t \n",
"line" : 316}
,
{
"name" : "iterHasChild",
"kind" : "function",
"protection" : "public",
"type" : "int(TreeIter iter)",
"comment" : "\n Returns TRUE if iter has children, FALSE otherwise.\n Params:\n iter = The GtkTreeIter to test for children.\n Returns: TRUE if iter has children.\n\t \n",
"line" : 324}
,
{
"name" : "iterNChildren",
"kind" : "function",
"protection" : "public",
"type" : "int(TreeIter iter)",
"comment" : "\n Returns the number of children that iter has. As a special case, if iter\n is NULL, then the number of toplevel nodes is returned.\n Params:\n iter = The GtkTreeIter, or NULL. [allow-none]\n Returns: The number of children of iter.\n\t \n",
"line" : 333}
,
{
"name" : "iterNthChild",
"kind" : "function",
"protection" : "public",
"type" : "int(TreeIter iter, TreeIter parent, int n)",
"comment" : "\n Sets iter to be the child of parent, using the given index. The first\n index is 0. If n is too big, or parent has no children, iter is set\n to an invalid iterator and FALSE is returned. parent will remain a valid\n node after this function has been called. As a special case, if parent is\n NULL, then the nth root node is set.\n Params:\n iter = The GtkTreeIter to set to the nth child. [out]\n parent = The GtkTreeIter to get the child from, or NULL. [allow-none]\n n = Then index of the desired child.\n Returns: TRUE, if parent has an nth child.\n\t \n",
"line" : 347}
,
{
"name" : "iterParent",
"kind" : "function",
"protection" : "public",
"type" : "int(TreeIter iter, TreeIter child)",
"comment" : "\n Sets iter to be the parent of child. If child is at the toplevel, and\n doesn't have a parent, then iter is set to an invalid iterator and FALSE\n is returned. child will remain a valid node after this function has been\n called.\n Params:\n iter = The new GtkTreeIter to set to the parent. [out]\n child = The GtkTreeIter.\n Returns: TRUE, if iter is set to the parent of child.\n\t \n",
"line" : 359}
,
{
"name" : "getStringFromIter",
"kind" : "function",
"protection" : "public",
"type" : "string(TreeIter iter)",
"comment" : "\n Generates a string representation of the iter. This string is a ':'\n separated list of numbers. For example, \"4:10:0:3\" would be an\n acceptable return value for this string.\n Since 2.2\n Params:\n iter = An GtkTreeIter.\n Returns: A newly-allocated string. Must be freed with g_free().\n\t \n",
"line" : 370}
,
{
"name" : "refNode",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter)",
"comment" : "\n Lets the tree ref the node. This is an optional method for models to\n implement. To be more specific, models may ignore this call as it exists\n primarily for performance reasons.\n This function is primarily meant as a way for views to let caching model\n know when nodes are being displayed (and hence, whether or not to cache that\n node.) For example, a file-system based model would not want to keep the\n entire file-hierarchy in memory, just the sections that are currently being\n displayed by every current view.\n A model should be expected to be able to get an iter independent of its\n reffed state.\n Params:\n iter = The GtkTreeIter.\n\t \n",
"line" : 386}
,
{
"name" : "unrefNode",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter)",
"comment" : "\n Lets the tree unref the node. This is an optional method for models to\n implement. To be more specific, models may ignore this call as it exists\n primarily for performance reasons.\n For more information on what this means, see gtk_tree_model_ref_node().\n Please note that nodes that are deleted are not unreffed.\n Params:\n iter = The GtkTreeIter.\n\t \n",
"line" : 397}
,
{
"name" : "getValist",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, void* varArgs)",
"comment" : "\n See gtk_tree_model_get(), this version takes a va_list\n for language bindings to use.\n Params:\n iter = a row in tree_model\n varArgs = va_list of column\/return location pairs\n\t \n",
"line" : 406}
,
{
"name" : "foreac",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) int function(GtkTreeModel*, GtkTreePath*, GtkTreeIter*, void*) func, void* userData)",
"comment" : "\n Calls func on each node in model in a depth-first fashion.\n If func returns TRUE, then the tree ceases to be walked, and\n gtk_tree_model_foreach() returns.\n Params:\n func = A function to be called on each row. [scope call]\n userData = User data to passed to func.\n\t \n",
"line" : 416}
,
{
"name" : "rowChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(TreePath path, TreeIter iter)",
"comment" : "\n Emits the \"row-changed\" signal on tree_model.\n Params:\n path = A GtkTreePath pointing to the changed row\n iter = A valid GtkTreeIter pointing to the changed row\n\t \n",
"line" : 424}
,
{
"name" : "rowInserted",
"kind" : "function",
"protection" : "public",
"type" : "void(TreePath path, TreeIter iter)",
"comment" : "\n Emits the \"row-inserted\" signal on tree_model\n Params:\n path = A GtkTreePath pointing to the inserted row\n iter = A valid GtkTreeIter pointing to the inserted row\n\t \n",
"line" : 432}
,
{
"name" : "rowHasChildToggled",
"kind" : "function",
"protection" : "public",
"type" : "void(TreePath path, TreeIter iter)",
"comment" : "\n Emits the \"row-has-child-toggled\" signal on tree_model. This should be\n called by models after the child state of a node changes.\n Params:\n path = A GtkTreePath pointing to the changed row\n iter = A valid GtkTreeIter pointing to the changed row\n\t \n",
"line" : 441}
,
{
"name" : "rowDeleted",
"kind" : "function",
"protection" : "public",
"type" : "void(TreePath path)",
"comment" : "\n Emits the \"row-deleted\" signal on tree_model. This should be called by\n models after a row has been removed. The location pointed to by path\n should be the location that the row previously was at. It may not be a\n valid location anymore.\n Params:\n path = A GtkTreePath pointing to the previous location of the deleted row.\n\t \n",
"line" : 451}
,
{
"name" : "rowsReordered",
"kind" : "function",
"protection" : "public",
"type" : "void(TreePath path, TreeIter iter, int[] newOrder)",
"comment" : "\n Emits the \"rows-reordered\" signal on tree_model. This should be called by\n models when their rows have been reordered.\n Params:\n path = A GtkTreePath pointing to the tree node whose children have been\n reordered\n iter = A valid GtkTreeIter pointing to the node whose children have been\n reordered, or NULL if the depth of path is 0.\n newOrder = an array of integers mapping the current position of each child\n to its old position before the re-ordering,\n i.e. new_order[newpos] = oldpos.\n Signal Details\n The \"row-changed\" signal\n void user_function (GtkTreeModel *tree_model,\n  GtkTreePath *path,\n  GtkTreeIter *iter,\n  gpointer user_data) : Run Last\n This signal is emitted when a row in the model has changed.\n path = a GtkTreePath identifying the changed row\n iter = a valid GtkTreeIter pointing to the changed row\n\t \n",
"line" : 474}
]
}
]
}
,
{
"name" : "gtk.TreeModelSort",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TreeModelSort.d",
"members" : [
{
"name" : "TreeModelSort",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkTreeModelSort is a model which implements the GtkTreeSortable\n interface. It does not hold any data itself, but rather is created with\n a child model and proxies its data. It has identical column types to\n this child model, and the changes in the child are propagated. The\n primary purpose of this model is to provide a way to sort a different\n model without modifying it. Note that the sort function used by\n GtkTreeModelSort is not guaranteed to be stable.\n The use of this is best demonstrated through an example. In the\n following sample code we create two GtkTreeView widgets each with a\n view of the same data. As the model is wrapped here by a\n GtkTreeModelSort, the two GtkTreeViews can each sort their\n view of the data without affecting the other. By contrast, if we\n simply put the same model in each widget, then sorting the first would\n sort the second.\n $(DDOC_COMMENT example)\n To demonstrate how to access the underlying child model from the sort\n model, the next example will be a callback for the GtkTreeSelection\n \"changed\" signal. In this callback, we get a string from COLUMN_1 of\n the model. We then modify the string, find the same selected row on the\n child model, and change the row there.\n $(DDOC_COMMENT example)\n \n",
"line" : 116,
"base" : "ObjectG",
"interfaces" : [
"TreeModelIF",
"TreeDragSourceIF",
"TreeSortableIF"],
"members" : [
{
"name" : "gtkTreeModelSort",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkTreeModelSort*",
"comment" : " the main Gtk struct \n",
"line" : 120}
,
{
"name" : "getTreeModelSortStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkTreeModelSort*()",
"line" : 123}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 130}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TreeModelSort(GtkTreeModelSort* gtkTreeModelSort)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 138}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 156}
,
{
"name" : "newWithModel",
"kind" : "function",
"protection" : "public",
"type" : "TreeModelIF(TreeModelIF childModel)",
"comment" : "\n\t \n\n Creates a new GtkTreeModel, with child_model as the child model.\n Params:\n childModel = A GtkTreeModel\n Returns: A new GtkTreeModel. [transfer full]\n\t \n",
"line" : 180}
,
{
"name" : "getModel",
"kind" : "function",
"protection" : "public",
"type" : "TreeModelIF()",
"comment" : "\n Returns the model the GtkTreeModelSort is sorting.\n Returns: the \"child model\" being sorted. [transfer none]\n\t \n",
"line" : 195}
,
{
"name" : "convertChildPathToPath",
"kind" : "function",
"protection" : "public",
"type" : "TreePath(TreePath childPath)",
"comment" : "\n Converts child_path to a path relative to tree_model_sort. That is,\n child_path points to a path in the child model. The returned path will\n point to the same row in the sorted model. If child_path isn't a valid\n path on the child model, then NULL is returned.\n Params:\n childPath = A GtkTreePath to convert\n Returns: A newly allocated GtkTreePath, or NULL\n\t \n",
"line" : 215}
,
{
"name" : "convertChildIterToIter",
"kind" : "function",
"protection" : "public",
"type" : "int(TreeIter sortIter, TreeIter childIter)",
"comment" : "\n Sets sort_iter to point to the row in tree_model_sort that corresponds to\n the row pointed at by child_iter. If sort_iter was not set, FALSE\n is returned. Note: a boolean is only returned since 2.14.\n Params:\n sortIter = An uninitialized GtkTreeIter. [out]\n childIter = A valid GtkTreeIter pointing to a row on the child model\n Returns: TRUE, if sort_iter was set, i.e. if sort_iter is a valid iterator pointer to a visible row in the child model.\n\t \n",
"line" : 235}
,
{
"name" : "convertPathToChildPath",
"kind" : "function",
"protection" : "public",
"type" : "TreePath(TreePath sortedPath)",
"comment" : "\n Converts sorted_path to a path on the child model of tree_model_sort.\n That is, sorted_path points to a location in tree_model_sort. The\n returned path will point to the same location in the model not being\n sorted. If sorted_path does not point to a location in the child model,\n NULL is returned.\n Params:\n sortedPath = A GtkTreePath to convert\n Returns: A newly allocated GtkTreePath, or NULL\n\t \n",
"line" : 251}
,
{
"name" : "convertIterToChildIter",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter childIter, TreeIter sortedIter)",
"comment" : "\n Sets child_iter to point to the row pointed to by sorted_iter.\n Params:\n childIter = An uninitialized GtkTreeIter. [out]\n sortedIter = A valid GtkTreeIter pointing to a row on tree_model_sort.\n\t \n",
"line" : 268}
,
{
"name" : "resetDefaultSortFunc",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n This resets the default sort function to be in the 'unsorted' state. That\n is, it is in the same order as the child model. It will re-sort the model\n to be in the same order as the child model only if the GtkTreeModelSort\n is in 'unsorted' state.\n\t \n",
"line" : 280}
,
{
"name" : "clearCache",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n This function should almost never be called. It clears the tree_model_sort\n of any cached iterators that haven't been reffed with\n gtk_tree_model_ref_node(). This might be useful if the child model being\n sorted is static (and doesn't change often) and there has been a lot of\n unreffed access to nodes. As a side effect of this function, all unreffed\n iters will be invalid.\n\t \n",
"line" : 294}
,
{
"name" : "iterIsValid",
"kind" : "function",
"protection" : "public",
"type" : "int(TreeIter iter)",
"comment" : "\n Warning\n This function is slow. Only use it for debugging and\/or testing purposes.\n Checks if the given iter is a valid iter for this GtkTreeModelSort.\n Since 2.2\n Params:\n iter = A GtkTreeIter.\n Returns: TRUE if the iter is valid, FALSE if the iter is invalid.\n\t \n",
"line" : 309}
]
}
]
}
,
{
"name" : "gtk.TreeModelT",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TreeModelT.d",
"members" : [
{
"name" : "TreeModelT(TStruct)",
"kind" : "template",
"protection" : "public",
"comment" : "\n Description\n The GtkTreeModel interface defines a generic tree interface for use by\n the GtkTreeView widget. It is an abstract interface, and is designed\n to be usable with any appropriate data structure. The programmer just\n has to implement this interface on their own data type for it to be\n viewable by a GtkTreeView widget.\n The model is represented as a hierarchical tree of strongly-typed,\n columned data. In other words, the model can be seen as a tree where\n every node has different values depending on which column is being\n queried. The type of data found in a column is determined by using the\n GType system (ie. G_TYPE_INT, GTK_TYPE_BUTTON, G_TYPE_POINTER, etc.).\n The types are homogeneous per column across all nodes. It is important\n to note that this interface only provides a way of examining a model and\n observing changes. The implementation of each individual model decides\n how and if changes are made.\n In order to make life simpler for programmers who do not need to write\n their own specialized model, two generic models are provided — the\n GtkTreeStore and the GtkListStore. To use these, the developer simply\n pushes data into these models as necessary. These models provide the\n data structure as well as all appropriate tree interfaces. As a result,\n implementing drag and drop, sorting, and storing data is trivial. For\n the vast majority of trees and lists, these two models are sufficient.\n Models are accessed on a node\/column level of granularity. One can\n query for the value of a model at a certain node and a certain column\n on that node. There are two structures used to reference a particular\n node in a model. They are the GtkTreePath and the GtkTreeIter\n [4]\n Most of the interface consists of operations on a GtkTreeIter.\n A path is essentially a potential node. It is a location on a model\n that may or may not actually correspond to a node on a specific model.\n The GtkTreePath struct can be converted into either an array of\n unsigned integers or a string. The string form is a list of numbers\n separated by a colon. Each number refers to the offset at that level.\n Thus, the path “0” refers to the root node and the path\n “2:4” refers to the fifth child of the third node.\n By contrast, a GtkTreeIter is a reference to a specific node on a\n specific model. It is a generic struct with an integer and three\n generic pointers. These are filled in by the model in a model-specific\n way. One can convert a path to an iterator by calling\n gtk_tree_model_get_iter(). These iterators are the primary way of\n accessing a model and are similar to the iterators used by\n GtkTextBuffer. They are generally statically allocated on the stack and\n only used for a short time. The model interface defines a set of\n operations using them for navigating the model.\n It is expected that models fill in the iterator with private data. For\n example, the GtkListStore model, which is internally a simple linked\n list, stores a list node in one of the pointers. The GtkTreeModelSort\n stores an array and an offset in two of the pointers. Additionally,\n there is an integer field. This field is generally filled with a unique\n stamp per model. This stamp is for catching errors resulting from using\n invalid iterators with a model.\n The lifecycle of an iterator can be a little confusing at first.\n Iterators are expected to always be valid for as long as the model is\n unchanged (and doesn't emit a signal). The model is considered to own\n all outstanding iterators and nothing needs to be done to free them from\n the user's point of view. Additionally, some models guarantee that an\n iterator is valid for as long as the node it refers to is valid (most\n notably the GtkTreeStore and GtkListStore). Although generally\n uninteresting, as one always has to allow for the case where iterators\n do not persist beyond a signal, some very important performance\n enhancements were made in the sort model. As a result, the\n GTK_TREE_MODEL_ITERS_PERSIST flag was added to indicate this behavior.\n To help show some common operation of a model, some examples are\n provided. The first example shows three ways of getting the iter at the\n location “3:2:5”. While the first method shown is easier,\n the second is much more common, as you often get paths from callbacks.\n $(DDOC_COMMENT example)\n This second example shows a quick way of iterating through a list and\n getting a string and an integer from each row. The\n populate_model function used below is not shown, as\n it is specific to the GtkListStore. For information on how to write\n such a function, see the GtkListStore documentation.\n $(DDOC_COMMENT example)\n \n",
"line" : 158,
"members" : [
{
"name" : "gtkTreeModel",
"kind" : "variable",
"type" : "GtkTreeModel*",
"comment" : " the main Gtk struct \n",
"line" : 162}
,
{
"name" : "getTreeModelTStruct",
"kind" : "function",
"type" : "GtkTreeModel*()",
"line" : 165}
,
{
"name" : "getValueString",
"kind" : "function",
"type" : "string(TreeIter iter, int column)",
"comment" : "\n Get the value of a column as a char array.\n this is the same calling getValue and get the string from the value object\n\t \n",
"line" : 175}
,
{
"name" : "getValueInt",
"kind" : "function",
"type" : "int(TreeIter iter, int column)",
"comment" : "\n Get the value of a column as a char array.\n this is the same calling getValue and get the int from the value object\n\t \n",
"line" : 186}
,
{
"name" : "getIter",
"kind" : "function",
"type" : "int(TreeIter iter, TreePath path)",
"comment" : "\n Sets iter to a valid iterator pointing to path.\n Params:\n  iter = The uninitialized GtkTreeIter.\n  path = The GtkTreePath.\n Returns:\n  TRUE, if iter was set.\n\t \n",
"line" : 201}
,
{
"name" : "getValue",
"kind" : "function",
"type" : "Value(TreeIter iter, int column, Value value = null)",
"comment" : "\n Initializes and sets value to that at column.\n When done with value, g_value_unset() needs to be called\n to free any allocated memory.\n Params:\n iter = The GtkTreeIter.\n column = The column to lookup the value at.\n value = (inout) (transfer none) An empty GValue to set.\n\t \n",
"line" : 220}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 233}
,
{
"name" : "_onRowChangedListeners",
"kind" : "variable",
"type" : "void delegate(TreePath, TreeIter, TreeModelIF)[]",
"line" : 235}
,
{
"name" : "onRowChangedListeners",
"kind" : "function",
"type" : "void delegate(TreePath, TreeIter, TreeModelIF)[]()",
"line" : 236}
,
{
"name" : "addOnRowChanged",
"kind" : "function",
"type" : "void(void delegate(TreePath, TreeIter, TreeModelIF) dlg, ConnectFlags connectFlags = cast(ConnectFlags)0)",
"comment" : "\n This signal is emitted when a row in the model has changed.\n\t \n",
"line" : 243}
,
{
"name" : "callBackRowChanged",
"kind" : "function",
"type" : "extern (C) void(GtkTreeModel* treeModelStruct, GtkTreePath* path, GtkTreeIter* iter, TreeModelIF treeModelIF)",
"line" : 258}
,
{
"name" : "_onRowDeletedListeners",
"kind" : "variable",
"type" : "void delegate(TreePath, TreeModelIF)[]",
"line" : 266}
,
{
"name" : "onRowDeletedListeners",
"kind" : "function",
"type" : "void delegate(TreePath, TreeModelIF)[]()",
"line" : 267}
,
{
"name" : "addOnRowDeleted",
"kind" : "function",
"type" : "void(void delegate(TreePath, TreeModelIF) dlg, ConnectFlags connectFlags = cast(ConnectFlags)0)",
"comment" : "\n This signal is emitted when a row has been deleted.\n Note that no iterator is passed to the signal handler,\n since the row is already deleted.\n This should be called by models after a row has been removed.\n The location pointed to by path should be the location that\n the row previously was at. It may not be a valid location anymore.\n\t \n",
"line" : 279}
,
{
"name" : "callBackRowDeleted",
"kind" : "function",
"type" : "extern (C) void(GtkTreeModel* treeModelStruct, GtkTreePath* path, TreeModelIF treeModelIF)",
"line" : 294}
,
{
"name" : "_onRowHasChildToggledListeners",
"kind" : "variable",
"type" : "void delegate(TreePath, TreeIter, TreeModelIF)[]",
"line" : 302}
,
{
"name" : "onRowHasChildToggledListeners",
"kind" : "function",
"type" : "void delegate(TreePath, TreeIter, TreeModelIF)[]()",
"line" : 303}
,
{
"name" : "addOnRowHasChildToggled",
"kind" : "function",
"type" : "void(void delegate(TreePath, TreeIter, TreeModelIF) dlg, ConnectFlags connectFlags = cast(ConnectFlags)0)",
"comment" : "\n This signal is emitted when a row has gotten the first child row or lost\n its last child row.\n\t \n",
"line" : 311}
,
{
"name" : "callBackRowHasChildToggled",
"kind" : "function",
"type" : "extern (C) void(GtkTreeModel* treeModelStruct, GtkTreePath* path, GtkTreeIter* iter, TreeModelIF treeModelIF)",
"line" : 326}
,
{
"name" : "_onRowInsertedListeners",
"kind" : "variable",
"type" : "void delegate(TreePath, TreeIter, TreeModelIF)[]",
"line" : 334}
,
{
"name" : "onRowInsertedListeners",
"kind" : "function",
"type" : "void delegate(TreePath, TreeIter, TreeModelIF)[]()",
"line" : 335}
,
{
"name" : "addOnRowInserted",
"kind" : "function",
"type" : "void(void delegate(TreePath, TreeIter, TreeModelIF) dlg, ConnectFlags connectFlags = cast(ConnectFlags)0)",
"comment" : "\n This signal is emitted when a new row has been inserted in the model.\n Note that the row may still be empty at this point, since\n it is a common pattern to first insert an empty row, and\n then fill it with the desired values.\n\t \n",
"line" : 345}
,
{
"name" : "callBackRowInserted",
"kind" : "function",
"type" : "extern (C) void(GtkTreeModel* treeModelStruct, GtkTreePath* path, GtkTreeIter* iter, TreeModelIF treeModelIF)",
"line" : 360}
,
{
"name" : "_onRowsReorderedListeners",
"kind" : "variable",
"type" : "void delegate(TreePath, TreeIter, gpointer, TreeModelIF)[]",
"line" : 368}
,
{
"name" : "onRowsReorderedListeners",
"kind" : "function",
"type" : "void delegate(TreePath, TreeIter, gpointer, TreeModelIF)[]()",
"line" : 369}
,
{
"name" : "addOnRowsReordered",
"kind" : "function",
"type" : "void(void delegate(TreePath, TreeIter, gpointer, TreeModelIF) dlg, ConnectFlags connectFlags = cast(ConnectFlags)0)",
"comment" : "\n This signal is emitted when the children of a node in the GtkTreeModel\n have been reordered.\n Note that this signal is not emitted\n when rows are reordered by DND, since this is implemented\n by removing and then reinserting the row.\n See Also\n GtkTreeView, GtkTreeStore, GtkListStore, GtkTreeDnd, GtkTreeSortable\n [4]\n Here, iter is short for “iterator”\n\t \n",
"line" : 384}
,
{
"name" : "callBackRowsReordered",
"kind" : "function",
"type" : "extern (C) void(GtkTreeModel* treeModelStruct, GtkTreePath* path, GtkTreeIter* iter, gpointer newOrder, TreeModelIF treeModelIF)",
"line" : 399}
,
{
"name" : "getFlags",
"kind" : "function",
"type" : "GtkTreeModelFlags()",
"comment" : "\n Returns a set of flags supported by this interface. The flags are a bitwise\n combination of GtkTreeModelFlags. The flags supported should not change\n during the lifecycle of the tree_model.\n Returns: The flags supported by this interface.\n\t \n",
"line" : 414}
,
{
"name" : "getNColumns",
"kind" : "function",
"type" : "int()",
"comment" : "\n Returns the number of columns supported by tree_model.\n Returns: The number of columns.\n\t \n",
"line" : 424}
,
{
"name" : "getColumnType",
"kind" : "function",
"type" : "GType(int index)",
"comment" : "\n Returns the type of the column.\n Params:\n index = The column index.\n Returns: The type of the column. [transfer none]\n\t \n",
"line" : 436}
,
{
"name" : "getIterFromString",
"kind" : "function",
"type" : "int(TreeIter iter, string pathString)",
"comment" : "\n Sets iter to a valid iterator pointing to path_string, if it\n exists. Otherwise, iter is left invalid and FALSE is returned.\n Params:\n iter = An uninitialized GtkTreeIter. [out]\n pathString = A string representation of a GtkTreePath.\n Returns: TRUE, if iter was set.\n\t \n",
"line" : 450}
,
{
"name" : "getIterFirst",
"kind" : "function",
"type" : "int(TreeIter iter)",
"comment" : "\n Initializes iter with the first iterator in the tree (the one at the path\n \"0\") and returns TRUE. Returns FALSE if the tree is empty.\n Params:\n iter = The uninitialized GtkTreeIter. [out]\n Returns: TRUE, if iter was set.\n\t \n",
"line" : 463}
,
{
"name" : "getPath",
"kind" : "function",
"type" : "TreePath(TreeIter iter)",
"comment" : "\n Returns a newly-created GtkTreePath referenced by iter. This path should\n be freed with gtk_tree_path_free().\n Params:\n iter = The GtkTreeIter.\n Returns: a newly-created GtkTreePath.\n\t \n",
"line" : 476}
,
{
"name" : "iterNext",
"kind" : "function",
"type" : "int(TreeIter iter)",
"comment" : "\n Sets iter to point to the node following it at the current level. If there\n is no next iter, FALSE is returned and iter is set to be invalid.\n Params:\n iter = The GtkTreeIter. [in]\n Returns: TRUE if iter has been changed to the next node.\n\t \n",
"line" : 494}
,
{
"name" : "iterChildren",
"kind" : "function",
"type" : "int(TreeIter iter, TreeIter parent)",
"comment" : "\n Sets iter to point to the first child of parent. If parent has no\n children, FALSE is returned and iter is set to be invalid. parent\n will remain a valid node after this function has been called.\n If parent is NULL returns the first node, equivalent to\n gtk_tree_model_get_iter_first (tree_model, iter);\n Params:\n iter = The new GtkTreeIter to be set to the child. [out]\n parent = The GtkTreeIter, or NULL. [allow-none]\n Returns: TRUE, if child has been set to the first child.\n\t \n",
"line" : 511}
,
{
"name" : "iterHasChild",
"kind" : "function",
"type" : "int(TreeIter iter)",
"comment" : "\n Returns TRUE if iter has children, FALSE otherwise.\n Params:\n iter = The GtkTreeIter to test for children.\n Returns: TRUE if iter has children.\n\t \n",
"line" : 523}
,
{
"name" : "iterNChildren",
"kind" : "function",
"type" : "int(TreeIter iter)",
"comment" : "\n Returns the number of children that iter has. As a special case, if iter\n is NULL, then the number of toplevel nodes is returned.\n Params:\n iter = The GtkTreeIter, or NULL. [allow-none]\n Returns: The number of children of iter.\n\t \n",
"line" : 536}
,
{
"name" : "iterNthChild",
"kind" : "function",
"type" : "int(TreeIter iter, TreeIter parent, int n)",
"comment" : "\n Sets iter to be the child of parent, using the given index. The first\n index is 0. If n is too big, or parent has no children, iter is set\n to an invalid iterator and FALSE is returned. parent will remain a valid\n node after this function has been called. As a special case, if parent is\n NULL, then the nth root node is set.\n Params:\n iter = The GtkTreeIter to set to the nth child. [out]\n parent = The GtkTreeIter to get the child from, or NULL. [allow-none]\n n = Then index of the desired child.\n Returns: TRUE, if parent has an nth child.\n\t \n",
"line" : 554}
,
{
"name" : "iterParent",
"kind" : "function",
"type" : "int(TreeIter iter, TreeIter child)",
"comment" : "\n Sets iter to be the parent of child. If child is at the toplevel, and\n doesn't have a parent, then iter is set to an invalid iterator and FALSE\n is returned. child will remain a valid node after this function has been\n called.\n Params:\n iter = The new GtkTreeIter to set to the parent. [out]\n child = The GtkTreeIter.\n Returns: TRUE, if iter is set to the parent of child.\n\t \n",
"line" : 570}
,
{
"name" : "getStringFromIter",
"kind" : "function",
"type" : "string(TreeIter iter)",
"comment" : "\n Generates a string representation of the iter. This string is a ':'\n separated list of numbers. For example, \"4:10:0:3\" would be an\n acceptable return value for this string.\n Since 2.2\n Params:\n iter = An GtkTreeIter.\n Returns: A newly-allocated string. Must be freed with g_free().\n\t \n",
"line" : 585}
,
{
"name" : "refNode",
"kind" : "function",
"type" : "void(TreeIter iter)",
"comment" : "\n Lets the tree ref the node. This is an optional method for models to\n implement. To be more specific, models may ignore this call as it exists\n primarily for performance reasons.\n This function is primarily meant as a way for views to let caching model\n know when nodes are being displayed (and hence, whether or not to cache that\n node.) For example, a file-system based model would not want to keep the\n entire file-hierarchy in memory, just the sections that are currently being\n displayed by every current view.\n A model should be expected to be able to get an iter independent of its\n reffed state.\n Params:\n iter = The GtkTreeIter.\n\t \n",
"line" : 605}
,
{
"name" : "unrefNode",
"kind" : "function",
"type" : "void(TreeIter iter)",
"comment" : "\n Lets the tree unref the node. This is an optional method for models to\n implement. To be more specific, models may ignore this call as it exists\n primarily for performance reasons.\n For more information on what this means, see gtk_tree_model_ref_node().\n Please note that nodes that are deleted are not unreffed.\n Params:\n iter = The GtkTreeIter.\n\t \n",
"line" : 620}
,
{
"name" : "getValist",
"kind" : "function",
"type" : "void(TreeIter iter, void* varArgs)",
"comment" : "\n See gtk_tree_model_get(), this version takes a va_list\n for language bindings to use.\n Params:\n iter = a row in tree_model\n varArgs = va_list of column\/return location pairs\n\t \n",
"line" : 633}
,
{
"name" : "foreac",
"kind" : "function",
"type" : "void(GtkTreeModelForeachFunc func, void* userData)",
"comment" : "\n Calls func on each node in model in a depth-first fashion.\n If func returns TRUE, then the tree ceases to be walked, and\n gtk_tree_model_foreach() returns.\n Params:\n func = A function to be called on each row. [scope call]\n userData = User data to passed to func.\n\t \n",
"line" : 647}
,
{
"name" : "rowChanged",
"kind" : "function",
"type" : "void(TreePath path, TreeIter iter)",
"comment" : "\n Emits the \"row-changed\" signal on tree_model.\n Params:\n path = A GtkTreePath pointing to the changed row\n iter = A valid GtkTreeIter pointing to the changed row\n\t \n",
"line" : 659}
,
{
"name" : "rowInserted",
"kind" : "function",
"type" : "void(TreePath path, TreeIter iter)",
"comment" : "\n Emits the \"row-inserted\" signal on tree_model\n Params:\n path = A GtkTreePath pointing to the inserted row\n iter = A valid GtkTreeIter pointing to the inserted row\n\t \n",
"line" : 671}
,
{
"name" : "rowHasChildToggled",
"kind" : "function",
"type" : "void(TreePath path, TreeIter iter)",
"comment" : "\n Emits the \"row-has-child-toggled\" signal on tree_model. This should be\n called by models after the child state of a node changes.\n Params:\n path = A GtkTreePath pointing to the changed row\n iter = A valid GtkTreeIter pointing to the changed row\n\t \n",
"line" : 684}
,
{
"name" : "rowDeleted",
"kind" : "function",
"type" : "void(TreePath path)",
"comment" : "\n Emits the \"row-deleted\" signal on tree_model. This should be called by\n models after a row has been removed. The location pointed to by path\n should be the location that the row previously was at. It may not be a\n valid location anymore.\n Params:\n path = A GtkTreePath pointing to the previous location of the deleted row.\n\t \n",
"line" : 698}
,
{
"name" : "rowsReordered",
"kind" : "function",
"type" : "void(TreePath path, TreeIter iter, int[] newOrder)",
"comment" : "\n Emits the \"rows-reordered\" signal on tree_model. This should be called by\n models when their rows have been reordered.\n Params:\n path = A GtkTreePath pointing to the tree node whose children have been\n reordered\n iter = A valid GtkTreeIter pointing to the node whose children have been\n reordered, or NULL if the depth of path is 0.\n newOrder = an array of integers mapping the current position of each child\n to its old position before the re-ordering,\n i.e. new_order[newpos] = oldpos.\n Signal Details\n The \"row-changed\" signal\n void user_function (GtkTreeModel *tree_model,\n  GtkTreePath *path,\n  GtkTreeIter *iter,\n  gpointer user_data) : Run Last\n This signal is emitted when a row in the model has changed.\n path = a GtkTreePath identifying the changed row\n iter = a valid GtkTreeIter pointing to the changed row\n\t \n",
"line" : 725}
]
}
]
}
,
{
"name" : "gtk.TreeNode",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TreeNode.d",
"members" : [
{
"name" : "TreeNode",
"kind" : "interface",
"protection" : "public",
"comment" : "\n TreeNode interface\n \n",
"line" : 67,
"members" : [
{
"name" : "getNodeValue",
"kind" : "function",
"protection" : "public",
"type" : "string(int column)",
"line" : 68}
,
{
"name" : "columnCount",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"line" : 69}
]
}
]
}
,
{
"name" : "gtk.TreePath",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TreePath.d",
"members" : [
{
"name" : "TreePath",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkTreeModel interface defines a generic tree interface for use by\n the GtkTreeView widget. It is an abstract interface, and is designed\n to be usable with any appropriate data structure. The programmer just\n has to implement this interface on their own data type for it to be\n viewable by a GtkTreeView widget.\n The model is represented as a hierarchical tree of strongly-typed,\n columned data. In other words, the model can be seen as a tree where\n every node has different values depending on which column is being\n queried. The type of data found in a column is determined by using the\n GType system (ie. G_TYPE_INT, GTK_TYPE_BUTTON, G_TYPE_POINTER, etc.).\n The types are homogeneous per column across all nodes. It is important\n to note that this interface only provides a way of examining a model and\n observing changes. The implementation of each individual model decides\n how and if changes are made.\n In order to make life simpler for programmers who do not need to write\n their own specialized model, two generic models are provided — the\n GtkTreeStore and the GtkListStore. To use these, the developer simply\n pushes data into these models as necessary. These models provide the\n data structure as well as all appropriate tree interfaces. As a result,\n implementing drag and drop, sorting, and storing data is trivial. For\n the vast majority of trees and lists, these two models are sufficient.\n Models are accessed on a node\/column level of granularity. One can\n query for the value of a model at a certain node and a certain column\n on that node. There are two structures used to reference a particular\n node in a model. They are the GtkTreePath and the GtkTreeIter\n [4]\n Most of the interface consists of operations on a GtkTreeIter.\n A path is essentially a potential node. It is a location on a model\n that may or may not actually correspond to a node on a specific model.\n The GtkTreePath struct can be converted into either an array of\n unsigned integers or a string. The string form is a list of numbers\n separated by a colon. Each number refers to the offset at that level.\n Thus, the path “0” refers to the root node and the path\n “2:4” refers to the fifth child of the third node.\n By contrast, a GtkTreeIter is a reference to a specific node on a\n specific model. It is a generic struct with an integer and three\n generic pointers. These are filled in by the model in a model-specific\n way. One can convert a path to an iterator by calling\n gtk_tree_model_get_iter(). These iterators are the primary way of\n accessing a model and are similar to the iterators used by\n GtkTextBuffer. They are generally statically allocated on the stack and\n only used for a short time. The model interface defines a set of\n operations using them for navigating the model.\n It is expected that models fill in the iterator with private data. For\n example, the GtkListStore model, which is internally a simple linked\n list, stores a list node in one of the pointers. The GtkTreeModelSort\n stores an array and an offset in two of the pointers. Additionally,\n there is an integer field. This field is generally filled with a unique\n stamp per model. This stamp is for catching errors resulting from using\n invalid iterators with a model.\n The lifecycle of an iterator can be a little confusing at first.\n Iterators are expected to always be valid for as long as the model is\n unchanged (and doesn't emit a signal). The model is considered to own\n all outstanding iterators and nothing needs to be done to free them from\n the user's point of view. Additionally, some models guarantee that an\n iterator is valid for as long as the node it refers to is valid (most\n notably the GtkTreeStore and GtkListStore). Although generally\n uninteresting, as one always has to allow for the case where iterators\n do not persist beyond a signal, some very important performance\n enhancements were made in the sort model. As a result, the\n GTK_TREE_MODEL_ITERS_PERSIST flag was added to indicate this behavior.\n To help show some common operation of a model, some examples are\n provided. The first example shows three ways of getting the iter at the\n location “3:2:5”. While the first method shown is easier,\n the second is much more common, as you often get paths from callbacks.\n $(DDOC_COMMENT example)\n This second example shows a quick way of iterating through a list and\n getting a string and an integer from each row. The\n populate_model function used below is not shown, as\n it is specific to the GtkListStore. For information on how to write\n such a function, see the GtkListStore documentation.\n $(DDOC_COMMENT example)\n \n",
"line" : 153,
"base" : "Object",
"members" : [
{
"name" : "gtkTreePath",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkTreePath*",
"comment" : " the main Gtk struct \n",
"line" : 156}
,
{
"name" : "getTreePathStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkTreePath*()",
"line" : 159}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 166}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TreePath(GtkTreePath* gtkTreePath)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 174}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TreePath(bool firstRow = false)",
"comment" : "\n Creates a new GtkTreePath. This structure refers to a row.\n Params:\n firstRow = if true this is the string representation of this path is \"0\"\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 190}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TreePath(string path)",
"comment" : "\n\t \n\n Creates a new GtkTreePath initialized to path. path is expected to be a\n colon separated list of numbers. For example, the string \"10:4:0\" would\n create a path of depth 3 pointing to the 11th child of the root node, the 5th\n child of that 11th child, and the 1st child of that 5th child. If an invalid\n path string is passed in, NULL is returned.\n Params:\n path = The string representation of a path.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 226}
,
{
"name" : "toString",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Generates a string representation of the path. This string is a ':'\n separated list of numbers. For example, \"4:10:0:3\" would be an acceptable return value for this string.\n Returns: A newly-allocated string. Must be freed with g_free().\n\t \n",
"line" : 242}
,
{
"name" : "appendIndex",
"kind" : "function",
"protection" : "public",
"type" : "void(int index)",
"comment" : "\n Appends a new index to a path. As a result, the depth of the path is\n increased.\n Params:\n index = The index.\n\t \n",
"line" : 254}
,
{
"name" : "prependIndex",
"kind" : "function",
"protection" : "public",
"type" : "void(int index)",
"comment" : "\n Prepends a new index to a path. As a result, the depth of the path is\n increased.\n Params:\n index = The index.\n\t \n",
"line" : 266}
,
{
"name" : "getDepth",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the current depth of path.\n Returns: The depth of path\n\t \n",
"line" : 276}
,
{
"name" : "getIndices",
"kind" : "function",
"protection" : "public",
"type" : "int[]()",
"comment" : "\n Returns the current indices of path. This is an array of integers, each\n representing a node in a tree. This value should not be freed.\n Returns: The current indices, or NULL.\n\t \n",
"line" : 287}
,
{
"name" : "getIndicesWithDepth",
"kind" : "function",
"protection" : "public",
"type" : "int[]()",
"comment" : "\n Returns the current indices of path.\n This is an array of integers, each representing a node in a tree.\n It also returns the number of elements in the array.\n The array should not be freed.\n Since 2.22\n Returns: The current indices, or NULL. [array length=depth][transfer none]\n\t \n",
"line" : 302}
,
{
"name" : "free",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Frees path.\n\t \n",
"line" : 313}
,
{
"name" : "copy",
"kind" : "function",
"protection" : "public",
"type" : "TreePath()",
"comment" : "\n Creates a new GtkTreePath as a copy of path.\n Returns: A new GtkTreePath.\n\t \n",
"line" : 323}
,
{
"name" : "compare",
"kind" : "function",
"protection" : "public",
"type" : "int(TreePath b)",
"comment" : "\n Compares two paths. If a appears before b in a tree, then -1 is returned.\n If b appears before a, then 1 is returned. If the two nodes are equal,\n then 0 is returned.\n Params:\n a = A GtkTreePath.\n b = A GtkTreePath to compare with.\n Returns: The relative positions of a and b\n\t \n",
"line" : 343}
,
{
"name" : "next",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Moves the path to point to the next node at the current depth.\n\t \n",
"line" : 352}
,
{
"name" : "prev",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Moves the path to point to the previous node at the current depth,\n if it exists.\n Returns: TRUE if path has a previous node, and the move was made.\n\t \n",
"line" : 363}
,
{
"name" : "up",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Moves the path to point to its parent node, if it has a parent.\n Returns: TRUE if path has a parent, and the move was made.\n\t \n",
"line" : 373}
,
{
"name" : "down",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Moves path to point to the first child of the current path.\n\t \n",
"line" : 382}
,
{
"name" : "isAncestor",
"kind" : "function",
"protection" : "public",
"type" : "int(TreePath descendant)",
"comment" : "\n Returns TRUE if descendant is a descendant of path.\n Params:\n descendant = another GtkTreePath\n Returns: TRUE if descendant is contained inside path\n\t \n",
"line" : 394}
,
{
"name" : "isDescendant",
"kind" : "function",
"protection" : "public",
"type" : "int(TreePath ancestor)",
"comment" : "\n Returns TRUE if path is a descendant of ancestor.\n Params:\n ancestor = another GtkTreePath\n Returns: TRUE if ancestor contains path somewhere below it\n\t \n",
"line" : 406}
]
}
]
}
,
{
"name" : "gtk.TreeRowReference",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TreeRowReference.d",
"members" : [
{
"name" : "TreeRowReference",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkTreeModel interface defines a generic tree interface for use by\n the GtkTreeView widget. It is an abstract interface, and is designed\n to be usable with any appropriate data structure. The programmer just\n has to implement this interface on their own data type for it to be\n viewable by a GtkTreeView widget.\n The model is represented as a hierarchical tree of strongly-typed,\n columned data. In other words, the model can be seen as a tree where\n every node has different values depending on which column is being\n queried. The type of data found in a column is determined by using the\n GType system (ie. G_TYPE_INT, GTK_TYPE_BUTTON, G_TYPE_POINTER, etc.).\n The types are homogeneous per column across all nodes. It is important\n to note that this interface only provides a way of examining a model and\n observing changes. The implementation of each individual model decides\n how and if changes are made.\n In order to make life simpler for programmers who do not need to write\n their own specialized model, two generic models are provided — the\n GtkTreeStore and the GtkListStore. To use these, the developer simply\n pushes data into these models as necessary. These models provide the\n data structure as well as all appropriate tree interfaces. As a result,\n implementing drag and drop, sorting, and storing data is trivial. For\n the vast majority of trees and lists, these two models are sufficient.\n Models are accessed on a node\/column level of granularity. One can\n query for the value of a model at a certain node and a certain column\n on that node. There are two structures used to reference a particular\n node in a model. They are the GtkTreePath and the GtkTreeIter\n [4]\n Most of the interface consists of operations on a GtkTreeIter.\n A path is essentially a potential node. It is a location on a model\n that may or may not actually correspond to a node on a specific model.\n The GtkTreePath struct can be converted into either an array of\n unsigned integers or a string. The string form is a list of numbers\n separated by a colon. Each number refers to the offset at that level.\n Thus, the path “0” refers to the root node and the path\n “2:4” refers to the fifth child of the third node.\n By contrast, a GtkTreeIter is a reference to a specific node on a\n specific model. It is a generic struct with an integer and three\n generic pointers. These are filled in by the model in a model-specific\n way. One can convert a path to an iterator by calling\n gtk_tree_model_get_iter(). These iterators are the primary way of\n accessing a model and are similar to the iterators used by\n GtkTextBuffer. They are generally statically allocated on the stack and\n only used for a short time. The model interface defines a set of\n operations using them for navigating the model.\n It is expected that models fill in the iterator with private data. For\n example, the GtkListStore model, which is internally a simple linked\n list, stores a list node in one of the pointers. The GtkTreeModelSort\n stores an array and an offset in two of the pointers. Additionally,\n there is an integer field. This field is generally filled with a unique\n stamp per model. This stamp is for catching errors resulting from using\n invalid iterators with a model.\n The lifecycle of an iterator can be a little confusing at first.\n Iterators are expected to always be valid for as long as the model is\n unchanged (and doesn't emit a signal). The model is considered to own\n all outstanding iterators and nothing needs to be done to free them from\n the user's point of view. Additionally, some models guarantee that an\n iterator is valid for as long as the node it refers to is valid (most\n notably the GtkTreeStore and GtkListStore). Although generally\n uninteresting, as one always has to allow for the case where iterators\n do not persist beyond a signal, some very important performance\n enhancements were made in the sort model. As a result, the\n GTK_TREE_MODEL_ITERS_PERSIST flag was added to indicate this behavior.\n To help show some common operation of a model, some examples are\n provided. The first example shows three ways of getting the iter at the\n location “3:2:5”. While the first method shown is easier,\n the second is much more common, as you often get paths from callbacks.\n $(DDOC_COMMENT example)\n This second example shows a quick way of iterating through a list and\n getting a string and an integer from each row. The\n populate_model function used below is not shown, as\n it is specific to the GtkListStore. For information on how to write\n such a function, see the GtkListStore documentation.\n $(DDOC_COMMENT example)\n \n",
"line" : 162,
"base" : "Object",
"members" : [
{
"name" : "gtkTreeRowReference",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkTreeRowReference*",
"comment" : " the main Gtk struct \n",
"line" : 165}
,
{
"name" : "getTreeRowReferenceStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkTreeRowReference*()",
"line" : 168}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 175}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TreeRowReference(GtkTreeRowReference* gtkTreeRowReference)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 183}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TreeRowReference(TreeModelIF model, TreePath path)",
"comment" : "\n\t \n\n Creates a row reference based on path. This reference will keep pointing\n to the node pointed to by path, so long as it exists. It listens to all\n signals emitted by model, and updates its path appropriately. If path\n isn't a valid path in model, then NULL is returned.\n Params:\n model = A GtkTreeModel\n path = A valid GtkTreePath to monitor\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 206}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TreeRowReference(ObjectG proxy, TreeModelIF model, TreePath path)",
"comment" : "\n You do not need to use this function. Creates a row reference based on\n path. This reference will keep pointing to the node pointed to by path,\n so long as it exists. If path isn't a valid path in model, then NULL is\n returned. However, unlike references created with\n gtk_tree_row_reference_new(), it does not listen to the model for changes.\n The creator of the row reference must do this explicitly using\n gtk_tree_row_reference_inserted(), gtk_tree_row_reference_deleted(),\n gtk_tree_row_reference_reordered().\n These functions must be called exactly once per proxy when the\n corresponding signal on the model is emitted. This single call\n updates all row references for that proxy. Since built-in GTK+\n objects like GtkTreeView already use this mechanism internally,\n using them as the proxy object will produce unpredictable results.\n Further more, passing the same object as model and proxy\n doesn't work for reasons of internal implementation.\n This type of row reference is primarily meant by structures that need to\n carefully monitor exactly when a row reference updates itself, and is not\n generally needed by most applications.\n Params:\n proxy = A proxy GObject\n model = A GtkTreeModel\n path = A valid GtkTreePath to monitor\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 242}
,
{
"name" : "getModel",
"kind" : "function",
"protection" : "public",
"type" : "TreeModelIF()",
"comment" : "\n Returns the model that the row reference is monitoring.\n Since 2.8\n Returns: the model. [transfer none]\n\t \n",
"line" : 258}
,
{
"name" : "getPath",
"kind" : "function",
"protection" : "public",
"type" : "TreePath()",
"comment" : "\n Returns a path that the row reference currently points to, or NULL if the\n path pointed to is no longer valid.\n Returns: A current path, or NULL.\n\t \n",
"line" : 274}
,
{
"name" : "valid",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns TRUE if the reference is non-NULL and refers to a current valid\n path.\n Returns: TRUE if reference points to a valid path.\n\t \n",
"line" : 290}
,
{
"name" : "free",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Free's reference. reference may be NULL.\n\t \n",
"line" : 299}
,
{
"name" : "copy",
"kind" : "function",
"protection" : "public",
"type" : "TreeRowReference()",
"comment" : "\n Copies a GtkTreeRowReference.\n Since 2.2\n Returns: a copy of reference.\n\t \n",
"line" : 310}
,
{
"name" : "inserted",
"kind" : "function",
"protection" : "public",
"type" : "void(ObjectG proxy, TreePath path)",
"comment" : "\n Lets a set of row reference created by gtk_tree_row_reference_new_proxy()\n know that the model emitted the \"row_inserted\" signal.\n Params:\n proxy = A GObject\n path = The row position that was inserted\n\t \n",
"line" : 328}
,
{
"name" : "deleted",
"kind" : "function",
"protection" : "public",
"type" : "void(ObjectG proxy, TreePath path)",
"comment" : "\n Lets a set of row reference created by gtk_tree_row_reference_new_proxy()\n know that the model emitted the \"row_deleted\" signal.\n Params:\n proxy = A GObject\n path = The path position that was deleted\n\t \n",
"line" : 341}
,
{
"name" : "reordered",
"kind" : "function",
"protection" : "public",
"type" : "void(ObjectG proxy, TreePath path, TreeIter iter, int[] newOrder)",
"comment" : "\n Lets a set of row reference created by gtk_tree_row_reference_new_proxy()\n know that the model emitted the \"rows_reordered\" signal.\n Params:\n proxy = A GObject\n path = The parent path of the reordered signal\n iter = The iter pointing to the parent of the reordered\n newOrder = The new order of rows\n\t \n",
"line" : 356}
]
}
]
}
,
{
"name" : "gtk.TreeSelection",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TreeSelection.d",
"members" : [
{
"name" : "TreeSelection",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkTreeSelection object is a helper object to manage the selection\n for a GtkTreeView widget. The GtkTreeSelection object is\n automatically created when a new GtkTreeView widget is created, and\n cannot exist independentally of this widget. The primary reason the\n GtkTreeSelection objects exists is for cleanliness of code and API.\n That is, there is no conceptual reason all these functions could not be\n methods on the GtkTreeView widget instead of a separate function.\n The GtkTreeSelection object is gotten from a GtkTreeView by calling\n gtk_tree_view_get_selection(). It can be manipulated to check the\n selection status of the tree, as well as select and deselect individual\n rows. Selection is done completely view side. As a result, multiple\n views of the same model can have completely different selections.\n Additionally, you cannot change the selection of a row on the model that\n is not currently displayed by the view without expanding its parents\n first.\n One of the important things to remember when monitoring the selection of\n a view is that the \"changed\" signal is mostly a hint. That is, it may\n only emit one signal when a range of rows is selected. Additionally, it\n may on occasion emit a ::changed signal when nothing has happened\n (mostly as a result of programmers calling select_row on an already\n selected row).\n \n",
"line" : 114,
"base" : "ObjectG",
"members" : [
{
"name" : "gtkTreeSelection",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkTreeSelection*",
"comment" : " the main Gtk struct \n",
"line" : 118}
,
{
"name" : "getTreeSelectionStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkTreeSelection*()",
"line" : 121}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 128}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TreeSelection(GtkTreeSelection* gtkTreeSelection)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 136}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 154}
,
{
"name" : "getSelected",
"kind" : "function",
"protection" : "public",
"type" : "TreeIter()",
"comment" : "\n Returns an TreeIter set to the currently selected node if selection\n is set to GTK_SELECTION_SINGLE or GTK_SELECTION_BROWSE.\n This function will not work if you use selection is GTK_SELECTION_MULTIPLE.\n Returns: A TreeIter for the selected node.\n\t \n",
"line" : 166}
,
{
"name" : "getSelectedRows",
"kind" : "function",
"protection" : "public",
"type" : "TreePath[](out TreeModelIF model)",
"comment" : "\n Creates a list of path of all selected rows. Additionally, if you are\n planning on modifying the model after calling this function, you may\n want to convert the returned list into a list of GtkTreeRowReferences.\n To do this, you can use gtk_tree_row_reference_new().\n To free the return value, use:\n g_list_foreach (list, gtk_tree_path_free, NULL);\n g_list_free (list);\n Since 2.2\n Params:\n  model = A pointer to set to the GtkTreeModel, or NULL.\n Returns:\n  A GList containing a GtkTreePath for each selected row.\n\t \n",
"line" : 196}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 216}
,
{
"name" : "onChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TreeSelection)[]",
"line" : 218}
,
{
"name" : "addOnChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TreeSelection) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted whenever the selection has (possibly) changed. Please note that\n this signal is mostly a hint. It may only be emitted once when a range\n of rows are selected, and it may occasionally be emitted when nothing\n has happened.\n See Also\n GtkTreeView, GtkTreeViewColumn, GtkTreeDnd, GtkTreeMode, GtkTreeSortable, GtkTreeModelSort, GtkListStore, GtkTreeStore, GtkCellRenderer, GtkCellEditable, GtkCellRendererPixbuf, GtkCellRendererText, GtkCellRendererToggle\n\t \n",
"line" : 227}
,
{
"name" : "callBackChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTreeSelection* treeselectionStruct, TreeSelection treeSelection)",
"line" : 242}
,
{
"name" : "setMode",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkSelectionMode type)",
"comment" : "\n Sets the selection mode of the selection. If the previous type was\n GTK_SELECTION_MULTIPLE, then the anchor is kept selected, if it was\n previously selected.\n Params:\n type = The selection mode\n\t \n",
"line" : 258}
,
{
"name" : "getMode",
"kind" : "function",
"protection" : "public",
"type" : "GtkSelectionMode()",
"comment" : "\n Gets the selection mode for selection. See\n gtk_tree_selection_set_mode().\n Returns: the current selection mode\n\t \n",
"line" : 269}
,
{
"name" : "setSelectFunction",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) int function(GtkTreeSelection*, GtkTreeModel*, GtkTreePath*, int, void*) func, void* data, extern (C) void function(void* cbData) destroy)",
"comment" : "\n Sets the selection function. If set, this function is called before any node\n is selected or unselected, giving some control over which nodes are selected.\n The select function should return TRUE if the state of the node may be toggled,\n and FALSE if the state of the node should be left unchanged.\n Params:\n func = The selection function.\n data = The selection function's data.\n destroy = The destroy function for user data. May be NULL.\n\t \n",
"line" : 285}
,
{
"name" : "getSelectFunction",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int function(GtkTreeSelection*, GtkTreeModel*, GtkTreePath*, int, void*)()",
"comment" : "\n Returns the current selection function.\n Since 2.14\n Returns: The function.\n\t \n",
"line" : 296}
,
{
"name" : "getUserData",
"kind" : "function",
"protection" : "public",
"type" : "void*()",
"comment" : "\n Returns the user data for the selection function.\n Returns: The user data.\n\t \n",
"line" : 306}
,
{
"name" : "getTreeView",
"kind" : "function",
"protection" : "public",
"type" : "TreeView()",
"comment" : "\n Returns the tree view associated with selection.\n Returns: A GtkTreeView. [transfer none]\n\t \n",
"line" : 316}
,
{
"name" : "getSelected",
"kind" : "function",
"protection" : "public",
"type" : "int(out TreeModelIF model, TreeIter iter)",
"comment" : "\n Sets iter to the currently selected node if selection is set to\n GTK_SELECTION_SINGLE or GTK_SELECTION_BROWSE. iter may be NULL if you\n just want to test if selection has any selected nodes. model is filled\n with the current model as a convenience. This function will not work if you\n use selection is GTK_SELECTION_MULTIPLE.\n Params:\n model = A pointer to set to the GtkTreeModel, or NULL. [out][allow-none][transfer none]\n iter = The GtkTreeIter, or NULL. [out][allow-none]\n Returns: TRUE, if there is a selected node.\n\t \n",
"line" : 338}
,
{
"name" : "selectedForeach",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) void function(GtkTreeModel*, GtkTreePath*, GtkTreeIter*, void*) func, void* data)",
"comment" : "\n Calls a function for each selected node. Note that you cannot modify\n the tree or selection from within this function. As a result,\n gtk_tree_selection_get_selected_rows() might be more useful.\n Params:\n func = The function to call for each selected node. [scope call]\n data = user data to pass to the function.\n\t \n",
"line" : 357}
,
{
"name" : "countSelectedRows",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the number of rows that have been selected in tree.\n Since 2.2\n Returns: The number of rows selected.\n\t \n",
"line" : 368}
,
{
"name" : "selectPath",
"kind" : "function",
"protection" : "public",
"type" : "void(TreePath path)",
"comment" : "\n Select the row at path.\n Params:\n path = The GtkTreePath to be selected.\n\t \n",
"line" : 379}
,
{
"name" : "unselectPath",
"kind" : "function",
"protection" : "public",
"type" : "void(TreePath path)",
"comment" : "\n Unselects the row at path.\n Params:\n path = The GtkTreePath to be unselected.\n\t \n",
"line" : 390}
,
{
"name" : "pathIsSelected",
"kind" : "function",
"protection" : "public",
"type" : "int(TreePath path)",
"comment" : "\n Returns TRUE if the row pointed to by path is currently selected. If path\n does not point to a valid location, FALSE is returned\n Params:\n path = A GtkTreePath to check selection on.\n Returns: TRUE if path is selected.\n\t \n",
"line" : 403}
,
{
"name" : "selectIter",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter)",
"comment" : "\n Selects the specified iterator.\n Params:\n iter = The GtkTreeIter to be selected.\n\t \n",
"line" : 414}
,
{
"name" : "unselectIter",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter)",
"comment" : "\n Unselects the specified iterator.\n Params:\n iter = The GtkTreeIter to be unselected.\n\t \n",
"line" : 425}
,
{
"name" : "iterIsSelected",
"kind" : "function",
"protection" : "public",
"type" : "int(TreeIter iter)",
"comment" : "\n Returns TRUE if the row at iter is currently selected.\n Params:\n iter = A valid GtkTreeIter\n Returns: TRUE, if iter is selected\n\t \n",
"line" : 437}
,
{
"name" : "selectAll",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Selects all the nodes. selection must be set to GTK_SELECTION_MULTIPLE\n mode.\n\t \n",
"line" : 447}
,
{
"name" : "unselectAll",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Unselects all the nodes.\n\t \n",
"line" : 456}
,
{
"name" : "selectRange",
"kind" : "function",
"protection" : "public",
"type" : "void(TreePath startPath, TreePath endPath)",
"comment" : "\n Selects a range of nodes, determined by start_path and end_path inclusive.\n selection must be set to GTK_SELECTION_MULTIPLE mode.\n Params:\n startPath = The initial node of the range.\n endPath = The final node of the range.\n\t \n",
"line" : 469}
,
{
"name" : "unselectRange",
"kind" : "function",
"protection" : "public",
"type" : "void(TreePath startPath, TreePath endPath)",
"comment" : "\n Unselects a range of nodes, determined by start_path and end_path\n inclusive.\n Since 2.2\n Signal Details\n The \"changed\" signal\n void user_function (GtkTreeSelection *treeselection,\n  gpointer user_data) : Run First\n Emitted whenever the selection has (possibly) changed. Please note that\n this signal is mostly a hint. It may only be emitted once when a range\n of rows are selected, and it may occasionally be emitted when nothing\n has happened.\n Params:\n startPath = The initial node of the range.\n endPath = The initial node of the range.\n\t \n",
"line" : 491}
]
}
]
}
,
{
"name" : "gtk.TreeSortableIF",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TreeSortableIF.d",
"members" : [
{
"name" : "TreeSortableIF",
"kind" : "interface",
"protection" : "public",
"comment" : "\n Description\n GtkTreeSortable is an interface to be implemented by tree models which\n support sorting. The GtkTreeView uses the methods provided by this interface\n to sort the model.\n \n",
"line" : 74,
"members" : [
{
"name" : "getTreeSortableTStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkTreeSortable*()",
"line" : 77}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 80}
,
{
"name" : "onSortColumnChangedListeners",
"kind" : "function",
"protection" : "public",
"type" : "void delegate(TreeSortableIF)[]()",
"comment" : "\n\t \n",
"line" : 86}
,
{
"name" : "addOnSortColumnChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TreeSortableIF) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::sort-column-changed signal is emitted when the sort column\n or sort order of sortable is changed. The signal is emitted before\n the contents of sortable are resorted.\n See Also\n GtkTreeModel, GtkTreeView\n\t \n",
"line" : 94}
,
{
"name" : "sortColumnChanged",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Emits a \"sort-column-changed\" signal on sortable.\n\t \n",
"line" : 99}
,
{
"name" : "getSortColumnId",
"kind" : "function",
"protection" : "public",
"type" : "int(out int sortColumnId, out GtkSortType order)",
"comment" : "\n Fills in sort_column_id and order with the current sort column and the\n order. It returns TRUE unless the sort_column_id is\n GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID or\n GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID.\n Params:\n sortColumnId = The sort column id to be filled in\n order = The GtkSortType to be filled in\n Returns: TRUE if the sort column is not one of the special sort column ids.\n\t \n",
"line" : 111}
,
{
"name" : "setSortColumnId",
"kind" : "function",
"protection" : "public",
"type" : "void(int sortColumnId, GtkSortType order)",
"comment" : "\n Sets the current sort column to be sort_column_id. The sortable will\n resort itself to reflect this change, after emitting a\n \"sort-column-changed\" signal. sort_column_id may either be\n Params:\n sortColumnId = the sort column id to set\n order = The sort order of the column\n\t \n",
"line" : 121}
,
{
"name" : "setSortFunc",
"kind" : "function",
"protection" : "public",
"type" : "void(int sortColumnId, extern (C) int function(GtkTreeModel*, GtkTreeIter*, GtkTreeIter*, void*) sortFunc, void* userData, extern (C) void function(void* cbData) destroy)",
"comment" : "\n Sets the comparison function used when sorting to be sort_func. If the\n current sort column id of sortable is the same as sort_column_id, then\n the model will sort using this function.\n Params:\n sortColumnId = the sort column id to set the function for\n sortFunc = The comparison function\n userData = User data to pass to sort_func, or NULL. [allow-none]\n destroy = Destroy notifier of user_data, or NULL. [allow-none]\n\t \n",
"line" : 133}
,
{
"name" : "setDefaultSortFunc",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) int function(GtkTreeModel*, GtkTreeIter*, GtkTreeIter*, void*) sortFunc, void* userData, extern (C) void function(void* cbData) destroy)",
"comment" : "\n Sets the default comparison function used when sorting to be sort_func.\n If the current sort column id of sortable is\n GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, then the model will sort using\n this function.\n If sort_func is NULL, then there will be no default comparison function.\n This means that once the model has been sorted, it can't go back to the\n default state. In this case, when the current sort column id of sortable\n is GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, the model will be unsorted.\n Params:\n sortFunc = The comparison function\n userData = User data to pass to sort_func, or NULL. [allow-none]\n destroy = Destroy notifier of user_data, or NULL. [allow-none]\n\t \n",
"line" : 149}
,
{
"name" : "hasDefaultSortFunc",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns TRUE if the model has a default sort function. This is used\n primarily by GtkTreeViewColumns in order to determine if a model can\n go back to the default state, or not.\n Returns: TRUE, if the model has a default sort function Signal Details The \"sort-column-changed\" signal void user_function (GtkTreeSortable *sortable, gpointer user_data) : Run Last The ::sort-column-changed signal is emitted when the sort column or sort order of sortable is changed. The signal is emitted before the contents of sortable are resorted.\n\t \n",
"line" : 157}
]
}
]
}
,
{
"name" : "gtk.TreeSortableT",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TreeSortableT.d",
"members" : [
{
"name" : "TreeSortableT(TStruct)",
"kind" : "template",
"protection" : "public",
"comment" : "\n Description\n GtkTreeSortable is an interface to be implemented by tree models which\n support sorting. The GtkTreeView uses the methods provided by this interface\n to sort the model.\n \n",
"line" : 74,
"members" : [
{
"name" : "gtkTreeSortable",
"kind" : "variable",
"type" : "GtkTreeSortable*",
"comment" : " the main Gtk struct \n",
"line" : 78}
,
{
"name" : "getTreeSortableTStruct",
"kind" : "function",
"type" : "GtkTreeSortable*()",
"line" : 81}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 89}
,
{
"name" : "_onSortColumnChangedListeners",
"kind" : "variable",
"type" : "void delegate(TreeSortableIF)[]",
"line" : 91}
,
{
"name" : "onSortColumnChangedListeners",
"kind" : "function",
"type" : "void delegate(TreeSortableIF)[]()",
"line" : 92}
,
{
"name" : "addOnSortColumnChanged",
"kind" : "function",
"type" : "void(void delegate(TreeSortableIF) dlg, ConnectFlags connectFlags = cast(ConnectFlags)0)",
"comment" : "\n The ::sort-column-changed signal is emitted when the sort column\n or sort order of sortable is changed. The signal is emitted before\n the contents of sortable are resorted.\n See Also\n GtkTreeModel, GtkTreeView\n\t \n",
"line" : 103}
,
{
"name" : "callBackSortColumnChanged",
"kind" : "function",
"type" : "extern (C) void(GtkTreeSortable* sortableStruct, TreeSortableIF treeSortableIF)",
"line" : 118}
,
{
"name" : "sortColumnChanged",
"kind" : "function",
"type" : "void()",
"comment" : "\n Emits a \"sort-column-changed\" signal on sortable.\n\t \n",
"line" : 130}
,
{
"name" : "getSortColumnId",
"kind" : "function",
"type" : "int(out int sortColumnId, out GtkSortType order)",
"comment" : "\n Fills in sort_column_id and order with the current sort column and the\n order. It returns TRUE unless the sort_column_id is\n GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID or\n GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID.\n Params:\n sortColumnId = The sort column id to be filled in\n order = The GtkSortType to be filled in\n Returns: TRUE if the sort column is not one of the special sort column ids.\n\t \n",
"line" : 146}
,
{
"name" : "setSortColumnId",
"kind" : "function",
"type" : "void(int sortColumnId, GtkSortType order)",
"comment" : "\n Sets the current sort column to be sort_column_id. The sortable will\n resort itself to reflect this change, after emitting a\n \"sort-column-changed\" signal. sort_column_id may either be\n Params:\n sortColumnId = the sort column id to set\n order = The sort order of the column\n\t \n",
"line" : 160}
,
{
"name" : "setSortFunc",
"kind" : "function",
"type" : "void(int sortColumnId, GtkTreeIterCompareFunc sortFunc, void* userData, GDestroyNotify destroy)",
"comment" : "\n Sets the comparison function used when sorting to be sort_func. If the\n current sort column id of sortable is the same as sort_column_id, then\n the model will sort using this function.\n Params:\n sortColumnId = the sort column id to set the function for\n sortFunc = The comparison function\n userData = User data to pass to sort_func, or NULL. [allow-none]\n destroy = Destroy notifier of user_data, or NULL. [allow-none]\n\t \n",
"line" : 176}
,
{
"name" : "setDefaultSortFunc",
"kind" : "function",
"type" : "void(GtkTreeIterCompareFunc sortFunc, void* userData, GDestroyNotify destroy)",
"comment" : "\n Sets the default comparison function used when sorting to be sort_func.\n If the current sort column id of sortable is\n GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, then the model will sort using\n this function.\n If sort_func is NULL, then there will be no default comparison function.\n This means that once the model has been sorted, it can't go back to the\n default state. In this case, when the current sort column id of sortable\n is GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, the model will be unsorted.\n Params:\n sortFunc = The comparison function\n userData = User data to pass to sort_func, or NULL. [allow-none]\n destroy = Destroy notifier of user_data, or NULL. [allow-none]\n\t \n",
"line" : 196}
,
{
"name" : "hasDefaultSortFunc",
"kind" : "function",
"type" : "int()",
"comment" : "\n Returns TRUE if the model has a default sort function. This is used\n primarily by GtkTreeViewColumns in order to determine if a model can\n go back to the default state, or not.\n Returns: TRUE, if the model has a default sort function Signal Details The \"sort-column-changed\" signal void user_function (GtkTreeSortable *sortable, gpointer user_data) : Run Last The ::sort-column-changed signal is emitted when the sort column or sort order of sortable is changed. The signal is emitted before the contents of sortable are resorted.\n\t \n",
"line" : 208}
]
}
]
}
,
{
"name" : "gtk.TreeStore",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TreeStore.d",
"members" : [
{
"name" : "TreeStore",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkTreeStore object is a list model for use with a GtkTreeView\n widget. It implements the GtkTreeModel interface, and consequentialy,\n can use all of the methods available there. It also implements the\n GtkTreeSortable interface so it can be sorted by the view. Finally,\n it also implements the tree drag and\n drop interfaces.\n GtkTreeStore as GtkBuildable\n The GtkTreeStore implementation of the GtkBuildable interface allows\n to specify the model columns with a <columns> element that may\n contain multiple <column> elements, each specifying one model\n column. The \"type\" attribute specifies the data type for the column.\n $(DDOC_COMMENT example)\n \n",
"line" : 116,
"base" : "ObjectG",
"interfaces" : [
"TreeModelIF",
"TreeDragSourceIF",
"TreeDragDestIF",
"TreeSortableIF"],
"members" : [
{
"name" : "gtkTreeStore",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkTreeStore*",
"comment" : " the main Gtk struct \n",
"line" : 120}
,
{
"name" : "getTreeStoreStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkTreeStore*()",
"line" : 123}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 130}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TreeStore(GtkTreeStore* gtkTreeStore)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 138}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 156}
,
{
"name" : "createIter",
"kind" : "function",
"protection" : "public",
"type" : "TreeIter(TreeIter parent = null)",
"comment" : "\n Creates a top level iteractor.\n I don't think lists have but the top level iteractor\n\t \n",
"line" : 178}
,
{
"name" : "setValue",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, int column, string value)",
"comment" : "\n Sets one value into one cells.\n \\todo confirm we need to destroy the Value instance\n Params:\n  iter = the tree iteractor, effectivly the row\n  column = to column number to set\n  value = the value\n\t \n",
"line" : 193}
,
{
"name" : "setValue",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, int column, int value)",
"comment" : " \n",
"line" : 199}
,
{
"name" : "setValue",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, int column, Pixbuf pixbuf)",
"comment" : "\n \\todo confirm we need to destroy the Value instance\n\t \n",
"line" : 209}
,
{
"name" : "set",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, int[] columns, char*[] values)",
"comment" : "\n sets the values for one row\n Params:\n  iter = the row iteractor\n  columns = an arrays with the columns to set\n  values = an arrays with the values\n\t \n",
"line" : 223}
,
{
"name" : "set",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, int[] columns, string[] values)",
"comment" : " \n",
"line" : 238}
,
{
"name" : "set",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, TreeNode treeNode)",
"comment" : "\n Sets an iteractor values from a tree node.\n This is the way to add a new row to the tree,\n the iteractor is either a top level iteractor created from createIter()\n or a nested iteractor created from append()\n Params:\n  iter = the iteractor to set\n  treeNode = the tree node\n See_Also: createIter(), append()\n\t \n",
"line" : 262}
,
{
"name" : "prepend",
"kind" : "function",
"protection" : "public",
"type" : "TreeIter(TreeIter parent)",
"comment" : "\n Creates and prepends a new row to tree_store. If parent is non-NULL, then it will prepend\n the new row before the first child of parent, otherwise it will prepend a row\n to the top level. iter will be changed to point to this new row. The row\n will be empty after this function is called. To fill in values, you need to\n call gtk_tree_store_set() or gtk_tree_store_set_value().\n Params:\n  parent = A valid GtkTreeIter, or NULL\n\t \n",
"line" : 293}
,
{
"name" : "append",
"kind" : "function",
"protection" : "public",
"type" : "TreeIter(TreeIter parent)",
"comment" : "\n Creates and appends a new row to tree_store. If parent is non-NULL, then it will append the\n new row after the last child of parent, otherwise it will append a row to\n the top level. iter will be changed to point to this new row. The row will\n be empty after this function is called. To fill in values, you need to call\n gtk_tree_store_set() or gtk_tree_store_set_value().\n Params:\n  parent = A valid GtkTreeIter, or NULL\n\t \n",
"line" : 310}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TreeStore(GType[] types)",
"comment" : "\n\t \n\n Non vararg creation function. Used primarily by language bindings.\n Params:\n types = an array of GType types for the columns, from first to last. [array length=n_columns]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 329}
,
{
"name" : "setColumnTypes",
"kind" : "function",
"protection" : "public",
"type" : "void(GType[] types)",
"comment" : "\n This function is meant primarily for GObjects that inherit from\n GtkTreeStore, and should only be used when constructing a new\n GtkTreeStore. It will not function after a row has been added,\n or a method on the GtkTreeModel interface is called.\n Params:\n types = An array of GType types, one for each column. [array length=n_columns]\n\t \n",
"line" : 348}
,
{
"name" : "setValue",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, int column, Value value)",
"comment" : "\n Sets the data in the cell specified by iter and column.\n The type of value must be convertible to the type of the\n column.\n Params:\n iter = A valid GtkTreeIter for the row being modified\n column = column number to modify\n value = new value for the cell\n\t \n",
"line" : 363}
,
{
"name" : "setValist",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, void* varArgs)",
"comment" : "\n See gtk_tree_store_set(); this version takes a va_list for\n use by language bindings.\n Params:\n iter = A valid GtkTreeIter for the row being modified\n varArgs = va_list of column\/value pairs\n\t \n",
"line" : 376}
,
{
"name" : "setValuesv",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, int[] columns, GValue[] values)",
"comment" : "\n A variant of gtk_tree_store_set_valist() which takes\n the columns and values as two arrays, instead of varargs. This\n function is mainly intended for language bindings or in case\n the number of columns to change is not known until run-time.\n Since 2.12\n Params:\n iter = A valid GtkTreeIter for the row being modified\n columns = an array of column numbers. [array length=n_values]\n values = an array of GValues. [array length=n_values]\n\t \n",
"line" : 393}
,
{
"name" : "remove",
"kind" : "function",
"protection" : "public",
"type" : "int(TreeIter iter)",
"comment" : "\n Removes iter from tree_store. After being removed, iter is set to the\n next valid row at that level, or invalidated if it previously pointed to the\n last one.\n Params:\n iter = A valid GtkTreeIter\n Returns: TRUE if iter is still valid, FALSE if not.\n\t \n",
"line" : 407}
,
{
"name" : "insert",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, TreeIter parent, int position)",
"comment" : "\n Creates a new row at position. If parent is non-NULL, then the row will be\n made a child of parent. Otherwise, the row will be created at the toplevel.\n If position is larger than the number of rows at that level, then the new\n row will be inserted to the end of the list. iter will be changed to point\n to this new row. The row will be empty after this function is called. To\n fill in values, you need to call gtk_tree_store_set() or\n gtk_tree_store_set_value().\n Params:\n iter = An unset GtkTreeIter to set to the new row. [out]\n parent = A valid GtkTreeIter, or NULL. [allow-none]\n position = position to insert the new row\n\t \n",
"line" : 426}
,
{
"name" : "insertBefore",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, TreeIter parent, TreeIter sibling)",
"comment" : "\n Inserts a new row before sibling. If sibling is NULL, then the row will\n be appended to parent 's children. If parent and sibling are NULL, then\n the row will be appended to the toplevel. If both sibling and parent are\n set, then parent must be the parent of sibling. When sibling is set,\n parent is optional.\n iter will be changed to point to this new row. The row will be empty after\n this function is called. To fill in values, you need to call\n gtk_tree_store_set() or gtk_tree_store_set_value().\n Params:\n iter = An unset GtkTreeIter to set to the new row. [out]\n parent = A valid GtkTreeIter, or NULL. [allow-none]\n sibling = A valid GtkTreeIter, or NULL. [allow-none]\n\t \n",
"line" : 446}
,
{
"name" : "insertAfter",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, TreeIter parent, TreeIter sibling)",
"comment" : "\n Inserts a new row after sibling. If sibling is NULL, then the row will be\n prepended to parent 's children. If parent and sibling are NULL, then\n the row will be prepended to the toplevel. If both sibling and parent are\n set, then parent must be the parent of sibling. When sibling is set,\n parent is optional.\n iter will be changed to point to this new row. The row will be empty after\n this function is called. To fill in values, you need to call\n gtk_tree_store_set() or gtk_tree_store_set_value().\n Params:\n iter = An unset GtkTreeIter to set to the new row. [out]\n parent = A valid GtkTreeIter, or NULL. [allow-none]\n sibling = A valid GtkTreeIter, or NULL. [allow-none]\n\t \n",
"line" : 466}
,
{
"name" : "insertWithValuesv",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, TreeIter parent, int position, int[] columns, GValue[] values)",
"comment" : "\n A variant of gtk_tree_store_insert_with_values() which takes\n the columns and values as two arrays, instead of varargs. This\n function is mainly intended for language bindings.\n Since 2.10\n Params:\n iter = An unset GtkTreeIter to set the new row, or NULL. [out][allow-none]\n parent = A valid GtkTreeIter, or NULL. [allow-none]\n position = position to insert the new row\n columns = an array of column numbers. [array length=n_values]\n values = an array of GValues. [array length=n_values]\n\t \n",
"line" : 484}
,
{
"name" : "prepend",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, TreeIter parent)",
"comment" : "\n Prepends a new row to tree_store. If parent is non-NULL, then it will prepend\n the new row before the first child of parent, otherwise it will prepend a row\n to the top level. iter will be changed to point to this new row. The row\n will be empty after this function is called. To fill in values, you need to\n call gtk_tree_store_set() or gtk_tree_store_set_value().\n Params:\n iter = An unset GtkTreeIter to set to the prepended row. [out]\n parent = A valid GtkTreeIter, or NULL. [allow-none]\n\t \n",
"line" : 500}
,
{
"name" : "append",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, TreeIter parent)",
"comment" : "\n Appends a new row to tree_store. If parent is non-NULL, then it will append the\n new row after the last child of parent, otherwise it will append a row to\n the top level. iter will be changed to point to this new row. The row will\n be empty after this function is called. To fill in values, you need to call\n gtk_tree_store_set() or gtk_tree_store_set_value().\n Params:\n iter = An unset GtkTreeIter to set to the appended row. [out]\n parent = A valid GtkTreeIter, or NULL. [allow-none]\n\t \n",
"line" : 516}
,
{
"name" : "isAncestor",
"kind" : "function",
"protection" : "public",
"type" : "int(TreeIter iter, TreeIter descendant)",
"comment" : "\n Returns TRUE if iter is an ancestor of descendant. That is, iter is the\n parent (or grandparent or great-grandparent) of descendant.\n Params:\n iter = A valid GtkTreeIter\n descendant = A valid GtkTreeIter\n Returns: TRUE, if iter is an ancestor of descendant\n\t \n",
"line" : 530}
,
{
"name" : "iterDepth",
"kind" : "function",
"protection" : "public",
"type" : "int(TreeIter iter)",
"comment" : "\n Returns the depth of iter. This will be 0 for anything on the root level, 1\n for anything down a level, etc.\n Params:\n iter = A valid GtkTreeIter\n Returns: The depth of iter\n\t \n",
"line" : 543}
,
{
"name" : "clear",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Removes all rows from tree_store\n\t \n",
"line" : 552}
,
{
"name" : "iterIsValid",
"kind" : "function",
"protection" : "public",
"type" : "int(TreeIter iter)",
"comment" : "\n WARNING: This function is slow. Only use it for debugging and\/or testing\n purposes.\n Checks if the given iter is a valid iter for this GtkTreeStore.\n Since 2.2\n Params:\n iter = A GtkTreeIter.\n Returns: TRUE if the iter is valid, FALSE if the iter is invalid.\n\t \n",
"line" : 567}
,
{
"name" : "reorder",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter parent, int[] newOrder)",
"comment" : "\n Reorders the children of parent in tree_store to follow the order\n indicated by new_order. Note that this function only works with\n unsorted stores.\n Since 2.2\n Params:\n parent = A GtkTreeIter.\n newOrder = an array of integers mapping the new position of each child\n to its old position before the re-ordering,\n i.e. new_order[newpos] = oldpos. [array]\n\t \n",
"line" : 584}
,
{
"name" : "swap",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter a, TreeIter b)",
"comment" : "\n Swaps a and b in the same level of tree_store. Note that this function\n only works with unsorted stores.\n Since 2.2\n Params:\n a = A GtkTreeIter.\n b = Another GtkTreeIter.\n\t \n",
"line" : 598}
,
{
"name" : "moveBefore",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, TreeIter position)",
"comment" : "\n Moves iter in tree_store to the position before position. iter and\n position should be in the same level. Note that this function only\n works with unsorted stores. If position is NULL, iter will be\n moved to the end of the level.\n Since 2.2\n Params:\n iter = A GtkTreeIter.\n position = A GtkTreeIter or NULL. [allow-none]\n\t \n",
"line" : 614}
,
{
"name" : "moveAfter",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeIter iter, TreeIter position)",
"comment" : "\n Moves iter in tree_store to the position after position. iter and\n position should be in the same level. Note that this function only\n works with unsorted stores. If position is NULL, iter will be moved\n to the start of the level.\n Since 2.2\n Params:\n iter = A GtkTreeIter.\n position = A GtkTreeIter. [allow-none]\n\t \n",
"line" : 630}
]
}
]
}
,
{
"name" : "gtk.TreeViewColumn",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TreeViewColumn.d",
"members" : [
{
"name" : "TreeViewColumn",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkTreeViewColumn object represents a visible column in a GtkTreeView widget.\n It allows to set properties of the column header, and functions as a holding pen for\n the cell renderers which determine how the data in the column is displayed.\n Please refer to the tree widget conceptual overview\n for an overview of all the objects and data types related to the tree widget and how\n they work together.\n \n",
"line" : 110,
"base" : "ObjectGtk",
"interfaces" : [
"CellLayoutIF"],
"members" : [
{
"name" : "gtkTreeViewColumn",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkTreeViewColumn*",
"comment" : " the main Gtk struct \n",
"line" : 114}
,
{
"name" : "getTreeViewColumnStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkTreeViewColumn*()",
"line" : 117}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 124}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TreeViewColumn(GtkTreeViewColumn* gtkTreeViewColumn)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 132}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 150}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TreeViewColumn(string header, CellRenderer renderer, string type, int column)",
"comment" : "\n Creates a new Tree view column\n Params:\n  header = th column header text\n  renderer = the rederer for the column cells\n  type = the type of data to be displayed (shouldn't this be on the renderer?)\n  column = the column number\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 168}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 187}
,
{
"name" : "onClickedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TreeViewColumn)[]",
"line" : 189}
,
{
"name" : "addOnClicked",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TreeViewColumn) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n See Also\n GtkTreeView, GtkTreeSelection, GtkTreeDnd, GtkTreeMode, GtkTreeSortable, GtkTreeModelSort, GtkListStore, GtkTreeStore, GtkCellRenderer, GtkCellEditable, GtkCellRendererPixbuf, GtkCellRendererText, GtkCellRendererToggle\n\t \n",
"line" : 194}
,
{
"name" : "callBackClicked",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTreeViewColumn* treeviewcolumnStruct, TreeViewColumn treeViewColumn)",
"line" : 209}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TreeViewColumn()",
"comment" : "\n Creates a new GtkTreeViewColumn.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 222}
,
{
"name" : "getCellRenderers",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Warning\n gtk_tree_view_column_get_cell_renderers has been deprecated since version 2.18 and should not be used in newly-written code. use gtk_cell_layout_get_cells() instead.\n Returns a newly-allocated GList of all the cell renderers in the column,\n in no particular order. The list must be freed with g_list_free().\n Returns: A list of GtkCellRenderers\n\t \n",
"line" : 240}
,
{
"name" : "setCellDataFunc",
"kind" : "function",
"protection" : "public",
"type" : "void(CellRenderer cellRenderer, extern (C) void function(GtkTreeViewColumn*, GtkCellRenderer*, GtkTreeModel*, GtkTreeIter*, void*) func, void* funcData, extern (C) void function(void* cbData) destroy)",
"comment" : "\n Sets the GtkTreeViewColumnFunc to use for the column. This\n function is used instead of the standard attributes mapping for\n setting the column value, and should set the value of tree_column's\n cell renderer as appropriate. func may be NULL to remove an\n older one.\n Params:\n cellRenderer = A GtkCellRenderer\n func = The GtkTreeViewColumnFunc to use.\n funcData = The user data for func.\n destroy = The destroy notification for func_data\n\t \n",
"line" : 263}
,
{
"name" : "setSpacing",
"kind" : "function",
"protection" : "public",
"type" : "void(int spacing)",
"comment" : "\n Sets the spacing field of tree_column, which is the number of pixels to\n place between cell renderers packed into it.\n Params:\n spacing = distance between cell renderers in pixels.\n\t \n",
"line" : 275}
,
{
"name" : "getSpacing",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the spacing of tree_column.\n Returns: the spacing of tree_column.\n\t \n",
"line" : 285}
,
{
"name" : "setVisible",
"kind" : "function",
"protection" : "public",
"type" : "void(int visible)",
"comment" : "\n Sets the visibility of tree_column.\n Params:\n visible = TRUE if the tree_column is visible.\n\t \n",
"line" : 296}
,
{
"name" : "getVisible",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns TRUE if tree_column is visible.\n Returns: whether the column is visible or not. If it is visible, then the tree will show the column.\n\t \n",
"line" : 306}
,
{
"name" : "setResizable",
"kind" : "function",
"protection" : "public",
"type" : "void(int resizable)",
"comment" : "\n If resizable is TRUE, then the user can explicitly resize the column by\n grabbing the outer edge of the column button. If resizable is TRUE and\n sizing mode of the column is GTK_TREE_VIEW_COLUMN_AUTOSIZE, then the sizing\n mode is changed to GTK_TREE_VIEW_COLUMN_GROW_ONLY.\n Params:\n resizable = TRUE, if the column can be resized\n\t \n",
"line" : 320}
,
{
"name" : "getResizable",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns TRUE if the tree_column can be resized by the end user.\n Returns: TRUE, if the tree_column can be resized.\n\t \n",
"line" : 330}
,
{
"name" : "setSizing",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkTreeViewColumnSizing type)",
"comment" : "\n Sets the growth behavior of tree_column to type.\n Params:\n type = The GtkTreeViewColumnSizing.\n\t \n",
"line" : 341}
,
{
"name" : "getSizing",
"kind" : "function",
"protection" : "public",
"type" : "GtkTreeViewColumnSizing()",
"comment" : "\n Returns the current type of tree_column.\n Returns: The type of tree_column.\n\t \n",
"line" : 351}
,
{
"name" : "getWidth",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the current size of tree_column in pixels.\n Returns: The current width of tree_column.\n\t \n",
"line" : 361}
,
{
"name" : "getFixedWidth",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the fixed width of the column. This value is only meaning may not be\n the actual width of the column on the screen, just what is requested.\n Returns: the fixed width of the column\n\t \n",
"line" : 372}
,
{
"name" : "setFixedWidth",
"kind" : "function",
"protection" : "public",
"type" : "void(int fixedWidth)",
"comment" : "\n Sets the size of the column in pixels. This is meaningful only if the sizing\n type is GTK_TREE_VIEW_COLUMN_FIXED. The size of the column is clamped to\n the min\/max width for the column. Please note that the min\/max width of the\n column doesn't actually affect the \"fixed_width\" property of the widget, just\n the actual size when displayed.\n Params:\n fixedWidth = The size to set tree_column to. Must be greater than 0.\n\t \n",
"line" : 387}
,
{
"name" : "setMinWidth",
"kind" : "function",
"protection" : "public",
"type" : "void(int minWidth)",
"comment" : "\n Sets the minimum width of the tree_column. If min_width is -1, then the\n minimum width is unset.\n Params:\n minWidth = The minimum width of the column in pixels, or -1.\n\t \n",
"line" : 399}
,
{
"name" : "getMinWidth",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the minimum width in pixels of the tree_column, or -1 if no minimum\n width is set.\n Returns: The minimum width of the tree_column.\n\t \n",
"line" : 410}
,
{
"name" : "setMaxWidth",
"kind" : "function",
"protection" : "public",
"type" : "void(int maxWidth)",
"comment" : "\n Sets the maximum width of the tree_column. If max_width is -1, then the\n maximum width is unset. Note, the column can actually be wider than max\n width if it's the last column in a view. In this case, the column expands to\n fill any extra space.\n Params:\n maxWidth = The maximum width of the column in pixels, or -1.\n\t \n",
"line" : 424}
,
{
"name" : "getMaxWidth",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the maximum width in pixels of the tree_column, or -1 if no maximum\n width is set.\n Returns: The maximum width of the tree_column.\n\t \n",
"line" : 435}
,
{
"name" : "clicked",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Emits the \"clicked\" signal on the column. This function will only work if\n tree_column is clickable.\n\t \n",
"line" : 445}
,
{
"name" : "setTitle",
"kind" : "function",
"protection" : "public",
"type" : "void(string title)",
"comment" : "\n Sets the title of the tree_column. If a custom widget has been set, then\n this value is ignored.\n Params:\n title = The title of the tree_column.\n\t \n",
"line" : 457}
,
{
"name" : "getTitle",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns the title of the widget.\n Returns: the title of the column. This string should not be modified or freed.\n\t \n",
"line" : 467}
,
{
"name" : "setExpand",
"kind" : "function",
"protection" : "public",
"type" : "void(int expand)",
"comment" : "\n Sets the column to take available extra space. This space is shared equally\n amongst all columns that have the expand set to TRUE. If no column has this\n option set, then the last column gets all extra space. By default, every\n column is created with this FALSE.\n Since 2.4\n Params:\n expand = TRUE if the column should take available extra space, FALSE if not\n\t \n",
"line" : 482}
,
{
"name" : "getExpand",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Return TRUE if the column expands to take any available space.\n Since 2.4\n Returns: TRUE, if the column expands\n\t \n",
"line" : 493}
,
{
"name" : "setClickable",
"kind" : "function",
"protection" : "public",
"type" : "void(int clickable)",
"comment" : "\n Sets the header to be active if active is TRUE. When the header is active,\n then it can take keyboard focus, and can be clicked.\n Params:\n clickable = TRUE if the header is active.\n\t \n",
"line" : 505}
,
{
"name" : "getClickable",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns TRUE if the user can click on the header for the column.\n Returns: TRUE if user can click the column header.\n\t \n",
"line" : 515}
,
{
"name" : "setWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget widget)",
"comment" : "\n Sets the widget in the header to be widget. If widget is NULL, then the\n header button is set with a GtkLabel set to the title of tree_column.\n Params:\n widget = A child GtkWidget, or NULL. [allow-none]\n\t \n",
"line" : 527}
,
{
"name" : "getWidget",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Returns the GtkWidget in the button on the column header.\n If a custom widget has not been set then NULL is returned.\n Returns: The GtkWidget in the column header, or NULL. [transfer none]\n\t \n",
"line" : 538}
,
{
"name" : "setAlignment",
"kind" : "function",
"protection" : "public",
"type" : "void(float xalign)",
"comment" : "\n Sets the alignment of the title or custom widget inside the column header.\n The alignment determines its location inside the button -- 0.0 for left, 0.5\n for center, 1.0 for right.\n Params:\n xalign = The alignment, which is between [0.0 and 1.0] inclusive.\n\t \n",
"line" : 556}
,
{
"name" : "getAlignment",
"kind" : "function",
"protection" : "public",
"type" : "float()",
"comment" : "\n Returns the current x alignment of tree_column. This value can range\n between 0.0 and 1.0.\n Returns: The current alignent of tree_column.\n\t \n",
"line" : 567}
,
{
"name" : "setReorderable",
"kind" : "function",
"protection" : "public",
"type" : "void(int reorderable)",
"comment" : "\n If reorderable is TRUE, then the column can be reordered by the end user\n dragging the header.\n Params:\n reorderable = TRUE, if the column can be reordered.\n\t \n",
"line" : 579}
,
{
"name" : "getReorderable",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns TRUE if the tree_column can be reordered by the user.\n Returns: TRUE if the tree_column can be reordered by the user.\n\t \n",
"line" : 589}
,
{
"name" : "setSortColumnId",
"kind" : "function",
"protection" : "public",
"type" : "void(int sortColumnId)",
"comment" : "\n Sets the logical sort_column_id that this column sorts on when this column\n is selected for sorting. Doing so makes the column header clickable.\n Params:\n sortColumnId = The sort_column_id of the model to sort on.\n\t \n",
"line" : 601}
,
{
"name" : "getSortColumnId",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the logical sort_column_id that the model sorts on when this\n column is selected for sorting.\n See gtk_tree_view_column_set_sort_column_id().\n Returns: the current sort_column_id for this column, or -1 if this column can't be used for sorting.\n\t \n",
"line" : 613}
,
{
"name" : "setSortIndicator",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n Call this function with a setting of TRUE to display an arrow in\n the header button indicating the column is sorted. Call\n gtk_tree_view_column_set_sort_order() to change the direction of\n the arrow.\n Params:\n setting = TRUE to display an indicator that the column is sorted\n\t \n",
"line" : 627}
,
{
"name" : "getSortIndicator",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value set by gtk_tree_view_column_set_sort_indicator().\n Returns: whether the sort indicator arrow is displayed\n\t \n",
"line" : 637}
,
{
"name" : "setSortOrder",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkSortType order)",
"comment" : "\n Changes the appearance of the sort indicator.\n This does not actually sort the model. Use\n gtk_tree_view_column_set_sort_column_id() if you want automatic sorting\n support. This function is primarily for custom sorting behavior, and should\n be used in conjunction with gtk_tree_sortable_set_sort_column() to do\n that. For custom models, the mechanism will vary.\n The sort indicator changes direction to indicate normal sort or reverse sort.\n Note that you must have the sort indicator enabled to see anything when\n calling this function; see gtk_tree_view_column_set_sort_indicator().\n Params:\n order = sort order that the sort indicator should indicate\n\t \n",
"line" : 656}
,
{
"name" : "getSortOrder",
"kind" : "function",
"protection" : "public",
"type" : "GtkSortType()",
"comment" : "\n Gets the value set by gtk_tree_view_column_set_sort_order().\n Returns: the sort order the sort indicator is indicating\n\t \n",
"line" : 666}
,
{
"name" : "cellSetCellData",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeModelIF treeModel, TreeIter iter, int isExpander, int isExpanded)",
"comment" : "\n Sets the cell renderer based on the tree_model and iter. That is, for\n every attribute mapping in tree_column, it will get a value from the set\n column on the iter, and use that value to set the attribute on the cell\n renderer. This is used primarily by the GtkTreeView.\n Params:\n treeModel = The GtkTreeModel to to get the cell renderers attributes from.\n iter = The GtkTreeIter to to get the cell renderer's attributes from.\n isExpander = TRUE, if the row has children\n isExpanded = TRUE, if the row has visible children\n\t \n",
"line" : 683}
,
{
"name" : "cellGetSize",
"kind" : "function",
"protection" : "public",
"type" : "void(Rectangle cellArea, out int xOffset, out int yOffset, out int width, out int height)",
"comment" : "\n Obtains the width and height needed to render the column. This is used\n primarily by the GtkTreeView.\n Params:\n cellArea = The area a cell in the column will be allocated, or NULL. [allow-none]\n xOffset = location to return x offset of a cell relative to cell_area, or NULL. [out][allow-none]\n yOffset = location to return y offset of a cell relative to cell_area, or NULL. [out][allow-none]\n width = location to return width needed to render a cell, or NULL. [out][allow-none]\n height = location to return height needed to render a cell, or NULL. [out][allow-none]\n\t \n",
"line" : 699}
,
{
"name" : "cellGetPosition",
"kind" : "function",
"protection" : "public",
"type" : "int(CellRenderer cellRenderer, out int startPos, out int width)",
"comment" : "\n Obtains the horizontal position and size of a cell in a column. If the\n cell is not found in the column, start_pos and width are not changed and\n FALSE is returned.\n Params:\n cellRenderer = a GtkCellRenderer\n startPos = return location for the horizontal position of cell within\n tree_column, may be NULL\n width = return location for the width of cell, may be NULL\n Returns: TRUE if cell belongs to tree_column.\n\t \n",
"line" : 716}
,
{
"name" : "cellIsVisible",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns TRUE if any of the cells packed into the tree_column are visible.\n For this to be meaningful, you must first initialize the cells with\n gtk_tree_view_column_cell_set_cell_data()\n Returns: TRUE, if any of the cells packed into the tree_column are currently visible\n\t \n",
"line" : 728}
,
{
"name" : "focusCell",
"kind" : "function",
"protection" : "public",
"type" : "void(CellRenderer cell)",
"comment" : "\n Sets the current keyboard focus to be at cell, if the column contains\n 2 or more editable and activatable cells.\n Since 2.2\n Params:\n cell = A GtkCellRenderer\n\t \n",
"line" : 741}
,
{
"name" : "queueResize",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Flags the column, and the cell renderers added to this column, to have\n their sizes renegotiated.\n Since 2.8\n\t \n",
"line" : 752}
,
{
"name" : "getTreeView",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Returns the GtkTreeView wherein tree_column has been inserted.\n If column is currently not inserted in any tree view, NULL is\n returned.\n Since 2.12\n Returns: The tree view wherein column has been inserted if any, NULL otherwise. [transfer none]\n\t \n",
"line" : 765}
]
}
]
}
,
{
"name" : "gtk.TreeView",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/TreeView.d",
"members" : [
{
"name" : "TreeView",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n Widget that displays any object that implements the GtkTreeModel interface.\n Please refer to the tree widget conceptual\n overview for an overview of all the objects and data types related\n to the tree widget and how they work together.\n Several different coordinate systems are exposed in the GtkTreeView API.\n These are:\n Widget coordinates -- coordinates relative to the widget\n  (usually widget->window.\n Bin window coordinates -- coordinates relative to the window\n  that GtkTreeView renders to.\n Tree coordinates -- coordinates relative to the entire scrollable\n  area of GtkTreeView. These coordinates start at (0, 0) for row 0 of the\n  tree.\n Several functions are available for converting between the different\n coordinate systems. The most common translations are between widget and bin\n window coordinates and between bin window and tree coordinates. For the\n former you can use gtk_tree_view_convert_widget_to_bin_window_coords()\n (and vice versa), for the latter gtk_tree_view_convert_bin_window_to_tree_coords()\n (and vice versa).\n GtkTreeView as GtkBuildable\n The GtkTreeView implementation of the GtkBuildable interface accepts\n GtkTreeViewColumn objects as <child> elements and exposes the\n internal GtkTreeSelection in UI definitions.\n $(DDOC_COMMENT example)\n \n",
"line" : 138,
"base" : "Container",
"members" : [
{
"name" : "gtkTreeView",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkTreeView*",
"comment" : " the main Gtk struct \n",
"line" : 142}
,
{
"name" : "getTreeViewStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkTreeView*()",
"line" : 145}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 152}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TreeView(GtkTreeView* gtkTreeView)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 160}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 178}
,
{
"name" : "expandRow",
"kind" : "function",
"protection" : "public",
"type" : "int(TreeIter iter, TreeModelIF model, int openAll)",
"comment" : "\n Expands the row of the iter.\n Params:\n  iter =\n  openAll =\n  Returns =\n\t \n",
"line" : 191}
,
{
"name" : "getSelectedIter",
"kind" : "function",
"protection" : "public",
"type" : "TreeIter()",
"comment" : "\n gets the first selected iter or null if no rows are selected\n\t \n",
"line" : 199}
,
{
"name" : "getSelectedIters",
"kind" : "function",
"protection" : "public",
"type" : "TreeIter[]()",
"comment" : " \n",
"line" : 214}
,
{
"name" : "insertEditableColumn",
"kind" : "function",
"protection" : "public",
"type" : "int(int position, string title, CellRenderer renderer, bool editable)",
"comment" : "\n Inserts a column and sets it's attributes\n Params:\n  position =\n  title =\n  renderer =\n  editable =\n Returns: number of columns including the new one\n\t \n",
"line" : 247}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 269}
,
{
"name" : "onColumnsChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TreeView)[]",
"line" : 271}
,
{
"name" : "addOnColumnsChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TreeView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The number of columns of the treeview has changed.\n\t \n",
"line" : 275}
,
{
"name" : "callBackColumnsChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTreeView* treeViewStruct, TreeView treeView)",
"line" : 290}
,
{
"name" : "onCursorChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TreeView)[]",
"line" : 298}
,
{
"name" : "addOnCursorChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TreeView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The position of the cursor (focused cell) has changed.\n\t \n",
"line" : 302}
,
{
"name" : "callBackCursorChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTreeView* treeViewStruct, TreeView treeView)",
"line" : 317}
,
{
"name" : "onExpandCollapseCursorRowListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(int, int, int, TreeView)[]",
"line" : 325}
,
{
"name" : "addOnExpandCollapseCursorRow",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(int, int, int, TreeView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 328}
,
{
"name" : "callBackExpandCollapseCursorRow",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkTreeView* treeviewStruct, int arg1, int arg2, int arg3, TreeView treeView)",
"line" : 343}
,
{
"name" : "onMoveCursorListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GtkMovementStep, int, TreeView)[]",
"line" : 356}
,
{
"name" : "addOnMoveCursor",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GtkMovementStep, int, TreeView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 359}
,
{
"name" : "callBackMoveCursor",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkTreeView* treeviewStruct, GtkMovementStep arg1, int arg2, TreeView treeView)",
"line" : 374}
,
{
"name" : "onRowActivatedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TreePath, TreeViewColumn, TreeView)[]",
"line" : 387}
,
{
"name" : "addOnRowActivated",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TreePath, TreeViewColumn, TreeView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The \"row-activated\" signal is emitted when the method\n gtk_tree_view_row_activated() is called or the user double clicks\n a treeview row. It is also emitted when a non-editable row is\n selected and one of the keys: Space, Shift+Space, Return or\n Enter is pressed.\n For selection handling refer to the tree\n widget conceptual overview as well as GtkTreeSelection.\n\t \n",
"line" : 397}
,
{
"name" : "callBackRowActivated",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTreeView* treeViewStruct, GtkTreePath* path, GtkTreeViewColumn* column, TreeView treeView)",
"line" : 412}
,
{
"name" : "onRowCollapsedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TreeIter, TreePath, TreeView)[]",
"line" : 420}
,
{
"name" : "addOnRowCollapsed",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TreeIter, TreePath, TreeView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The given row has been collapsed (child nodes are hidden).\n\t \n",
"line" : 424}
,
{
"name" : "callBackRowCollapsed",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTreeView* treeViewStruct, GtkTreeIter* iter, GtkTreePath* path, TreeView treeView)",
"line" : 439}
,
{
"name" : "onRowExpandedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(TreeIter, TreePath, TreeView)[]",
"line" : 447}
,
{
"name" : "addOnRowExpanded",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(TreeIter, TreePath, TreeView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The given row has been expanded (child nodes are shown).\n\t \n",
"line" : 451}
,
{
"name" : "callBackRowExpanded",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTreeView* treeViewStruct, GtkTreeIter* iter, GtkTreePath* path, TreeView treeView)",
"line" : 466}
,
{
"name" : "onSelectAllListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(TreeView)[]",
"line" : 474}
,
{
"name" : "addOnSelectAll",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(TreeView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 477}
,
{
"name" : "callBackSelectAll",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkTreeView* treeviewStruct, TreeView treeView)",
"line" : 492}
,
{
"name" : "onSelectCursorParentListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(TreeView)[]",
"line" : 505}
,
{
"name" : "addOnSelectCursorParent",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(TreeView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 508}
,
{
"name" : "callBackSelectCursorParent",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkTreeView* treeviewStruct, TreeView treeView)",
"line" : 523}
,
{
"name" : "onSelectCursorRowListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(int, TreeView)[]",
"line" : 536}
,
{
"name" : "addOnSelectCursorRow",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(int, TreeView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 539}
,
{
"name" : "callBackSelectCursorRow",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkTreeView* treeviewStruct, int arg1, TreeView treeView)",
"line" : 554}
,
{
"name" : "onSetScrollAdjustmentsListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Adjustment, Adjustment, TreeView)[]",
"line" : 567}
,
{
"name" : "addOnSetScrollAdjustments",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Adjustment, Adjustment, TreeView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Set the scroll adjustments for the tree view. Usually scrolled containers\n like GtkScrolledWindow will emit this signal to connect two instances\n of GtkScrollbar to the scroll directions of the GtkTreeView.\n\t \n",
"line" : 573}
,
{
"name" : "callBackSetScrollAdjustments",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkTreeView* horizontalStruct, GtkAdjustment* vertical, GtkAdjustment* arg2, TreeView treeView)",
"line" : 588}
,
{
"name" : "onStartInteractiveSearchListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(TreeView)[]",
"line" : 596}
,
{
"name" : "addOnStartInteractiveSearch",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(TreeView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 599}
,
{
"name" : "callBackStartInteractiveSearch",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkTreeView* treeviewStruct, TreeView treeView)",
"line" : 614}
,
{
"name" : "onTestCollapseRowListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(TreeIter, TreePath, TreeView)[]",
"line" : 627}
,
{
"name" : "addOnTestCollapseRow",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(TreeIter, TreePath, TreeView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The given row is about to be collapsed (hide its children nodes). Use this\n signal if you need to control the collapsibility of individual rows.\n FALSE to allow collapsing, TRUE to reject\n\t \n",
"line" : 633}
,
{
"name" : "callBackTestCollapseRow",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkTreeView* treeViewStruct, GtkTreeIter* iter, GtkTreePath* path, TreeView treeView)",
"line" : 648}
,
{
"name" : "onTestExpandRowListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(TreeIter, TreePath, TreeView)[]",
"line" : 661}
,
{
"name" : "addOnTestExpandRow",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(TreeIter, TreePath, TreeView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The given row is about to be expanded (show its children nodes). Use this\n signal if you need to control the expandability of individual rows.\n FALSE to allow expansion, TRUE to reject\n\t \n",
"line" : 667}
,
{
"name" : "callBackTestExpandRow",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkTreeView* treeViewStruct, GtkTreeIter* iter, GtkTreePath* path, TreeView treeView)",
"line" : 682}
,
{
"name" : "onToggleCursorRowListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(TreeView)[]",
"line" : 695}
,
{
"name" : "addOnToggleCursorRow",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(TreeView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 698}
,
{
"name" : "callBackToggleCursorRow",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkTreeView* treeviewStruct, TreeView treeView)",
"line" : 713}
,
{
"name" : "onUnselectAllListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(TreeView)[]",
"line" : 726}
,
{
"name" : "addOnUnselectAll",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(TreeView) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n See Also\n GtkTreeViewColumn, GtkTreeSelection, GtkTreeDnd, GtkTreeMode, GtkTreeSortable, GtkTreeModelSort, GtkListStore, GtkTreeStore, GtkCellRenderer, GtkCellEditable, GtkCellRendererPixbuf, GtkCellRendererText, GtkCellRendererToggle\n\t \n",
"line" : 731}
,
{
"name" : "callBackUnselectAll",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkTreeView* treeviewStruct, TreeView treeView)",
"line" : 746}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TreeView()",
"comment" : "\n Creates a new GtkTreeView widget.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 764}
,
{
"name" : "getLevelIndentation",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the amount, in pixels, of extra indentation for child levels\n in tree_view.\n Since 2.12\n Returns: the amount of extra indentation for child levels in tree_view. A return value of 0 means that this feature is disabled.\n\t \n",
"line" : 781}
,
{
"name" : "getShowExpanders",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether or not expanders are drawn in tree_view.\n Since 2.12\n Returns: TRUE if expanders are drawn in tree_view, FALSE otherwise.\n\t \n",
"line" : 792}
,
{
"name" : "setLevelIndentation",
"kind" : "function",
"protection" : "public",
"type" : "void(int indentation)",
"comment" : "\n Sets the amount of extra indentation for child levels to use in tree_view\n in addition to the default indentation. The value should be specified in\n pixels, a value of 0 disables this feature and in this case only the default\n indentation will be used.\n This does not have any visible effects for lists.\n Since 2.12\n Params:\n indentation = the amount, in pixels, of extra indentation in tree_view.\n\t \n",
"line" : 808}
,
{
"name" : "setShowExpanders",
"kind" : "function",
"protection" : "public",
"type" : "void(int enabled)",
"comment" : "\n Sets whether to draw and enable expanders and indent child rows in\n tree_view. When disabled there will be no expanders visible in trees\n and there will be no way to expand and collapse rows by default. Also\n note that hiding the expanders will disable the default indentation. You\n can set a custom indentation in this case using\n gtk_tree_view_set_level_indentation().\n This does not have any visible effects for lists.\n Since 2.12\n Params:\n enabled = TRUE to enable expander drawing, FALSE otherwise.\n\t \n",
"line" : 826}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "TreeView(TreeModelIF model)",
"comment" : "\n Creates a new GtkTreeView widget with the model initialized to model.\n Params:\n model = the model.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 838}
,
{
"name" : "getModel",
"kind" : "function",
"protection" : "public",
"type" : "TreeModelIF()",
"comment" : "\n Returns the model the GtkTreeView is based on. Returns NULL if the\n model is unset.\n Returns: A GtkTreeModel, or NULL if none is currently being used. [transfer none]\n\t \n",
"line" : 854}
,
{
"name" : "setModel",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeModelIF model)",
"comment" : "\n Sets the model for a GtkTreeView. If the tree_view already has a model\n set, it will remove it before setting the new model. If model is NULL,\n then it will unset the old model.\n Params:\n model = The model. [allow-none]\n\t \n",
"line" : 872}
,
{
"name" : "getSelection",
"kind" : "function",
"protection" : "public",
"type" : "TreeSelection()",
"comment" : "\n Gets the GtkTreeSelection associated with tree_view.\n Returns: A GtkTreeSelection object. [transfer none]\n\t \n",
"line" : 882}
,
{
"name" : "getHadjustment",
"kind" : "function",
"protection" : "public",
"type" : "Adjustment()",
"comment" : "\n Gets the GtkAdjustment currently being used for the horizontal aspect.\n Returns: A GtkAdjustment object, or NULL if none is currently being used. [transfer none]\n\t \n",
"line" : 897}
,
{
"name" : "setHadjustment",
"kind" : "function",
"protection" : "public",
"type" : "void(Adjustment adjustment)",
"comment" : "\n Sets the GtkAdjustment for the current horizontal aspect.\n Params:\n adjustment = The GtkAdjustment to set, or NULL. [allow-none]\n\t \n",
"line" : 913}
,
{
"name" : "getVadjustment",
"kind" : "function",
"protection" : "public",
"type" : "Adjustment()",
"comment" : "\n Gets the GtkAdjustment currently being used for the vertical aspect.\n Returns: A GtkAdjustment object, or NULL if none is currently being used. [transfer none]\n\t \n",
"line" : 923}
,
{
"name" : "setVadjustment",
"kind" : "function",
"protection" : "public",
"type" : "void(Adjustment adjustment)",
"comment" : "\n Sets the GtkAdjustment for the current vertical aspect.\n Params:\n adjustment = The GtkAdjustment to set, or NULL. [allow-none]\n\t \n",
"line" : 939}
,
{
"name" : "getHeadersVisible",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns TRUE if the headers on the tree_view are visible.\n Returns: Whether the headers are visible or not.\n\t \n",
"line" : 949}
,
{
"name" : "setHeadersVisible",
"kind" : "function",
"protection" : "public",
"type" : "void(int headersVisible)",
"comment" : "\n Sets the visibility state of the headers.\n Params:\n headersVisible = TRUE if the headers are visible\n\t \n",
"line" : 960}
,
{
"name" : "columnsAutosize",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Resizes all columns to their optimal width. Only works after the\n treeview has been realized.\n\t \n",
"line" : 970}
,
{
"name" : "getHeadersClickable",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether all header columns are clickable.\n Since 2.10\n Returns: TRUE if all header columns are clickable, otherwise FALSE\n\t \n",
"line" : 981}
,
{
"name" : "setHeadersClickable",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n Allow the column title buttons to be clicked.\n Params:\n setting = TRUE if the columns are clickable.\n\t \n",
"line" : 992}
,
{
"name" : "setRulesHint",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n This function tells GTK+ that the user interface for your\n application requires users to read across tree rows and associate\n cells with one another. By default, GTK+ will then render the tree\n with alternating row colors. Do not use it\n just because you prefer the appearance of the ruled tree; that's a\n question for the theme. Some themes will draw tree rows in\n alternating colors even when rules are turned off, and users who\n prefer that appearance all the time can choose those themes. You\n should call this function only as a semantic\n hint to the theme engine that your tree makes alternating colors\n useful from a functional standpoint (since it has lots of columns,\n generally).\n Params:\n setting = TRUE if the tree requires reading across rows\n\t \n",
"line" : 1014}
,
{
"name" : "getRulesHint",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the setting set by gtk_tree_view_set_rules_hint().\n Returns: TRUE if rules are useful for the user of this tree\n\t \n",
"line" : 1024}
,
{
"name" : "appendColumn",
"kind" : "function",
"protection" : "public",
"type" : "int(TreeViewColumn column)",
"comment" : "\n Appends column to the list of columns. If tree_view has \"fixed_height\"\n mode enabled, then column must have its \"sizing\" property set to be\n GTK_TREE_VIEW_COLUMN_FIXED.\n Params:\n column = The GtkTreeViewColumn to add.\n Returns: The number of columns in tree_view after appending.\n\t \n",
"line" : 1038}
,
{
"name" : "removeColumn",
"kind" : "function",
"protection" : "public",
"type" : "int(TreeViewColumn column)",
"comment" : "\n Removes column from tree_view.\n Params:\n column = The GtkTreeViewColumn to remove.\n Returns: The number of columns in tree_view after removing.\n\t \n",
"line" : 1050}
,
{
"name" : "insertColumn",
"kind" : "function",
"protection" : "public",
"type" : "int(TreeViewColumn column, int position)",
"comment" : "\n This inserts the column into the tree_view at position. If position is\n -1, then the column is inserted at the end. If tree_view has\n \"fixed_height\" mode enabled, then column must have its \"sizing\" property\n set to be GTK_TREE_VIEW_COLUMN_FIXED.\n Params:\n column = The GtkTreeViewColumn to be inserted.\n position = The position to insert column in.\n Returns: The number of columns in tree_view after insertion.\n\t \n",
"line" : 1066}
,
{
"name" : "insertColumnWithDataFunc",
"kind" : "function",
"protection" : "public",
"type" : "int(int position, string title, CellRenderer cell, extern (C) void function(GtkTreeViewColumn*, GtkCellRenderer*, GtkTreeModel*, GtkTreeIter*, void*) func, void* data, extern (C) void function(void* cbData) dnotify)",
"comment" : "\n Convenience function that inserts a new column into the GtkTreeView\n with the given cell renderer and a GtkCellDataFunc to set cell renderer\n attributes (normally using data from the model). See also\n gtk_tree_view_column_set_cell_data_func(), gtk_tree_view_column_pack_start().\n If tree_view has \"fixed_height\" mode enabled, then the new column will have its\n \"sizing\" property set to be GTK_TREE_VIEW_COLUMN_FIXED.\n Params:\n position = Position to insert, -1 for append\n title = column title\n cell = cell renderer for column\n func = function to set attributes of cell renderer\n data = data for func\n dnotify = destroy notifier for data\n Returns: number of columns in the tree view post-insert\n\t \n",
"line" : 1088}
,
{
"name" : "getColumn",
"kind" : "function",
"protection" : "public",
"type" : "TreeViewColumn(int n)",
"comment" : "\n Gets the GtkTreeViewColumn at the given position in the tree_view.\n Params:\n n = The position of the column, counting from 0.\n Returns: The GtkTreeViewColumn, or NULL if the position is outside the range of columns. [transfer none]\n\t \n",
"line" : 1100}
,
{
"name" : "getColumns",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Returns a GList of all the GtkTreeViewColumn s currently in tree_view.\n The returned list must be freed with g_list_free().\n Returns: A list of GtkTreeViewColumn s. [element-type GtkTreeViewColumn][transfer container]\n\t \n",
"line" : 1116}
,
{
"name" : "moveColumnAfter",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeViewColumn column, TreeViewColumn baseColumn)",
"comment" : "\n Moves column to be after to base_column. If base_column is NULL, then\n column is placed in the first position.\n Params:\n column = The GtkTreeViewColumn to be moved.\n baseColumn = The GtkTreeViewColumn to be moved relative to, or NULL. [allow-none]\n\t \n",
"line" : 1134}
,
{
"name" : "setExpanderColumn",
"kind" : "function",
"protection" : "public",
"type" : "void(TreeViewColumn column)",
"comment" : "\n Sets the column to draw the expander arrow at. It must be in tree_view.\n If column is NULL, then the expander arrow is always at the first\n visible column.\n If you do not want expander arrow to appear in your tree, set the\n expander column to a hidden column.\n Params:\n column = NULL, or the column to draw the expander arrow at.\n\t \n",
"line" : 1149}
,
{
"name" : "getExpanderColumn",
"kind" : "function",
"protection" : "public",
"type" : "TreeViewColumn()",
"comment" : "\n Returns the column that is the current expander column.\n This column has the expander arrow drawn next to it.\n Returns: The expander column. [transfer none]\n\t \n",
"line" : 1160}
,
{
"name" : "setColumnDragFunction",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) int function(GtkTreeView*, GtkTreeViewColumn*, GtkTreeViewColumn*, GtkTreeViewColumn*, void*) func, void* userData, extern (C) void function(void* cbData) destroy)",
"comment" : "\n Sets a user function for determining where a column may be dropped when\n dragged. This function is called on every column pair in turn at the\n beginning of a column drag to determine where a drop can take place. The\n arguments passed to func are: the tree_view, the GtkTreeViewColumn being\n dragged, the two GtkTreeViewColumn s determining the drop spot, and\n user_data. If either of the GtkTreeViewColumn arguments for the drop spot\n are NULL, then they indicate an edge. If func is set to be NULL, then\n tree_view reverts to the default behavior of allowing all columns to be\n dropped everywhere.\n Params:\n func = A function to determine which columns are reorderable, or NULL. [allow-none]\n userData = User data to be passed to func, or NULL. [allow-none]\n destroy = Destroy notifier for user_data, or NULL. [allow-none]\n\t \n",
"line" : 1186}
,
{
"name" : "scrollToPoint",
"kind" : "function",
"protection" : "public",
"type" : "void(int treeX, int treeY)",
"comment" : "\n Scrolls the tree view such that the top-left corner of the visible\n area is tree_x, tree_y, where tree_x and tree_y are specified\n in tree coordinates. The tree_view must be realized before\n this function is called. If it isn't, you probably want to be\n using gtk_tree_view_scroll_to_cell().\n If either tree_x or tree_y are -1, then that direction isn't scrolled.\n Params:\n treeX = X coordinate of new top-left pixel of visible area, or -1\n treeY = Y coordinate of new top-left pixel of visible area, or -1\n\t \n",
"line" : 1203}
,
{
"name" : "scrollToCell",
"kind" : "function",
"protection" : "public",
"type" : "void(TreePath path, TreeViewColumn column, int useAlign, float rowAlign, float colAlign)",
"comment" : "\n Moves the alignments of tree_view to the position specified by column and\n path. If column is NULL, then no horizontal scrolling occurs. Likewise,\n if path is NULL no vertical scrolling occurs. At a minimum, one of column\n or path need to be non-NULL. row_align determines where the row is\n placed, and col_align determines where column is placed. Both are expected\n to be between 0.0 and 1.0. 0.0 means left\/top alignment, 1.0 means\n right\/bottom alignment, 0.5 means center.\n If use_align is FALSE, then the alignment arguments are ignored, and the\n tree does the minimum amount of work to scroll the cell onto the screen.\n This means that the cell will be scrolled to the edge closest to its current\n position. If the cell is currently visible on the screen, nothing is done.\n This function only works if the model is set, and path is a valid row on the\n model. If the model changes before the tree_view is realized, the centered\n path will be modified to reflect this change.\n Params:\n path = The path of the row to move to, or NULL. [allow-none]\n column = The GtkTreeViewColumn to move horizontally to, or NULL. [allow-none]\n useAlign = whether to use alignment arguments, or FALSE.\n rowAlign = The vertical alignment of the row specified by path.\n colAlign = The horizontal alignment of the column specified by column.\n\t \n",
"line" : 1231}
,
{
"name" : "setCursor",
"kind" : "function",
"protection" : "public",
"type" : "void(TreePath path, TreeViewColumn focusColumn, int startEditing)",
"comment" : "\n Sets the current keyboard focus to be at path, and selects it. This is\n useful when you want to focus the user's attention on a particular row. If\n focus_column is not NULL, then focus is given to the column specified by\n it. Additionally, if focus_column is specified, and start_editing is\n TRUE, then editing should be started in the specified cell.\n This function is often followed by gtk_widget_grab_focus (tree_view)\n in order to give keyboard focus to the widget. Please note that editing\n can only happen when the widget is realized.\n If path is invalid for model, the current cursor (if any) will be unset\n and the function will return without failing.\n Params:\n path = A GtkTreePath\n focusColumn = A GtkTreeViewColumn, or NULL. [allow-none]\n startEditing = TRUE if the specified cell should start being edited.\n\t \n",
"line" : 1253}
,
{
"name" : "setCursorOnCell",
"kind" : "function",
"protection" : "public",
"type" : "void(TreePath path, TreeViewColumn focusColumn, CellRenderer focusCell, int startEditing)",
"comment" : "\n Sets the current keyboard focus to be at path, and selects it. This is\n useful when you want to focus the user's attention on a particular row. If\n focus_column is not NULL, then focus is given to the column specified by\n it. If focus_column and focus_cell are not NULL, and focus_column\n contains 2 or more editable or activatable cells, then focus is given to\n the cell specified by focus_cell. Additionally, if focus_column is\n specified, and start_editing is TRUE, then editing should be started in\n the specified cell. This function is often followed by\n gtk_widget_grab_focus (tree_view) in order to give keyboard focus to the\n widget. Please note that editing can only happen when the widget is\n realized.\n If path is invalid for model, the current cursor (if any) will be unset\n and the function will return without failing.\n Since 2.2\n Params:\n path = A GtkTreePath\n focusColumn = A GtkTreeViewColumn, or NULL. [allow-none]\n focusCell = A GtkCellRenderer, or NULL. [allow-none]\n startEditing = TRUE if the specified cell should start being edited.\n\t \n",
"line" : 1280}
,
{
"name" : "getCursor",
"kind" : "function",
"protection" : "public",
"type" : "void(out TreePath path, out TreeViewColumn focusColumn)",
"comment" : "\n Fills in path and focus_column with the current path and focus column. If\n the cursor isn't currently set, then *path will be NULL. If no column\n currently has focus, then *focus_column will be NULL.\n The returned GtkTreePath must be freed with gtk_tree_path_free() when\n you are done with it.\n Params:\n path = A pointer to be filled with the current cursor path, or NULL. [out][transfer full][allow-none]\n focusColumn = A pointer to be filled with the current focus column, or NULL. [out][transfer none][allow-none]\n\t \n",
"line" : 1296}
,
{
"name" : "rowActivated",
"kind" : "function",
"protection" : "public",
"type" : "void(TreePath path, TreeViewColumn column)",
"comment" : "\n Activates the cell determined by path and column.\n Params:\n path = The GtkTreePath to be activated.\n column = The GtkTreeViewColumn to be activated.\n\t \n",
"line" : 1314}
,
{
"name" : "expandAll",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Recursively expands all nodes in the tree_view.\n\t \n",
"line" : 1323}
,
{
"name" : "collapseAll",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Recursively collapses all visible, expanded nodes in tree_view.\n\t \n",
"line" : 1332}
,
{
"name" : "expandToPath",
"kind" : "function",
"protection" : "public",
"type" : "void(TreePath path)",
"comment" : "\n Expands the row at path. This will also expand all parent rows of\n path as necessary.\n Since 2.2\n Params:\n path = path to a row.\n\t \n",
"line" : 1345}
,
{
"name" : "expandRow",
"kind" : "function",
"protection" : "public",
"type" : "int(TreePath path, int openAll)",
"comment" : "\n Opens the row so its children are visible.\n Params:\n path = path to a row\n openAll = whether to recursively expand, or just expand immediate children\n Returns: TRUE if the row existed and had children\n\t \n",
"line" : 1358}
,
{
"name" : "collapseRow",
"kind" : "function",
"protection" : "public",
"type" : "int(TreePath path)",
"comment" : "\n Collapses a row (hides its child rows, if they exist).\n Params:\n path = path to a row in the tree_view\n Returns: TRUE if the row was collapsed.\n\t \n",
"line" : 1370}
,
{
"name" : "mapExpandedRows",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) void function(GtkTreeView*, GtkTreePath*, void*) func, void* data)",
"comment" : "\n Calls func on all expanded rows.\n Params:\n func = A function to be called. [scope call]\n data = User data to be passed to the function.\n\t \n",
"line" : 1382}
,
{
"name" : "rowExpanded",
"kind" : "function",
"protection" : "public",
"type" : "int(TreePath path)",
"comment" : "\n Returns TRUE if the node pointed to by path is expanded in tree_view.\n Params:\n path = A GtkTreePath to test expansion state.\n Returns: TRUE if path is expanded.\n\t \n",
"line" : 1394}
,
{
"name" : "setReorderable",
"kind" : "function",
"protection" : "public",
"type" : "void(int reorderable)",
"comment" : "\n This function is a convenience function to allow you to reorder\n models that support the GtkDragSourceIface and the\n GtkDragDestIface. Both GtkTreeStore and GtkListStore support\n these. If reorderable is TRUE, then the user can reorder the\n model by dragging and dropping rows. The developer can listen to\n these changes by connecting to the model's row_inserted and\n row_deleted signals. The reordering is implemented by setting up\n the tree view as a drag source and destination. Therefore, drag and\n drop can not be used in a reorderable view for any other purpose.\n This function does not give you any degree of control over the order -- any\n reordering is allowed. If more control is needed, you should probably\n handle drag and drop manually.\n Params:\n reorderable = TRUE, if the tree can be reordered.\n\t \n",
"line" : 1416}
,
{
"name" : "getReorderable",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Retrieves whether the user can reorder the tree via drag-and-drop. See\n gtk_tree_view_set_reorderable().\n Returns: TRUE if the tree can be reordered.\n\t \n",
"line" : 1427}
,
{
"name" : "getPathAtPos",
"kind" : "function",
"protection" : "public",
"type" : "int(int x, int y, ref TreePath path, ref TreeViewColumn column, out int cellX, out int cellY)",
"comment" : "\n Finds the path at the point (x, y), relative to bin_window coordinates\n (please see gtk_tree_view_get_bin_window()).\n That is, x and y are relative to an events coordinates. x and y must\n come from an event on the tree_view only where event->window ==\n gtk_tree_view_get_bin_window (). It is primarily for\n things like popup menus. If path is non-NULL, then it will be filled\n with the GtkTreePath at that point. This path should be freed with\n gtk_tree_path_free(). If column is non-NULL, then it will be filled\n with the column at that point. cell_x and cell_y return the coordinates\n relative to the cell background (i.e. the background_area passed to\n gtk_cell_renderer_render()). This function is only meaningful if\n tree_view is realized. Therefore this function will always return FALSE\n if tree_view is not realized or does not have a model.\n For converting widget coordinates (eg. the ones you get from\n GtkWidget::query-tooltip), please see\n gtk_tree_view_convert_widget_to_bin_window_coords().\n Params:\n x = The x position to be identified (relative to bin_window).\n y = The y position to be identified (relative to bin_window).\n path = A pointer to a GtkTreePath pointer to be filled in, or NULL. [out][allow-none]\n column = A pointer to a GtkTreeViewColumn pointer to be filled in, or NULL. [out][transfer none][allow-none]\n cellX = A pointer where the X coordinate relative to the cell can be placed, or NULL. [out][allow-none]\n cellY = A pointer where the Y coordinate relative to the cell can be placed, or NULL. [out][allow-none]\n Returns: TRUE if a row exists at that coordinate.\n\t \n",
"line" : 1459}
,
{
"name" : "getCellArea",
"kind" : "function",
"protection" : "public",
"type" : "void(TreePath path, TreeViewColumn column, Rectangle rect)",
"comment" : "\n Fills the bounding rectangle in bin_window coordinates for the cell at the\n row specified by path and the column specified by column. If path is\n NULL, or points to a path not currently displayed, the y and height fields\n of the rectangle will be filled with 0. If column is NULL, the x and width\n fields will be filled with 0. The sum of all cell rects does not cover the\n entire tree; there are extra pixels in between rows, for example. The\n returned rectangle is equivalent to the cell_area passed to\n gtk_cell_renderer_render(). This function is only valid if tree_view is\n realized.\n Params:\n path = a GtkTreePath for the row, or NULL to get only horizontal coordinates. [allow-none]\n column = a GtkTreeViewColumn for the column, or NULL to get only vertical coordinates. [allow-none]\n rect = rectangle to fill with cell rect. [out]\n\t \n",
"line" : 1487}
,
{
"name" : "getBackgroundArea",
"kind" : "function",
"protection" : "public",
"type" : "void(TreePath path, TreeViewColumn column, Rectangle rect)",
"comment" : "\n Fills the bounding rectangle in bin_window coordinates for the cell at the\n row specified by path and the column specified by column. If path is\n NULL, or points to a node not found in the tree, the y and height fields of\n the rectangle will be filled with 0. If column is NULL, the x and width\n fields will be filled with 0. The returned rectangle is equivalent to the\n background_area passed to gtk_cell_renderer_render(). These background\n areas tile to cover the entire bin window. Contrast with the cell_area,\n returned by gtk_tree_view_get_cell_area(), which returns only the cell\n itself, excluding surrounding borders and the tree expander area.\n Params:\n path = a GtkTreePath for the row, or NULL to get only horizontal coordinates. [allow-none]\n column = a GtkTreeViewColumn for the column, or NULL to get only vertical coordiantes. [allow-none]\n rect = rectangle to fill with cell background rect. [out]\n\t \n",
"line" : 1508}
,
{
"name" : "getVisibleRect",
"kind" : "function",
"protection" : "public",
"type" : "void(Rectangle visibleRect)",
"comment" : "\n Fills visible_rect with the currently-visible region of the\n buffer, in tree coordinates. Convert to bin_window coordinates with\n gtk_tree_view_convert_tree_to_bin_window_coords().\n Tree coordinates start at 0,0 for row 0 of the tree, and cover the entire\n scrollable area of the tree.\n Params:\n visibleRect = rectangle to fill. [out]\n\t \n",
"line" : 1523}
,
{
"name" : "getVisibleRange",
"kind" : "function",
"protection" : "public",
"type" : "int(out TreePath startPath, out TreePath endPath)",
"comment" : "\n Sets start_path and end_path to be the first and last visible path.\n Note that there may be invisible paths in between.\n The paths should be freed with gtk_tree_path_free() after use.\n Since 2.8\n Params:\n startPath = Return location for start of region,\n or NULL. [out][allow-none]\n endPath = Return location for end of region, or NULL. [out][allow-none]\n Returns: TRUE, if valid paths were placed in start_path and end_path.\n\t \n",
"line" : 1540}
,
{
"name" : "getBinWindow",
"kind" : "function",
"protection" : "public",
"type" : "Window()",
"comment" : "\n Returns the window that tree_view renders to.\n This is used primarily to compare to event->window\n to confirm that the event on tree_view is on the right window.\n Returns: A GdkWindow, or NULL when tree_view hasn't been realized yet. [transfer none]\n\t \n",
"line" : 1559}
,
{
"name" : "widgetToTreeCoords",
"kind" : "function",
"protection" : "public",
"type" : "void(int wx, int wy, out int tx, out int ty)",
"comment" : "\n Warning\n gtk_tree_view_widget_to_tree_coords has been deprecated since version 2.12 and should not be used in newly-written code. Due to historial reasons the name of this function is\n incorrect. For converting coordinates relative to the widget to\n bin_window coordinates, please see\n gtk_tree_view_convert_widget_to_bin_window_coords().\n Converts bin_window coordinates to coordinates for the\n tree (the full scrollable area of the tree).\n Params:\n wx = X coordinate relative to bin_window\n wy = Y coordinate relative to bin_window\n tx = return location for tree X coordinate\n ty = return location for tree Y coordinate\n\t \n",
"line" : 1584}
,
{
"name" : "treeToWidgetCoords",
"kind" : "function",
"protection" : "public",
"type" : "void(int tx, int ty, out int wx, out int wy)",
"comment" : "\n Warning\n gtk_tree_view_tree_to_widget_coords has been deprecated since version 2.12 and should not be used in newly-written code. Due to historial reasons the name of this function is\n incorrect. For converting bin_window coordinates to coordinates relative\n to bin_window, please see\n gtk_tree_view_convert_bin_window_to_widget_coords().\n Converts tree coordinates (coordinates in full scrollable area of the tree)\n to bin_window coordinates.\n Params:\n tx = tree X coordinate\n ty = tree Y coordinate\n wx = return location for X coordinate relative to bin_window\n wy = return location for Y coordinate relative to bin_window\n\t \n",
"line" : 1604}
,
{
"name" : "convertBinWindowToTreeCoords",
"kind" : "function",
"protection" : "public",
"type" : "void(int bx, int by, out int tx, out int ty)",
"comment" : "\n Converts bin_window coordinates to coordinates for the\n tree (the full scrollable area of the tree).\n Since 2.12\n Params:\n bx = X coordinate relative to bin_window\n by = Y coordinate relative to bin_window\n tx = return location for tree X coordinate. [out]\n ty = return location for tree Y coordinate. [out]\n\t \n",
"line" : 1620}
,
{
"name" : "convertBinWindowToWidgetCoords",
"kind" : "function",
"protection" : "public",
"type" : "void(int bx, int by, out int wx, out int wy)",
"comment" : "\n Converts bin_window coordinates (see gtk_tree_view_get_bin_window())\n to widget relative coordinates.\n Since 2.12\n Params:\n bx = bin_window X coordinate\n by = bin_window Y coordinate\n wx = return location for widget X coordinate. [out]\n wy = return location for widget Y coordinate. [out]\n\t \n",
"line" : 1636}
,
{
"name" : "convertTreeToBinWindowCoords",
"kind" : "function",
"protection" : "public",
"type" : "void(int tx, int ty, out int bx, out int by)",
"comment" : "\n Converts tree coordinates (coordinates in full scrollable area of the tree)\n to bin_window coordinates.\n Since 2.12\n Params:\n tx = tree X coordinate\n ty = tree Y coordinate\n bx = return location for X coordinate relative to bin_window. [out]\n by = return location for Y coordinate relative to bin_window. [out]\n\t \n",
"line" : 1652}
,
{
"name" : "convertTreeToWidgetCoords",
"kind" : "function",
"protection" : "public",
"type" : "void(int tx, int ty, out int wx, out int wy)",
"comment" : "\n Converts tree coordinates (coordinates in full scrollable area of the tree)\n to widget coordinates.\n Since 2.12\n Params:\n tx = X coordinate relative to the tree\n ty = Y coordinate relative to the tree\n wx = return location for widget X coordinate. [out]\n wy = return location for widget Y coordinate. [out]\n\t \n",
"line" : 1668}
,
{
"name" : "convertWidgetToBinWindowCoords",
"kind" : "function",
"protection" : "public",
"type" : "void(int wx, int wy, out int bx, out int by)",
"comment" : "\n Converts widget coordinates to coordinates for the bin_window\n (see gtk_tree_view_get_bin_window()).\n Since 2.12\n Params:\n wx = X coordinate relative to the widget\n wy = Y coordinate relative to the widget\n bx = return location for bin_window X coordinate. [out]\n by = return location for bin_window Y coordinate. [out]\n\t \n",
"line" : 1684}
,
{
"name" : "convertWidgetToTreeCoords",
"kind" : "function",
"protection" : "public",
"type" : "void(int wx, int wy, out int tx, out int ty)",
"comment" : "\n Converts widget coordinates to coordinates for the\n tree (the full scrollable area of the tree).\n Since 2.12\n Params:\n wx = X coordinate relative to the widget\n wy = Y coordinate relative to the widget\n tx = return location for tree X coordinate. [out]\n ty = return location for tree Y coordinate. [out]\n\t \n",
"line" : 1700}
,
{
"name" : "enableModelDragDest",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkTargetEntry[] targets, GdkDragAction actions)",
"comment" : "\n Turns tree_view into a drop destination for automatic DND. Calling\n this method sets \"reorderable\" to FALSE.\n Params:\n targets = the table of targets that the drag will support. [array length=n_targets]\n actions = the bitmask of possible actions for a drag from this\n widget\n\t \n",
"line" : 1714}
,
{
"name" : "enableModelDragSource",
"kind" : "function",
"protection" : "public",
"type" : "void(GdkModifierType startButtonMask, GtkTargetEntry[] targets, GdkDragAction actions)",
"comment" : "\n Turns tree_view into a drag source for automatic DND. Calling this\n method sets \"reorderable\" to FALSE.\n Params:\n startButtonMask = Mask of allowed buttons to start drag\n targets = the table of targets that the drag will support. [array length=n_targets]\n actions = the bitmask of possible actions for a drag from this\n widget\n\t \n",
"line" : 1729}
,
{
"name" : "unsetRowsDragSource",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Undoes the effect of\n gtk_tree_view_enable_model_drag_source(). Calling this method sets\n \"reorderable\" to FALSE.\n\t \n",
"line" : 1740}
,
{
"name" : "unsetRowsDragDest",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Undoes the effect of\n gtk_tree_view_enable_model_drag_dest(). Calling this method sets\n \"reorderable\" to FALSE.\n\t \n",
"line" : 1751}
,
{
"name" : "setDragDestRow",
"kind" : "function",
"protection" : "public",
"type" : "void(TreePath path, GtkTreeViewDropPosition pos)",
"comment" : "\n Sets the row that is highlighted for feedback.\n Params:\n path = The path of the row to highlight, or NULL. [allow-none]\n pos = Specifies whether to drop before, after or into the row\n\t \n",
"line" : 1763}
,
{
"name" : "getDragDestRow",
"kind" : "function",
"protection" : "public",
"type" : "void(out TreePath path, out GtkTreeViewDropPosition pos)",
"comment" : "\n Gets information about the row that is highlighted for feedback.\n Params:\n path = Return location for the path of the highlighted row, or NULL. [out][allow-none]\n pos = Return location for the drop position, or NULL. [out][allow-none]\n\t \n",
"line" : 1775}
,
{
"name" : "getDestRowAtPos",
"kind" : "function",
"protection" : "public",
"type" : "int(int dragX, int dragY, out TreePath path, out GtkTreeViewDropPosition pos)",
"comment" : "\n Determines the destination row for a given position. drag_x and\n drag_y are expected to be in widget coordinates. This function is only\n meaningful if tree_view is realized. Therefore this function will always\n return FALSE if tree_view is not realized or does not have a model.\n Params:\n dragX = the position to determine the destination row for\n dragY = the position to determine the destination row for\n path = Return location for the path of the highlighted row, or NULL. [out][allow-none]\n pos = Return location for the drop position, or NULL. [out][allow-none]\n Returns: whether there is a row at the given position, TRUE if this is indeed the case.\n\t \n",
"line" : 1797}
,
{
"name" : "createRowDragIcon",
"kind" : "function",
"protection" : "public",
"type" : "Pixmap(TreePath path)",
"comment" : "\n Creates a GdkPixmap representation of the row at path.\n This image is used for a drag icon.\n Params:\n path = a GtkTreePath in tree_view\n Returns: a newly-allocated pixmap of the drag icon. [transfer none]\n\t \n",
"line" : 1815}
,
{
"name" : "setEnableSearch",
"kind" : "function",
"protection" : "public",
"type" : "void(int enableSearch)",
"comment" : "\n If enable_search is set, then the user can type in text to search through\n the tree interactively (this is sometimes called \"typeahead find\").\n Note that even if this is FALSE, the user can still initiate a search\n using the \"start-interactive-search\" key binding.\n Params:\n enableSearch = TRUE, if the user can search interactively\n\t \n",
"line" : 1834}
,
{
"name" : "getEnableSearch",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether or not the tree allows to start interactive searching\n by typing in text.\n Returns: whether or not to let the user search interactively\n\t \n",
"line" : 1845}
,
{
"name" : "getSearchColumn",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the column searched on by the interactive search code.\n Returns: the column the interactive search code searches in.\n\t \n",
"line" : 1855}
,
{
"name" : "setSearchColumn",
"kind" : "function",
"protection" : "public",
"type" : "void(int column)",
"comment" : "\n Sets column as the column where the interactive search code should\n search in for the current model.\n If the search column is set, users can use the \"start-interactive-search\"\n key binding to bring up search popup. The enable-search property controls\n whether simply typing text will also start an interactive search.\n Note that column refers to a column of the current model. The search\n column is reset to -1 when the model is changed.\n Params:\n column = the column of the model to search in, or -1 to disable searching\n\t \n",
"line" : 1872}
,
{
"name" : "getSearchEqualFunc",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int function(GtkTreeModel*, int, char*, GtkTreeIter*, void*)()",
"comment" : "\n Returns the compare function currently in use.\n Returns: the currently used compare function for the search code.\n\t \n",
"line" : 1882}
,
{
"name" : "setSearchEqualFunc",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) int function(GtkTreeModel*, int, char*, GtkTreeIter*, void*) searchEqualFunc, void* searchUserData, extern (C) void function(void* cbData) searchDestroy)",
"comment" : "\n Sets the compare function for the interactive search capabilities; note\n that somewhat like strcmp() returning 0 for equality\n GtkTreeViewSearchEqualFunc returns FALSE on matches.\n Params:\n searchEqualFunc = the compare function to use during the search\n searchUserData = user data to pass to search_equal_func, or NULL. [allow-none]\n searchDestroy = Destroy notifier for search_user_data, or NULL. [allow-none]\n\t \n",
"line" : 1897}
,
{
"name" : "getSearchEntry",
"kind" : "function",
"protection" : "public",
"type" : "Entry()",
"comment" : "\n Returns the GtkEntry which is currently in use as interactive search\n entry for tree_view. In case the built-in entry is being used, NULL\n will be returned.\n Since 2.10\n Returns: the entry currently in use as search entry. [transfer none]\n\t \n",
"line" : 1910}
,
{
"name" : "setSearchEntry",
"kind" : "function",
"protection" : "public",
"type" : "void(Entry entry)",
"comment" : "\n Sets the entry which the interactive search code will use for this\n tree_view. This is useful when you want to provide a search entry\n in our interface at all time at a fixed position. Passing NULL for\n entry will make the interactive search code use the built-in popup\n entry again.\n Since 2.10\n Params:\n entry = the entry the interactive search code of tree_view should use or NULL. [allow-none]\n\t \n",
"line" : 1931}
,
{
"name" : "getSearchPositionFunc",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void function(GtkTreeView*, GtkWidget*, void*)()",
"comment" : "\n Returns the positioning function currently in use.\n Since 2.10\n Returns: the currently used function for positioning the search dialog.\n\t \n",
"line" : 1942}
,
{
"name" : "setSearchPositionFunc",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) void function(GtkTreeView*, GtkWidget*, void*) func, void* data, extern (C) void function(void* cbData) destroy)",
"comment" : "\n Sets the function to use when positioning the search dialog.\n Since 2.10\n Params:\n func = the function to use to position the search dialog, or NULL\n to use the default search position function. [allow-none]\n data = user data to pass to func, or NULL. [allow-none]\n destroy = Destroy notifier for data, or NULL. [allow-none]\n\t \n",
"line" : 1957}
,
{
"name" : "getFixedHeightMode",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether fixed height mode is turned on for tree_view.\n Since 2.6\n Returns: TRUE if tree_view is in fixed height mode\n\t \n",
"line" : 1968}
,
{
"name" : "setFixedHeightMode",
"kind" : "function",
"protection" : "public",
"type" : "void(int enable)",
"comment" : "\n Enables or disables the fixed height mode of tree_view.\n Fixed height mode speeds up GtkTreeView by assuming that all\n rows have the same height.\n Only enable this option if all rows are the same height and all\n columns are of type GTK_TREE_VIEW_COLUMN_FIXED.\n Since 2.6\n Params:\n enable = TRUE to enable fixed height mode\n\t \n",
"line" : 1984}
,
{
"name" : "getHoverSelection",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether hover selection mode is turned on for tree_view.\n Since 2.6\n Returns: TRUE if tree_view is in hover selection mode\n\t \n",
"line" : 1995}
,
{
"name" : "setHoverSelection",
"kind" : "function",
"protection" : "public",
"type" : "void(int hover)",
"comment" : "\n Enables of disables the hover selection mode of tree_view.\n Hover selection makes the selected row follow the pointer.\n Currently, this works only for the selection modes\n GTK_SELECTION_SINGLE and GTK_SELECTION_BROWSE.\n Since 2.6\n Params:\n hover = TRUE to enable hover selection mode\n\t \n",
"line" : 2010}
,
{
"name" : "getHoverExpand",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether hover expansion mode is turned on for tree_view.\n Since 2.6\n Returns: TRUE if tree_view is in hover expansion mode\n\t \n",
"line" : 2021}
,
{
"name" : "setHoverExpand",
"kind" : "function",
"protection" : "public",
"type" : "void(int expand)",
"comment" : "\n Enables of disables the hover expansion mode of tree_view.\n Hover expansion makes rows expand or collapse if the pointer\n moves over them.\n Since 2.6\n Params:\n expand = TRUE to enable hover selection mode\n\t \n",
"line" : 2035}
,
{
"name" : "setDestroyCountFunc",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) void function(GtkTreeView*, GtkTreePath*, int, void*) func, void* data, extern (C) void function(void* cbData) destroy)",
"comment" : "\n This function should almost never be used. It is meant for private use by\n ATK for determining the number of visible children that are removed when the\n user collapses a row, or a row is deleted.\n Params:\n func = Function to be called when a view row is destroyed, or NULL. [allow-none]\n data = User data to be passed to func, or NULL. [allow-none]\n destroy = Destroy notifier for data, or NULL. [allow-none]\n\t \n",
"line" : 2050}
,
{
"name" : "getRowSeparatorFunc",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int function(GtkTreeModel*, GtkTreeIter*, void*)()",
"comment" : "\n Returns the current row separator function.\n Since 2.6\n Returns: the current row separator function.\n\t \n",
"line" : 2061}
,
{
"name" : "setRowSeparatorFunc",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) int function(GtkTreeModel*, GtkTreeIter*, void*) func, void* data, extern (C) void function(void* cbData) destroy)",
"comment" : "\n Sets the row separator function, which is used to determine\n whether a row should be drawn as a separator. If the row separator\n function is NULL, no separators are drawn. This is the default value.\n Since 2.6\n Params:\n func = a GtkTreeViewRowSeparatorFunc\n data = user data to pass to func, or NULL. [allow-none]\n destroy = destroy notifier for data, or NULL. [allow-none]\n\t \n",
"line" : 2077}
,
{
"name" : "getRubberBanding",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether rubber banding is turned on for tree_view. If the\n selection mode is GTK_SELECTION_MULTIPLE, rubber banding will allow the\n user to select multiple rows by dragging the mouse.\n Since 2.10\n Returns: TRUE if rubber banding in tree_view is enabled.\n\t \n",
"line" : 2090}
,
{
"name" : "setRubberBanding",
"kind" : "function",
"protection" : "public",
"type" : "void(int enable)",
"comment" : "\n Enables or disables rubber banding in tree_view. If the selection mode\n is GTK_SELECTION_MULTIPLE, rubber banding will allow the user to select\n multiple rows by dragging the mouse.\n Since 2.10\n Params:\n enable = TRUE to enable rubber banding\n\t \n",
"line" : 2104}
,
{
"name" : "isRubberBandingActive",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether a rubber banding operation is currently being done\n in tree_view.\n Since 2.12\n Returns: TRUE if a rubber banding operation is currently being done in tree_view.\n\t \n",
"line" : 2116}
,
{
"name" : "getEnableTreeLines",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether or not tree lines are drawn in tree_view.\n Since 2.10\n Returns: TRUE if tree lines are drawn in tree_view, FALSE otherwise.\n\t \n",
"line" : 2127}
,
{
"name" : "setEnableTreeLines",
"kind" : "function",
"protection" : "public",
"type" : "void(int enabled)",
"comment" : "\n Sets whether to draw lines interconnecting the expanders in tree_view.\n This does not have any visible effects for lists.\n Since 2.10\n Params:\n enabled = TRUE to enable tree line drawing, FALSE otherwise.\n\t \n",
"line" : 2140}
,
{
"name" : "getGridLines",
"kind" : "function",
"protection" : "public",
"type" : "GtkTreeViewGridLines()",
"comment" : "\n Returns which grid lines are enabled in tree_view.\n Since 2.10\n Returns: a GtkTreeViewGridLines value indicating which grid lines are enabled.\n\t \n",
"line" : 2151}
,
{
"name" : "setGridLines",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkTreeViewGridLines gridLines)",
"comment" : "\n Sets which grid lines to draw in tree_view.\n Since 2.10\n Params:\n gridLines = a GtkTreeViewGridLines value indicating which grid lines to\n enable.\n\t \n",
"line" : 2164}
,
{
"name" : "setTooltipRow",
"kind" : "function",
"protection" : "public",
"type" : "void(Tooltip tooltip, TreePath path)",
"comment" : "\n Sets the tip area of tooltip to be the area covered by the row at path.\n See also gtk_tree_view_set_tooltip_column() for a simpler alternative.\n See also gtk_tooltip_set_tip_area().\n Since 2.12\n Params:\n tooltip = a GtkTooltip\n path = a GtkTreePath\n\t \n",
"line" : 2179}
,
{
"name" : "setTooltipCell",
"kind" : "function",
"protection" : "public",
"type" : "void(Tooltip tooltip, TreePath path, TreeViewColumn column, CellRenderer cell)",
"comment" : "\n Sets the tip area of tooltip to the area path, column and cell have\n in common. For example if path is NULL and column is set, the tip\n area will be set to the full area covered by column. See also\n gtk_tooltip_set_tip_area().\n Note that if path is not specified and cell is set and part of a column\n containing the expander, the tooltip might not show and hide at the correct\n position. In such cases path must be set to the current node under the\n mouse cursor for this function to operate correctly.\n See also gtk_tree_view_set_tooltip_column() for a simpler alternative.\n Since 2.12\n Params:\n tooltip = a GtkTooltip\n path = a GtkTreePath or NULL. [allow-none]\n column = a GtkTreeViewColumn or NULL. [allow-none]\n cell = a GtkCellRenderer or NULL. [allow-none]\n\t \n",
"line" : 2202}
,
{
"name" : "getTooltipContext",
"kind" : "function",
"protection" : "public",
"type" : "int(int* x, int* y, int keyboardTip, out TreeModelIF model, out TreePath path, TreeIter iter)",
"comment" : "\n This function is supposed to be used in a \"query-tooltip\"\n signal handler for GtkTreeView. The x, y and keyboard_tip values\n which are received in the signal handler, should be passed to this\n function without modification.\n The return value indicates whether there is a tree view row at the given\n coordinates (TRUE) or not (FALSE) for mouse tooltips. For keyboard\n tooltips the row returned will be the cursor row. When TRUE, then any of\n model, path and iter which have been provided will be set to point to\n that row and the corresponding model. x and y will always be converted\n to be relative to tree_view's bin_window if keyboard_tooltip is FALSE.\n Since 2.12\n Params:\n x = the x coordinate (relative to widget coordinates). [inout]\n y = the y coordinate (relative to widget coordinates). [inout]\n keyboardTip = whether this is a keyboard tooltip or not\n model = a pointer to receive a GtkTreeModel or NULL. [out][allow-none]\n path = a pointer to receive a GtkTreePath or NULL. [out][allow-none]\n iter = a pointer to receive a GtkTreeIter or NULL. [out][allow-none]\n Returns: whether or not the given tooltip context points to a row.\n\t \n",
"line" : 2229}
,
{
"name" : "getTooltipColumn",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the column of tree_view's model which is being used for\n displaying tooltips on tree_view's rows.\n Since 2.12\n Returns: the index of the tooltip column that is currently being used, or -1 if this is disabled.\n\t \n",
"line" : 2248}
,
{
"name" : "setTooltipColumn",
"kind" : "function",
"protection" : "public",
"type" : "void(int column)",
"comment" : "\n If you only plan to have simple (text-only) tooltips on full rows, you\n can use this function to have GtkTreeView handle these automatically\n for you. column should be set to the column in tree_view's model\n containing the tooltip texts, or -1 to disable this feature.\n When enabled, \"has-tooltip\" will be set to TRUE and\n tree_view will connect a \"query-tooltip\" signal handler.\n Note that the signal handler sets the text with gtk_tooltip_set_markup(),\n so , <, etc have to be escaped in the text.\n Since 2.12\n Params:\n column = an integer, which is a valid column number for tree_view's model\n\t \n",
"line" : 2267}
]
}
]
}
,
{
"name" : "gtk.Types",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Types.d",
"members" : [
{
"name" : "Types",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GTK+ type system is extensible. Because of that, types have to be\n managed at runtime.\n \n",
"line" : 73,
"base" : "Object",
"members" : [
{
"name" : "gtkType",
"kind" : "variable",
"protection" : "protected",
"type" : "GType*",
"comment" : " the main Gtk struct \n",
"line" : 76}
,
{
"name" : "getTypesStruct",
"kind" : "function",
"protection" : "public",
"type" : "GType*()",
"line" : 79}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 86}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Types(GType* gtkType)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 94}
,
{
"name" : "init",
"kind" : "function",
"protection" : "public",
"type" : "void(GTypeDebugFlags debugFlags)",
"comment" : "\n\t \n\n Warning\n gtk_type_init is deprecated and should not be used in newly-written code.\n Initializes the data structures associated with GTK+ types.\n Params:\n debugFlags = debug flags\n\t \n",
"line" : 114}
,
{
"name" : "unique",
"kind" : "function",
"protection" : "public",
"type" : "GType(GType parentType, GtkTypeInfo* gtkinfo)",
"comment" : "\n Warning\n gtk_type_unique is deprecated and should not be used in newly-written code.\n Creates a new, unique type.\n Params:\n parentType = if zero, a fundamental type is created\n gtkinfo = must not be NULL, and type_info->type_name must also not be NULL\n Returns: the new GtkType\n\t \n",
"line" : 129}
,
{
"name" : "clss",
"kind" : "function",
"protection" : "public",
"type" : "void*(GType type)",
"comment" : "\n Warning\n gtk_type_class has been deprecated since version 2.14 and should not be used in newly-written code. Use g_type_class_peek() or g_type_class_ref() instead.\n Returns a pointer pointing to the class of type or NULL if there\n was any trouble identifying type. Initializes the class if\n necessary.\n Returns a pointer pointing to the class of type or NULL if there was\n any trouble identifying type. Initializes the class if necessary.\n Params:\n type = a GtkType.\n Returns: pointer to the class.\n\t \n",
"line" : 147}
,
{
"name" : "newTypes",
"kind" : "function",
"protection" : "public",
"type" : "void*(GType type)",
"comment" : "\n Warning\n gtk_type_new is deprecated and should not be used in newly-written code.\n Creates a new object of a given type, and return a pointer to it.\n Returns NULL if you give it an invalid type. It allocates the object\n out of the type's memory chunk if there is a memory chunk. The object\n has all the proper initializers called.\n Params:\n type = a GtkType.\n Returns: pointer to a GtkTypeObject.\n\t \n",
"line" : 164}
,
{
"name" : "enumGetValues",
"kind" : "function",
"protection" : "public",
"type" : "GEnumValue*(GType enumType)",
"comment" : "\n Warning\n gtk_type_enum_get_values is deprecated and should not be used in newly-written code.\n If enum_type has values, then return a pointer to all of them.\n Params:\n enumType = a GtkType.\n Returns: GtkEnumValue*\n\t \n",
"line" : 178}
,
{
"name" : "flagsGetValues",
"kind" : "function",
"protection" : "public",
"type" : "GFlagsValue*(GType flagsType)",
"comment" : "\n Warning\n gtk_type_flags_get_values is deprecated and should not be used in newly-written code.\n If flags_type has values, then return a pointer to all of them.\n Params:\n flagsType = a GtkType.\n Returns: GtkFlagValue*\n\t \n",
"line" : 192}
,
{
"name" : "enumFindValue",
"kind" : "function",
"protection" : "public",
"type" : "GEnumValue*(GType enumType, string valueName)",
"comment" : "\n Warning\n gtk_type_enum_find_value is deprecated and should not be used in newly-written code.\n Returns a pointer to one of enum_type's GtkEnumValues's whose name (or nickname) matches value_name.\n Params:\n enumType = a GtkType.\n valueName = the name to look for.\n Returns: GtkEnumValue*\n\t \n",
"line" : 207}
,
{
"name" : "flagsFindValue",
"kind" : "function",
"protection" : "public",
"type" : "GFlagsValue*(GType flagsType, string valueName)",
"comment" : "\n Warning\n gtk_type_flags_find_value is deprecated and should not be used in newly-written code.\n Returns a pointer to one of flag_type's GtkFlagValue's whose name (or nickname) matches value_name.\n Params:\n flagsType = a GtkType.\n valueName = the name to look for.\n Returns: GtkFlagValue*\n\t \n",
"line" : 222}
]
}
]
}
,
{
"name" : "gtk.UIManager",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/UIManager.d",
"members" : [
{
"name" : "UIManager",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkUIManager constructs a user interface (menus and toolbars) from\n one or more UI definitions, which reference actions from one or more\n action groups.\n UI Definitions\n The UI definitions are specified in an XML format which can be\n roughly described by the following DTD.\n Do not confuse the GtkUIManager UI Definitions described here with\n the similarly named GtkBuilder UI\n Definitions.\n <!ELEMENT ui (menubar|toolbar|popup|accelerator)* >\n <!ELEMENT menubar (menuitem|separator|placeholder|menu)* >\n <!ELEMENT menu (menuitem|separator|placeholder|menu)* >\n <!ELEMENT popup (menuitem|separator|placeholder|menu)* >\n <!ELEMENT toolbar (toolitem|separator|placeholder)* >\n <!ELEMENT placeholder (menuitem|toolitem|separator|placeholder|menu)* >\n <!ELEMENT menuitem EMPTY >\n <!ELEMENT toolitem (menu?) >\n <!ELEMENT separator EMPTY >\n <!ELEMENT accelerator EMPTY >\n <!ATTLIST menubar name num;IMPLIED\n  action num;IMPLIED >\n <!ATTLIST toolbar name num;IMPLIED\n  action num;IMPLIED >\n <!ATTLIST popup name num;IMPLIED\n  action num;IMPLIED\n  accelerators (true|false) num;IMPLIED >\n <!ATTLIST placeholder name num;IMPLIED\n  action num;IMPLIED >\n <!ATTLIST separator name num;IMPLIED\n  action num;IMPLIED\n  expand (true|false) num;IMPLIED >\n <!ATTLIST menu name num;IMPLIED\n  action num;REQUIRED\n  position (top|bot) num;IMPLIED >\n <!ATTLIST menuitem name num;IMPLIED\n  action num;REQUIRED\n  position (top|bot) num;IMPLIED\n  always-show-image (true|false) num;IMPLIED >\n <!ATTLIST toolitem name num;IMPLIED\n  action num;REQUIRED\n  position (top|bot) num;IMPLIED >\n <!ATTLIST accelerator name num;IMPLIED\n  action num;REQUIRED >\n There are some additional restrictions beyond those specified in the\n DTD, e.g. every toolitem must have a toolbar in its anchestry and\n every menuitem must have a menubar or popup in its anchestry. Since\n a GMarkup parser is used to parse the UI description, it must not only\n be valid XML, but valid GMarkup.\n If a name is not specified, it defaults to the action. If an action is\n not specified either, the element name is used. The name and action\n attributes must not contain '\/' characters after parsing (since that\n would mess up path lookup) and must be usable as XML attributes when\n enclosed in doublequotes, thus they must not '\"' characters or references\n to the quot; entity.\n $(DDOC_COMMENT example)\n The constructed widget hierarchy is very similar to the element tree\n of the XML, with the exception that placeholders are merged into their\n parents. The correspondence of XML elements to widgets should be\n almost obvious:\n menubar\n a GtkMenuBar\n toolbar\n a GtkToolbar\n popup\n a toplevel GtkMenu\n menu\n a GtkMenu attached to a menuitem\n menuitem\n a GtkMenuItem subclass, the exact type depends on the\n action\n toolitem\n a GtkToolItem subclass, the exact type depends on the\n action. Note that toolitem elements may contain a menu element, but only\n if their associated action specifies a GtkMenuToolButton as proxy.\n separator\n a GtkSeparatorMenuItem or\n GtkSeparatorToolItem\n accelerator\n a keyboard accelerator\n The \"position\" attribute determines where a constructed widget is positioned\n wrt. to its siblings in the partially constructed tree. If it is\n \"top\", the widget is prepended, otherwise it is appended.\n <hr>\n UI Merging\n The most remarkable feature of GtkUIManager is that it can overlay a set\n of menuitems and toolitems over another one, and demerge them later.\n Merging is done based on the names of the XML elements. Each element is\n identified by a path which consists of the names of its anchestors, separated\n by slashes. For example, the menuitem named \"Left\" in the example above\n has the path \/ui\/menubar\/JustifyMenu\/Left and the\n toolitem with the same name has path\n \/ui\/toolbar1\/JustifyToolItems\/Left.\n <hr>\n Accelerators\n Every action has an accelerator path. Accelerators are installed together with\n menuitem proxies, but they can also be explicitly added with <accelerator>\n elements in the UI definition. This makes it possible to have accelerators for\n actions even if they have no visible proxies.\n <hr>\n Smart Separators\n The separators created by GtkUIManager are \"smart\", i.e. they do not show up\n in the UI unless they end up between two visible menu or tool items. Separators\n which are located at the very beginning or end of the menu or toolbar\n containing them, or multiple separators next to each other, are hidden. This\n is a useful feature, since the merging of UI elements from multiple sources\n can make it hard or impossible to determine in advance whether a separator\n will end up in such an unfortunate position.\n For separators in toolbars, you can set expand=\"true\" to\n turn them from a small, visible separator to an expanding, invisible one.\n Toolitems following an expanding separator are effectively right-aligned.\n <hr>\n Empty Menus\n Submenus pose similar problems to separators inconnection with merging. It is\n impossible to know in advance whether they will end up empty after merging.\n GtkUIManager offers two ways to treat empty submenus:\n make them disappear by hiding the menu item they're attached to\n add an insensitive \"Empty\" item\n The behaviour is chosen based on the \"hide_if_empty\" property of the action\n to which the submenu is associated.\n <hr>\n GtkUIManager as GtkBuildable\n The GtkUIManager implementation of the GtkBuildable interface accepts\n GtkActionGroup objects as <child> elements in UI definitions.\n A GtkUIManager UI definition as described above can be embedded in\n an GtkUIManager <object> element in a GtkBuilder UI definition.\n The widgets that are constructed by a GtkUIManager can be embedded in\n other parts of the constructed user interface with the help of the\n \"constructor\" attribute. See the example below.\n $(DDOC_COMMENT example)\n \n",
"line" : 229,
"base" : "ObjectG",
"interfaces" : [
"BuildableIF"],
"members" : [
{
"name" : "gtkUIManager",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkUIManager*",
"comment" : " the main Gtk struct \n",
"line" : 233}
,
{
"name" : "getUIManagerStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkUIManager*()",
"line" : 236}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 243}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "UIManager(GtkUIManager* gtkUIManager)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 251}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 269}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 280}
,
{
"name" : "onActionsChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(UIManager)[]",
"line" : 282}
,
{
"name" : "addOnActionsChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(UIManager) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The \"actions-changed\" signal is emitted whenever the set of actions\n changes.\n Since 2.4\n\t \n",
"line" : 288}
,
{
"name" : "callBackActionsChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkUIManager* mergeStruct, UIManager uIManager)",
"line" : 303}
,
{
"name" : "onAddWidgetListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Widget, UIManager)[]",
"line" : 311}
,
{
"name" : "addOnAddWidget",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Widget, UIManager) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The add_widget signal is emitted for each generated menubar and toolbar.\n It is not emitted for generated popup menus, which can be obtained by\n gtk_ui_manager_get_widget().\n Since 2.4\n\t \n",
"line" : 318}
,
{
"name" : "callBackAddWidget",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkUIManager* mergeStruct, GtkWidget* widget, UIManager uIManager)",
"line" : 333}
,
{
"name" : "onConnectProxyListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Action, Widget, UIManager)[]",
"line" : 341}
,
{
"name" : "addOnConnectProxy",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Action, Widget, UIManager) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The connect_proxy signal is emitted after connecting a proxy to\n an action in the group.\n This is intended for simple customizations for which a custom action\n class would be too clumsy, e.g. showing tooltips for menuitems in the\n statusbar.\n Since 2.4\n\t \n",
"line" : 350}
,
{
"name" : "callBackConnectProxy",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkUIManager* uimanagerStruct, GtkAction* action, GtkWidget* proxy, UIManager uIManager)",
"line" : 365}
,
{
"name" : "onDisconnectProxyListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Action, Widget, UIManager)[]",
"line" : 373}
,
{
"name" : "addOnDisconnectProxy",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Action, Widget, UIManager) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The disconnect_proxy signal is emitted after disconnecting a proxy\n from an action in the group.\n Since 2.4\n\t \n",
"line" : 379}
,
{
"name" : "callBackDisconnectProxy",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkUIManager* uimanagerStruct, GtkAction* action, GtkWidget* proxy, UIManager uIManager)",
"line" : 394}
,
{
"name" : "onPostActivateListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Action, UIManager)[]",
"line" : 402}
,
{
"name" : "addOnPostActivate",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Action, UIManager) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The post_activate signal is emitted just after the action\n is activated.\n This is intended for applications to get notification\n just after any action is activated.\n Since 2.4\n\t \n",
"line" : 410}
,
{
"name" : "callBackPostActivate",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkUIManager* uimanagerStruct, GtkAction* action, UIManager uIManager)",
"line" : 425}
,
{
"name" : "onPreActivateListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Action, UIManager)[]",
"line" : 433}
,
{
"name" : "addOnPreActivate",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Action, UIManager) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The pre_activate signal is emitted just before the action\n is activated.\n This is intended for applications to get notification\n just before any action is activated.\n Since 2.4\n See Also\n GtkBuilder\n\t \n",
"line" : 443}
,
{
"name" : "callBackPreActivate",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkUIManager* uimanagerStruct, GtkAction* action, UIManager uIManager)",
"line" : 458}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "UIManager()",
"comment" : "\n Creates a new ui manager object.\n Since 2.4\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 472}
,
{
"name" : "setAddTearoffs",
"kind" : "function",
"protection" : "public",
"type" : "void(int addTearoffs)",
"comment" : "\n Sets the \"add_tearoffs\" property, which controls whether menus\n generated by this GtkUIManager will have tearoff menu items.\n Note that this only affects regular menus. Generated popup\n menus never have tearoff menu items.\n Since 2.4\n Params:\n addTearoffs = whether tearoff menu items are added\n\t \n",
"line" : 492}
,
{
"name" : "getAddTearoffs",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether menus generated by this GtkUIManager\n will have tearoff menu items.\n Since 2.4\n Returns: whether tearoff menu items are added\n\t \n",
"line" : 504}
,
{
"name" : "insertActionGroup",
"kind" : "function",
"protection" : "public",
"type" : "void(ActionGroup actionGroup, int pos)",
"comment" : "\n Inserts an action group into the list of action groups associated\n with self. Actions in earlier groups hide actions with the same\n name in later groups.\n Since 2.4\n Params:\n actionGroup = the action group to be inserted\n pos = the position at which the group will be inserted.\n\t \n",
"line" : 519}
,
{
"name" : "removeActionGroup",
"kind" : "function",
"protection" : "public",
"type" : "void(ActionGroup actionGroup)",
"comment" : "\n Removes an action group from the list of action groups associated\n with self.\n Since 2.4\n Params:\n actionGroup = the action group to be removed\n\t \n",
"line" : 532}
,
{
"name" : "getActionGroups",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Returns the list of action groups associated with self.\n Since 2.4\n Returns: a GList of action groups. The list is owned by GTK+ and should not be modified. [element-type GtkActionGroup][transfer none GtkActionGroup]\n\t \n",
"line" : 543}
,
{
"name" : "getAccelGroup",
"kind" : "function",
"protection" : "public",
"type" : "AccelGroup()",
"comment" : "\n Returns the GtkAccelGroup associated with self.\n Since 2.4\n Returns: the GtkAccelGroup. [transfer none]\n\t \n",
"line" : 559}
,
{
"name" : "getWidget",
"kind" : "function",
"protection" : "public",
"type" : "Widget(string path)",
"comment" : "\n Looks up a widget by following a path.\n The path consists of the names specified in the XML description of the UI.\n separated by '\/'. Elements which don't have a name or action attribute in\n the XML (e.g. <popup>) can be addressed by their XML element name\n (e.g. \"popup\"). The root element (\"\/ui\") can be omitted in the path.\n Note that the widget found by following a path that ends in a <menu>\n element is the menuitem to which the menu is attached, not the menu itself.\n Also note that the widgets constructed by a ui manager are not tied to\n the lifecycle of the ui manager. If you add the widgets returned by this\n function to some container or explicitly ref them, they will survive the\n destruction of the ui manager.\n Since 2.4\n Params:\n path = a path\n Returns: the widget found by following the path, or NULL if no widget was found. [transfer none]\n\t \n",
"line" : 587}
,
{
"name" : "getToplevels",
"kind" : "function",
"protection" : "public",
"type" : "ListSG(GtkUIManagerItemType types)",
"comment" : "\n Obtains a list of all toplevel widgets of the requested types.\n Since 2.4\n Params:\n types = specifies the types of toplevel widgets to include. Allowed\n  types are GTK_UI_MANAGER_MENUBAR, GTK_UI_MANAGER_TOOLBAR and\n  GTK_UI_MANAGER_POPUP.\n Returns: a newly-allocated GSList of all toplevel widgets of the requested types. Free the returned list with g_slist_free(). [element-type GtkWidget][transfer container GtkWidget]\n\t \n",
"line" : 607}
,
{
"name" : "getAction",
"kind" : "function",
"protection" : "public",
"type" : "Action(string path)",
"comment" : "\n Looks up an action by following a path. See gtk_ui_manager_get_widget()\n for more information about paths.\n Since 2.4\n Params:\n path = a path\n Returns: the action whose proxy widget is found by following the path, or NULL if no widget was found.\n\t \n",
"line" : 626}
,
{
"name" : "addUiFromString",
"kind" : "function",
"protection" : "public",
"type" : "uint(string buffer, long length)",
"comment" : "\n Parses a string containing a UI definition and\n merges it with the current contents of self. An enclosing <ui>\n element is added if it is missing.\n Since 2.4\n Params:\n buffer = the string to parse\n length = the length of buffer (may be -1 if buffer is nul-terminated)\n Returns: The merge id for the merged UI. The merge id can be used to unmerge the UI with gtk_ui_manager_remove_ui(). If an error occurred, the return value is 0.\n Throws: GException on failure.\n\t \n",
"line" : 648}
,
{
"name" : "addUiFromFile",
"kind" : "function",
"protection" : "public",
"type" : "uint(string filename)",
"comment" : "\n Parses a file containing a UI definition and\n merges it with the current contents of self.\n Since 2.4\n Params:\n filename = the name of the file to parse\n Returns: The merge id for the merged UI. The merge id can be used to unmerge the UI with gtk_ui_manager_remove_ui(). If an error occurred, the return value is 0.\n Throws: GException on failure.\n\t \n",
"line" : 672}
,
{
"name" : "newMergeId",
"kind" : "function",
"protection" : "public",
"type" : "uint()",
"comment" : "\n Returns an unused merge id, suitable for use with\n gtk_ui_manager_add_ui().\n Since 2.4\n Returns: an unused merge id.\n\t \n",
"line" : 693}
,
{
"name" : "addUi",
"kind" : "function",
"protection" : "public",
"type" : "void(uint mergeId, string path, string name, string action, GtkUIManagerItemType type, int top)",
"comment" : "\n Adds a UI element to the current contents of self.\n If type is GTK_UI_MANAGER_AUTO, GTK+ inserts a menuitem, toolitem or\n separator if such an element can be inserted at the place determined by\n path. Otherwise type must indicate an element that can be inserted at\n the place determined by path.\n If path points to a menuitem or toolitem, the new element will be inserted\n before or after this item, depending on top.\n Since 2.4\n Params:\n mergeId = the merge id for the merged UI, see gtk_ui_manager_new_merge_id()\n path = a path\n name = the name for the added UI element\n action = the name of the action to be proxied, or NULL to add a separator. [allow-none]\n type = the type of UI element to add.\n top = if TRUE, the UI element is added before its siblings, otherwise it\n  is added after its siblings.\n\t \n",
"line" : 717}
,
{
"name" : "removeUi",
"kind" : "function",
"protection" : "public",
"type" : "void(uint mergeId)",
"comment" : "\n Unmerges the part of selfs content identified by merge_id.\n Since 2.4\n Params:\n mergeId = a merge id as returned by gtk_ui_manager_add_ui_from_string()\n\t \n",
"line" : 729}
,
{
"name" : "getUi",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Creates a UI definition of the merged UI.\n Since 2.4\n Returns: A newly allocated string containing an XML representation of the merged UI.\n\t \n",
"line" : 740}
,
{
"name" : "ensureUpdate",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Makes sure that all pending updates to the UI have been completed.\n This may occasionally be necessary, since GtkUIManager updates the\n UI in an idle function. A typical example where this function is\n useful is to enforce that the menubar and toolbar have been added to\n Since 2.4\n\t \n",
"line" : 753}
]
}
]
}
,
{
"name" : "gtk.VBox",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/VBox.d",
"members" : [
{
"name" : "VBox",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GtkVBox is a container that organizes child widgets into a single column.\n Use the GtkBox packing interface to determine the arrangement,\n spacing, height, and alignment of GtkVBox children.\n All children are allocated the same width.\n \n",
"line" : 73,
"base" : "Box",
"members" : [
{
"name" : "gtkVBox",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkVBox*",
"comment" : " the main Gtk struct \n",
"line" : 77}
,
{
"name" : "getVBoxStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkVBox*()",
"line" : 80}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 87}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "VBox(GtkVBox* gtkVBox)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 95}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 113}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "VBox(int homogeneous, int spacing)",
"comment" : "\n\t \n\n Creates a new GtkVBox.\n Params:\n homogeneous = TRUE if all children are to be given equal space allotments.\n spacing = the number of pixels to place by default between children.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 129}
]
}
]
}
,
{
"name" : "gtk.VButtonBox",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/VButtonBox.d",
"members" : [
{
"name" : "VButtonBox",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A button box should be used to provide a consistent layout of buttons\n throughout your application. The layout\/spacing can be altered by the\n programmer, or if desired, by the user to alter the 'feel' of a\n program to a small degree.\n A GtkVButtonBox is created with gtk_vbutton_box_new(). Buttons are\n packed into a button box the same way widgets are added to any other\n container, using gtk_container_add(). You can also use\n gtk_box_pack_start() or gtk_box_pack_end(), but for button boxes both\n these functions work just like gtk_container_add(), ie., they pack the\n button in a way that depends on the current layout style and on\n whether the button has had gtk_button_box_set_child_secondary() called\n on it.\n The spacing between buttons can be set with gtk_box_set_spacing(). The\n arrangement and layout of the buttons can be changed with\n gtk_button_box_set_layout().\n \n",
"line" : 84,
"base" : "ButtonBox",
"members" : [
{
"name" : "gtkVButtonBox",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkVButtonBox*",
"comment" : " the main Gtk struct \n",
"line" : 88}
,
{
"name" : "getVButtonBoxStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkVButtonBox*()",
"line" : 91}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 98}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "VButtonBox(GtkVButtonBox* gtkVButtonBox)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 106}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 124}
,
{
"name" : "createActionBox",
"kind" : "function",
"protection" : "public",
"type" : "VButtonBox()",
"comment" : "\n Creates a new vertical button box and sets standart values for it's comon parameters\n Returns: a new vertical button box\n\t \n",
"line" : 134}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "VButtonBox()",
"comment" : "\n\t \n\n Creates a new vertical button box.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 150}
,
{
"name" : "getSpacingDefault",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Warning\n gtk_vbutton_box_get_spacing_default has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_box_get_spacing() instead.\n Retrieves the current default spacing for vertical button boxes. This is the number of pixels\n to be placed between the buttons when they are arranged.\n Returns: the default number of pixels between buttons.\n\t \n",
"line" : 168}
,
{
"name" : "setSpacingDefault",
"kind" : "function",
"protection" : "public",
"type" : "void(int spacing)",
"comment" : "\n Warning\n gtk_vbutton_box_set_spacing_default has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_box_set_spacing() instead.\n Changes the default spacing that is placed between widgets in an\n vertical button box.\n Params:\n spacing = an integer value.\n\t \n",
"line" : 182}
,
{
"name" : "getLayoutDefault",
"kind" : "function",
"protection" : "public",
"type" : "GtkButtonBoxStyle()",
"comment" : "\n Warning\n gtk_vbutton_box_get_layout_default has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_button_box_get_layout() instead.\n Retrieves the current layout used to arrange buttons in button box widgets.\n Returns: the current GtkButtonBoxStyle.\n\t \n",
"line" : 194}
,
{
"name" : "setLayoutDefault",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkButtonBoxStyle layout)",
"comment" : "\n Warning\n gtk_vbutton_box_set_layout_default has been deprecated since version 2.0 and should not be used in newly-written code. Use gtk_button_box_set_layout() instead.\n Sets a new layout mode that will be used by all button boxes.\n Params:\n layout = a new GtkButtonBoxStyle.\n\t \n",
"line" : 207}
]
}
]
}
,
{
"name" : "gtk.Version",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Version.d",
"members" : [
{
"name" : "Version",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GTK+ provides version information, primarily useful in configure checks\n for builds that have a configure script. Applications will not\n typically use the features described here.\n \n",
"line" : 77,
"base" : "Object",
"members" : [
{
"name" : "major",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"line" : 83}
,
{
"name" : "minor",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"line" : 103}
,
{
"name" : "micro",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"line" : 123}
,
{
"name" : "checkVersion",
"kind" : "function",
"protection" : "public",
"type" : "string(uint requiredMajor, uint requiredMinor, uint requiredMicro)",
"comment" : "\n\t \n\n Checks that the GTK+ library in use is compatible with the\n given version. Generally you would pass in the constants\n GTK_MAJOR_VERSION, GTK_MINOR_VERSION, GTK_MICRO_VERSION\n as the three arguments to this function; that produces\n a check that the library in use is compatible with\n the version of GTK+ the application or module was compiled\n against.\n Compatibility is defined by two things: first the version\n of the running library is newer than the version\n required_major.required_minor.required_micro. Second\n the running library must be binary compatible with the\n version required_major.required_minor.required_micro\n (same major version.)\n This function is primarily for GTK+ modules; the module\n can call this function to check that it wasn't loaded\n into an incompatible version of GTK+. However, such a\n a check isn't completely reliable, since the module may be\n linked against an old version of GTK+ and calling the\n old version of gtk_check_version(), but still get loaded\n into an application using a newer version of GTK+.\n Params:\n requiredMajor = the required major version.\n requiredMinor = the required minor version.\n requiredMicro = the required micro version.\n Returns: NULL if the GTK+ library is compatible with the given version, or a string describing the version mismatch. The returned string is owned by GTK+ and should not be modified or freed.\n\t \n",
"line" : 169}
]
}
]
}
,
{
"name" : "gtk.Viewport",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Viewport.d",
"members" : [
{
"name" : "Viewport",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkViewport widget acts as an adaptor class, implementing\n scrollability for child widgets that lack their own scrolling\n capabilities. Use GtkViewport to scroll child widgets such as\n GtkTable, GtkBox, and so on.\n If a widget has native scrolling abilities, such as GtkTextView,\n GtkTreeView or GtkIconview, it can be added to a GtkScrolledWindow\n with gtk_container_add(). If a widget does not, you must first add the\n widget to a GtkViewport, then add the viewport to the scrolled window.\n The convenience function gtk_scrolled_window_add_with_viewport() does\n exactly this, so you can ignore the presence of the viewport.\n \n",
"line" : 87,
"base" : "Bin",
"members" : [
{
"name" : "gtkViewport",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkViewport*",
"comment" : " the main Gtk struct \n",
"line" : 91}
,
{
"name" : "getViewportStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkViewport*()",
"line" : 94}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 101}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Viewport(GtkViewport* gtkViewport)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 109}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 127}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 135}
,
{
"name" : "onSetScrollAdjustmentsListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Adjustment, Adjustment, Viewport)[]",
"line" : 137}
,
{
"name" : "addOnSetScrollAdjustments",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Adjustment, Adjustment, Viewport) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Set the scroll adjustments for the viewport. Usually scrolled containers\n like GtkScrolledWindow will emit this signal to connect two instances\n of GtkScrollbar to the scroll directions of the GtkViewport.\n See Also\n GtkScrolledWindow, GtkAdjustment\n\t \n",
"line" : 145}
,
{
"name" : "callBackSetScrollAdjustments",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkViewport* horizontalStruct, GtkAdjustment* vertical, GtkAdjustment* arg2, Viewport viewport)",
"line" : 160}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Viewport(Adjustment hadjustment, Adjustment vadjustment)",
"comment" : "\n Creates a new GtkViewport with the given adjustments.\n Params:\n hadjustment = horizontal adjustment.\n vadjustment = vertical adjustment.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 176}
,
{
"name" : "getHadjustment",
"kind" : "function",
"protection" : "public",
"type" : "Adjustment()",
"comment" : "\n Returns the horizontal adjustment of the viewport.\n Returns: the horizontal adjustment of viewport. [transfer none]\n\t \n",
"line" : 191}
,
{
"name" : "getVadjustment",
"kind" : "function",
"protection" : "public",
"type" : "Adjustment()",
"comment" : "\n Returns the vertical adjustment of the viewport.\n Returns: the vertical adjustment of viewport. [transfer none]\n\t \n",
"line" : 206}
,
{
"name" : "setHadjustment",
"kind" : "function",
"protection" : "public",
"type" : "void(Adjustment adjustment)",
"comment" : "\n Sets the horizontal adjustment of the viewport.\n Params:\n adjustment = a GtkAdjustment. [allow-none]\n\t \n",
"line" : 222}
,
{
"name" : "setVadjustment",
"kind" : "function",
"protection" : "public",
"type" : "void(Adjustment adjustment)",
"comment" : "\n Sets the vertical adjustment of the viewport.\n Params:\n adjustment = a GtkAdjustment. [allow-none]\n\t \n",
"line" : 233}
,
{
"name" : "setShadowType",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkShadowType type)",
"comment" : "\n Sets the shadow type of the viewport.\n Params:\n type = the new shadow type.\n\t \n",
"line" : 244}
,
{
"name" : "getShadowType",
"kind" : "function",
"protection" : "public",
"type" : "GtkShadowType()",
"comment" : "\n Gets the shadow type of the GtkViewport. See\n gtk_viewport_set_shadow_type().\n Returns: the shadow type\n\t \n",
"line" : 255}
,
{
"name" : "getBinWindow",
"kind" : "function",
"protection" : "public",
"type" : "Window()",
"comment" : "\n Gets the bin window of the GtkViewport.\n Since 2.20\n Returns: a GdkWindow. [transfer none]\n\t \n",
"line" : 266}
,
{
"name" : "getViewWindow",
"kind" : "function",
"protection" : "public",
"type" : "Window()",
"comment" : "\n Gets the view window of the GtkViewport.\n Since 2.22\n Returns: a GdkWindow. [transfer none]\n\t \n",
"line" : 282}
]
}
]
}
,
{
"name" : "gtk.VolumeButton",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/VolumeButton.d",
"members" : [
{
"name" : "VolumeButton",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkVolumeButton is a subclass of GtkScaleButton that has\n been tailored for use as a volume control widget with suitable\n icons, tooltips and accessible labels.\n \n",
"line" : 77,
"base" : "ScaleButton",
"members" : [
{
"name" : "gtkVolumeButton",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkVolumeButton*",
"comment" : " the main Gtk struct \n",
"line" : 81}
,
{
"name" : "getVolumeButtonStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkVolumeButton*()",
"line" : 84}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 91}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "VolumeButton(GtkVolumeButton* gtkVolumeButton)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 99}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 117}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "VolumeButton()",
"comment" : "\n\t \n\n Creates a GtkVolumeButton, with a range between 0.0 and 1.0, with\n a stepping of 0.02. Volume values can be obtained and modified using\n the functions from GtkScaleButton.\n Since 2.12\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 133}
]
}
]
}
,
{
"name" : "gtk.VPaned",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/VPaned.d",
"members" : [
{
"name" : "VPaned",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The VPaned widget is a container widget with two\n children arranged vertically. The division between\n the two panes is adjustable by the user by dragging\n a handle. See GtkPaned for details.\n \n",
"line" : 75,
"base" : "Paned",
"members" : [
{
"name" : "gtkVPaned",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkVPaned*",
"comment" : " the main Gtk struct \n",
"line" : 79}
,
{
"name" : "getVPanedStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkVPaned*()",
"line" : 82}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 89}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "VPaned(GtkVPaned* gtkVPaned)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 97}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 115}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "VPaned(Widget child1, Widget child2)",
"comment" : "\n Creates a new HPaned and adds two widgets as it's children\n Params:\n  child1 =\n  child2 =\n\t \n",
"line" : 127}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "VPaned()",
"comment" : "\n\t \n\n Create a new GtkVPaned\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 142}
]
}
]
}
,
{
"name" : "gtk.VRuler",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/VRuler.d",
"members" : [
{
"name" : "VRuler",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n Note\n  This widget is considered too specialized\/little-used for\n  GTK+, and will be removed in GTK 3. If your application needs this widget,\n  feel free to use it, as the widget is useful in some applications; it's just\n  not of general interest. However, we are not accepting new features for the\n  widget, and it will move out of the GTK+ distribution.\n The VRuler widget is a widget arranged vertically creating a ruler that is\n utilized around other widgets such as a text widget. The ruler is used to show\n the location of the mouse on the window and to show the size of the window in\n specified units. The available units of measurement are GTK_PIXELS, GTK_INCHES\n and GTK_CENTIMETERS. GTK_PIXELS is the default unit of measurement.\n \n",
"line" : 80,
"base" : "Ruler",
"members" : [
{
"name" : "gtkVRuler",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkVRuler*",
"comment" : " the main Gtk struct \n",
"line" : 84}
,
{
"name" : "getVRulerStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkVRuler*()",
"line" : 87}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 94}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "VRuler(GtkVRuler* gtkVRuler)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 102}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 120}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "VRuler()",
"comment" : "\n\t \n\n Warning\n gtk_vruler_new is deprecated and should not be used in newly-written code.\n Creates a new vertical ruler\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 135}
]
}
]
}
,
{
"name" : "gtk.VScale",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/VScale.d",
"members" : [
{
"name" : "VScale",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkVScale widget is used to allow the user to select a value using\n a vertical slider. To create one, use gtk_hscale_new_with_range().\n The position to show the current value, and the number of decimal places\n shown can be set using the parent GtkScale class's functions.\n \n",
"line" : 76,
"base" : "Scale",
"members" : [
{
"name" : "gtkVScale",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkVScale*",
"comment" : " the main Gtk struct \n",
"line" : 80}
,
{
"name" : "getVScaleStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkVScale*()",
"line" : 83}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 90}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "VScale(GtkVScale* gtkVScale)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 98}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 116}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "VScale(Adjustment adjustment)",
"comment" : "\n\t \n\n Creates a new GtkVScale.\n Params:\n adjustment = the GtkAdjustment which sets the range of the scale.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 131}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "VScale(double min, double max, double step)",
"comment" : "\n Creates a new vertical scale widget that lets the user input a\n number between min and max (including min and max) with the\n increment step. step must be nonzero; it's the distance the\n slider moves when using the arrow keys to adjust the scale value.\n Note that the way in which the precision is derived works best if step\n is a power of ten. If the resulting precision is not suitable for your\n needs, use gtk_scale_set_digits() to correct it.\n Params:\n min = minimum value\n max = maximum value\n step = step increment (tick size) used with keyboard shortcuts\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 156}
]
}
]
}
,
{
"name" : "gtk.VScrollbar",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/VScrollbar.d",
"members" : [
{
"name" : "VScrollbar",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkVScrollbar widget is a widget arranged vertically creating a\n scrollbar. See GtkScrollbar for details on\n scrollbars. GtkAdjustment pointers may be added to handle the\n adjustment of the scrollbar or it may be left NULL in which case one\n will be created for you. See GtkScrollbar for a description of what the\n fields in an adjustment represent for a scrollbar.\n \n",
"line" : 78,
"base" : "Scrollbar",
"members" : [
{
"name" : "gtkVScrollbar",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkVScrollbar*",
"comment" : " the main Gtk struct \n",
"line" : 82}
,
{
"name" : "getVScrollbarStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkVScrollbar*()",
"line" : 85}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 92}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "VScrollbar(GtkVScrollbar* gtkVScrollbar)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 100}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 118}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "VScrollbar(Adjustment adjustment)",
"comment" : "\n\t \n\n Creates a new vertical scrollbar.\n Params:\n adjustment = the GtkAdjustment to use, or NULL to create a new adjustment. [allow-none]\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 133}
]
}
]
}
,
{
"name" : "gtk.VSeparator",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/VSeparator.d",
"members" : [
{
"name" : "VSeparator",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GtkVSeparator widget is a vertical separator, used to group the\n widgets within a window. It displays a vertical line with a shadow to\n make it appear sunken into the interface.\n \n",
"line" : 72,
"base" : "Separator",
"members" : [
{
"name" : "gtkVSeparator",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkVSeparator*",
"comment" : " the main Gtk struct \n",
"line" : 76}
,
{
"name" : "getVSeparatorStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkVSeparator*()",
"line" : 79}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 86}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "VSeparator(GtkVSeparator* gtkVSeparator)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 94}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 112}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "VSeparator()",
"comment" : "\n\t \n\n Creates a new GtkVSeparator.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 125}
]
}
]
}
,
{
"name" : "gtk.Widget",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Widget.d",
"members" : [
{
"name" : "Widget",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkWidget is the base class all widgets in GTK+ derive from. It manages the\n widget lifecycle, states and style.\n GtkWidget introduces style\n properties - these are basically object properties that are stored\n not on the object, but in the style object associated to the widget. Style\n properties are set in resource files.\n This mechanism is used for configuring such things as the location of the\n scrollbar arrows through the theme, giving theme authors more control over the\n look of applications without the need to write a theme engine in C.\n Use gtk_widget_class_install_style_property() to install style properties for\n a widget class, gtk_widget_class_find_style_property() or\n gtk_widget_class_list_style_properties() to get information about existing\n style properties and gtk_widget_style_get_property(), gtk_widget_style_get() or\n gtk_widget_style_get_valist() to obtain the value of a style property.\n <hr>\n GtkWidget as GtkBuildable\n The GtkWidget implementation of the GtkBuildable interface supports a\n custom <accelerator> element, which has attributes named key,\n modifiers and signal and allows to specify accelerators.\n $(DDOC_COMMENT example)\n In addition to accelerators, GtkWidget also support a\n custom <accessible> element, which supports actions and relations.\n Properties on the accessible implementation of an object can be set by accessing the\n internal child \"accessible\" of a GtkWidget.\n $(DDOC_COMMENT example)\n \n",
"line" : 206,
"base" : "ObjectGtk",
"interfaces" : [
"BuildableIF"],
"members" : [
{
"name" : "gtkWidget",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkWidget*",
"comment" : " the main Gtk struct \n",
"line" : 210}
,
{
"name" : "getWidgetStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkWidget*()",
"line" : 213}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 220}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Widget(GtkWidget* gtkWidget)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 228}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 246}
,
{
"name" : "getWidgetClass",
"kind" : "function",
"protection" : "public",
"type" : "GtkWidgetClass*()",
"line" : 255}
,
{
"name" : "getWidth",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : " \n",
"line" : 261}
,
{
"name" : "getHeight",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : " \n",
"line" : 269}
,
{
"name" : "getAllocation",
"kind" : "function",
"protection" : "public",
"type" : "GtkAllocation()",
"comment" : "\n The widget's allocated size.\n Returns: the GtkAllocation for this widget\n\t \n",
"line" : 280}
,
{
"name" : "getDrawable",
"kind" : "function",
"protection" : "public",
"type" : "Drawable()",
"comment" : "\n Gets the drawable for this widget\n Returns:\n \t\tThe drawable for this widget\n Deprecated: use getWindow().\n\t \n",
"line" : 314}
,
{
"name" : "getWindow",
"kind" : "function",
"protection" : "public",
"type" : "Window()",
"comment" : "\n Gets the Window for this widget\n Returns:\n \t\tThe window for this widget\n\t \n",
"line" : 324}
,
{
"name" : "setCursor",
"kind" : "function",
"protection" : "public",
"type" : "void(Cursor cursor)",
"comment" : "\n Sets  the cursor.\n Params:\n  cursor = the new cursor\n Bugs: the cursor changes to the parent widget also\n\t \n",
"line" : 364}
,
{
"name" : "resetCursor",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Resets the cursor.\n don't know if this is implemented by GTK+. Seems that it's not\n Bugs: does nothing\n\t \n",
"line" : 374}
,
{
"name" : "modifyFont",
"kind" : "function",
"protection" : "public",
"type" : "void(string family, int size)",
"comment" : "\n Modifies the font for this widget.\n This just calls modifyFont(new PgFontDescription(PgFontDescription.fromString(family ~ \" \" ~ size)));\n\t \n",
"line" : 383}
,
{
"name" : "setTooltip",
"kind" : "function",
"protection" : "public",
"type" : "void(string tipText, string tipPrivate)",
"comment" : "\n Sets this widget tooltip\n Deprecated: Since 2.12 use setTooltipText() or setTooltipMarkup()\n Params:\n  tipText = the tooltip\n  tipPrivate = a private text\n\t \n",
"line" : 422}
,
{
"name" : "onEvent",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEvent* event)",
"comment" : " \n",
"line" : 429}
,
{
"name" : "onButtonPressEvent",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventButton* event)",
"comment" : " \n",
"line" : 435}
,
{
"name" : "onButtonReleaseEvent",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventButton* event)",
"comment" : " \n",
"line" : 441}
,
{
"name" : "onScrollEvent",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventScroll* event)",
"comment" : " \n",
"line" : 447}
,
{
"name" : "onMotionNotifyEvent",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventMotion* event)",
"comment" : " \n",
"line" : 453}
,
{
"name" : "onDeleteEvent",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventAny* event)",
"comment" : " \n",
"line" : 459}
,
{
"name" : "onExposeEvent",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventExpose* event)",
"comment" : " \n",
"line" : 465}
,
{
"name" : "onKeyPressEvent",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventKey* event)",
"comment" : " \n",
"line" : 471}
,
{
"name" : "onKeyReleaseEvent",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventKey* event)",
"comment" : " \n",
"line" : 477}
,
{
"name" : "onEnterNotifyEvent",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventCrossing* event)",
"comment" : " \n",
"line" : 483}
,
{
"name" : "onLeaveNotifyEvent",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventCrossing* event)",
"comment" : " \n",
"line" : 489}
,
{
"name" : "onConfigureEvent",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventConfigure* event)",
"comment" : " \n",
"line" : 495}
,
{
"name" : "onFocusInEvent",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventFocus* event)",
"comment" : " \n",
"line" : 501}
,
{
"name" : "onFocusOutEvent",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventFocus* event)",
"comment" : " \n",
"line" : 507}
,
{
"name" : "onMapEvent",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventAny* event)",
"comment" : " \n",
"line" : 513}
,
{
"name" : "onUnmapEvent",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventAny* event)",
"comment" : " \n",
"line" : 519}
,
{
"name" : "onPropertyNotifyEvent",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventProperty* event)",
"comment" : " \n",
"line" : 525}
,
{
"name" : "onSelectionClearEvent",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventSelection* event)",
"comment" : " \n",
"line" : 531}
,
{
"name" : "onSelectionRequestEvent",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventSelection* event)",
"comment" : " \n",
"line" : 537}
,
{
"name" : "onSelectionNotifyEvent",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventSelection* event)",
"comment" : " \n",
"line" : 543}
,
{
"name" : "onProximityInEvent",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventProximity* event)",
"comment" : " \n",
"line" : 549}
,
{
"name" : "onProximityOutEvent",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventProximity* event)",
"comment" : " \n",
"line" : 555}
,
{
"name" : "onVisibilityNotifyEvent",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventVisibility* event)",
"comment" : " \n",
"line" : 561}
,
{
"name" : "onClientEvent",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventClient* event)",
"comment" : " \n",
"line" : 567}
,
{
"name" : "onNoExposeEvent",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventAny* event)",
"comment" : " \n",
"line" : 573}
,
{
"name" : "onWindowStateEvent",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventWindowState* event)",
"comment" : " \n",
"line" : 579}
,
{
"name" : "addOnDestroy",
"kind" : "alias",
"protection" : "public",
"line" : 585}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 589}
,
{
"name" : "onAccelClosuresChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Widget)[]",
"line" : 591}
,
{
"name" : "addOnAccelClosuresChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 594}
,
{
"name" : "callBackAccelClosuresChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, Widget widget)",
"line" : 609}
,
{
"name" : "onButtonPressListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkEventButton*, Widget)[]",
"line" : 617}
,
{
"name" : "addOnButtonPress",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkEventButton*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::button-press-event signal will be emitted when a button\n (typically from a mouse) is pressed.\n To receive this signal, the GdkWindow associated to the\n widget needs to enable the GDK_BUTTON_PRESS_MASK mask.\n This signal will be sent to the grab widget if there is one.\n\t \n",
"line" : 625}
,
{
"name" : "callBackButtonPress",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEventButton* event, Widget widget)",
"line" : 641}
,
{
"name" : "onButtonReleaseListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkEventButton*, Widget)[]",
"line" : 654}
,
{
"name" : "addOnButtonRelease",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkEventButton*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::button-release-event signal will be emitted when a button\n (typically from a mouse) is released.\n To receive this signal, the GdkWindow associated to the\n widget needs to enable the GDK_BUTTON_RELEASE_MASK mask.\n This signal will be sent to the grab widget if there is one.\n\t \n",
"line" : 662}
,
{
"name" : "callBackButtonRelease",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEventButton* event, Widget widget)",
"line" : 679}
,
{
"name" : "onCanActivateAccelListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(uint, Widget)[]",
"line" : 692}
,
{
"name" : "addOnCanActivateAccel",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(uint, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Determines whether an accelerator that activates the signal\n identified by signal_id can currently be activated.\n This signal is present to allow applications and derived\n widgets to override the default GtkWidget handling\n for determining whether an accelerator can be activated.\n\t \n",
"line" : 700}
,
{
"name" : "callBackCanActivateAccel",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, uint signalId, Widget widget)",
"line" : 715}
,
{
"name" : "onChildNotifyListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(ParamSpec, Widget)[]",
"line" : 728}
,
{
"name" : "addOnChildNotify",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(ParamSpec, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::child-notify signal is emitted for each\n child property that has\n changed on an object. The signal's detail holds the property name.\n\t \n",
"line" : 734}
,
{
"name" : "callBackChildNotify",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, GParamSpec* pspec, Widget widget)",
"line" : 749}
,
{
"name" : "onClientListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkEventClient*, Widget)[]",
"line" : 757}
,
{
"name" : "addOnClient",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkEventClient*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::client-event will be emitted when the widget's window\n receives a message (via a ClientMessage event) from another\n application.\n\t \n",
"line" : 763}
,
{
"name" : "callBackClient",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEventClient* event, Widget widget)",
"line" : 778}
,
{
"name" : "onCompositedChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Widget)[]",
"line" : 791}
,
{
"name" : "addOnCompositedChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::composited-changed signal is emitted when the composited\n status of widgets screen changes.\n See gdk_screen_is_composited().\n\t \n",
"line" : 797}
,
{
"name" : "callBackCompositedChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, Widget widget)",
"line" : 812}
,
{
"name" : "onConfigureListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkEventConfigure*, Widget)[]",
"line" : 820}
,
{
"name" : "addOnConfigure",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkEventConfigure*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::configure-event signal will be emitted when the size, position or\n stacking of the widget's window has changed.\n To receive this signal, the GdkWindow associated to the widget needs\n to enable the GDK_STRUCTURE_MASK mask. GDK will enable this mask\n automatically for all new windows.\n\t \n",
"line" : 828}
,
{
"name" : "callBackConfigure",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEventConfigure* event, Widget widget)",
"line" : 843}
,
{
"name" : "onDamageListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(Event, Widget)[]",
"line" : 856}
,
{
"name" : "addOnDamage",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(Event, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when a redirected window belonging to widget gets drawn into.\n The region\/area members of the event shows what area of the redirected\n drawable was drawn into.\n Since 2.14\n\t \n",
"line" : 863}
,
{
"name" : "callBackDamage",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEvent* event, Widget widget)",
"line" : 878}
,
{
"name" : "onDeleteListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(Event, Widget)[]",
"line" : 891}
,
{
"name" : "addOnDelete",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(Event, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::delete-event signal is emitted if a user requests that\n a toplevel window is closed. The default handler for this signal\n destroys the window. Connecting gtk_widget_hide_on_delete() to\n this signal will cause the window to be hidden instead, so that\n it can later be shown again without reconstructing it.\n\t \n",
"line" : 899}
,
{
"name" : "callBackDelete",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEvent* event, Widget widget)",
"line" : 914}
,
{
"name" : "onDestroyListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(Event, Widget)[]",
"line" : 927}
,
{
"name" : "addOnDestroy",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(Event, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::destroy-event signal is emitted when a GdkWindow is destroyed.\n You rarely get this signal, because most widgets disconnect themselves\n from their window before they destroy it, so no widget owns the\n window at destroy time.\n To receive this signal, the GdkWindow associated to the widget needs\n to enable the GDK_STRUCTURE_MASK mask. GDK will enable this mask\n automatically for all new windows.\n\t \n",
"line" : 937}
,
{
"name" : "callBackDestroy",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEvent* event, Widget widget)",
"line" : 952}
,
{
"name" : "onDirectionChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkTextDirection, Widget)[]",
"line" : 965}
,
{
"name" : "addOnDirectionChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkTextDirection, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::direction-changed signal is emitted when the text direction\n of a widget changes.\n\t \n",
"line" : 970}
,
{
"name" : "callBackDirectionChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, GtkTextDirection previousDirection, Widget widget)",
"line" : 985}
,
{
"name" : "onDragBeginListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GdkDragContext*, Widget)[]",
"line" : 993}
,
{
"name" : "addOnDragBegin",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GdkDragContext*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::drag-begin signal is emitted on the drag source when a drag is\n started. A typical reason to connect to this signal is to set up a\n custom drag icon with gtk_drag_source_set_icon().\n Note that some widgets set up a drag icon in the default handler of\n this signal, so you may have to use g_signal_connect_after() to\n override what the default handler did.\n\t \n",
"line" : 1002}
,
{
"name" : "callBackDragBegin",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, GdkDragContext* dragContext, Widget widget)",
"line" : 1017}
,
{
"name" : "onDragDataDeleteListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GdkDragContext*, Widget)[]",
"line" : 1025}
,
{
"name" : "addOnDragDataDelete",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GdkDragContext*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::drag-data-delete signal is emitted on the drag source when a drag\n with the action GDK_ACTION_MOVE is successfully completed. The signal\n handler is responsible for deleting the data that has been dropped. What\n \"delete\" means depends on the context of the drag operation.\n\t \n",
"line" : 1032}
,
{
"name" : "callBackDragDataDelete",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, GdkDragContext* dragContext, Widget widget)",
"line" : 1047}
,
{
"name" : "onDragDataGetListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GdkDragContext*, GtkSelectionData*, uint, uint, Widget)[]",
"line" : 1055}
,
{
"name" : "addOnDragDataGet",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GdkDragContext*, GtkSelectionData*, uint, uint, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::drag-data-get signal is emitted on the drag source when the drop\n site requests the data which is dragged. It is the responsibility of\n the signal handler to fill data with the data in the format which\n is indicated by info. See gtk_selection_data_set() and\n gtk_selection_data_set_text().\n\t \n",
"line" : 1063}
,
{
"name" : "callBackDragDataGet",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, GdkDragContext* dragContext, GtkSelectionData* data, uint info, uint time, Widget widget)",
"line" : 1078}
,
{
"name" : "onDragDataReceivedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GdkDragContext*, int, int, GtkSelectionData*, uint, uint, Widget)[]",
"line" : 1086}
,
{
"name" : "addOnDragDataReceived",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GdkDragContext*, int, int, GtkSelectionData*, uint, uint, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::drag-data-received signal is emitted on the drop site when the\n dragged data has been received. If the data was received in order to\n determine whether the drop will be accepted, the handler is expected\n to call gdk_drag_status() and not finish the drag.\n If the data was received in response to a \"drag-drop\" signal\n (and this is the last target to be received), the handler for this\n signal is expected to process the received data and then call\n gtk_drag_finish(), setting the success parameter depending on whether\n the data was processed successfully.\n The handler may inspect and modify drag_context->action before calling\n gtk_drag_finish(), e.g. to implement GDK_ACTION_ASK as shown in the\n $(DDOC_COMMENT example)\n\t \n",
"line" : 1101}
,
{
"name" : "callBackDragDataReceived",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, GdkDragContext* dragContext, int x, int y, GtkSelectionData* data, uint info, uint time, Widget widget)",
"line" : 1116}
,
{
"name" : "onDragDropListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkDragContext*, int, int, uint, Widget)[]",
"line" : 1124}
,
{
"name" : "addOnDragDrop",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkDragContext*, int, int, uint, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::drag-drop signal is emitted on the drop site when the user drops\n the data onto the widget. The signal handler must determine whether\n the cursor position is in a drop zone or not. If it is not in a drop\n zone, it returns FALSE and no further processing is necessary.\n Otherwise, the handler returns TRUE. In this case, the handler must\n ensure that gtk_drag_finish() is called to let the source know that\n the drop is done. The call to gtk_drag_finish() can be done either\n directly or in a \"drag-data-received\" handler which gets\n triggered by calling gtk_drag_get_data() to receive the data for one\n or more of the supported targets.\n\t \n",
"line" : 1137}
,
{
"name" : "callBackDragDrop",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkDragContext* dragContext, int x, int y, uint time, Widget widget)",
"line" : 1152}
,
{
"name" : "onDragEndListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GdkDragContext*, Widget)[]",
"line" : 1165}
,
{
"name" : "addOnDragEnd",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GdkDragContext*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::drag-end signal is emitted on the drag source when a drag is\n finished. A typical reason to connect to this signal is to undo\n things done in \"drag-begin\".\n\t \n",
"line" : 1171}
,
{
"name" : "callBackDragEnd",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, GdkDragContext* dragContext, Widget widget)",
"line" : 1186}
,
{
"name" : "onDragFailedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkDragContext*, GtkDragResult, Widget)[]",
"line" : 1194}
,
{
"name" : "addOnDragFailed",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkDragContext*, GtkDragResult, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::drag-failed signal is emitted on the drag source when a drag has\n failed. The signal handler may hook custom code to handle a failed DND\n operation based on the type of error, it returns TRUE is the failure has\n been already handled (not showing the default \"drag operation failed\"\n animation), otherwise it returns FALSE.\n Since 2.12\n\t \n",
"line" : 1203}
,
{
"name" : "callBackDragFailed",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkDragContext* dragContext, GtkDragResult result, Widget widget)",
"line" : 1218}
,
{
"name" : "onDragLeaveListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GdkDragContext*, uint, Widget)[]",
"line" : 1231}
,
{
"name" : "addOnDragLeave",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GdkDragContext*, uint, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::drag-leave signal is emitted on the drop site when the cursor\n leaves the widget. A typical reason to connect to this signal is to\n undo things done in \"drag-motion\", e.g. undo highlighting\n with gtk_drag_unhighlight()\n\t \n",
"line" : 1238}
,
{
"name" : "callBackDragLeave",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, GdkDragContext* dragContext, uint time, Widget widget)",
"line" : 1253}
,
{
"name" : "onDragMotionListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkDragContext*, int, int, uint, Widget)[]",
"line" : 1261}
,
{
"name" : "addOnDragMotion",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkDragContext*, int, int, uint, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The drag-motion signal is emitted on the drop site when the user\n moves the cursor over the widget during a drag. The signal handler\n must determine whether the cursor position is in a drop zone or not.\n If it is not in a drop zone, it returns FALSE and no further processing\n is necessary. Otherwise, the handler returns TRUE. In this case, the\n handler is responsible for providing the necessary information for\n displaying feedback to the user, by calling gdk_drag_status().\n If the decision whether the drop will be accepted or rejected can't be\n made based solely on the cursor position and the type of the data, the\n handler may inspect the dragged data by calling gtk_drag_get_data() and\n defer the gdk_drag_status() call to the \"drag-data-received\"\n handler. Note that you cannot not pass GTK_DEST_DEFAULT_DROP,\n GTK_DEST_DEFAULT_MOTION or GTK_DEST_DEFAULT_ALL to gtk_drag_dest_set()\n when using the drag-motion signal that way.\n Also note that there is no drag-enter signal. The drag receiver has to\n keep track of whether he has received any drag-motion signals since the\n last \"drag-leave\" and if not, treat the drag-motion signal as\n an \"enter\" signal. Upon an \"enter\", the handler will typically highlight\n the drop site with gtk_drag_highlight().\n $(DDOC_COMMENT example)\n\t \n",
"line" : 1284}
,
{
"name" : "callBackDragMotion",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkDragContext* dragContext, int x, int y, uint time, Widget widget)",
"line" : 1299}
,
{
"name" : "onEnterNotifyListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkEventCrossing*, Widget)[]",
"line" : 1312}
,
{
"name" : "addOnEnterNotify",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkEventCrossing*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::enter-notify-event will be emitted when the pointer enters\n the widget's window.\n To receive this signal, the GdkWindow associated to the widget needs\n to enable the GDK_ENTER_NOTIFY_MASK mask.\n This signal will be sent to the grab widget if there is one.\n\t \n",
"line" : 1320}
,
{
"name" : "callBackEnterNotify",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEventCrossing* event, Widget widget)",
"line" : 1335}
,
{
"name" : "onListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(Event, Widget)[]",
"line" : 1348}
,
{
"name" : "addOn",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(Event, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The GTK+ main loop will emit three signals for each GDK event delivered\n to a widget: one generic ::event signal, another, more specific,\n signal that matches the type of event delivered (e.g.\n \"key-press-event\") and finally a generic\n \"event-after\" signal.\n\t \n",
"line" : 1356}
,
{
"name" : "callBack",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEvent* event, Widget widget)",
"line" : 1371}
,
{
"name" : "onEventAfterListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Event, Widget)[]",
"line" : 1384}
,
{
"name" : "addOnEventAfter",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Event, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n After the emission of the \"event\" signal and (optionally)\n the second more specific signal, ::event-after will be emitted\n regardless of the previous two signals handlers return values.\n\t \n",
"line" : 1390}
,
{
"name" : "callBackEventAfter",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, GdkEvent* event, Widget widget)",
"line" : 1405}
,
{
"name" : "onExposeListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkEventExpose*, Widget)[]",
"line" : 1413}
,
{
"name" : "addOnExpose",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkEventExpose*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::expose-event signal is emitted when an area of a previously\n obscured GdkWindow is made visible and needs to be redrawn.\n GTK_NO_WINDOW widgets will get a synthesized event from their parent\n widget.\n To receive this signal, the GdkWindow associated to the widget needs\n to enable the GDK_EXPOSURE_MASK mask.\n\t \n",
"line" : 1422}
,
{
"name" : "callBackExpose",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEventExpose* event, Widget widget)",
"line" : 1437}
,
{
"name" : "onFocusListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GtkDirectionType, Widget)[]",
"line" : 1450}
,
{
"name" : "addOnFocus",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GtkDirectionType, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 1453}
,
{
"name" : "callBackFocus",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GtkDirectionType direction, Widget widget)",
"line" : 1468}
,
{
"name" : "onFocusInListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkEventFocus*, Widget)[]",
"line" : 1481}
,
{
"name" : "addOnFocusIn",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkEventFocus*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::focus-in-event signal will be emitted when the keyboard focus\n enters the widget's window.\n To receive this signal, the GdkWindow associated to the widget needs\n to enable the GDK_FOCUS_CHANGE_MASK mask.\n\t \n",
"line" : 1488}
,
{
"name" : "callBackFocusIn",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEventFocus* event, Widget widget)",
"line" : 1503}
,
{
"name" : "onFocusOutListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkEventFocus*, Widget)[]",
"line" : 1516}
,
{
"name" : "addOnFocusOut",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkEventFocus*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::focus-out-event signal will be emitted when the keyboard focus\n leaves the widget's window.\n To receive this signal, the GdkWindow associated to the widget needs\n to enable the GDK_FOCUS_CHANGE_MASK mask.\n\t \n",
"line" : 1523}
,
{
"name" : "callBackFocusOut",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEventFocus* event, Widget widget)",
"line" : 1538}
,
{
"name" : "onGrabBrokenListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(Event, Widget)[]",
"line" : 1551}
,
{
"name" : "addOnGrabBroken",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(Event, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when a pointer or keyboard grab on a window belonging\n to widget gets broken.\n On X11, this happens when the grab window becomes unviewable\n (i.e. it or one of its ancestors is unmapped), or if the same\n application grabs the pointer or keyboard again.\n Since 2.8\n\t \n",
"line" : 1560}
,
{
"name" : "callBackGrabBroken",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEvent* event, Widget widget)",
"line" : 1575}
,
{
"name" : "onGrabFocusListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Widget)[]",
"line" : 1588}
,
{
"name" : "addOnGrabFocus",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 1591}
,
{
"name" : "callBackGrabFocus",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, Widget widget)",
"line" : 1606}
,
{
"name" : "onGrabNotifyListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(int, Widget)[]",
"line" : 1614}
,
{
"name" : "addOnGrabNotify",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(int, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::grab-notify signal is emitted when a widget becomes\n shadowed by a GTK+ grab (not a pointer or keyboard grab) on\n another widget, or when it becomes unshadowed due to a grab\n being removed.\n A widget is shadowed by a gtk_grab_add() when the topmost\n grab widget in the grab stack of its window group is not\n its ancestor.\n FALSE if the widget becomes shadowed, TRUE\n  if it becomes unshadowed\n\t \n",
"line" : 1626}
,
{
"name" : "callBackGrabNotify",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, int wasGrabbed, Widget widget)",
"line" : 1641}
,
{
"name" : "onHideListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Widget)[]",
"line" : 1649}
,
{
"name" : "addOnHide",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 1652}
,
{
"name" : "callBackHide",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, Widget widget)",
"line" : 1667}
,
{
"name" : "onHierarchyChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Widget, Widget)[]",
"line" : 1675}
,
{
"name" : "addOnHierarchyChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Widget, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::hierarchy-changed signal is emitted when the\n anchored state of a widget changes. A widget is\n anchored when its toplevel\n ancestor is a GtkWindow. This signal is emitted when\n a widget changes from un-anchored to anchored or vice-versa.\n\t \n",
"line" : 1683}
,
{
"name" : "callBackHierarchyChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, GtkWidget* previousToplevel, Widget widget)",
"line" : 1698}
,
{
"name" : "onKeyPressListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkEventKey*, Widget)[]",
"line" : 1706}
,
{
"name" : "addOnKeyPress",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkEventKey*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::key-press-event signal is emitted when a key is pressed.\n To receive this signal, the GdkWindow associated to the widget needs\n to enable the GDK_KEY_PRESS_MASK mask.\n This signal will be sent to the grab widget if there is one.\n\t \n",
"line" : 1713}
,
{
"name" : "callBackKeyPress",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEventKey* event, Widget widget)",
"line" : 1728}
,
{
"name" : "onKeyReleaseListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkEventKey*, Widget)[]",
"line" : 1741}
,
{
"name" : "addOnKeyRelease",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkEventKey*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::key-release-event signal is emitted when a key is pressed.\n To receive this signal, the GdkWindow associated to the widget needs\n to enable the GDK_KEY_RELEASE_MASK mask.\n This signal will be sent to the grab widget if there is one.\n\t \n",
"line" : 1748}
,
{
"name" : "callBackKeyRelease",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEventKey* event, Widget widget)",
"line" : 1763}
,
{
"name" : "onKeynavFailedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GtkDirectionType, Widget)[]",
"line" : 1776}
,
{
"name" : "addOnKeynavFailed",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GtkDirectionType, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Gets emitted if keyboard navigation fails.\n See gtk_widget_keynav_failed() for details.\n Since 2.12\n\t \n",
"line" : 1782}
,
{
"name" : "callBackKeynavFailed",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GtkDirectionType direction, Widget widget)",
"line" : 1797}
,
{
"name" : "onLeaveNotifyListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkEventCrossing*, Widget)[]",
"line" : 1810}
,
{
"name" : "addOnLeaveNotify",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkEventCrossing*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::leave-notify-event will be emitted when the pointer leaves\n the widget's window.\n To receive this signal, the GdkWindow associated to the widget needs\n to enable the GDK_LEAVE_NOTIFY_MASK mask.\n This signal will be sent to the grab widget if there is one.\n\t \n",
"line" : 1818}
,
{
"name" : "callBackLeaveNotify",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEventCrossing* event, Widget widget)",
"line" : 1833}
,
{
"name" : "onMapListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Widget)[]",
"line" : 1846}
,
{
"name" : "addOnMap",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 1849}
,
{
"name" : "callBackMap",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, Widget widget)",
"line" : 1864}
,
{
"name" : "onMapEventListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(Event, Widget)[]",
"line" : 1872}
,
{
"name" : "addOnMapEvent",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(Event, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::map-event signal will be emitted when the widget's window is\n mapped. A window is mapped when it becomes visible on the screen.\n To receive this signal, the GdkWindow associated to the widget needs\n to enable the GDK_STRUCTURE_MASK mask. GDK will enable this mask\n automatically for all new windows.\n\t \n",
"line" : 1880}
,
{
"name" : "callBackMapEvent",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEvent* event, Widget widget)",
"line" : 1895}
,
{
"name" : "onMnemonicActivateListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(int, Widget)[]",
"line" : 1908}
,
{
"name" : "addOnMnemonicActivate",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(int, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 1911}
,
{
"name" : "callBackMnemonicActivate",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, int arg1, Widget widget)",
"line" : 1926}
,
{
"name" : "onMotionNotifyListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkEventMotion*, Widget)[]",
"line" : 1939}
,
{
"name" : "addOnMotionNotify",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkEventMotion*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::motion-notify-event signal is emitted when the pointer moves\n over the widget's GdkWindow.\n To receive this signal, the GdkWindow associated to the widget\n needs to enable the GDK_POINTER_MOTION_MASK mask.\n This signal will be sent to the grab widget if there is one.\n\t \n",
"line" : 1947}
,
{
"name" : "callBackMotionNotify",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEventMotion* event, Widget widget)",
"line" : 1963}
,
{
"name" : "onMoveFocusListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkDirectionType, Widget)[]",
"line" : 1976}
,
{
"name" : "addOnMoveFocus",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkDirectionType, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 1979}
,
{
"name" : "callBackMoveFocus",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, GtkDirectionType direction, Widget widget)",
"line" : 1994}
,
{
"name" : "onNoExposeListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkEventNoExpose*, Widget)[]",
"line" : 2002}
,
{
"name" : "addOnNoExpose",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkEventNoExpose*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::no-expose-event will be emitted when the widget's window is\n drawn as a copy of another GdkDrawable (with gdk_draw_drawable() or\n gdk_window_copy_area()) which was completely unobscured. If the source\n window was partially obscured GdkEventExpose events will be generated\n for those areas.\n\t \n",
"line" : 2010}
,
{
"name" : "callBackNoExpose",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEventNoExpose* event, Widget widget)",
"line" : 2025}
,
{
"name" : "onParentSetListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkObject*, Widget)[]",
"line" : 2038}
,
{
"name" : "addOnParentSet",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkObject*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::parent-set signal is emitted when a new parent\n has been set on a widget.\n\t \n",
"line" : 2043}
,
{
"name" : "callBackParentSet",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, GtkObject* oldParent, Widget widget)",
"line" : 2058}
,
{
"name" : "onPopupMenuListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(Widget)[]",
"line" : 2066}
,
{
"name" : "addOnPopupMenu",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n This signal gets emitted whenever a widget should pop up a context\n menu. This usually happens through the standard key binding mechanism;\n by pressing a certain key while a widget is focused, the user can cause\n the widget to pop up a menu. For example, the GtkEntry widget creates\n a menu with clipboard commands. See the section called “Implement GtkWidget::popup_menu”\n for an example of how to use this signal.\n\t \n",
"line" : 2075}
,
{
"name" : "callBackPopupMenu",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, Widget widget)",
"line" : 2090}
,
{
"name" : "onPropertyNotifyListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkEventProperty*, Widget)[]",
"line" : 2103}
,
{
"name" : "addOnPropertyNotify",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkEventProperty*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::property-notify-event signal will be emitted when a property on\n the widget's window has been changed or deleted.\n To receive this signal, the GdkWindow associated to the widget needs\n to enable the GDK_PROPERTY_CHANGE_MASK mask.\n\t \n",
"line" : 2110}
,
{
"name" : "callBackPropertyNotify",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEventProperty* event, Widget widget)",
"line" : 2125}
,
{
"name" : "onProximityInListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkEventProximity*, Widget)[]",
"line" : 2138}
,
{
"name" : "addOnProximityIn",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkEventProximity*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n To receive this signal the GdkWindow associated to the widget needs\n to enable the GDK_PROXIMITY_IN_MASK mask.\n This signal will be sent to the grab widget if there is one.\n\t \n",
"line" : 2144}
,
{
"name" : "callBackProximityIn",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEventProximity* event, Widget widget)",
"line" : 2159}
,
{
"name" : "onProximityOutListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkEventProximity*, Widget)[]",
"line" : 2172}
,
{
"name" : "addOnProximityOut",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkEventProximity*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n To receive this signal the GdkWindow associated to the widget needs\n to enable the GDK_PROXIMITY_OUT_MASK mask.\n This signal will be sent to the grab widget if there is one.\n\t \n",
"line" : 2178}
,
{
"name" : "callBackProximityOut",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEventProximity* event, Widget widget)",
"line" : 2193}
,
{
"name" : "onQueryTooltipListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(int, int, int, GtkTooltip*, Widget)[]",
"line" : 2206}
,
{
"name" : "addOnQueryTooltip",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(int, int, int, GtkTooltip*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n Emitted when \"has-tooltip\" is TRUE and the \"gtk-tooltip-timeout\"\n has expired with the cursor hovering \"above\" widget; or emitted when widget got\n focus in keyboard mode.\n Using the given coordinates, the signal handler should determine\n whether a tooltip should be shown for widget. If this is the case\n TRUE should be returned, FALSE otherwise. Note that if\n keyboard_mode is TRUE, the values of x and y are undefined and\n should not be used.\n The signal handler is free to manipulate tooltip with the therefore\n destined function calls.\n TRUE if the tooltip was trigged using the keyboard\n Since 2.12\n\t \n",
"line" : 2221}
,
{
"name" : "callBackQueryTooltip",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, int x, int y, int keyboardMode, GtkTooltip* tooltip, Widget widget)",
"line" : 2236}
,
{
"name" : "onRealizeListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Widget)[]",
"line" : 2249}
,
{
"name" : "addOnRealize",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 2252}
,
{
"name" : "callBackRealize",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, Widget widget)",
"line" : 2267}
,
{
"name" : "onScreenChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Screen, Widget)[]",
"line" : 2275}
,
{
"name" : "addOnScreenChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Screen, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::screen-changed signal gets emitted when the\n screen of a widget has changed.\n\t \n",
"line" : 2280}
,
{
"name" : "callBackScreenChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, GdkScreen* previousScreen, Widget widget)",
"line" : 2295}
,
{
"name" : "onScrollListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkEventScroll*, Widget)[]",
"line" : 2303}
,
{
"name" : "addOnScroll",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkEventScroll*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::scroll-event signal is emitted when a button in the 4 to 7\n range is pressed. Wheel mice are usually configured to generate\n button press events for buttons 4 and 5 when the wheel is turned.\n To receive this signal, the GdkWindow associated to the widget needs\n to enable the GDK_BUTTON_PRESS_MASK mask.\n This signal will be sent to the grab widget if there is one.\n\t \n",
"line" : 2312}
,
{
"name" : "callBackScroll",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEventScroll* event, Widget widget)",
"line" : 2327}
,
{
"name" : "onSelectionClearListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkEventSelection*, Widget)[]",
"line" : 2340}
,
{
"name" : "addOnSelectionClear",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkEventSelection*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::selection-clear-event signal will be emitted when the\n the widget's window has lost ownership of a selection.\n\t \n",
"line" : 2345}
,
{
"name" : "callBackSelectionClear",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEventSelection* event, Widget widget)",
"line" : 2360}
,
{
"name" : "onSelectionGetListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkSelectionData*, uint, uint, Widget)[]",
"line" : 2373}
,
{
"name" : "addOnSelectionGet",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkSelectionData*, uint, uint, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 2376}
,
{
"name" : "callBackSelectionGet",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, GtkSelectionData* data, uint info, uint time, Widget widget)",
"line" : 2391}
,
{
"name" : "onSelectionNotifyListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkEventSelection*, Widget)[]",
"line" : 2399}
,
{
"name" : "addOnSelectionNotify",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkEventSelection*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 2402}
,
{
"name" : "callBackSelectionNotify",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEventSelection* event, Widget widget)",
"line" : 2417}
,
{
"name" : "onSelectionReceivedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkSelectionData*, uint, Widget)[]",
"line" : 2430}
,
{
"name" : "addOnSelectionReceived",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkSelectionData*, uint, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 2433}
,
{
"name" : "callBackSelectionReceived",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, GtkSelectionData* data, uint time, Widget widget)",
"line" : 2448}
,
{
"name" : "onSelectionRequestListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkEventSelection*, Widget)[]",
"line" : 2456}
,
{
"name" : "addOnSelectionRequest",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkEventSelection*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::selection-request-event signal will be emitted when\n another client requests ownership of the selection owned by\n the widget's window.\n\t \n",
"line" : 2462}
,
{
"name" : "callBackSelectionRequest",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEventSelection* event, Widget widget)",
"line" : 2477}
,
{
"name" : "onShowListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Widget)[]",
"line" : 2490}
,
{
"name" : "addOnShow",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 2493}
,
{
"name" : "callBackShow",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, Widget widget)",
"line" : 2508}
,
{
"name" : "onShowHelpListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GtkWidgetHelpType, Widget)[]",
"line" : 2516}
,
{
"name" : "addOnShowHelp",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GtkWidgetHelpType, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 2519}
,
{
"name" : "callBackShowHelp",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GtkWidgetHelpType helpType, Widget widget)",
"line" : 2534}
,
{
"name" : "onSizeAllocateListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkAllocation*, Widget)[]",
"line" : 2547}
,
{
"name" : "addOnSizeAllocate",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkAllocation*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 2550}
,
{
"name" : "callBackSizeAllocate",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, GtkAllocation* allocation, Widget widget)",
"line" : 2565}
,
{
"name" : "onSizeRequestListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkRequisition*, Widget)[]",
"line" : 2573}
,
{
"name" : "addOnSizeRequest",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkRequisition*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 2576}
,
{
"name" : "callBackSizeRequest",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, GtkRequisition* requisition, Widget widget)",
"line" : 2591}
,
{
"name" : "onStateChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(GtkStateType, Widget)[]",
"line" : 2599}
,
{
"name" : "addOnStateChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(GtkStateType, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::state-changed signal is emitted when the widget state changes.\n See gtk_widget_get_state().\n\t \n",
"line" : 2604}
,
{
"name" : "callBackStateChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, GtkStateType state, Widget widget)",
"line" : 2619}
,
{
"name" : "onStyleSetListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Style, Widget)[]",
"line" : 2627}
,
{
"name" : "addOnStyleSet",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Style, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::style-set signal is emitted when a new style has been set\n on a widget. Note that style-modifying functions like\n gtk_widget_modify_base() also cause this signal to be emitted.\n\t \n",
"line" : 2633}
,
{
"name" : "callBackStyleSet",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, GtkStyle* previousStyle, Widget widget)",
"line" : 2648}
,
{
"name" : "onUnmapListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Widget)[]",
"line" : 2656}
,
{
"name" : "addOnUnmap",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 2659}
,
{
"name" : "callBackUnmap",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, Widget widget)",
"line" : 2674}
,
{
"name" : "onUnmapEventListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(Event, Widget)[]",
"line" : 2682}
,
{
"name" : "addOnUnmapEvent",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(Event, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::unmap-event signal will be emitted when the widget's window is\n unmapped. A window is unmapped when it becomes invisible on the screen.\n To receive this signal, the GdkWindow associated to the widget needs\n to enable the GDK_STRUCTURE_MASK mask. GDK will enable this mask\n automatically for all new windows.\n\t \n",
"line" : 2690}
,
{
"name" : "callBackUnmapEvent",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEvent* event, Widget widget)",
"line" : 2705}
,
{
"name" : "onUnrealizeListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Widget)[]",
"line" : 2718}
,
{
"name" : "addOnUnrealize",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 2721}
,
{
"name" : "callBackUnrealize",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWidget* widgetStruct, Widget widget)",
"line" : 2736}
,
{
"name" : "onVisibilityNotifyListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkEventVisibility*, Widget)[]",
"line" : 2744}
,
{
"name" : "addOnVisibilityNotify",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkEventVisibility*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::visibility-notify-event will be emitted when the widget's window\n is obscured or unobscured.\n To receive this signal the GdkWindow associated to the widget needs\n to enable the GDK_VISIBILITY_NOTIFY_MASK mask.\n\t \n",
"line" : 2751}
,
{
"name" : "callBackVisibilityNotify",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEventVisibility* event, Widget widget)",
"line" : 2766}
,
{
"name" : "onWindowStateListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkEventWindowState*, Widget)[]",
"line" : 2779}
,
{
"name" : "addOnWindowState",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkEventWindowState*, Widget) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::window-state-event will be emitted when the state of the\n toplevel window associated to the widget changes.\n To receive this signal the GdkWindow associated to the widget\n needs to enable the GDK_STRUCTURE_MASK mask. GDK will enable\n this mask automatically for all new windows.\n\t \n",
"line" : 2787}
,
{
"name" : "callBackWindowState",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWidget* widgetStruct, GdkEventWindowState* event, Widget widget)",
"line" : 2802}
,
{
"name" : "unref",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_widget_unref has been deprecated since version 2.12 and should not be used in newly-written code. Use g_object_unref() instead.\n Inverse of gtk_widget_ref(). Equivalent to g_object_unref().\n\t \n",
"line" : 2821}
,
{
"name" : "destroy",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Destroys a widget. Equivalent to gtk_object_destroy(), except that\n you don't have to cast the widget to GtkObject. When a widget is\n destroyed, it will break any references it holds to other objects.\n If the widget is inside a container, the widget will be removed\n from the container. If the widget is a toplevel (derived from\n GtkWindow), it will be removed from the list of toplevels, and the\n reference GTK+ holds to it will be removed. Removing a\n widget from its container or the list of toplevels results in the\n widget being finalized, unless you've added additional references\n to the widget with g_object_ref().\n In most cases, only toplevel widgets (windows) require explicit\n destruction, because when you destroy a toplevel its children will\n be destroyed as well.\n\t \n",
"line" : 2842}
,
{
"name" : "destroyed",
"kind" : "function",
"protection" : "public",
"type" : "void(ref Widget widgetPointer)",
"comment" : "\n This function sets *widget_pointer to NULL if widget_pointer !=\n NULL. It's intended to be used as a callback connected to the\n \"destroy\" signal of a widget. You connect gtk_widget_destroyed()\n as a signal handler, and pass the address of your widget variable\n as user data. Then when the widget is destroyed, the variable will\n be set to NULL. Useful for example to avoid multiple copies\n of the same dialog.\n Params:\n widget = a GtkWidget\n widgetPointer = address of a variable that contains widget. [inout][transfer none]\n\t \n",
"line" : 2860}
,
{
"name" : "unparent",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n This function is only for use in widget implementations.\n Should be called by implementations of the remove method\n on GtkContainer, to dissociate a child from the container.\n\t \n",
"line" : 2875}
,
{
"name" : "show",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Flags a widget to be displayed. Any widget that isn't shown will\n not appear on the screen. If you want to show all the widgets in a\n container, it's easier to call gtk_widget_show_all() on the\n container, instead of individually showing the widgets.\n Remember that you have to show the containers containing a widget,\n in addition to the widget itself, before it will appear onscreen.\n When a toplevel container is shown, it is immediately realized and\n mapped; other shown widgets are realized and mapped when their\n toplevel container is realized and mapped.\n\t \n",
"line" : 2892}
,
{
"name" : "showNow",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Shows a widget. If the widget is an unmapped toplevel widget\n (i.e. a GtkWindow that has not yet been shown), enter the main\n loop and wait for the window to actually be mapped. Be careful;\n because the main loop is running, anything can happen during\n this function.\n\t \n",
"line" : 2905}
,
{
"name" : "hide",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Reverses the effects of gtk_widget_show(), causing the widget to be\n hidden (invisible to the user).\n\t \n",
"line" : 2915}
,
{
"name" : "showAll",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Recursively shows a widget, and any child widgets (if the widget is\n a container).\n\t \n",
"line" : 2925}
,
{
"name" : "hideAll",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Recursively hides a widget and any child widgets.\n\t \n",
"line" : 2934}
,
{
"name" : "map",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n This function is only for use in widget implementations. Causes\n a widget to be mapped if it isn't already.\n\t \n",
"line" : 2944}
,
{
"name" : "unmap",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n This function is only for use in widget implementations. Causes\n a widget to be unmapped if it's currently mapped.\n\t \n",
"line" : 2954}
,
{
"name" : "realize",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Creates the GDK (windowing system) resources associated with a\n widget. For example, widget->window will be created when a widget\n is realized. Normally realization happens implicitly; if you show\n a widget and all its parent containers, then the widget will be\n realized and mapped automatically.\n Realizing a widget requires all\n the widget's parent widgets to be realized; calling\n gtk_widget_realize() realizes the widget's parents in addition to\n widget itself. If a widget is not yet inside a toplevel window\n when you realize it, bad things will happen.\n This function is primarily used in widget implementations, and\n isn't very useful otherwise. Many times when you think you might\n need it, a better approach is to connect to a signal that will be\n called after the widget is realized automatically, such as\n GtkWidget::expose-event. Or simply g_signal_connect() to the\n GtkWidget::realize signal.\n\t \n",
"line" : 2978}
,
{
"name" : "unrealize",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n This function is only useful in widget implementations.\n Causes a widget to be unrealized (frees all GDK resources\n associated with the widget, such as widget->window).\n\t \n",
"line" : 2989}
,
{
"name" : "queueDraw",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Equivalent to calling gtk_widget_queue_draw_area() for the\n entire area of a widget.\n\t \n",
"line" : 2999}
,
{
"name" : "queueResize",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n This function is only for use in widget implementations.\n Flags a widget to have its size renegotiated; should\n be called when a widget for some reason has a new size request.\n For example, when you change the text in a GtkLabel, GtkLabel\n queues a resize to ensure there's enough space for the new text.\n\t \n",
"line" : 3012}
,
{
"name" : "queueResizeNoRedraw",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n This function works like gtk_widget_queue_resize(),\n except that the widget is not invalidated.\n Since 2.4\n\t \n",
"line" : 3023}
,
{
"name" : "draw",
"kind" : "function",
"protection" : "public",
"type" : "void(Rectangle area)",
"comment" : "\n Warning\n gtk_widget_draw is deprecated and should not be used in newly-written code.\n In GTK+ 1.2, this function would immediately render the\n region area of a widget, by invoking the virtual draw method of a\n widget. In GTK+ 2.0, the draw method is gone, and instead\n gtk_widget_draw() simply invalidates the specified region of the\n widget, then updates the invalid region of the widget immediately.\n Usually you don't want to update the region immediately for\n performance reasons, so in general gtk_widget_queue_draw_area() is\n a better choice if you want to draw a region of a widget.\n Params:\n area = area to draw\n\t \n",
"line" : 3043}
,
{
"name" : "sizeRequest",
"kind" : "function",
"protection" : "public",
"type" : "void(out GtkRequisition requisition)",
"comment" : "\n This function is typically used when implementing a GtkContainer\n subclass. Obtains the preferred size of a widget. The container\n uses this information to arrange its child widgets and decide what\n size allocations to give them with gtk_widget_size_allocate().\n You can also call this function from an application, with some\n caveats. Most notably, getting a size request requires the widget\n to be associated with a screen, because font information may be\n needed. Multihead-aware applications should keep this in mind.\n Also remember that the size request is not necessarily the size\n a widget will actually be allocated.\n See also gtk_widget_get_child_requisition().\n Params:\n requisition = a GtkRequisition to be filled in\n\t \n",
"line" : 3064}
,
{
"name" : "getChildRequisition",
"kind" : "function",
"protection" : "public",
"type" : "void(out GtkRequisition requisition)",
"comment" : "\n This function is only for use in widget implementations. Obtains\n widget->requisition, unless someone has forced a particular\n geometry on the widget (e.g. with gtk_widget_set_size_request()),\n in which case it returns that geometry instead of the widget's\n requisition.\n This function differs from gtk_widget_size_request() in that\n it retrieves the last size request value from widget->requisition,\n while gtk_widget_size_request() actually calls the \"size_request\" method\n on widget to compute the size request and fill in widget->requisition,\n and only then returns widget->requisition.\n Because this function does not call the \"size_request\" method, it\n can only be used when you know that widget->requisition is\n up-to-date, that is, gtk_widget_size_request() has been called\n since the last time a resize was queued. In general, only container\n implementations have this information; applications should use\n gtk_widget_size_request().\n Params:\n requisition = a GtkRequisition to be filled in\n\t \n",
"line" : 3090}
,
{
"name" : "sizeAllocate",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkAllocation* allocation)",
"comment" : "\n This function is only used by GtkContainer subclasses, to assign a size\n and position to their child widgets.\n Params:\n allocation = position and size to be allocated to widget\n\t \n",
"line" : 3102}
,
{
"name" : "addAccelerator",
"kind" : "function",
"protection" : "public",
"type" : "void(string accelSignal, AccelGroup accelGroup, uint accelKey, GdkModifierType accelMods, GtkAccelFlags accelFlags)",
"comment" : "\n Installs an accelerator for this widget in accel_group that causes\n accel_signal to be emitted if the accelerator is activated.\n The accel_group needs to be added to the widget's toplevel via\n gtk_window_add_accel_group(), and the signal must be of type G_RUN_ACTION.\n Accelerators added through this function are not user changeable during\n runtime. If you want to support accelerators that can be changed by the\n user, use gtk_accel_map_add_entry() and gtk_widget_set_accel_path() or\n gtk_menu_item_set_accel_path() instead.\n Params:\n accelSignal = widget signal to emit on accelerator activation\n accelGroup = accel group for this widget, added to its toplevel\n accelKey = GDK keyval of the accelerator\n accelMods = modifier key combination of the accelerator\n accelFlags = flag accelerators, e.g. GTK_ACCEL_VISIBLE\n\t \n",
"line" : 3124}
,
{
"name" : "removeAccelerator",
"kind" : "function",
"protection" : "public",
"type" : "int(AccelGroup accelGroup, uint accelKey, GdkModifierType accelMods)",
"comment" : "\n Removes an accelerator from widget, previously installed with\n gtk_widget_add_accelerator().\n Params:\n accelGroup = accel group for this widget\n accelKey = GDK keyval of the accelerator\n accelMods = modifier key combination of the accelerator\n Returns: whether an accelerator was installed and could be removed\n\t \n",
"line" : 3139}
,
{
"name" : "setAccelPath",
"kind" : "function",
"protection" : "public",
"type" : "void(string accelPath, AccelGroup accelGroup)",
"comment" : "\n Given an accelerator group, accel_group, and an accelerator path,\n accel_path, sets up an accelerator in accel_group so whenever the\n key binding that is defined for accel_path is pressed, widget\n will be activated. This removes any accelerators (for any\n accelerator group) installed by previous calls to\n gtk_widget_set_accel_path(). Associating accelerators with\n paths allows them to be modified by the user and the modifications\n to be saved for future use. (See gtk_accel_map_save().)\n This function is a low level function that would most likely\n be used by a menu creation system like GtkUIManager. If you\n use GtkUIManager, setting up accelerator paths will be done\n automatically.\n Even when you you aren't using GtkUIManager, if you only want to\n set up accelerators on menu items gtk_menu_item_set_accel_path()\n provides a somewhat more convenient interface.\n Note that accel_path string will be stored in a GQuark. Therefore, if you\n pass a static string, you can save some memory by interning it first with\n g_intern_static_string().\n Params:\n accelPath = path used to look up the accelerator. [allow-none]\n accelGroup = a GtkAccelGroup. [allow-none]\n\t \n",
"line" : 3168}
,
{
"name" : "listAccelClosures",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Lists the closures used by widget for accelerator group connections\n with gtk_accel_group_connect_by_path() or gtk_accel_group_connect().\n The closures can be used to monitor accelerator changes on widget,\n by connecting to the GtkAccelGroup::accel-changed signal of the\n GtkAccelGroup of a closure which can be found out with\n gtk_accel_group_from_accel_closure().\n Returns: a newly allocated GList of closures. [transfer container][element-type GClosure]\n\t \n",
"line" : 3183}
,
{
"name" : "canActivateAccel",
"kind" : "function",
"protection" : "public",
"type" : "int(uint signalId)",
"comment" : "\n Determines whether an accelerator that activates the signal\n identified by signal_id can currently be activated.\n This is done by emitting the \"can-activate-accel\"\n signal on widget; if the signal isn't overridden by a\n handler or in a derived widget, then the default check is\n that the widget must be sensitive, and the widget and all\n its ancestors mapped.\n Since 2.4\n Params:\n signalId = the ID of a signal installed on widget\n Returns: TRUE if the accelerator can be activated.\n\t \n",
"line" : 3207}
,
{
"name" : "event",
"kind" : "function",
"protection" : "public",
"type" : "int(Event event)",
"comment" : "\n Rarely-used function. This function is used to emit\n the event signals on a widget (those signals should never\n be emitted without using this function to do so).\n If you want to synthesize an event though, don't use this function;\n instead, use gtk_main_do_event() so the event will behave as if\n it were in the event queue. Don't synthesize expose events; instead,\n use gdk_window_invalidate_rect() to invalidate a region of the\n window.\n Params:\n event = a GdkEvent\n Returns: return from the event signal emission (TRUE if the event was handled)\n\t \n",
"line" : 3226}
,
{
"name" : "activate",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n For widgets that can be \"activated\" (buttons, menu items, etc.)\n this function activates them. Activation is what happens when you\n press Enter on a widget during key navigation. If widget isn't\n activatable, the function returns FALSE.\n Returns: TRUE if the widget was activatable\n\t \n",
"line" : 3239}
,
{
"name" : "reparent",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget newParent)",
"comment" : "\n Moves a widget from one GtkContainer to another, handling reference\n count issues to avoid destroying the widget.\n Params:\n newParent = a GtkContainer to move the widget into\n\t \n",
"line" : 3251}
,
{
"name" : "intersect",
"kind" : "function",
"protection" : "public",
"type" : "int(Rectangle area, Rectangle intersection)",
"comment" : "\n Computes the intersection of a widget's area and area, storing\n the intersection in intersection, and returns TRUE if there was\n an intersection. intersection may be NULL if you're only\n interested in whether there was an intersection.\n Params:\n area = a rectangle\n intersection = rectangle to store intersection of widget and area\n Returns: TRUE if there was an intersection\n\t \n",
"line" : 3267}
,
{
"name" : "isFocus",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines if the widget is the focus widget within its\n toplevel. (This does not mean that the HAS_FOCUS flag is\n necessarily set; HAS_FOCUS will only be set if the\n toplevel widget additionally has the global input focus.)\n Returns: TRUE if the widget is the focus widget.\n\t \n",
"line" : 3280}
,
{
"name" : "grabFocus",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Causes widget to have the keyboard focus for the GtkWindow it's\n inside. widget must be a focusable widget, such as a GtkEntry;\n something like GtkFrame won't work.\n More precisely, it must have the GTK_CAN_FOCUS flag set. Use\n gtk_widget_set_can_focus() to modify that flag.\n The widget also needs to be realized and mapped. This is indicated by the\n related signals. Grabbing the focus immediately after creating the widget\n will likely fail and cause critical warnings.\n\t \n",
"line" : 3296}
,
{
"name" : "grabDefault",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Causes widget to become the default widget. widget must have the\n GTK_CAN_DEFAULT flag set; typically you have to set this flag\n yourself by calling gtk_widget_set_can_default (widget,\n TRUE). The default widget is activated when\n the user presses Enter in a window. Default widgets must be\n activatable, that is, gtk_widget_activate() should affect them.\n\t \n",
"line" : 3310}
,
{
"name" : "setName",
"kind" : "function",
"protection" : "public",
"type" : "void(string name)",
"comment" : "\n Widgets can be named, which allows you to refer to them from a\n gtkrc file. You can apply a style to widgets with a particular name\n in the gtkrc file. See the documentation for gtkrc files (on the\n same page as the docs for GtkRcStyle).\n Note that widget names are separated by periods in paths (see\n gtk_widget_path()), so names with embedded periods may cause confusion.\n Params:\n name = name for the widget\n\t \n",
"line" : 3326}
,
{
"name" : "getName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Retrieves the name of a widget. See gtk_widget_set_name() for the\n significance of widget names.\n Returns: name of the widget. This string is owned by GTK+ and should not be modified or freed\n\t \n",
"line" : 3337}
,
{
"name" : "setState",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkStateType state)",
"comment" : "\n This function is for use in widget implementations. Sets the state\n of a widget (insensitive, prelighted, etc.) Usually you should set\n the state using wrapper functions such as gtk_widget_set_sensitive().\n Params:\n state = new state for widget\n\t \n",
"line" : 3350}
,
{
"name" : "setSensitive",
"kind" : "function",
"protection" : "public",
"type" : "void(int sensitive)",
"comment" : "\n Sets the sensitivity of a widget. A widget is sensitive if the user\n can interact with it. Insensitive widgets are \"grayed out\" and the\n user can't interact with them. Insensitive widgets are known as\n \"inactive\", \"disabled\", or \"ghosted\" in some other toolkits.\n Params:\n sensitive = TRUE to make the widget sensitive\n\t \n",
"line" : 3364}
,
{
"name" : "setParent",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget parent)",
"comment" : "\n This function is useful only when implementing subclasses of\n GtkContainer.\n Sets the container as the parent of widget, and takes care of\n some details such as updating the state and style of the child\n to reflect its new location. The opposite function is\n gtk_widget_unparent().\n Params:\n parent = parent container\n\t \n",
"line" : 3380}
,
{
"name" : "setParentWindow",
"kind" : "function",
"protection" : "public",
"type" : "void(Window parentWindow)",
"comment" : "\n Sets a non default parent window for widget.\n Params:\n parentWindow = the new parent window.\n\t \n",
"line" : 3391}
,
{
"name" : "getParentWindow",
"kind" : "function",
"protection" : "public",
"type" : "Window()",
"comment" : "\n Gets widget's parent window.\n Returns: the parent window of widget. [transfer none]\n\t \n",
"line" : 3401}
,
{
"name" : "setUposition",
"kind" : "function",
"protection" : "public",
"type" : "void(int x, int y)",
"comment" : "\n Warning\n gtk_widget_set_uposition is deprecated and should not be used in newly-written code.\n Sets the position of a widget. The funny \"u\" in the name comes from\n the \"user position\" hint specified by the X Window System, and\n exists for legacy reasons. This function doesn't work if a widget\n is inside a container; it's only really useful on GtkWindow.\n Don't use this function to center dialogs over the main application\n window; most window managers will do the centering on your behalf\n if you call gtk_window_set_transient_for(), and it's really not\n possible to get the centering to work correctly in all cases from\n application code. But if you insist, use gtk_window_set_position()\n to set GTK_WIN_POS_CENTER_ON_PARENT, don't do the centering\n manually.\n Note that although x and y can be individually unset, the position\n is not honoured unless both x and y are set.\n Params:\n x = x position; -1 to unset x; -2 to leave x unchanged\n y = y position; -1 to unset y; -2 to leave y unchanged\n\t \n",
"line" : 3432}
,
{
"name" : "setUsize",
"kind" : "function",
"protection" : "public",
"type" : "void(int width, int height)",
"comment" : "\n Warning\n gtk_widget_set_usize has been deprecated since version 2.2 and should not be used in newly-written code. Use gtk_widget_set_size_request() instead.\n Sets the minimum size of a widget; that is, the widget's size\n request will be width by height. You can use this function to\n force a widget to be either larger or smaller than it is. The\n strange \"usize\" name dates from the early days of GTK+, and derives\n from X Window System terminology. In many cases,\n gtk_window_set_default_size() is a better choice for toplevel\n windows than this function; setting the default size will still\n allow users to shrink the window. Setting the usize will force them\n to leave the window at least as large as the usize. When dealing\n with window sizes, gtk_window_set_geometry_hints() can be a useful\n function as well.\n Note the inherent danger of setting any fixed size - themes,\n translations into other languages, different fonts, and user action\n can all change the appropriate size for a given widget. So, it's\n basically impossible to hardcode a size that will always be\n correct.\n Params:\n width = minimum width, or -1 to unset\n height = minimum height, or -1 to unset\n\t \n",
"line" : 3461}
,
{
"name" : "setEvents",
"kind" : "function",
"protection" : "public",
"type" : "void(int events)",
"comment" : "\n Sets the event mask (see GdkEventMask) for a widget. The event\n mask determines which events a widget will receive. Keep in mind\n that different widgets have different default event masks, and by\n changing the event mask you may disrupt a widget's functionality,\n so be careful. This function must be called while a widget is\n unrealized. Consider gtk_widget_add_events() for widgets that are\n already realized, or if you want to preserve the existing event\n mask. This function can't be used with GTK_NO_WINDOW widgets;\n to get events on those widgets, place them inside a GtkEventBox\n and receive events on the event box.\n Params:\n events = event mask\n\t \n",
"line" : 3481}
,
{
"name" : "addEvents",
"kind" : "function",
"protection" : "public",
"type" : "void(int events)",
"comment" : "\n Adds the events in the bitfield events to the event mask for\n widget. See gtk_widget_set_events() for details.\n Params:\n events = an event mask, see GdkEventMask\n\t \n",
"line" : 3493}
,
{
"name" : "setExtensionEvents",
"kind" : "function",
"protection" : "public",
"type" : "void(GdkExtensionMode mode)",
"comment" : "\n Sets the extension events mask to mode. See GdkExtensionMode\n and gdk_input_set_extension_events().\n Params:\n mode = bitfield of extension events to receive\n\t \n",
"line" : 3505}
,
{
"name" : "getExtensionEvents",
"kind" : "function",
"protection" : "public",
"type" : "GdkExtensionMode()",
"comment" : "\n Retrieves the extension events the widget will receive; see\n gdk_input_set_extension_events().\n Returns: extension events for widget\n\t \n",
"line" : 3516}
,
{
"name" : "getToplevel",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n This function returns the topmost widget in the container hierarchy\n widget is a part of. If widget has no parent widgets, it will be\n returned as the topmost widget. No reference will be added to the\n returned widget; it should not be unreferenced.\n Note the difference in behavior vs. gtk_widget_get_ancestor();\n gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)\n would return\n NULL if widget wasn't inside a toplevel window, and if the\n window was inside a GtkWindow-derived widget which was in turn\n inside the toplevel GtkWindow. While the second case may\n seem unlikely, it actually happens when a GtkPlug is embedded\n inside a GtkSocket within the same application.\n To reliably find the toplevel GtkWindow, use\n gtk_widget_get_toplevel() and check if the TOPLEVEL flags\n is set on the result.\n $(DDOC_COMMENT example)\n Returns: the topmost ancestor of widget, or widget itself if there's no ancestor. [transfer none]\n\t \n",
"line" : 3541}
,
{
"name" : "getAncestor",
"kind" : "function",
"protection" : "public",
"type" : "Widget(GType widgetType)",
"comment" : "\n Gets the first ancestor of widget with type widget_type. For example,\n gtk_widget_get_ancestor (widget, GTK_TYPE_BOX) gets\n the first GtkBox that's an ancestor of widget. No reference will be\n added to the returned widget; it should not be unreferenced. See note\n about checking for a toplevel GtkWindow in the docs for\n gtk_widget_get_toplevel().\n Note that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor()\n considers widget to be an ancestor of itself.\n Params:\n widget = a GtkWidget\n widgetType = ancestor type\n Returns: the ancestor widget, or NULL if not found. [transfer none]\n\t \n",
"line" : 3566}
,
{
"name" : "getColormap",
"kind" : "function",
"protection" : "public",
"type" : "Colormap()",
"comment" : "\n Gets the colormap that will be used to render widget. No reference will\n be added to the returned colormap; it should not be unreferenced.\n Returns: the colormap used by widget. [transfer none]\n\t \n",
"line" : 3582}
,
{
"name" : "setColormap",
"kind" : "function",
"protection" : "public",
"type" : "void(Colormap colormap)",
"comment" : "\n Sets the colormap for the widget to the given value. Widget must not\n have been previously realized. This probably should only be used\n from an init() function (i.e. from the constructor\n for the widget).\n Params:\n colormap = a colormap\n\t \n",
"line" : 3601}
,
{
"name" : "getVisual",
"kind" : "function",
"protection" : "public",
"type" : "Visual()",
"comment" : "\n Gets the visual that will be used to render widget.\n Returns: the visual for widget. [transfer none]\n\t \n",
"line" : 3611}
,
{
"name" : "getEvents",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the event mask for the widget (a bitfield containing flags\n from the GdkEventMask enumeration). These are the events that the widget\n will receive.\n Returns: event mask for widget\n\t \n",
"line" : 3628}
,
{
"name" : "getPointer",
"kind" : "function",
"protection" : "public",
"type" : "void(out int x, out int y)",
"comment" : "\n Obtains the location of the mouse pointer in widget coordinates.\n Widget coordinates are a bit odd; for historical reasons, they are\n defined as widget->window coordinates for widgets that are not\n GTK_NO_WINDOW widgets, and are relative to widget->allocation.x,\n widget->allocation.y for widgets that are GTK_NO_WINDOW widgets.\n Params:\n x = return location for the X coordinate, or NULL. [out][allow-none]\n y = return location for the Y coordinate, or NULL. [out][allow-none]\n\t \n",
"line" : 3644}
,
{
"name" : "isAncestor",
"kind" : "function",
"protection" : "public",
"type" : "int(Widget ancestor)",
"comment" : "\n Determines whether widget is somewhere inside ancestor, possibly with\n intermediate containers.\n Params:\n ancestor = another GtkWidget\n Returns: TRUE if ancestor contains widget as a child, grandchild, great grandchild, etc.\n\t \n",
"line" : 3657}
,
{
"name" : "translateCoordinates",
"kind" : "function",
"protection" : "public",
"type" : "int(Widget destWidget, int srcX, int srcY, out int destX, out int destY)",
"comment" : "\n Translate coordinates relative to src_widget's allocation to coordinates\n relative to dest_widget's allocations. In order to perform this\n operation, both widgets must be realized, and must share a common\n toplevel.\n Params:\n destWidget = a GtkWidget\n srcX = X position relative to src_widget\n srcY = Y position relative to src_widget\n destX = location to store X position relative to dest_widget. [out]\n destY = location to store Y position relative to dest_widget. [out]\n Returns: FALSE if either widget was not realized, or there was no common ancestor. In this case, nothing is stored in *dest_x and *dest_y. Otherwise TRUE.\n\t \n",
"line" : 3676}
,
{
"name" : "hideOnDelete",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Utility function; intended to be connected to the \"delete-event\"\n signal on a GtkWindow. The function calls gtk_widget_hide() on its\n argument, then returns TRUE. If connected to ::delete-event, the\n result is that clicking the close button for a window (on the\n window frame, top right corner usually) will hide but not destroy\n the window. By default, GTK+ destroys windows when ::delete-event\n is received.\n Returns: TRUE\n\t \n",
"line" : 3692}
,
{
"name" : "setStyle",
"kind" : "function",
"protection" : "public",
"type" : "void(Style style)",
"comment" : "\n Sets the GtkStyle for a widget (widget->style). You probably don't\n want to use this function; it interacts badly with themes, because\n themes work by replacing the GtkStyle. Instead, use\n gtk_widget_modify_style().\n Params:\n style = a GtkStyle, or NULL to remove the effect of a previous\n  gtk_widget_set_style() and go back to the default style. [allow-none]\n\t \n",
"line" : 3707}
,
{
"name" : "ensureStyle",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Ensures that widget has a style (widget->style). Not a very useful\n function; most of the time, if you want the style, the widget is\n realized, and realized widgets are guaranteed to have a style\n already.\n\t \n",
"line" : 3719}
,
{
"name" : "getStyle",
"kind" : "function",
"protection" : "public",
"type" : "Style()",
"comment" : "\n Simply an accessor function that returns widget->style.\n Returns: the widget's GtkStyle. [transfer none]\n\t \n",
"line" : 3729}
,
{
"name" : "resetRcStyles",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Reset the styles of widget and all descendents, so when\n they are looked up again, they get the correct values\n for the currently loaded RC file settings.\n This function is not useful for applications.\n\t \n",
"line" : 3746}
,
{
"name" : "pushColormap",
"kind" : "function",
"protection" : "public",
"type" : "void(Colormap cmap)",
"comment" : "\n Pushes cmap onto a global stack of colormaps; the topmost\n colormap on the stack will be used to create all widgets.\n Remove cmap with gtk_widget_pop_colormap(). There's little\n reason to use this function.\n Params:\n cmap = a GdkColormap\n\t \n",
"line" : 3760}
,
{
"name" : "popColormap",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Removes a colormap pushed with gtk_widget_push_colormap().\n\t \n",
"line" : 3769}
,
{
"name" : "setDefaultColormap",
"kind" : "function",
"protection" : "public",
"type" : "void(Colormap colormap)",
"comment" : "\n Sets the default colormap to use when creating widgets.\n gtk_widget_push_colormap() is a better function to use if\n you only want to affect a few widgets, rather than all widgets.\n Params:\n colormap = a GdkColormap\n\t \n",
"line" : 3782}
,
{
"name" : "getDefaultStyle",
"kind" : "function",
"protection" : "public",
"type" : "Style()",
"comment" : "\n Returns the default style used by all widgets initially.\n Returns: the default style. This GtkStyle object is owned by GTK+ and should not be modified or freed. [transfer none]\n\t \n",
"line" : 3792}
,
{
"name" : "getDefaultColormap",
"kind" : "function",
"protection" : "public",
"type" : "Colormap()",
"comment" : "\n Obtains the default colormap used to create widgets.\n Returns: default widget colormap. [transfer none]\n\t \n",
"line" : 3807}
,
{
"name" : "getDefaultVisual",
"kind" : "function",
"protection" : "public",
"type" : "Visual()",
"comment" : "\n Obtains the visual of the default colormap. Not really useful;\n used to be useful before gdk_colormap_get_visual() existed.\n Returns: visual of the default colormap. [transfer none]\n\t \n",
"line" : 3823}
,
{
"name" : "setDirection",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkTextDirection dir)",
"comment" : "\n Sets the reading direction on a particular widget. This direction\n controls the primary direction for widgets containing text,\n and also the direction in which the children of a container are\n packed. The ability to set the direction is present in order\n so that correct localization into languages with right-to-left\n reading directions can be done. Generally, applications will\n let the default reading direction present, except for containers\n where the containers are arranged in an order that is explicitely\n visual rather than logical (such as buttons for text justification).\n If the direction is set to GTK_TEXT_DIR_NONE, then the value\n set by gtk_widget_set_default_direction() will be used.\n Params:\n dir = the new direction\n\t \n",
"line" : 3849}
,
{
"name" : "getDirection",
"kind" : "function",
"protection" : "public",
"type" : "GtkTextDirection()",
"comment" : "\n Gets the reading direction for a particular widget. See\n gtk_widget_set_direction().\n Returns: the reading direction for the widget.\n\t \n",
"line" : 3860}
,
{
"name" : "setDefaultDirection",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkTextDirection dir)",
"comment" : "\n Sets the default reading direction for widgets where the\n direction has not been explicitly set by gtk_widget_set_direction().\n Params:\n dir = the new default direction. This cannot be\n  GTK_TEXT_DIR_NONE.\n\t \n",
"line" : 3873}
,
{
"name" : "getDefaultDirection",
"kind" : "function",
"protection" : "public",
"type" : "GtkTextDirection()",
"comment" : "\n Obtains the current default reading direction. See\n gtk_widget_set_default_direction().\n Returns: the current default direction.\n\t \n",
"line" : 3884}
,
{
"name" : "shapeCombineMask",
"kind" : "function",
"protection" : "public",
"type" : "void(Bitmap shapeMask, int offsetX, int offsetY)",
"comment" : "\n Sets a shape for this widget's GDK window. This allows for\n transparent windows etc., see gdk_window_shape_combine_mask()\n for more information.\n Params:\n shapeMask = shape to be added, or NULL to remove an existing shape. [allow-none]\n offsetX = X position of shape mask with respect to window\n offsetY = Y position of shape mask with respect to window\n\t \n",
"line" : 3899}
,
{
"name" : "inputShapeCombineMask",
"kind" : "function",
"protection" : "public",
"type" : "void(Bitmap shapeMask, int offsetX, int offsetY)",
"comment" : "\n Sets an input shape for this widget's GDK window. This allows for\n windows which react to mouse click in a nonrectangular region, see\n gdk_window_input_shape_combine_mask() for more information.\n Since 2.10\n Params:\n shapeMask = shape to be added, or NULL to remove an existing shape. [allow-none]\n offsetX = X position of shape mask with respect to window\n offsetY = Y position of shape mask with respect to window\n\t \n",
"line" : 3915}
,
{
"name" : "path",
"kind" : "function",
"protection" : "public",
"type" : "void(out uint pathLength, out string path, out string pathReversed)",
"comment" : "\n Obtains the full path to widget. The path is simply the name of a\n widget and all its parents in the container hierarchy, separated by\n periods. The name of a widget comes from\n gtk_widget_get_name(). Paths are used to apply styles to a widget\n in gtkrc configuration files. Widget names are the type of the\n widget by default (e.g. \"GtkButton\") or can be set to an\n application-specific value with gtk_widget_set_name(). By setting\n the name of a widget, you allow users or theme authors to apply\n styles to that specific widget in their gtkrc\n file. path_reversed_p fills in the path in reverse order,\n i.e. starting with widget's name instead of starting with the name\n of widget's outermost ancestor.\n Params:\n pathLength = location to store length of the path, or NULL. [out][allow-none]\n path = location to store allocated path string, or NULL. [out][allow-none]\n pathReversed = location to store allocated reverse path string, or NULL. [out][allow-none]\n\t \n",
"line" : 3939}
,
{
"name" : "classPath",
"kind" : "function",
"protection" : "public",
"type" : "void(out uint pathLength, out string path, out string pathReversed)",
"comment" : "\n Same as gtk_widget_path(), but always uses the name of a widget's type,\n never uses a custom name set with gtk_widget_set_name().\n Params:\n pathLength = location to store the length of the class path, or NULL. [out][allow-none]\n path = location to store the class path as an allocated string, or NULL. [out][allow-none]\n pathReversed = location to store the reverse class path as an allocated\n  string, or NULL. [out][allow-none]\n\t \n",
"line" : 3960}
,
{
"name" : "getCompositeName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Obtains the composite name of a widget.\n Returns: the composite name of widget, or NULL if widget is not a composite child. The string should be freed when it is no longer needed.\n\t \n",
"line" : 3976}
,
{
"name" : "modifyStyle",
"kind" : "function",
"protection" : "public",
"type" : "void(RcStyle style)",
"comment" : "\n Modifies style values on the widget. Modifications made using this\n technique take precedence over style values set via an RC file,\n however, they will be overriden if a style is explicitely set on\n the widget using gtk_widget_set_style(). The GtkRcStyle structure\n is designed so each field can either be set or unset, so it is\n possible, using this function, to modify some style values and\n leave the others unchanged.\n Note that modifications made with this function are not cumulative\n with previous calls to gtk_widget_modify_style() or with such\n functions as gtk_widget_modify_fg(). If you wish to retain\n previous values, you must first call gtk_widget_get_modifier_style(),\n make your modifications to the returned style, then call\n gtk_widget_modify_style() with that style. On the other hand,\n if you first call gtk_widget_modify_style(), subsequent calls\n to such functions gtk_widget_modify_fg() will have a cumulative\n effect with the initial modifications.\n Params:\n style = the GtkRcStyle holding the style modifications\n\t \n",
"line" : 4002}
,
{
"name" : "getModifierStyle",
"kind" : "function",
"protection" : "public",
"type" : "RcStyle()",
"comment" : "\n Returns the current modifier style for the widget. (As set by\n gtk_widget_modify_style().) If no style has previously set, a new\n GtkRcStyle will be created with all values unset, and set as the\n modifier style for the widget. If you make changes to this rc\n style, you must call gtk_widget_modify_style(), passing in the\n returned rc style, to make sure that your changes take effect.\n Caution: passing the style back to gtk_widget_modify_style() will\n normally end up destroying it, because gtk_widget_modify_style() copies\n the passed-in style and sets the copy as the new modifier style,\n thus dropping any reference to the old modifier style. Add a reference\n to the modifier style if you want to keep it alive.\n Returns: the modifier style for the widget. This rc style is owned by the widget. If you want to keep a pointer to value this around, you must add a refcount using g_object_ref(). [transfer none]\n\t \n",
"line" : 4022}
,
{
"name" : "modifyFg",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkStateType state, Color color)",
"comment" : "\n Sets the foreground color for a widget in a particular state.\n All other style values are left untouched. See also\n gtk_widget_modify_style().\n Params:\n state = the state for which to set the foreground color\n color = the color to assign (does not need to be allocated),\n  or NULL to undo the effect of previous calls to\n  of gtk_widget_modify_fg(). [allow-none]\n\t \n",
"line" : 4043}
,
{
"name" : "modifyBg",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkStateType state, Color color)",
"comment" : "\n Sets the background color for a widget in a particular state.\n All other style values are left untouched. See also\n gtk_widget_modify_style().\n Note that \"no window\" widgets (which have the GTK_NO_WINDOW flag set)\n draw on their parent container's window and thus may not draw any\n background themselves. This is the case for e.g. GtkLabel. To modify\n the background of such widgets, you have to set the background color\n on their parent; if you want to set the background of a rectangular\n area around a label, try placing the label in a GtkEventBox widget\n and setting the background color on that.\n Params:\n state = the state for which to set the background color\n color = the color to assign (does not need to be allocated),\n  or NULL to undo the effect of previous calls to\n  of gtk_widget_modify_bg(). [allow-none]\n\t \n",
"line" : 4066}
,
{
"name" : "modifyText",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkStateType state, Color color)",
"comment" : "\n Sets the text color for a widget in a particular state. All other\n style values are left untouched. The text color is the foreground\n color used along with the base color (see gtk_widget_modify_base())\n for widgets such as GtkEntry and GtkTextView. See also\n gtk_widget_modify_style().\n Params:\n state = the state for which to set the text color\n color = the color to assign (does not need to be allocated),\n  or NULL to undo the effect of previous calls to\n  of gtk_widget_modify_text(). [allow-none]\n\t \n",
"line" : 4084}
,
{
"name" : "modifyBase",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkStateType state, Color color)",
"comment" : "\n Sets the base color for a widget in a particular state.\n All other style values are left untouched. The base color\n is the background color used along with the text color\n (see gtk_widget_modify_text()) for widgets such as GtkEntry\n and GtkTextView. See also gtk_widget_modify_style().\n Note that \"no window\" widgets (which have the GTK_NO_WINDOW flag set)\n draw on their parent container's window and thus may not draw any\n background themselves. This is the case for e.g. GtkLabel. To modify\n the background of such widgets, you have to set the base color on their\n parent; if you want to set the background of a rectangular area around\n a label, try placing the label in a GtkEventBox widget and setting\n the base color on that.\n Params:\n state = the state for which to set the base color\n color = the color to assign (does not need to be allocated),\n  or NULL to undo the effect of previous calls to\n  of gtk_widget_modify_base(). [allow-none]\n\t \n",
"line" : 4109}
,
{
"name" : "modifyFont",
"kind" : "function",
"protection" : "public",
"type" : "void(PgFontDescription fontDesc)",
"comment" : "\n Sets the font to use for a widget. All other style values are left\n untouched. See also gtk_widget_modify_style().\n Params:\n fontDesc = the font description to use, or NULL to undo\n  the effect of previous calls to gtk_widget_modify_font(). [allow-none]\n\t \n",
"line" : 4122}
,
{
"name" : "modifyCursor",
"kind" : "function",
"protection" : "public",
"type" : "void(Color primary, Color secondary)",
"comment" : "\n Sets the cursor color to use in a widget, overriding the\n \"cursor-color\" and \"secondary-cursor-color\"\n style properties. All other style values are left untouched.\n See also gtk_widget_modify_style().\n Since 2.12\n Params:\n primary = the color to use for primary cursor (does not need to be\n  allocated), or NULL to undo the effect of previous calls to\n  of gtk_widget_modify_cursor().\n secondary = the color to use for secondary cursor (does not need to be\n  allocated), or NULL to undo the effect of previous calls to\n  of gtk_widget_modify_cursor().\n\t \n",
"line" : 4142}
,
{
"name" : "createPangoContext",
"kind" : "function",
"protection" : "public",
"type" : "PgContext()",
"comment" : "\n Creates a new PangoContext with the appropriate font map,\n font description, and base direction for drawing text for\n this widget. See also gtk_widget_get_pango_context().\n Returns: the new PangoContext\n\t \n",
"line" : 4154}
,
{
"name" : "getPangoContext",
"kind" : "function",
"protection" : "public",
"type" : "PgContext()",
"comment" : "\n Gets a PangoContext with the appropriate font map, font description,\n and base direction for this widget. Unlike the context returned\n by gtk_widget_create_pango_context(), this context is owned by\n the widget (it can be used until the screen for the widget changes\n or the widget is removed from its toplevel), and will be updated to\n match any changes to the widget's attributes.\n If you create and keep a PangoLayout using this context, you must\n deal with changes to the context by calling pango_layout_context_changed()\n on the layout in response to the \"style-set\" and\n \"direction-changed\" signals for the widget.\n Returns: the PangoContext for the widget. [transfer none]\n\t \n",
"line" : 4178}
,
{
"name" : "createPangoLayout",
"kind" : "function",
"protection" : "public",
"type" : "PgLayout(string text)",
"comment" : "\n Creates a new PangoLayout with the appropriate font map,\n font description, and base direction for drawing text for\n this widget.\n If you keep a PangoLayout created in this way around, in order to\n notify the layout of changes to the base direction or font of this\n widget, you must call pango_layout_context_changed() in response to\n the \"style-set\" and \"direction-changed\" signals\n for the widget.\n Params:\n text = text to set on the layout (can be NULL)\n Returns: the new PangoLayout\n\t \n",
"line" : 4202}
,
{
"name" : "renderIcon",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf(string stockId, GtkIconSize size, string detail)",
"comment" : "\n A convenience function that uses the theme engine and RC file\n settings for widget to look up stock_id and render it to\n a pixbuf. stock_id should be a stock icon ID such as\n GTK_STOCK_OPEN or GTK_STOCK_OK. size should be a size\n such as GTK_ICON_SIZE_MENU. detail should be a string that\n identifies the widget or code doing the rendering, so that\n theme engines can special-case rendering for that widget or code.\n The pixels in the returned GdkPixbuf are shared with the rest of\n the application and should not be modified. The pixbuf should be freed\n after use with g_object_unref().\n Params:\n stockId = a stock ID\n size = (type int) a stock size. A size of (GtkIconSize)-1 means\n  render at the size of the source and don't scale (if there are\n  multiple source sizes, GTK+ picks one of the available sizes).\n detail = render detail to pass to theme engine. [allow-none]\n Returns: a new pixbuf, or NULL if the stock ID wasn't known\n\t \n",
"line" : 4232}
,
{
"name" : "popCompositeChild",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Cancels the effect of a previous call to gtk_widget_push_composite_child().\n\t \n",
"line" : 4246}
,
{
"name" : "pushCompositeChild",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Makes all newly-created widgets as composite children until\n the corresponding gtk_widget_pop_composite_child() call.\n A composite child is a child that's an implementation detail of the\n container it's inside and should not be visible to people using the\n container. Composite children aren't treated differently by GTK (but\n see gtk_container_foreach() vs. gtk_container_forall()), but e.g. GUI\n builders might want to treat them in a different way.\n\t \n",
"line" : 4261}
,
{
"name" : "queueClear",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gtk_widget_queue_clear has been deprecated since version 2.2 and should not be used in newly-written code. Use gtk_widget_queue_draw() instead.\n This function does the same as gtk_widget_queue_draw().\n\t \n",
"line" : 4272}
,
{
"name" : "queueClearArea",
"kind" : "function",
"protection" : "public",
"type" : "void(int x, int y, int width, int height)",
"comment" : "\n Warning\n gtk_widget_queue_clear_area has been deprecated since version 2.2 and should not be used in newly-written code. Use gtk_widget_queue_draw_area() instead.\n This function is no longer different from\n gtk_widget_queue_draw_area(), though it once was. Now it just calls\n gtk_widget_queue_draw_area(). Originally\n gtk_widget_queue_clear_area() would force a redraw of the\n background for GTK_NO_WINDOW widgets, and\n gtk_widget_queue_draw_area() would not. Now both functions ensure\n the background will be redrawn.\n Params:\n x = x coordinate of upper-left corner of rectangle to redraw\n y = y coordinate of upper-left corner of rectangle to redraw\n width = width of region to draw\n height = height of region to draw\n\t \n",
"line" : 4294}
,
{
"name" : "queueDrawArea",
"kind" : "function",
"protection" : "public",
"type" : "void(int x, int y, int width, int height)",
"comment" : "\n Invalidates the rectangular area of widget defined by x, y,\n width and height by calling gdk_window_invalidate_rect() on the\n widget's window and all its child windows. Once the main loop\n becomes idle (after the current batch of events has been processed,\n roughly), the window will receive expose events for the union of\n all regions that have been invalidated.\n Normally you would only use this function in widget\n implementations. You might also use it, or\n gdk_window_invalidate_rect() directly, to schedule a redraw of a\n GtkDrawingArea or some portion thereof.\n Frequently you can just call gdk_window_invalidate_rect() or\n gdk_window_invalidate_region() instead of this function. Those\n functions will invalidate only a single window, instead of the\n widget and all its children.\n The advantage of adding to the invalidated region compared to\n simply drawing immediately is efficiency; using an invalid region\n ensures that you only have to redraw one time.\n Params:\n x = x coordinate of upper-left corner of rectangle to redraw\n y = y coordinate of upper-left corner of rectangle to redraw\n width = width of region to draw\n height = height of region to draw\n\t \n",
"line" : 4324}
,
{
"name" : "resetShapes",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Recursively resets the shape on this widget and its descendants.\n\t \n",
"line" : 4333}
,
{
"name" : "setAppPaintable",
"kind" : "function",
"protection" : "public",
"type" : "void(int appPaintable)",
"comment" : "\n Sets whether the application intends to draw on the widget in\n an \"expose-event\" handler.\n This is a hint to the widget and does not affect the behavior of\n the GTK+ core; many widgets ignore this flag entirely. For widgets\n that do pay attention to the flag, such as GtkEventBox and GtkWindow,\n the effect is to suppress default themed drawing of the widget's\n background. (Children of the widget will still be drawn.) The application\n is then entirely responsible for drawing the widget background.\n Note that the background is still drawn when the widget is mapped.\n If this is not suitable (e.g. because you want to make a transparent\n Params:\n appPaintable = TRUE if the application will paint on the widget\n\t \n",
"line" : 4353}
,
{
"name" : "setDoubleBuffered",
"kind" : "function",
"protection" : "public",
"type" : "void(int doubleBuffered)",
"comment" : "\n Widgets are double buffered by default; you can use this function\n to turn off the buffering. \"Double buffered\" simply means that\n gdk_window_begin_paint_region() and gdk_window_end_paint() are called\n automatically around expose events sent to the\n widget. gdk_window_begin_paint() diverts all drawing to a widget's\n window to an offscreen buffer, and gdk_window_end_paint() draws the\n buffer to the screen. The result is that users see the window\n update in one smooth step, and don't see individual graphics\n primitives being rendered.\n In very simple terms, double buffered widgets don't flicker,\n so you would only use this function to turn off double buffering\n if you had special needs and really knew what you were doing.\n Note: if you turn off double-buffering, you have to handle\n expose events, since even the clearing to the background color or\n pixmap will not happen automatically (as it is done in\n gdk_window_begin_paint()).\n Params:\n doubleBuffered = TRUE to double-buffer a widget\n\t \n",
"line" : 4379}
,
{
"name" : "setRedrawOnAllocate",
"kind" : "function",
"protection" : "public",
"type" : "void(int redrawOnAllocate)",
"comment" : "\n Sets whether the entire widget is queued for drawing when its size\n allocation changes. By default, this setting is TRUE and\n the entire widget is redrawn on every size change. If your widget\n leaves the upper left unchanged when made bigger, turning this\n setting off will improve performance.\n Note that for NO_WINDOW widgets setting this flag to FALSE turns\n off all allocation on resizing: the widget will not even redraw if\n its position changes; this is to allow containers that don't draw\n anything to avoid excess invalidations. If you set this flag on a\n NO_WINDOW widget that does draw on widget->window,\n you are responsible for invalidating both the old and new allocation\n of the widget when the widget is moved and responsible for invalidating\n regions newly when the widget increases size.\n Params:\n redrawOnAllocate = if TRUE, the entire widget will be redrawn\n  when it is allocated to a new size. Otherwise, only the\n  new portion of the widget will be redrawn.\n\t \n",
"line" : 4404}
,
{
"name" : "setCompositeName",
"kind" : "function",
"protection" : "public",
"type" : "void(string name)",
"comment" : "\n Sets a widgets composite name. The widget must be\n a composite child of its parent; see gtk_widget_push_composite_child().\n Params:\n name = the name to set\n\t \n",
"line" : 4416}
,
{
"name" : "setScrollAdjustments",
"kind" : "function",
"protection" : "public",
"type" : "int(Adjustment hadjustment, Adjustment vadjustment)",
"comment" : "\n For widgets that support scrolling, sets the scroll adjustments and\n returns TRUE. For widgets that don't support scrolling, does\n nothing and returns FALSE. Widgets that don't support scrolling\n can be scrolled by placing them in a GtkViewport, which does\n support scrolling.\n Params:\n hadjustment = an adjustment for horizontal scrolling, or NULL. [allow-none]\n vadjustment = an adjustment for vertical scrolling, or NULL. [allow-none]\n Returns: TRUE if the widget supports scrolling\n\t \n",
"line" : 4433}
,
{
"name" : "mnemonicActivate",
"kind" : "function",
"protection" : "public",
"type" : "int(int groupCycling)",
"comment" : "\n Emits the \"mnemonic-activate\" signal.\n The default handler for this signal activates the widget if\n group_cycling is FALSE, and just grabs the focus if group_cycling\n is TRUE.\n Params:\n groupCycling = TRUE if there are other widgets with the same mnemonic\n Returns: TRUE if the signal has been handled\n\t \n",
"line" : 4448}
,
{
"name" : "classInstallStyleProperty",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkWidgetClass* klass, ParamSpec pspec)",
"comment" : "\n Installs a style property on a widget class. The parser for the\n style property is determined by the value type of pspec.\n Params:\n klass = a GtkWidgetClass\n pspec = the GParamSpec for the property\n\t \n",
"line" : 4461}
,
{
"name" : "classInstallStylePropertyParser",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkWidgetClass* klass, ParamSpec pspec, extern (C) int function(GParamSpec*, GString*, GValue*) parser)",
"comment" : "\n Installs a style property on a widget class.\n Params:\n klass = a GtkWidgetClass\n pspec = the GParamSpec for the style property\n parser = the parser for the style property\n\t \n",
"line" : 4474}
,
{
"name" : "classFindStyleProperty",
"kind" : "function",
"protection" : "public",
"type" : "ParamSpec(GtkWidgetClass* klass, string propertyName)",
"comment" : "\n Finds a style property of a widget class by name.\n Since 2.2\n Params:\n klass = a GtkWidgetClass\n propertyName = the name of the style property to find\n Returns: the GParamSpec of the style property or NULL if class has no style property with that name. [allow-none]\n\t \n",
"line" : 4488}
,
{
"name" : "classListStyleProperties",
"kind" : "function",
"protection" : "public",
"type" : "ParamSpec[](GtkWidgetClass* klass)",
"comment" : "\n Returns all style properties of a widget class.\n Since 2.2\n Params:\n klass = a GtkWidgetClass\n Returns: an newly allocated array of GParamSpec*. The array must be freed with g_free().\n\t \n",
"line" : 4506}
,
{
"name" : "regionIntersect",
"kind" : "function",
"protection" : "public",
"type" : "Region(Region region)",
"comment" : "\n Computes the intersection of a widget's area and region, returning\n the intersection. The result may be empty, use gdk_region_empty() to\n check.\n Params:\n region = a GdkRegion, in the same coordinate system as\n  widget->allocation. That is, relative to widget->window\n  for NO_WINDOW widgets; relative to the parent window\n  of widget->window for widgets with their own window.\n Returns: A newly allocated region holding the intersection of widget and region. The coordinates of the return value are relative to widget->window for NO_WINDOW widgets, and relative to the parent window of widget->window for widgets with their own window.\n\t \n",
"line" : 4536}
,
{
"name" : "sendExpose",
"kind" : "function",
"protection" : "public",
"type" : "int(Event event)",
"comment" : "\n Very rarely-used function. This function is used to emit\n an expose event signals on a widget. This function is not\n normally used directly. The only time it is used is when\n propagating an expose event to a child NO_WINDOW widget, and\n that is normally done using gtk_container_propagate_expose().\n If you want to force an area of a window to be redrawn,\n use gdk_window_invalidate_rect() or gdk_window_invalidate_region().\n To cause the redraw to be done immediately, follow that call\n with a call to gdk_window_process_updates().\n Params:\n event = a expose GdkEvent\n Returns: return from the event signal emission (TRUE if the event was handled)\n\t \n",
"line" : 4561}
,
{
"name" : "sendFocusChange",
"kind" : "function",
"protection" : "public",
"type" : "int(Event event)",
"comment" : "\n Sends the focus change event to widget\n This function is not meant to be used by applications. The only time it\n should be used is when it is necessary for a GtkWidget to assign focus\n to a widget that is semantically owned by the first widget even though\n it's not a direct child - for instance, a search entry in a floating\n window similar to the quick search in GtkTreeView.\n Since 2.22\n Params:\n event = a GdkEvent of type GDK_FOCUS_CHANGE\n Returns: the return value from the event signal emission: TRUE if the event was handled, and FALSE otherwise\n\t \n",
"line" : 4579}
,
{
"name" : "styleGetProperty",
"kind" : "function",
"protection" : "public",
"type" : "void(string propertyName, Value value)",
"comment" : "\n Gets the value of a style property of widget.\n Params:\n propertyName = the name of a style property\n value = location to return the property value\n\t \n",
"line" : 4591}
,
{
"name" : "styleGetValist",
"kind" : "function",
"protection" : "public",
"type" : "void(string firstPropertyName, void* varArgs)",
"comment" : "\n Non-vararg variant of gtk_widget_style_get(). Used primarily by language\n bindings.\n Params:\n firstPropertyName = the name of the first property to get\n varArgs = a va_list of pairs of property names and\n  locations to return the property values, starting with the location\n  for first_property_name.\n\t \n",
"line" : 4606}
,
{
"name" : "styleAttach",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n This function attaches the widget's GtkStyle to the widget's\n GdkWindow. It is a replacement for\n widget->style = gtk_style_attach (widget->style, widget->window);\n and should only ever be called in a derived widget's \"realize\"\n implementation which does not chain up to its parent class'\n \"realize\" implementation, because one of the parent classes\n (finally GtkWidget) would attach the style itself.\n Since 2.20\n Params:\n\t \n",
"line" : 4623}
,
{
"name" : "getAccessible",
"kind" : "function",
"protection" : "public",
"type" : "ObjectAtk()",
"comment" : "\n Returns the accessible object that describes the widget to an\n assistive technology.\n If no accessibility library is loaded (i.e. no ATK implementation library is\n loaded via GTK_MODULES or via another application library,\n such as libgnome), then this AtkObject instance may be a no-op. Likewise,\n if no class-specific AtkObject implementation is available for the widget\n instance in question, it will inherit an AtkObject implementation from the\n first ancestor class for which such an implementation is defined.\n The documentation of the ATK\n library contains more information about accessible objects and their uses.\n Returns: the AtkObject associated with widget. [transfer none]\n\t \n",
"line" : 4642}
,
{
"name" : "childFocus",
"kind" : "function",
"protection" : "public",
"type" : "int(GtkDirectionType direction)",
"comment" : "\n This function is used by custom widget implementations; if you're\n writing an app, you'd use gtk_widget_grab_focus() to move the focus\n to a particular widget, and gtk_container_set_focus_chain() to\n change the focus tab order. So you may want to investigate those\n functions instead.\n gtk_widget_child_focus() is called by containers as the user moves\n around the window using keyboard shortcuts. direction indicates\n what kind of motion is taking place (up, down, left, right, tab\n forward, tab backward). gtk_widget_child_focus() emits the\n \"focus\" signal; widgets override the default handler\n for this signal in order to implement appropriate focus behavior.\n The default ::focus handler for a widget should return TRUE if\n moving in direction left the focus on a focusable location inside\n that widget, and FALSE if moving in direction moved the focus\n outside the widget. If returning TRUE, widgets normally\n call gtk_widget_grab_focus() to place the focus accordingly;\n if returning FALSE, they don't modify the current focus location.\n This function replaces gtk_container_focus() from GTK+ 1.2.\n It was necessary to check that the child was visible, sensitive,\n and focusable before calling gtk_container_focus().\n gtk_widget_child_focus() returns FALSE if the widget is not\n currently in a focusable state, so there's no need for those checks.\n Params:\n direction = direction of focus movement\n Returns: TRUE if focus ended up inside widget\n\t \n",
"line" : 4680}
,
{
"name" : "childNotify",
"kind" : "function",
"protection" : "public",
"type" : "void(string childProperty)",
"comment" : "\n Emits a \"child-notify\" signal for the\n child property child_property\n on widget.\n This is the analogue of g_object_notify() for child properties.\n Params:\n childProperty = the name of a child property installed on the\n  class of widget's parent\n\t \n",
"line" : 4695}
,
{
"name" : "freezeChildNotify",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Stops emission of \"child-notify\" signals on widget. The\n signals are queued until gtk_widget_thaw_child_notify() is called\n on widget.\n This is the analogue of g_object_freeze_notify() for child properties.\n\t \n",
"line" : 4707}
,
{
"name" : "getChildVisible",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value set with gtk_widget_set_child_visible().\n If you feel a need to use this function, your code probably\n needs reorganization.\n This function is only useful for container implementations and\n never should be called by an application.\n Returns: TRUE if the widget is mapped with the parent.\n\t \n",
"line" : 4721}
,
{
"name" : "getParent",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Returns the parent container of widget.\n Returns: the parent container of widget, or NULL. [transfer none]\n\t \n",
"line" : 4731}
,
{
"name" : "getSettings",
"kind" : "function",
"protection" : "public",
"type" : "Settings()",
"comment" : "\n Gets the settings object holding the settings (global property\n settings, RC file information, etc) used for this widget.\n Note that this function can only be called when the GtkWidget\n is attached to a toplevel, since the settings object is specific\n to a particular GdkScreen.\n Returns: the relevant GtkSettings object. [transfer none]\n\t \n",
"line" : 4750}
,
{
"name" : "getClipboard",
"kind" : "function",
"protection" : "public",
"type" : "Clipboard(void* selection)",
"comment" : "\n Returns the clipboard object for the given selection to\n be used with widget. widget must have a GdkDisplay\n associated with it, so must be attached to a toplevel\n window.\n Since 2.2\n Params:\n selection = a GdkAtom which identifies the clipboard\n  to use. GDK_SELECTION_CLIPBOARD gives the\n  default clipboard. Another common value\n  is GDK_SELECTION_PRIMARY, which gives\n  the primary X selection.\n Returns: the appropriate clipboard object. If no clipboard already exists, a new one will be created. Once a clipboard object has been created, it is persistent for all time. [transfer none]\n\t \n",
"line" : 4775}
,
{
"name" : "getDisplay",
"kind" : "function",
"protection" : "public",
"type" : "Display()",
"comment" : "\n Get the GdkDisplay for the toplevel window associated with\n this widget. This function can only be called after the widget\n has been added to a widget hierarchy with a GtkWindow at the top.\n In general, you should only create display specific\n resources when a widget has been realized, and you should\n free those resources when the widget is unrealized.\n Since 2.2\n Returns: the GdkDisplay for the toplevel for this widget. [transfer none]\n\t \n",
"line" : 4796}
,
{
"name" : "getRootWindow",
"kind" : "function",
"protection" : "public",
"type" : "Window()",
"comment" : "\n Get the root window where this widget is located. This function can\n only be called after the widget has been added to a widget\n hierarchy with GtkWindow at the top.\n The root window is useful for such purposes as creating a popup\n GdkWindow associated with the window. In general, you should only\n create display specific resources when a widget has been realized,\n and you should free those resources when the widget is unrealized.\n Since 2.2\n Returns: the GdkWindow root window for the toplevel for this widget. [transfer none]\n\t \n",
"line" : 4818}
,
{
"name" : "getScreen",
"kind" : "function",
"protection" : "public",
"type" : "Screen()",
"comment" : "\n Get the GdkScreen from the toplevel window associated with\n this widget. This function can only be called after the widget\n has been added to a widget hierarchy with a GtkWindow\n at the top.\n In general, you should only create screen specific\n resources when a widget has been realized, and you should\n free those resources when the widget is unrealized.\n Since 2.2\n Returns: the GdkScreen for the toplevel for this widget. [transfer none]\n\t \n",
"line" : 4840}
,
{
"name" : "hasScreen",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Checks whether there is a GdkScreen is associated with\n this widget. All toplevel widgets have an associated\n screen, and all widgets added into a hierarchy with a toplevel\n window at the top.\n Since 2.2\n Returns: TRUE if there is a GdkScreen associcated with the widget.\n\t \n",
"line" : 4859}
,
{
"name" : "getSizeRequest",
"kind" : "function",
"protection" : "public",
"type" : "void(out int width, out int height)",
"comment" : "\n Gets the size request that was explicitly set for the widget using\n gtk_widget_set_size_request(). A value of -1 stored in width or\n height indicates that that dimension has not been set explicitly\n and the natural requisition of the widget will be used intead. See\n gtk_widget_set_size_request(). To get the size a widget will\n actually use, call gtk_widget_size_request() instead of\n this function.\n Params:\n width = return location for width, or NULL. [out][allow-none]\n height = return location for height, or NULL. [out][allow-none]\n\t \n",
"line" : 4877}
,
{
"name" : "setChildVisible",
"kind" : "function",
"protection" : "public",
"type" : "void(int isVisible)",
"comment" : "\n Sets whether widget should be mapped along with its when its parent\n is mapped and widget has been shown with gtk_widget_show().\n The child visibility can be set for widget before it is added to\n a container with gtk_widget_set_parent(), to avoid mapping\n children unnecessary before immediately unmapping them. However\n it will be reset to its default state of TRUE when the widget\n is removed from a container.\n Note that changing the child visibility of a widget does not\n queue a resize on the widget. Most of the time, the size of\n a widget is computed from all visible children, whether or\n not they are mapped. If this is not the case, the container\n can queue a resize itself.\n This function is only useful for container implementations and\n never should be called by an application.\n Params:\n isVisible = if TRUE, widget should be mapped along with its parent.\n\t \n",
"line" : 4901}
,
{
"name" : "setSizeRequest",
"kind" : "function",
"protection" : "public",
"type" : "void(int width, int height)",
"comment" : "\n Sets the minimum size of a widget; that is, the widget's size\n request will be width by height. You can use this function to\n force a widget to be either larger or smaller than it normally\n would be.\n In most cases, gtk_window_set_default_size() is a better choice for\n toplevel windows than this function; setting the default size will\n still allow users to shrink the window. Setting the size request\n will force them to leave the window at least as large as the size\n request. When dealing with window sizes,\n gtk_window_set_geometry_hints() can be a useful function as well.\n Note the inherent danger of setting any fixed size - themes,\n translations into other languages, different fonts, and user action\n can all change the appropriate size for a given widget. So, it's\n basically impossible to hardcode a size that will always be\n correct.\n The size request of a widget is the smallest size a widget can\n accept while still functioning well and drawing itself correctly.\n However in some strange cases a widget may be allocated less than\n its requested size, and in many cases a widget may be allocated more\n space than it requested.\n If the size request in a given direction is -1 (unset), then\n the \"natural\" size request of the widget will be used instead.\n Widgets can't actually be allocated a size less than 1 by 1, but\n you can pass 0,0 to this function to mean \"as small as possible.\"\n Params:\n width = width widget should request, or -1 to unset\n height = height widget should request, or -1 to unset\n\t \n",
"line" : 4936}
,
{
"name" : "thawChildNotify",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Reverts the effect of a previous call to gtk_widget_freeze_child_notify().\n This causes all queued \"child-notify\" signals on widget to be\n emitted.\n\t \n",
"line" : 4947}
,
{
"name" : "setNoShowAll",
"kind" : "function",
"protection" : "public",
"type" : "void(int noShowAll)",
"comment" : "\n Sets the \"no-show-all\" property, which determines whether\n calls to gtk_widget_show_all() and gtk_widget_hide_all() will affect\n this widget.\n This is mostly for use in constructing widget hierarchies with externally\n controlled visibility, see GtkUIManager.\n Since 2.4\n Params:\n noShowAll = the new value for the \"no-show-all\" property\n\t \n",
"line" : 4963}
,
{
"name" : "getNoShowAll",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the current value of the GtkWidget:no-show-all property,\n which determines whether calls to gtk_widget_show_all() and\n gtk_widget_hide_all() will affect this widget.\n Since 2.4\n Returns: the current value of the \"no-show-all\" property.\n\t \n",
"line" : 4976}
,
{
"name" : "listMnemonicLabels",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Returns a newly allocated list of the widgets, normally labels, for\n which this widget is a the target of a mnemonic (see for example,\n gtk_label_set_mnemonic_widget()).\n The widgets in the list are not individually referenced. If you\n want to iterate through the list and perform actions involving\n callbacks that might destroy the widgets, you\n must call g_list_foreach (result,\n (GFunc)g_object_ref, NULL) first, and then unref all the\n widgets afterwards.\n Since 2.4\n Returns: the list of mnemonic labels; free this list with g_list_free() when you are done with it. [element-type GtkWidget][transfer container GtkWidget]\n\t \n",
"line" : 4995}
,
{
"name" : "addMnemonicLabel",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget label)",
"comment" : "\n Adds a widget to the list of mnemonic labels for\n this widget. (See gtk_widget_list_mnemonic_labels()). Note the\n list of mnemonic labels for the widget is cleared when the\n widget is destroyed, so the caller must make sure to update\n its internal state at this point as well, by using a connection\n to the \"destroy\" signal or a weak notifier.\n Since 2.4\n Params:\n label = a GtkWidget that acts as a mnemonic label for widget\n\t \n",
"line" : 5017}
,
{
"name" : "removeMnemonicLabel",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget label)",
"comment" : "\n Removes a widget from the list of mnemonic labels for\n this widget. (See gtk_widget_list_mnemonic_labels()). The widget\n must have previously been added to the list with\n gtk_widget_add_mnemonic_label().\n Since 2.4\n Params:\n label = a GtkWidget that was previously set as a mnemnic label for\n  widget with gtk_widget_add_mnemonic_label().\n\t \n",
"line" : 5033}
,
{
"name" : "getAction",
"kind" : "function",
"protection" : "public",
"type" : "Action()",
"comment" : "\n Warning\n gtk_widget_get_action has been deprecated since version 2.16 and should not be used in newly-written code. Use gtk_activatable_get_related_action() instead.\n Returns the GtkAction that widget is a proxy for.\n See also gtk_action_get_proxies().\n Since 2.10\n Returns: the action that a widget is a proxy for, or NULL, if it is not attached to an action.\n\t \n",
"line" : 5047}
,
{
"name" : "isComposited",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Whether widget can rely on having its alpha channel\n drawn correctly. On X11 this function returns whether a\n compositing manager is running for widget's screen.\n Please note that the semantics of this call will change\n in the future if used on a widget that has a composited\n window in its hierarchy (as set by gdk_window_set_composited()).\n Since 2.10\n Returns: TRUE if the widget can rely on its alpha channel being drawn correctly.\n\t \n",
"line" : 5068}
,
{
"name" : "errorBell",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Notifies the user about an input-related error on this widget.\n If the \"gtk-error-bell\" setting is TRUE, it calls\n gdk_window_beep(), otherwise it does nothing.\n Note that the effect of gdk_window_beep() can be configured in many\n ways, depending on the windowing backend and the desktop environment\n or window manager that is used.\n Since 2.12\n\t \n",
"line" : 5083}
,
{
"name" : "keynavFailed",
"kind" : "function",
"protection" : "public",
"type" : "int(GtkDirectionType direction)",
"comment" : "\n This function should be called whenever keyboard navigation within\n a single widget hits a boundary. The function emits the\n \"keynav-failed\" signal on the widget and its return\n value should be interpreted in a way similar to the return value of\n Since 2.12\n Params:\n direction = direction of focus movement\n Returns: TRUE if stopping keyboard navigation is fine, FALSE if the emitting widget should try to handle the keyboard navigation attempt in its parent container(s).\n\t \n",
"line" : 5099}
,
{
"name" : "getTooltipMarkup",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the contents of the tooltip for widget.\n Since 2.12\n Returns: the tooltip text, or NULL. You should free the returned string with g_free() when done.\n\t \n",
"line" : 5110}
,
{
"name" : "setTooltipMarkup",
"kind" : "function",
"protection" : "public",
"type" : "void(string markup)",
"comment" : "\n Sets markup as the contents of the tooltip, which is marked up with\n  the Pango text markup language.\n This function will take care of setting GtkWidget:has-tooltip to TRUE\n and of the default handler for the GtkWidget::query-tooltip signal.\n See also the GtkWidget:tooltip-markup property and\n gtk_tooltip_set_markup().\n Since 2.12\n Params:\n markup = the contents of the tooltip for widget, or NULL. [allow-none]\n\t \n",
"line" : 5127}
,
{
"name" : "getTooltipText",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the contents of the tooltip for widget.\n Since 2.12\n Returns: the tooltip text, or NULL. You should free the returned string with g_free() when done.\n\t \n",
"line" : 5138}
,
{
"name" : "setTooltipText",
"kind" : "function",
"protection" : "public",
"type" : "void(string text)",
"comment" : "\n Sets text as the contents of the tooltip. This function will take\n care of setting GtkWidget:has-tooltip to TRUE and of the default\n handler for the GtkWidget::query-tooltip signal.\n See also the GtkWidget:tooltip-text property and gtk_tooltip_set_text().\n Since 2.12\n Params:\n text = the contents of the tooltip for widget\n\t \n",
"line" : 5153}
,
{
"name" : "getTooltipWindow",
"kind" : "function",
"protection" : "public",
"type" : "GtkWindow*()",
"comment" : "\n Returns the GtkWindow of the current tooltip. This can be the\n GtkWindow created by default, or the custom tooltip window set\n using gtk_widget_set_tooltip_window().\n Since 2.12\n Returns: The GtkWindow of the current tooltip. [transfer none]\n\t \n",
"line" : 5166}
,
{
"name" : "setTooltipWindow",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkWindow* customWindow)",
"comment" : "\n Replaces the default, usually yellow, window used for displaying\n tooltips with custom_window. GTK+ will take care of showing and\n hiding custom_window at the right moment, to behave likewise as\n the default tooltip window. If custom_window is NULL, the default\n tooltip window will be used.\n If the custom window should have the default theming it needs to\n have the name \"gtk-tooltip\", see gtk_widget_set_name().\n Since 2.12\n Params:\n customWindow = a GtkWindow, or NULL. [allow-none]\n\t \n",
"line" : 5184}
,
{
"name" : "getHasTooltip",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the current value of the has-tooltip property. See\n GtkWidget:has-tooltip for more information.\n Since 2.12\n Returns: current value of has-tooltip on widget.\n\t \n",
"line" : 5196}
,
{
"name" : "setHasTooltip",
"kind" : "function",
"protection" : "public",
"type" : "void(int hasTooltip)",
"comment" : "\n Sets the has-tooltip property on widget to has_tooltip. See\n GtkWidget:has-tooltip for more information.\n Since 2.12\n Params:\n hasTooltip = whether or not widget has a tooltip.\n\t \n",
"line" : 5209}
,
{
"name" : "triggerTooltipQuery",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Triggers a tooltip query on the display where the toplevel of widget\n is located. See gtk_tooltip_trigger_tooltip_query() for more\n information.\n Since 2.12\n\t \n",
"line" : 5221}
,
{
"name" : "getSnapshot",
"kind" : "function",
"protection" : "public",
"type" : "Pixmap(Rectangle clipRect)",
"comment" : "\n Create a GdkPixmap of the contents of the widget and its children.\n Works even if the widget is obscured. The depth and visual of the\n resulting pixmap is dependent on the widget being snapshot and likely\n differs from those of a target widget displaying the pixmap.\n The function gdk_pixbuf_get_from_drawable() can be used to convert\n the pixmap to a visual independant representation.\n The snapshot area used by this function is the widget's allocation plus\n any extra space occupied by additional windows belonging to this widget\n (such as the arrows of a spin button).\n Thus, the resulting snapshot pixmap is possibly larger than the allocation.\n If clip_rect is non-NULL, the resulting pixmap is shrunken to\n match the specified clip_rect. The (x,y) coordinates of clip_rect are\n interpreted widget relative. If width or height of clip_rect are 0 or\n negative, the width or height of the resulting pixmap will be shrunken\n by the respective amount.\n For instance a clip_rect { +5, +5, -10, -10 } will\n chop off 5 pixels at each side of the snapshot pixmap.\n If non-NULL, clip_rect will contain the exact widget-relative snapshot\n coordinates upon return. A clip_rect of { -1, -1, 0, 0 }\n can be used to preserve the auto-grown snapshot area and use clip_rect\n as a pure output parameter.\n The returned pixmap can be NULL, if the resulting clip_area was empty.\n Since 2.14\n Params:\n clipRect = a GdkRectangle or NULL. [allow-none]\n Returns: GdkPixmap snapshot of the widget\n \n",
"line" : 5255}
,
{
"name" : "setAllocation",
"kind" : "function",
"protection" : "public",
"type" : "void(ref GtkAllocation allocation)",
"comment" : "\n Sets the widget's allocation. This should not be used\n directly, but from within a widget's size_allocate method.\n Since 2.18\n Params:\n allocation = a pointer to a GtkAllocation to copy from\n \n",
"line" : 5273}
,
{
"name" : "getAppPaintable",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether the application intends to draw on the widget in\n an \"expose-event\" handler.\n See gtk_widget_set_app_paintable()\n Since 2.18\n Returns: TRUE if the widget is app paintable\n \n",
"line" : 5286}
,
{
"name" : "getCanDefault",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether widget can be a default widget. See\n gtk_widget_set_can_default().\n Since 2.18\n Returns: TRUE if widget can be a default widget, FALSE otherwise\n \n",
"line" : 5298}
,
{
"name" : "setCanDefault",
"kind" : "function",
"protection" : "public",
"type" : "void(int canDefault)",
"comment" : "\n Specifies whether widget can be a default widget. See\n gtk_widget_grab_default() for details about the meaning of\n \"default\".\n Since 2.18\n Params:\n canDefault = whether or not widget can be a default widget.\n \n",
"line" : 5312}
,
{
"name" : "getCanFocus",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether widget can own the input focus. See\n gtk_widget_set_can_focus().\n Since 2.18\n Returns: TRUE if widget can own the input focus, FALSE otherwise\n \n",
"line" : 5324}
,
{
"name" : "setCanFocus",
"kind" : "function",
"protection" : "public",
"type" : "void(int canFocus)",
"comment" : "\n Specifies whether widget can own the input focus. See\n gtk_widget_grab_focus() for actually setting the input focus on a\n widget.\n Since 2.18\n Params:\n canFocus = whether or not widget can own the input focus.\n \n",
"line" : 5338}
,
{
"name" : "getDoubleBuffered",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether the widget is double buffered.\n See gtk_widget_set_double_buffered()\n Since 2.18\n Returns: TRUE if the widget is double buffered\n \n",
"line" : 5350}
,
{
"name" : "getHasWindow",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether widget has a GdkWindow of its own. See\n gtk_widget_set_has_window().\n Since 2.18\n Returns: TRUE if widget has a window, FALSE otherwise\n \n",
"line" : 5362}
,
{
"name" : "setHasWindow",
"kind" : "function",
"protection" : "public",
"type" : "void(int hasWindow)",
"comment" : "\n Specifies whether widget has a GdkWindow of its own. Note that\n all realized widgets have a non-NULL \"window\" pointer\n (gtk_widget_get_window() never returns a NULL window when a widget\n is realized), but for many of them it's actually the GdkWindow of\n one of its parent widgets. Widgets that do not create a window for\n themselves in GtkWidget::realize() must announce this by\n calling this function with has_window = FALSE.\n This function should only be called by widget implementations,\n and they should call it in their init() function.\n Since 2.18\n Params:\n hasWindow = whether or not widget has a window.\n \n",
"line" : 5382}
,
{
"name" : "getSensitive",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the widget's sensitivity (in the sense of returning\n the value that has been set using gtk_widget_set_sensitive()).\n The effective sensitivity of a widget is however determined by both its\n own and its parent widget's sensitivity. See gtk_widget_is_sensitive().\n Since 2.18\n Returns: TRUE if the widget is sensitive\n \n",
"line" : 5396}
,
{
"name" : "isSensitive",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the widget's effective sensitivity, which means\n it is sensitive itself and also its parent widget is sensntive\n Since 2.18\n Returns: TRUE if the widget is effectively sensitive\n \n",
"line" : 5408}
,
{
"name" : "getState",
"kind" : "function",
"protection" : "public",
"type" : "GtkStateType()",
"comment" : "\n Returns the widget's state. See gtk_widget_set_state().\n Since 2.18\n Returns: the state of widget.\n \n",
"line" : 5419}
,
{
"name" : "getVisible",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether the widget is visible. Note that this doesn't\n take into account whether the widget's parent is also visible\n or the widget is obscured in any way.\n See gtk_widget_set_visible().\n Since 2.18\n Returns: TRUE if the widget is visible\n \n",
"line" : 5433}
,
{
"name" : "setVisible",
"kind" : "function",
"protection" : "public",
"type" : "void(int visible)",
"comment" : "\n Sets the visibility state of widget. Note that setting this to\n TRUE doesn't mean the widget is actually viewable, see\n gtk_widget_get_visible().\n This function simply calls gtk_widget_show() or gtk_widget_hide()\n but is nicer to use when the visibility of the widget depends on\n some condition.\n Since 2.18\n Params:\n visible = whether the widget should be shown or not\n \n",
"line" : 5450}
,
{
"name" : "hasDefault",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether widget is the current default widget within its\n toplevel. See gtk_widget_set_can_default().\n Since 2.18\n Returns: TRUE if widget is the current default widget within its toplevel, FALSE otherwise\n \n",
"line" : 5462}
,
{
"name" : "hasFocus",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines if the widget has the global input focus. See\n gtk_widget_is_focus() for the difference between having the global\n input focus, and only having the focus within a toplevel.\n Since 2.18\n Returns: TRUE if the widget has the global input focus.\n \n",
"line" : 5475}
,
{
"name" : "hasGrab",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether the widget is currently grabbing events, so it\n is the only widget receiving input events (keyboard and mouse).\n See also gtk_grab_add().\n Since 2.18\n Returns: TRUE if the widget is in the grab_widgets stack\n \n",
"line" : 5488}
,
{
"name" : "hasRcStyle",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines if the widget style has been looked up through the rc mechanism.\n Since 2.20\n Returns: TRUE if the widget has been looked up through the rc mechanism, FALSE otherwise.\n \n",
"line" : 5499}
,
{
"name" : "isDrawable",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether widget can be drawn to. A widget can be drawn\n to if it is mapped and visible.\n Since 2.18\n Returns: TRUE if widget is drawable, FALSE otherwise\n \n",
"line" : 5511}
,
{
"name" : "isToplevel",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether widget is a toplevel widget. Currently only\n GtkWindow and GtkInvisible are toplevel widgets. Toplevel\n widgets have no parent widget.\n Since 2.18\n Returns: TRUE if widget is a toplevel, FALSE otherwise\n \n",
"line" : 5524}
,
{
"name" : "setWindow",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window)",
"comment" : "\n Sets a widget's window. This function should only be used in a\n widget's GtkWidget::realize() implementation. The window passed is\n usually either new window created with gdk_window_new(), or the\n window of its parent widget as returned by\n gtk_widget_get_parent_window().\n Widgets must indicate whether they will create their own GdkWindow\n by calling gtk_widget_set_has_window(). This is usually done in the\n widget's init() function.\n Since 2.18\n Params:\n window = a GdkWindow\n \n",
"line" : 5543}
,
{
"name" : "setReceivesDefault",
"kind" : "function",
"protection" : "public",
"type" : "void(int receivesDefault)",
"comment" : "\n Specifies whether widget will be treated as the default widget\n within its toplevel when it has the focus, even if another widget\n is the default.\n See gtk_widget_grab_default() for details about the meaning of\n \"default\".\n Since 2.18\n Params:\n receivesDefault = whether or not widget can be a default widget.\n \n",
"line" : 5559}
,
{
"name" : "getReceivesDefault",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether widget is alyways treated as default widget\n withing its toplevel when it has the focus, even if another widget\n is the default.\n See gtk_widget_set_receives_default().\n Since 2.18\n Returns: TRUE if widget acts as default widget when focussed, FALSE otherwise\n \n",
"line" : 5573}
,
{
"name" : "setRealized",
"kind" : "function",
"protection" : "public",
"type" : "void(int realized)",
"comment" : "\n Marks the widget as being realized.\n This function should only ever be called in a derived widget's\n \"realize\" or \"unrealize\" implementation.\n Since 2.20\n Params:\n realized = TRUE to mark the widget as realized\n \n",
"line" : 5587}
,
{
"name" : "getRealized",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether widget is realized.\n Since 2.20\n Returns: TRUE if widget is realized, FALSE otherwise\n \n",
"line" : 5598}
,
{
"name" : "setMapped",
"kind" : "function",
"protection" : "public",
"type" : "void(int mapped)",
"comment" : "\n Marks the widget as being realized.\n This function should only ever be called in a derived widget's\n \"map\" or \"unmap\" implementation.\n Since 2.20\n Params:\n mapped = TRUE to mark the widget as mapped\n \n",
"line" : 5612}
,
{
"name" : "getMapped",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Whether the widget is mapped.\n Since 2.20\n Returns: TRUE if the widget is mapped, FALSE otherwise.\n \n",
"line" : 5623}
,
{
"name" : "getRequisition",
"kind" : "function",
"protection" : "public",
"type" : "void(out GtkRequisition requisition)",
"comment" : "\n Retrieves the widget's requisition.\n This function should only be used by widget implementations in\n order to figure whether the widget's requisition has actually\n changed after some internal state change (so that they can call\n gtk_widget_queue_resize() instead of gtk_widget_queue_draw()).\n Normally, gtk_widget_size_request() should be used.\n Since 2.20\n Params:\n requisition = a pointer to a GtkRequisition to copy to. [out]\n \n",
"line" : 5640}
,
{
"name" : "requisitionCopy",
"kind" : "function",
"protection" : "public",
"type" : "GtkRequisition*(GtkRequisition* requisition)",
"comment" : "\n Copies a GtkRequisition.\n Params:\n requisition = a GtkRequisition\n Returns: a copy of requisition\n \n",
"line" : 5652}
,
{
"name" : "requisitionFree",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkRequisition* requisition)",
"comment" : "\n Frees a GtkRequisition.\n Params:\n requisition = a GtkRequisition\n \n",
"line" : 5663}
]
}
]
}
,
{
"name" : "gtk.Window",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/Window.d",
"members" : [
{
"name" : "Window",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GtkWindow as GtkBuildable\n The GtkWindow implementation of the GtkBuildable interface supports a\n custom <accel-groups> element, which supports any number of <group>\n elements representing the GtkAccelGroup objects you want to add to your\n window (synonymous with gtk_window_add_accel_group().\n $(DDOC_COMMENT example)\n \n",
"line" : 103,
"base" : "Bin",
"members" : [
{
"name" : "gtkWindow",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkWindow*",
"comment" : " the main Gtk struct \n",
"line" : 107}
,
{
"name" : "getWindowStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkWindow*()",
"line" : 110}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 117}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Window(GtkWindow* gtkWindow)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 125}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 143}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Window(string title)",
"comment" : "\n Creates a top level window with a title\n Params:\n \t\ttitle = The Window title\n\t \n",
"line" : 154}
,
{
"name" : "move",
"kind" : "function",
"protection" : "public",
"type" : "void(double x, double y)",
"comment" : "\n Move the window to an absolute position.\n just calls move(int, int).\n convinience because GdkEvent structs return the position coords as doubles\n\t \n",
"line" : 165}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[string]",
"comment" : "\n\t \n",
"line" : 172}
,
{
"name" : "onActivateDefaultListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Window)[]",
"line" : 174}
,
{
"name" : "addOnActivateDefault",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Window) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::activate-default signal is a\n keybinding signal\n which gets emitted when the user activates the default widget\n of window.\n\t \n",
"line" : 181}
,
{
"name" : "callBackActivateDefault",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWindow* windowStruct, Window window)",
"line" : 196}
,
{
"name" : "onActivateFocusListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Window)[]",
"line" : 204}
,
{
"name" : "addOnActivateFocus",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Window) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::activate-focus signal is a\n keybinding signal\n which gets emitted when the user activates the currently\n focused widget of window.\n\t \n",
"line" : 211}
,
{
"name" : "callBackActivateFocus",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWindow* windowStruct, Window window)",
"line" : 226}
,
{
"name" : "onFrameListeners",
"kind" : "variable",
"protection" : "public",
"type" : "bool delegate(GdkEvent*, Window)[]",
"line" : 234}
,
{
"name" : "addOnFrame",
"kind" : "function",
"protection" : "public",
"type" : "void(bool delegate(GdkEvent*, Window) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 237}
,
{
"name" : "callBackFrame",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) int(GtkWindow* windowStruct, GdkEvent* arg1, Window window)",
"line" : 252}
,
{
"name" : "onKeysChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Window)[]",
"line" : 265}
,
{
"name" : "addOnKeysChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Window) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::keys-changed signal gets emitted when the set of accelerators\n or mnemonics that are associated with window changes.\n\t \n",
"line" : 270}
,
{
"name" : "callBackKeysChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWindow* windowStruct, Window window)",
"line" : 285}
,
{
"name" : "onSetFocusListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Widget, Window)[]",
"line" : 293}
,
{
"name" : "addOnSetFocus",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Widget, Window) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n\t \n",
"line" : 296}
,
{
"name" : "callBackSetFocus",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GtkWindow* windowStruct, GtkWidget* widget, Window window)",
"line" : 311}
,
{
"name" : "setDefaultIconFromFile",
"kind" : "function",
"protection" : "public",
"type" : "int(string filename)",
"comment" : "\n Sets an icon to be used as fallback for windows that haven't\n had gtk_window_set_icon_list() called on them from a file\n on disk. Warns on failure if err is NULL.\n Since 2.2\n Params:\n filename = location of icon file\n Returns: TRUE if setting the icon succeeded.\n Throws: GException on failure.\n\t \n",
"line" : 330}
,
{
"name" : "setIconFromFile",
"kind" : "function",
"protection" : "public",
"type" : "int(string filename)",
"comment" : "\n Sets the icon for window.\n Warns on failure if err is NULL.\n This function is equivalent to calling gtk_window_set_icon()\n with a pixbuf created by loading the image from filename.\n Since 2.2\n Params:\n filename = location of icon file\n Returns: TRUE if setting the icon succeeded.\n Throws: GException on failure.\n\t \n",
"line" : 356}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Window(GtkWindowType type)",
"comment" : "\n Creates a new GtkWindow, which is a toplevel window that can\n contain other widgets. Nearly always, the type of the window should\n be GTK_WINDOW_TOPLEVEL. If you're implementing something like a\n popup menu from scratch (which is a bad idea, just use GtkMenu),\n you might use GTK_WINDOW_POPUP. GTK_WINDOW_POPUP is not for\n dialogs, though in some other toolkits dialogs are called \"popups\".\n In GTK+, GTK_WINDOW_POPUP means a pop-up menu or pop-up tooltip.\n On X11, popup windows are not controlled by the window manager.\n If you simply want an undecorated window (no window borders), use\n gtk_window_set_decorated(), don't use GTK_WINDOW_POPUP.\n Params:\n type = type of window\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 386}
,
{
"name" : "setTitle",
"kind" : "function",
"protection" : "public",
"type" : "void(string title)",
"comment" : "\n Sets the title of the GtkWindow. The title of a window will be\n displayed in its title bar; on the X Window System, the title bar\n is rendered by the window\n manager, so exactly how the title appears to users may vary\n according to a user's exact configuration. The title should help a\n user distinguish this window from other windows they may have\n open. A good title might include the application name and current\n document filename, for example.\n Params:\n title = title of the window\n\t \n",
"line" : 409}
,
{
"name" : "setWmclass",
"kind" : "function",
"protection" : "public",
"type" : "void(string wmclassName, string wmclassClass)",
"comment" : "\n Don't use this function. It sets the X Window System \"class\" and\n \"name\" hints for a window. According to the ICCCM, you should\n always set these to the same value for all windows in an\n application, and GTK+ sets them to that value by default, so calling\n this function is sort of pointless. However, you may want to call\n gtk_window_set_role() on each window in your application, for the\n benefit of the session manager. Setting the role allows the window\n manager to restore window positions when loading a saved session.\n Params:\n wmclassName = window name hint\n wmclassClass = window class hint\n\t \n",
"line" : 428}
,
{
"name" : "setPolicy",
"kind" : "function",
"protection" : "public",
"type" : "void(int allowShrink, int allowGrow, int autoShrink)",
"comment" : "\n Warning\n gtk_window_set_policy is deprecated and should not be used in newly-written code. Use gtk_window_set_resizable() instead.\n Changes how a toplevel window deals with its size request and user resize\n Params:\n allowShrink = whether the user can shrink the window below its size request\n allowGrow = whether the user can grow the window larger than its size request\n autoShrink = whether the window automatically snaps back to its size request\n if it's larger\n\t \n",
"line" : 444}
,
{
"name" : "setResizable",
"kind" : "function",
"protection" : "public",
"type" : "void(int resizable)",
"comment" : "\n Sets whether the user can resize a window. Windows are user resizable\n by default.\n Params:\n resizable = TRUE if the user can resize this window\n\t \n",
"line" : 456}
,
{
"name" : "getResizable",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value set by gtk_window_set_resizable().\n Returns: TRUE if the user can resize the window\n\t \n",
"line" : 466}
,
{
"name" : "addAccelGroup",
"kind" : "function",
"protection" : "public",
"type" : "void(AccelGroup accelGroup)",
"comment" : "\n Associate accel_group with window, such that calling\n gtk_accel_groups_activate() on window will activate accelerators\n in accel_group.\n Params:\n accelGroup = a GtkAccelGroup\n\t \n",
"line" : 479}
,
{
"name" : "removeAccelGroup",
"kind" : "function",
"protection" : "public",
"type" : "void(AccelGroup accelGroup)",
"comment" : "\n Reverses the effects of gtk_window_add_accel_group().\n Params:\n accelGroup = a GtkAccelGroup\n\t \n",
"line" : 490}
,
{
"name" : "activateFocus",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Activates the current focused widget within the window.\n Returns: TRUE if a widget got activated.\n\t \n",
"line" : 500}
,
{
"name" : "activateDefault",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Activates the default widget for the window, unless the current\n focused widget has been configured to receive the default action\n (see gtk_widget_set_receives_default()), in which case the\n focused widget is activated.\n Returns: TRUE if a widget got activated.\n\t \n",
"line" : 513}
,
{
"name" : "setModal",
"kind" : "function",
"protection" : "public",
"type" : "void(int modal)",
"comment" : "\n Sets a window modal or non-modal. Modal windows prevent interaction\n with other windows in the same application. To keep modal dialogs\n on top of main application windows, use\n gtk_window_set_transient_for() to make the dialog transient for the\n parent; most window managers\n will then disallow lowering the dialog below the parent.\n Params:\n modal = whether the window is modal\n\t \n",
"line" : 529}
,
{
"name" : "setDefaultSize",
"kind" : "function",
"protection" : "public",
"type" : "void(int width, int height)",
"comment" : "\n Sets the default size of a window. If the window's \"natural\" size\n (its size request) is larger than the default, the default will be\n ignored. More generally, if the default size does not obey the\n geometry hints for the window (gtk_window_set_geometry_hints() can\n be used to set these explicitly), the default size will be clamped\n to the nearest permitted size.\n Unlike gtk_widget_set_size_request(), which sets a size request for\n a widget and thus would keep users from shrinking the window, this\n function only sets the initial size, just as if the user had\n resized the window themselves. Users can still shrink the window\n again as they normally would. Setting a default size of -1 means to\n use the \"natural\" default size (the size request of the window).\n For more control over a window's initial size and how resizing works,\n investigate gtk_window_set_geometry_hints().\n For some uses, gtk_window_resize() is a more appropriate function.\n gtk_window_resize() changes the current size of the window, rather\n than the size to be used on initial display. gtk_window_resize() always\n affects the window itself, not the geometry widget.\n The default size of a window only affects the first time a window is\n shown; if a window is hidden and re-shown, it will remember the size\n it had prior to hiding, rather than using the default size.\n Windows can't actually be 0x0 in size, they must be at least 1x1, but\n passing 0 for width and height is OK, resulting in a 1x1 default size.\n Params:\n width = width in pixels, or -1 to unset the default width\n height = height in pixels, or -1 to unset the default height\n\t \n",
"line" : 563}
,
{
"name" : "setGeometryHints",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget geometryWidget, GdkGeometry* geometry, GdkWindowHints geomMask)",
"comment" : "\n This function sets up hints about how a window can be resized by\n the user. You can set a minimum and maximum size; allowed resize\n increments (e.g. for xterm, you can only resize by the size of a\n character); aspect ratios; and more. See the GdkGeometry struct.\n Params:\n geometryWidget = widget the geometry hints will be applied to\n geometry = struct containing geometry information\n geomMask = mask indicating which struct fields should be paid attention to\n\t \n",
"line" : 579}
,
{
"name" : "setGravity",
"kind" : "function",
"protection" : "public",
"type" : "void(GdkGravity gravity)",
"comment" : "\n Window gravity defines the meaning of coordinates passed to\n gtk_window_move(). See gtk_window_move() and GdkGravity for\n more details.\n The default window gravity is GDK_GRAVITY_NORTH_WEST which will\n typically \"do what you mean.\"\n Params:\n gravity = window gravity\n\t \n",
"line" : 594}
,
{
"name" : "getGravity",
"kind" : "function",
"protection" : "public",
"type" : "GdkGravity()",
"comment" : "\n Gets the value set by gtk_window_set_gravity().\n Returns: window gravity. [transfer none]\n\t \n",
"line" : 604}
,
{
"name" : "setPosition",
"kind" : "function",
"protection" : "public",
"type" : "void(GtkWindowPosition position)",
"comment" : "\n Sets a position constraint for this window. If the old or new\n constraint is GTK_WIN_POS_CENTER_ALWAYS, this will also cause\n the window to be repositioned to satisfy the new constraint.\n Params:\n position = a position constraint.\n\t \n",
"line" : 617}
,
{
"name" : "setTransientFor",
"kind" : "function",
"protection" : "public",
"type" : "void(Window parent)",
"comment" : "\n Dialog windows should be set transient for the main application\n window they were spawned from. This allows window managers to e.g. keep the\n dialog on top of the main window, or center the dialog over the\n main window. gtk_dialog_new_with_buttons() and other convenience\n functions in GTK+ will sometimes call\n gtk_window_set_transient_for() on your behalf.\n Passing NULL for parent unsets the current transient window.\n On Windows, this function puts the child window on top of the parent,\n much as the window manager would have done on X.\n Params:\n parent = parent window, or NULL. [allow-none]\n\t \n",
"line" : 636}
,
{
"name" : "setDestroyWithParent",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n If setting is TRUE, then destroying the transient parent of window\n will also destroy window itself. This is useful for dialogs that\n shouldn't persist beyond the lifetime of the main window they're\n associated with, for example.\n Params:\n setting = whether to destroy window with its transient parent\n\t \n",
"line" : 650}
,
{
"name" : "setScreen",
"kind" : "function",
"protection" : "public",
"type" : "void(Screen screen)",
"comment" : "\n Sets the GdkScreen where the window is displayed; if\n the window is already mapped, it will be unmapped, and\n then remapped on the new screen.\n Since 2.2\n Params:\n screen = a GdkScreen.\n\t \n",
"line" : 664}
,
{
"name" : "getScreen",
"kind" : "function",
"protection" : "public",
"type" : "Screen()",
"comment" : "\n Returns the GdkScreen associated with window.\n Since 2.2\n Returns: a GdkScreen. [transfer none]\n\t \n",
"line" : 675}
,
{
"name" : "isActive",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the window is part of the current active toplevel.\n (That is, the toplevel window receiving keystrokes.)\n The return value is TRUE if the window is active toplevel\n itself, but also if it is, say, a GtkPlug embedded in the active toplevel.\n You might use this function if you wanted to draw a widget\n differently in an active window from a widget in an inactive window.\n See gtk_window_has_toplevel_focus()\n Since 2.4\n Returns: TRUE if the window part of the current active window.\n\t \n",
"line" : 697}
,
{
"name" : "hasToplevelFocus",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the input focus is within this GtkWindow.\n For real toplevel windows, this is identical to gtk_window_is_active(),\n but for embedded windows, like GtkPlug, the results will differ.\n Since 2.4\n Returns: TRUE if the input focus is within this GtkWindow\n\t \n",
"line" : 710}
,
{
"name" : "listToplevels",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Returns a list of all existing toplevel windows. The widgets\n in the list are not individually referenced. If you want\n to iterate through the list and perform actions involving\n callbacks that might destroy the widgets, you must call\n g_list_foreach (result, (GFunc)g_object_ref, NULL) first, and\n then unref all the widgets afterwards.\n Returns: list of toplevel widgets. [element-type GtkWidget][transfer container]\n\t \n",
"line" : 725}
,
{
"name" : "addMnemonic",
"kind" : "function",
"protection" : "public",
"type" : "void(uint keyval, Widget target)",
"comment" : "\n Adds a mnemonic to this window.\n Params:\n keyval = the mnemonic\n target = the widget that gets activated by the mnemonic\n\t \n",
"line" : 742}
,
{
"name" : "removeMnemonic",
"kind" : "function",
"protection" : "public",
"type" : "void(uint keyval, Widget target)",
"comment" : "\n Removes a mnemonic from this window.\n Params:\n keyval = the mnemonic\n target = the widget that gets activated by the mnemonic\n\t \n",
"line" : 754}
,
{
"name" : "mnemonicActivate",
"kind" : "function",
"protection" : "public",
"type" : "int(uint keyval, GdkModifierType modifier)",
"comment" : "\n Activates the targets associated with the mnemonic.\n Params:\n keyval = the mnemonic\n modifier = the modifiers\n Returns: TRUE if the activation is done.\n\t \n",
"line" : 767}
,
{
"name" : "activateKey",
"kind" : "function",
"protection" : "public",
"type" : "int(GdkEventKey* event)",
"comment" : "\n Activates mnemonics and accelerators for this GtkWindow. This is normally\n called by the default ::key_press_event handler for toplevel windows,\n however in some cases it may be useful to call this directly when\n overriding the standard key handling for a toplevel window.\n Since 2.4\n Params:\n event = a GdkEventKey\n Returns: TRUE if a mnemonic or accelerator was found and activated.\n\t \n",
"line" : 783}
,
{
"name" : "propagateKeyEvent",
"kind" : "function",
"protection" : "public",
"type" : "int(GdkEventKey* event)",
"comment" : "\n Propagate a key press or release event to the focus widget and\n up the focus container chain until a widget handles event.\n This is normally called by the default ::key_press_event and\n ::key_release_event handlers for toplevel windows,\n however in some cases it may be useful to call this directly when\n overriding the standard key handling for a toplevel window.\n Since 2.4\n Params:\n event = a GdkEventKey\n Returns: TRUE if a widget in the focus chain handled the event.\n\t \n",
"line" : 801}
,
{
"name" : "getFocus",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Retrieves the current focused widget within the window.\n Note that this is the widget that would have the focus\n if the toplevel window focused; if the toplevel window\n is not focused then gtk_widget_has_focus (widget) will\n not be TRUE for the widget.\n Returns: the currently focused widget, or NULL if there is none. [transfer none]\n\t \n",
"line" : 815}
,
{
"name" : "setFocus",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget focus)",
"comment" : "\n If focus is not the current focus widget, and is focusable, sets\n it as the focus widget for the window. If focus is NULL, unsets\n the focus widget for this window. To set the focus to a particular\n widget in the toplevel, it is usually more convenient to use\n gtk_widget_grab_focus() instead of this function.\n Params:\n focus = widget to be the new focus widget, or NULL to unset\n any focus widget for the toplevel window. [allow-none]\n\t \n",
"line" : 836}
,
{
"name" : "getDefaultWidget",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n Returns the default widget for window. See gtk_window_set_default()\n for more details.\n Since 2.14\n Returns: the default widget, or NULL if there is none. [transfer none]\n\t \n",
"line" : 848}
,
{
"name" : "setDefault",
"kind" : "function",
"protection" : "public",
"type" : "void(Widget defaultWidget)",
"comment" : "\n The default widget is the widget that's activated when the user\n presses Enter in a dialog (for example). This function sets or\n unsets the default widget for a GtkWindow about. When setting\n (rather than unsetting) the default widget it's generally easier to\n call gtk_widget_grab_focus() on the widget. Before making a widget\n the default widget, you must set the GTK_CAN_DEFAULT flag on the\n widget you'd like to make the default using GTK_WIDGET_SET_FLAGS().\n Params:\n defaultWidget = widget to be the default, or NULL to unset the\n default widget for the toplevel. [allow-none]\n\t \n",
"line" : 871}
,
{
"name" : "present",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Presents a window to the user. This may mean raising the window\n in the stacking order, deiconifying it, moving it to the current\n desktop, and\/or giving it the keyboard focus, possibly dependent\n on the user's platform, window manager, and preferences.\n If window is hidden, this function calls gtk_widget_show()\n as well.\n This function should be used when the user tries to open a window\n that's already open. Say for example the preferences dialog is\n currently open, and the user chooses Preferences from the menu\n a second time; use gtk_window_present() to move the already-open dialog\n where the user can see it.\n If you are calling this function in response to a user interaction,\n it is preferable to use gtk_window_present_with_time().\n\t \n",
"line" : 892}
,
{
"name" : "presentWithTime",
"kind" : "function",
"protection" : "public",
"type" : "void(uint timestamp)",
"comment" : "\n Presents a window to the user in response to a user interaction.\n If you need to present a window without a timestamp, use\n gtk_window_present(). See gtk_window_present() for details.\n Since 2.8\n Params:\n timestamp = the timestamp of the user interaction (typically a\n button or key press event) which triggered this call\n\t \n",
"line" : 907}
,
{
"name" : "iconify",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Asks to iconify (i.e. minimize) the specified window. Note that\n you shouldn't assume the window is definitely iconified afterward,\n because other entities (e.g. the user or window manager) could deiconify it\n again, or there may not be a window manager in which case\n iconification isn't possible, etc. But normally the window will end\n up iconified. Just don't write code that crashes if not.\n It's permitted to call this function before showing a window,\n in which case the window will be iconified before it ever appears\n onscreen.\n You can track iconification via the \"window-state-event\" signal\n on GtkWidget.\n\t \n",
"line" : 926}
,
{
"name" : "deiconify",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Asks to deiconify (i.e. unminimize) the specified window. Note\n that you shouldn't assume the window is definitely deiconified\n afterward, because other entities (e.g. the user or window manager) could iconify it\n again before your code which assumes deiconification gets to run.\n You can track iconification via the \"window-state-event\" signal\n on GtkWidget.\n\t \n",
"line" : 940}
,
{
"name" : "stick",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Asks to stick window, which means that it will appear on all user\n desktops. Note that you shouldn't assume the window is definitely\n stuck afterward, because other entities (e.g. the user or window manager) could unstick it\n again, and some window managers do not support sticking\n windows. But normally the window will end up stuck. Just don't\n write code that crashes if not.\n It's permitted to call this function before showing a window.\n You can track stickiness via the \"window-state-event\" signal\n on GtkWidget.\n\t \n",
"line" : 957}
,
{
"name" : "unstick",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Asks to unstick window, which means that it will appear on only\n one of the user's desktops. Note that you shouldn't assume the\n window is definitely unstuck afterward, because other entities\n (e.g. the user or window\n manager) could stick it again. But normally the window will\n end up stuck. Just don't write code that crashes if not.\n You can track stickiness via the \"window-state-event\" signal\n on GtkWidget.\n\t \n",
"line" : 973}
,
{
"name" : "maximize",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Asks to maximize window, so that it becomes full-screen. Note that\n you shouldn't assume the window is definitely maximized afterward,\n because other entities (e.g. the user or window manager) could unmaximize it\n again, and not all window managers support maximization. But\n normally the window will end up maximized. Just don't write code\n that crashes if not.\n It's permitted to call this function before showing a window,\n in which case the window will be maximized when it appears onscreen\n initially.\n You can track maximization via the \"window-state-event\" signal\n on GtkWidget.\n\t \n",
"line" : 992}
,
{
"name" : "unmaximize",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Asks to unmaximize window. Note that you shouldn't assume the\n window is definitely unmaximized afterward, because other entities\n (e.g. the user or window\n manager) could maximize it again, and not all window\n managers honor requests to unmaximize. But normally the window will\n end up unmaximized. Just don't write code that crashes if not.\n You can track maximization via the \"window-state-event\" signal\n on GtkWidget.\n\t \n",
"line" : 1008}
,
{
"name" : "fullscreen",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Asks to place window in the fullscreen state. Note that you\n shouldn't assume the window is definitely full screen afterward,\n because other entities (e.g. the user or window manager) could unfullscreen it\n again, and not all window managers honor requests to fullscreen\n windows. But normally the window will end up fullscreen. Just\n don't write code that crashes if not.\n You can track the fullscreen state via the \"window-state-event\" signal\n on GtkWidget.\n Since 2.2\n\t \n",
"line" : 1025}
,
{
"name" : "unfullscreen",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Asks to toggle off the fullscreen state for window. Note that you\n shouldn't assume the window is definitely not full screen\n afterward, because other entities (e.g. the user or window manager) could fullscreen it\n again, and not all window managers honor requests to unfullscreen\n windows. But normally the window will end up restored to its normal\n state. Just don't write code that crashes if not.\n You can track the fullscreen state via the \"window-state-event\" signal\n on GtkWidget.\n Since 2.2\n\t \n",
"line" : 1042}
,
{
"name" : "setKeepAbove",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n Asks to keep window above, so that it stays on top. Note that\n you shouldn't assume the window is definitely above afterward,\n because other entities (e.g. the user or window manager) could not keep it above,\n and not all window managers support keeping windows above. But\n normally the window will end kept above. Just don't write code\n that crashes if not.\n It's permitted to call this function before showing a window,\n in which case the window will be kept above when it appears onscreen\n initially.\n You can track the above state via the \"window-state-event\" signal\n on GtkWidget.\n Note that, according to the Extended Window\n Manager Hints specification, the above state is mainly meant\n for user preferences and should not be used by applications e.g. for\n drawing attention to their dialogs.\n Since 2.4\n Params:\n setting = whether to keep window above other windows\n\t \n",
"line" : 1068}
,
{
"name" : "setKeepBelow",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n Asks to keep window below, so that it stays in bottom. Note that\n you shouldn't assume the window is definitely below afterward,\n because other entities (e.g. the user or window manager) could not keep it below,\n and not all window managers support putting windows below. But\n normally the window will be kept below. Just don't write code\n that crashes if not.\n It's permitted to call this function before showing a window,\n in which case the window will be kept below when it appears onscreen\n initially.\n You can track the below state via the \"window-state-event\" signal\n on GtkWidget.\n Note that, according to the Extended Window\n Manager Hints specification, the above state is mainly meant\n for user preferences and should not be used by applications e.g. for\n drawing attention to their dialogs.\n Since 2.4\n Params:\n setting = whether to keep window below other windows\n\t \n",
"line" : 1094}
,
{
"name" : "beginResizeDrag",
"kind" : "function",
"protection" : "public",
"type" : "void(GdkWindowEdge edge, int button, int rootX, int rootY, uint timestamp)",
"comment" : "\n Starts resizing a window. This function is used if an application\n has window resizing controls. When GDK can support it, the resize\n will be done using the standard mechanism for the window manager or windowing\n system. Otherwise, GDK will try to emulate window resizing,\n potentially not all that well, depending on the windowing system.\n Params:\n edge = position of the resize control\n button = mouse button that initiated the drag\n rootX = X position where the user clicked to initiate the drag, in root window coordinates\n rootY = Y position where the user clicked to initiate the drag\n timestamp = timestamp from the click event that initiated the drag\n\t \n",
"line" : 1113}
,
{
"name" : "beginMoveDrag",
"kind" : "function",
"protection" : "public",
"type" : "void(int button, int rootX, int rootY, uint timestamp)",
"comment" : "\n Starts moving a window. This function is used if an application has\n window movement grips. When GDK can support it, the window movement\n will be done using the standard mechanism for the window manager or windowing\n system. Otherwise, GDK will try to emulate window movement,\n potentially not all that well, depending on the windowing system.\n Params:\n button = mouse button that initiated the drag\n rootX = X position where the user clicked to initiate the drag, in root window coordinates\n rootY = Y position where the user clicked to initiate the drag\n timestamp = timestamp from the click event that initiated the drag\n\t \n",
"line" : 1131}
,
{
"name" : "setDecorated",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n By default, windows are decorated with a title bar, resize\n controls, etc. Some window\n managers allow GTK+ to disable these decorations, creating a\n borderless window. If you set the decorated property to FALSE\n using this function, GTK+ will do its best to convince the window\n manager not to decorate the window. Depending on the system, this\n function may not have any effect when called on a window that is\n already visible, so you should call it before calling gtk_window_show().\n On Windows, this function always works, since there's no window manager\n policy involved.\n Params:\n setting = TRUE to decorate the window\n\t \n",
"line" : 1151}
,
{
"name" : "setDeletable",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n By default, windows have a close button in the window frame. Some\n window managers allow GTK+ to\n disable this button. If you set the deletable property to FALSE\n using this function, GTK+ will do its best to convince the window\n manager not to show a close button. Depending on the system, this\n function may not have any effect when called on a window that is\n already visible, so you should call it before calling gtk_window_show().\n On Windows, this function always works, since there's no window manager\n policy involved.\n Since 2.10\n Params:\n setting = TRUE to decorate the window as deletable\n\t \n",
"line" : 1171}
,
{
"name" : "setFrameDimensions",
"kind" : "function",
"protection" : "public",
"type" : "void(int left, int top, int right, int bottom)",
"comment" : "\n Warning\n gtk_window_set_frame_dimensions has been deprecated since version 2.24 and should not be used in newly-written code. This function will be removed in GTK+ 3\n (Note: this is a special-purpose function intended for the framebuffer\n  port; see gtk_window_set_has_frame(). It will have no effect on the\n  window border drawn by the window manager, which is the normal\n  case when using the X Window system.)\n For windows with frames (see gtk_window_set_has_frame()) this function\n can be used to change the size of the frame border.\n Params:\n left = The width of the left border\n top = The height of the top border\n right = The width of the right border\n bottom = The height of the bottom border\n\t \n",
"line" : 1192}
,
{
"name" : "setHasFrame",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n Warning\n gtk_window_set_has_frame has been deprecated since version 2.24 and should not be used in newly-written code. This function will be removed in GTK+ 3\n (Note: this is a special-purpose function for the framebuffer port,\n  that causes GTK+ to draw its own window border. For most applications,\n  you want gtk_window_set_decorated() instead, which tells the window\n  manager whether to draw the window border.)\n If this function is called on a window with setting of TRUE, before\n it is realized or showed, it will have a \"frame\" window around\n window->window, accessible in window->frame. Using the signal\n frame_event you can receive all events targeted at the frame.\n This function is used by the linux-fb port to implement managed\n windows, but it could conceivably be used by X-programs that\n want to do their own window decorations.\n Params:\n setting = a boolean\n\t \n",
"line" : 1215}
,
{
"name" : "setMnemonicModifier",
"kind" : "function",
"protection" : "public",
"type" : "void(GdkModifierType modifier)",
"comment" : "\n Sets the mnemonic modifier for this window.\n Params:\n modifier = the modifier mask used to activate\n mnemonics on this window.\n\t \n",
"line" : 1227}
,
{
"name" : "setTypeHint",
"kind" : "function",
"protection" : "public",
"type" : "void(GdkWindowTypeHint hint)",
"comment" : "\n By setting the type hint for the window, you allow the window\n manager to decorate and handle the window in a way which is\n suitable to the function of the window in your application.\n This function should be called before the window becomes visible.\n gtk_dialog_new_with_buttons() and other convenience functions in GTK+\n will sometimes call gtk_window_set_type_hint() on your behalf.\n Params:\n hint = the window type\n\t \n",
"line" : 1243}
,
{
"name" : "setSkipTaskbarHint",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n Windows may set a hint asking the desktop environment not to display\n the window in the task bar. This function sets this hint.\n Since 2.2\n Params:\n setting = TRUE to keep this window from appearing in the task bar\n\t \n",
"line" : 1256}
,
{
"name" : "setSkipPagerHint",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n Windows may set a hint asking the desktop environment not to display\n the window in the pager. This function sets this hint.\n (A \"pager\" is any desktop navigation tool such as a workspace\n switcher that displays a thumbnail representation of the windows\n on the screen.)\n Since 2.2\n Params:\n setting = TRUE to keep this window from appearing in the pager\n\t \n",
"line" : 1272}
,
{
"name" : "setUrgencyHint",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n Windows may set a hint asking the desktop environment to draw\n the users attention to the window. This function sets this hint.\n Since 2.8\n Params:\n setting = TRUE to mark this window as urgent\n\t \n",
"line" : 1285}
,
{
"name" : "setAcceptFocus",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n Windows may set a hint asking the desktop environment not to receive\n the input focus. This function sets this hint.\n Since 2.4\n Params:\n setting = TRUE to let this window receive input focus\n\t \n",
"line" : 1298}
,
{
"name" : "setFocusOnMap",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n Windows may set a hint asking the desktop environment not to receive\n the input focus when the window is mapped. This function sets this\n hint.\n Since 2.6\n Params:\n setting = TRUE to let this window receive input focus on map\n\t \n",
"line" : 1312}
,
{
"name" : "setStartupId",
"kind" : "function",
"protection" : "public",
"type" : "void(string startupId)",
"comment" : "\n Startup notification identifiers are used by desktop environment to\n track application startup, to provide user feedback and other\n features. This function changes the corresponding property on the\n underlying GdkWindow. Normally, startup identifier is managed\n automatically and you should only use this function in special cases\n like transferring focus from other processes. You should use this\n function before calling gtk_window_present() or any equivalent\n function generating a window map event.\n This function is only useful on X11, not with other GTK+ targets.\n Since 2.12\n Params:\n startupId = a string with startup-notification identifier\n\t \n",
"line" : 1332}
,
{
"name" : "setRole",
"kind" : "function",
"protection" : "public",
"type" : "void(string role)",
"comment" : "\n This function is only useful on X11, not with other GTK+ targets.\n In combination with the window title, the window role allows a\n window manager to identify \"the\n same\" window when an application is restarted. So for example you\n might set the \"toolbox\" role on your app's toolbox window, so that\n when the user restarts their session, the window manager can put\n the toolbox back in the same place.\n If a window already has a unique title, you don't need to set the\n role, since the WM can use the title to identify the window when\n restoring the session.\n Params:\n role = unique identifier for the window to be used when restoring a session\n\t \n",
"line" : 1352}
,
{
"name" : "getDecorated",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the window has been set to have decorations\n such as a title bar via gtk_window_set_decorated().\n Returns: TRUE if the window has been set to have decorations\n\t \n",
"line" : 1363}
,
{
"name" : "getDeletable",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the window has been set to have a close button\n via gtk_window_set_deletable().\n Since 2.10\n Returns: TRUE if the window has been set to have a close button\n\t \n",
"line" : 1375}
,
{
"name" : "getDefaultIconList",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Gets the value set by gtk_window_set_default_icon_list().\n The list is a copy and should be freed with g_list_free(),\n but the pixbufs in the list have not had their reference count\n incremented.\n Returns: copy of default icon list. [element-type GdkPixbuf][transfer container]\n\t \n",
"line" : 1388}
,
{
"name" : "getDefaultIconName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns the fallback icon name for windows that has been set\n with gtk_window_set_default_icon_name(). The returned\n string is owned by GTK+ and should not be modified. It\n is only valid until the next call to\n gtk_window_set_default_icon_name().\n Since 2.16\n Returns: the fallback icon name for windows\n\t \n",
"line" : 1408}
,
{
"name" : "getDefaultSize",
"kind" : "function",
"protection" : "public",
"type" : "void(out int width, out int height)",
"comment" : "\n Gets the default size of the window. A value of -1 for the width or\n height indicates that a default size has not been explicitly set\n for that dimension, so the \"natural\" size of the window will be\n used.\n Params:\n width = location to store the default width, or NULL. [allow-none]\n height = location to store the default height, or NULL. [allow-none]\n\t \n",
"line" : 1423}
,
{
"name" : "getDestroyWithParent",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the window will be destroyed with its transient parent. See\n gtk_window_set_destroy_with_parent().\n Returns: TRUE if the window will be destroyed with its transient parent.\n\t \n",
"line" : 1434}
,
{
"name" : "getFrameDimensions",
"kind" : "function",
"protection" : "public",
"type" : "void(out int left, out int top, out int right, out int bottom)",
"comment" : "\n Warning\n gtk_window_get_frame_dimensions has been deprecated since version 2.24 and should not be used in newly-written code. This function will be removed in GTK+ 3\n (Note: this is a special-purpose function intended for the\n  framebuffer port; see gtk_window_set_has_frame(). It will not\n  return the size of the window border drawn by the window manager, which is the normal\n  case when using a windowing system. See\n  gdk_window_get_frame_extents() to get the standard window border\n  extents.)\n Retrieves the dimensions of the frame window for this toplevel.\n See gtk_window_set_has_frame(), gtk_window_set_frame_dimensions().\n Params:\n left = location to store the width of the frame at the left, or NULL. [out][allow-none]\n top = location to store the height of the frame at the top, or NULL. [out][allow-none]\n right = location to store the width of the frame at the returns, or NULL. [out][allow-none]\n bottom = location to store the height of the frame at the bottom, or NULL. [out][allow-none]\n\t \n",
"line" : 1457}
,
{
"name" : "getHasFrame",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Warning\n gtk_window_get_has_frame has been deprecated since version 2.24 and should not be used in newly-written code. This function will be removed in GTK+ 3\n Accessor for whether the window has a frame window exterior to\n window->window. Gets the value set by gtk_window_set_has_frame().\n Returns: TRUE if a frame has been added to the window via gtk_window_set_has_frame().\n\t \n",
"line" : 1470}
,
{
"name" : "getIcon",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf()",
"comment" : "\n Gets the value set by gtk_window_set_icon() (or if you've\n called gtk_window_set_icon_list(), gets the first icon in\n the icon list).\n Returns: icon for window. [transfer none]\n\t \n",
"line" : 1482}
,
{
"name" : "getIconList",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Retrieves the list of icons set by gtk_window_set_icon_list().\n The list is copied, but the reference count on each\n member won't be incremented.\n Returns: copy of window's icon list. [element-type GdkPixbuf][transfer container]\n\t \n",
"line" : 1499}
,
{
"name" : "getIconName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns the name of the themed icon for the window,\n see gtk_window_set_icon_name().\n Since 2.6\n Returns: the icon name or NULL if the window has no themed icon\n\t \n",
"line" : 1516}
,
{
"name" : "getMnemonicModifier",
"kind" : "function",
"protection" : "public",
"type" : "GdkModifierType()",
"comment" : "\n Returns the mnemonic modifier for this window. See\n gtk_window_set_mnemonic_modifier().\n Returns: the modifier mask used to activate mnemonics on this window.\n\t \n",
"line" : 1527}
,
{
"name" : "getModal",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the window is modal. See gtk_window_set_modal().\n Returns: TRUE if the window is set to be modal and establishes a grab when shown\n\t \n",
"line" : 1537}
,
{
"name" : "getPosition",
"kind" : "function",
"protection" : "public",
"type" : "void(out int rootX, out int rootY)",
"comment" : "\n This function returns the position you need to pass to\n gtk_window_move() to keep window in its current position. This\n means that the meaning of the returned value varies with window\n gravity. See gtk_window_move() for more details.\n If you haven't changed the window gravity, its gravity will be\n GDK_GRAVITY_NORTH_WEST. This means that gtk_window_get_position()\n gets the position of the top-left corner of the window manager\n frame for the window. gtk_window_move() sets the position of this\n same top-left corner.\n gtk_window_get_position() is not 100% reliable because the X Window System\n does not specify a way to obtain the geometry of the\n decorations placed on a window by the window manager.\n Thus GTK+ is using a \"best guess\" that works with most\n window managers.\n Moreover, nearly all window managers are historically broken with\n respect to their handling of window gravity. So moving a window to\n its current position as returned by gtk_window_get_position() tends\n to result in moving the window slightly. Window managers are\n slowly getting better over time.\n If a window has gravity GDK_GRAVITY_STATIC the window manager\n frame is not relevant, and thus gtk_window_get_position() will\n always produce accurate results. However you can't use static\n gravity to do things like place a window in a corner of the screen,\n because static gravity ignores the window manager decorations.\n If you are saving and restoring your application's window\n positions, you should know that it's impossible for applications to\n do this without getting it somewhat wrong because applications do\n not have sufficient knowledge of window manager state. The Correct\n Mechanism is to support the session management protocol (see the\n \"GnomeClient\" object in the GNOME libraries for example) and allow\n the window manager to save your window sizes and positions.\n Params:\n rootX = return location for X coordinate of gravity-determined reference point. [out][allow-none]\n rootY = return location for Y coordinate of gravity-determined reference point. [out][allow-none]\n\t \n",
"line" : 1579}
,
{
"name" : "getRole",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns the role of the window. See gtk_window_set_role() for\n further explanation.\n Returns: the role of the window if set, or NULL. The returned is owned by the widget and must not be modified or freed.\n\t \n",
"line" : 1590}
,
{
"name" : "getSize",
"kind" : "function",
"protection" : "public",
"type" : "void(out int width, out int height)",
"comment" : "\n Obtains the current size of window. If window is not onscreen,\n it returns the size GTK+ will suggest to the window manager for the initial window\n size (but this is not reliably the same as the size the window\n manager will actually select). The size obtained by\n gtk_window_get_size() is the last size received in a\n GdkEventConfigure, that is, GTK+ uses its locally-stored size,\n rather than querying the X server for the size. As a result, if you\n call gtk_window_resize() then immediately call\n gtk_window_get_size(), the size won't have taken effect yet. After\n the window manager processes the resize request, GTK+ receives\n notification that the size has changed via a configure event, and\n the size of the window gets updated.\n Note 1: Nearly any use of this function creates a race condition,\n because the size of the window may change between the time that you\n get the size and the time that you perform some action assuming\n that size is the current size. To avoid race conditions, connect to\n \"configure-event\" on the window and adjust your size-dependent\n state to match the size delivered in the GdkEventConfigure.\n Note 2: The returned size does not include the\n size of the window manager decorations (aka the window frame or\n border). Those are not drawn by GTK+ and GTK+ has no reliable\n method of determining their size.\n Note 3: If you are getting a window size in order to position\n the window onscreen, there may be a better way. The preferred\n way is to simply set the window's semantic type with\n gtk_window_set_type_hint(), which allows the window manager to\n e.g. center dialogs. Also, if you set the transient parent of\n dialogs with gtk_window_set_transient_for() window managers\n will often center the dialog over its parent window. It's\n much preferred to let the window manager handle these\n things rather than doing it yourself, because all apps will\n behave consistently and according to user prefs if the window\n manager handles it. Also, the window manager can take the size\n of the window decorations\/border into account, while your\n application cannot.\n In any case, if you insist on application-specified window\n positioning, there's still a better way than\n doing it yourself - gtk_window_set_position() will frequently\n handle the details for you.\n Params:\n width = return location for width, or NULL. [out][allow-none]\n height = return location for height, or NULL. [out][allow-none]\n\t \n",
"line" : 1640}
,
{
"name" : "getTitle",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Retrieves the title of the window. See gtk_window_set_title().\n Returns: the title of the window, or NULL if none has been set explicitely. The returned string is owned by the widget and must not be modified or freed.\n\t \n",
"line" : 1650}
,
{
"name" : "getTransientFor",
"kind" : "function",
"protection" : "public",
"type" : "Window()",
"comment" : "\n Fetches the transient parent for this window. See\n gtk_window_set_transient_for().\n Returns: the transient parent for this window, or NULL if no transient parent has been set. [transfer none]\n\t \n",
"line" : 1661}
,
{
"name" : "getTypeHint",
"kind" : "function",
"protection" : "public",
"type" : "GdkWindowTypeHint()",
"comment" : "\n Gets the type hint for this window. See gtk_window_set_type_hint().\n Returns: the type hint for window.\n\t \n",
"line" : 1676}
,
{
"name" : "getSkipTaskbarHint",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value set by gtk_window_set_skip_taskbar_hint()\n Since 2.2\n Returns: TRUE if window shouldn't be in taskbar\n\t \n",
"line" : 1687}
,
{
"name" : "getSkipPagerHint",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value set by gtk_window_set_skip_pager_hint().\n Since 2.2\n Returns: TRUE if window shouldn't be in pager\n\t \n",
"line" : 1698}
,
{
"name" : "getUrgencyHint",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value set by gtk_window_set_urgency_hint()\n Since 2.8\n Returns: TRUE if window is urgent\n\t \n",
"line" : 1709}
,
{
"name" : "getAcceptFocus",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value set by gtk_window_set_accept_focus().\n Since 2.4\n Returns: TRUE if window should receive the input focus\n\t \n",
"line" : 1720}
,
{
"name" : "getFocusOnMap",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the value set by gtk_window_set_focus_on_map().\n Since 2.6\n Returns: TRUE if window should receive the input focus when mapped.\n\t \n",
"line" : 1731}
,
{
"name" : "getGroup",
"kind" : "function",
"protection" : "public",
"type" : "WindowGroup()",
"comment" : "\n Returns the group for window or the default group, if\n window is NULL or if window does not have an explicit\n window group.\n Since 2.10\n Returns: the GtkWindowGroup for a window or the default group. [transfer none]\n\t \n",
"line" : 1744}
,
{
"name" : "hasGroup",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether window has an explicit window group.\n Since 2.22\n Returns: TRUE if window has an explicit window group.\n\t \n",
"line" : 1760}
,
{
"name" : "getWindowType",
"kind" : "function",
"protection" : "public",
"type" : "GtkWindowType()",
"comment" : "\n Gets the type of the window. See GtkWindowType.\n Since 2.20\n Returns: the type of the window\n\t \n",
"line" : 1771}
,
{
"name" : "move",
"kind" : "function",
"protection" : "public",
"type" : "void(int x, int y)",
"comment" : "\n Asks the window manager to move\n window to the given position. Window managers are free to ignore\n this; most window managers ignore requests for initial window\n positions (instead using a user-defined placement algorithm) and\n honor requests after the window has already been shown.\n Note: the position is the position of the gravity-determined\n Params:\n x = X coordinate to move window to\n y = Y coordinate to move window to\n\t \n",
"line" : 1788}
,
{
"name" : "parseGeometry",
"kind" : "function",
"protection" : "public",
"type" : "int(string geometry)",
"comment" : "\n Parses a standard X Window System geometry string - see the\n manual page for X (type 'man X') for details on this.\n gtk_window_parse_geometry() does work on all GTK+ ports\n including Win32 but is primarily intended for an X environment.\n If either a size or a position can be extracted from the\n geometry string, gtk_window_parse_geometry() returns TRUE\n and calls gtk_window_set_default_size() and\/or gtk_window_move()\n to resize\/move the window.\n If gtk_window_parse_geometry() returns TRUE, it will also\n set the GDK_HINT_USER_POS and\/or GDK_HINT_USER_SIZE hints\n indicating to the window manager that the size\/position of\n the window was user-specified. This causes most window\n managers to honor the geometry.\n Note that for gtk_window_parse_geometry() to work as expected, it has\n to be called when the window has its \"final\" size, i.e. after calling\n gtk_widget_show_all() on the contents and gtk_window_set_geometry_hints()\n on the window.\n $(DDOC_COMMENT example)\n Params:\n geometry = geometry string\n Returns: TRUE if string was parsed successfully\n\t \n",
"line" : 1817}
,
{
"name" : "reshowWithInitialSize",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Hides window, then reshows it, resetting the\n default size and position of the window. Used\n by GUI builders only.\n\t \n",
"line" : 1828}
,
{
"name" : "resize",
"kind" : "function",
"protection" : "public",
"type" : "void(int width, int height)",
"comment" : "\n Resizes the window as if the user had done so, obeying geometry\n constraints. The default geometry constraint is that windows may\n not be smaller than their size request; to override this\n constraint, call gtk_widget_set_size_request() to set the window's\n request to a smaller value.\n If gtk_window_resize() is called before showing a window for the\n first time, it overrides any default size set with\n gtk_window_set_default_size().\n Windows may not be resized smaller than 1 by 1 pixels.\n Params:\n width = width in pixels to resize the window to\n height = height in pixels to resize the window to\n\t \n",
"line" : 1848}
,
{
"name" : "setDefaultIconList",
"kind" : "function",
"protection" : "public",
"type" : "void(ListG list)",
"comment" : "\n Sets an icon list to be used as fallback for windows that haven't\n had gtk_window_set_icon_list() called on them to set up a\n window-specific icon list. This function allows you to set up the\n icon for all windows in your app at once.\n See gtk_window_set_icon_list() for more details.\n Params:\n list = a list of GdkPixbuf. [element-type GdkPixbuf][transfer container]\n\t \n",
"line" : 1863}
,
{
"name" : "setDefaultIcon",
"kind" : "function",
"protection" : "public",
"type" : "void(Pixbuf icon)",
"comment" : "\n Sets an icon to be used as fallback for windows that haven't\n had gtk_window_set_icon() called on them from a pixbuf.\n Since 2.4\n Params:\n icon = the icon\n\t \n",
"line" : 1876}
,
{
"name" : "setDefaultIconName",
"kind" : "function",
"protection" : "public",
"type" : "void(string name)",
"comment" : "\n Sets an icon to be used as fallback for windows that haven't\n had gtk_window_set_icon_list() called on them from a named\n themed icon, see gtk_window_set_icon_name().\n Since 2.6\n Params:\n name = the name of the themed icon\n\t \n",
"line" : 1890}
,
{
"name" : "setIcon",
"kind" : "function",
"protection" : "public",
"type" : "void(Pixbuf icon)",
"comment" : "\n Sets up the icon representing a GtkWindow. This icon is used when\n the window is minimized (also known as iconified). Some window\n managers or desktop environments may also place it in the window\n frame, or display it in other contexts.\n The icon should be provided in whatever size it was naturally\n drawn; that is, don't scale the image before passing it to\n GTK+. Scaling is postponed until the last minute, when the desired\n final size is known, to allow best quality.\n If you have your icon hand-drawn in multiple sizes, use\n gtk_window_set_icon_list(). Then the best size will be used.\n This function is equivalent to calling gtk_window_set_icon_list()\n with a 1-element list.\n See also gtk_window_set_default_icon_list() to set the icon\n for all windows in your application in one go.\n Params:\n icon = icon image, or NULL. [allow-none]\n\t \n",
"line" : 1914}
,
{
"name" : "setIconList",
"kind" : "function",
"protection" : "public",
"type" : "void(ListG list)",
"comment" : "\n Sets up the icon representing a GtkWindow. The icon is used when\n the window is minimized (also known as iconified). Some window\n managers or desktop environments may also place it in the window\n frame, or display it in other contexts.\n gtk_window_set_icon_list() allows you to pass in the same icon in\n several hand-drawn sizes. The list should contain the natural sizes\n your icon is available in; that is, don't scale the image before\n passing it to GTK+. Scaling is postponed until the last minute,\n when the desired final size is known, to allow best quality.\n By passing several sizes, you may improve the final image quality\n of the icon, by reducing or eliminating automatic image scaling.\n Recommended sizes to provide: 16x16, 32x32, 48x48 at minimum, and\n larger images (64x64, 128x128) if you have them.\n See also gtk_window_set_default_icon_list() to set the icon\n for all windows in your application in one go.\n Note that transient windows (those who have been set transient for another\n window using gtk_window_set_transient_for()) will inherit their\n icon from their transient parent. So there's no need to explicitly\n set the icon on transient windows.\n Params:\n list = list of GdkPixbuf\n\t \n",
"line" : 1943}
,
{
"name" : "setIconName",
"kind" : "function",
"protection" : "public",
"type" : "void(string name)",
"comment" : "\n Sets the icon for the window from a named themed icon. See\n the docs for GtkIconTheme for more details.\n Note that this has nothing to do with the WM_ICON_NAME\n property which is mentioned in the ICCCM.\n Since 2.6\n Params:\n name = the name of the themed icon. [allow-none]\n\t \n",
"line" : 1958}
,
{
"name" : "setAutoStartupNotification",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n By default, after showing the first GtkWindow, GTK+ calls\n gdk_notify_startup_complete(). Call this function to disable\n the automatic startup notification. You might do this if your\n first window is a splash screen, and you want to delay notification\n until after your real main window has been shown, for example.\n In that example, you would disable startup notification\n temporarily, show your splash screen, then re-enable it so that\n showing the main window would automatically result in notification.\n Since 2.2\n Params:\n setting = TRUE to automatically do startup notification\n\t \n",
"line" : 1977}
,
{
"name" : "getOpacity",
"kind" : "function",
"protection" : "public",
"type" : "double()",
"comment" : "\n Fetches the requested opacity for this window. See\n gtk_window_set_opacity().\n Since 2.12\n Returns: the requested opacity for this window.\n\t \n",
"line" : 1989}
,
{
"name" : "setOpacity",
"kind" : "function",
"protection" : "public",
"type" : "void(double opacity)",
"comment" : "\n Request the windowing system to make window partially transparent,\n with opacity 0 being fully transparent and 1 fully opaque. (Values\n of the opacity parameter are clamped to the [0,1] range.) On X11\n this has any effect only on X screens with a compositing manager\n running. See gtk_widget_is_composited(). On Windows it should work\n always.\n Note that setting a window's opacity after the window has been\n shown causes it to flicker once on Windows.\n Since 2.12\n Params:\n opacity = desired opacity, between 0 and 1\n\t \n",
"line" : 2008}
,
{
"name" : "getMnemonicsVisible",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n\t \n",
"line" : 2016}
,
{
"name" : "setMnemonicsVisible",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n Sets the \"mnemonics-visible\" property.\n Since 2.20\n Params:\n setting = the new value\n\t \n",
"line" : 2028}
]
}
]
}
,
{
"name" : "gtk.WindowGroup",
"kind" : "module",
"file" : "\/usr\/include\/d\/gtk\/WindowGroup.d",
"members" : [
{
"name" : "WindowGroup",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n \n",
"line" : 78,
"base" : "ObjectG",
"members" : [
{
"name" : "gtkWindowGroup",
"kind" : "variable",
"protection" : "protected",
"type" : "GtkWindowGroup*",
"comment" : " the main Gtk struct \n",
"line" : 82}
,
{
"name" : "getWindowGroupStruct",
"kind" : "function",
"protection" : "public",
"type" : "GtkWindowGroup*()",
"line" : 85}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 92}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "WindowGroup(GtkWindowGroup* gtkWindowGroup)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 100}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 118}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "WindowGroup()",
"comment" : "\n\t \n\n Creates a new GtkWindowGroup object. Grabs added with\n gtk_grab_add() only affect windows within the same GtkWindowGroup.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 132}
,
{
"name" : "addWindow",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window)",
"comment" : "\n Adds a window to a GtkWindowGroup.\n Params:\n window = the GtkWindow to add\n\t \n",
"line" : 148}
,
{
"name" : "removeWindow",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window)",
"comment" : "\n Removes a window from a GtkWindowGroup.\n Params:\n window = the GtkWindow to remove\n\t \n",
"line" : 159}
,
{
"name" : "listWindows",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Returns a list of the GtkWindows that belong to window_group.\n Since 2.14\n Returns: A newly-allocated list of windows inside the group. [element-type GtkWidget][transfer container]\n\t \n",
"line" : 170}
,
{
"name" : "getCurrentGrab",
"kind" : "function",
"protection" : "public",
"type" : "Widget()",
"comment" : "\n\t \n",
"line" : 183}
]
}
]
}
]
