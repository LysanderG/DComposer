[
{
"name" : "gdk.AppLaunchContext",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/AppLaunchContext.d",
"members" : [
{
"name" : "AppLaunchContext",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GdkAppLaunchContext is an implementation of GAppLaunchContext that\n handles launching an application in a graphical context. It provides\n startup notification and allows to launch applications on a specific\n screen or workspace.\n $(DDOC_COMMENT example)\n \n",
"line" : 83,
"base" : "Object",
"members" : [
{
"name" : "gdkAppLaunchContext",
"kind" : "variable",
"protection" : "protected",
"type" : "GdkAppLaunchContext*",
"comment" : " the main Gtk struct \n",
"line" : 86}
,
{
"name" : "getAppLaunchContextStruct",
"kind" : "function",
"protection" : "public",
"type" : "GdkAppLaunchContext*()",
"line" : 89}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 96}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "AppLaunchContext(GdkAppLaunchContext* gdkAppLaunchContext)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 104}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "AppLaunchContext()",
"comment" : "\n\t \n\n Creates a new GdkAppLaunchContext.\n Since 2.14\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 122}
,
{
"name" : "setDisplay",
"kind" : "function",
"protection" : "public",
"type" : "void(Display display)",
"comment" : "\n Sets the display on which applications will be launched when\n using this context. See also gdk_app_launch_context_set_screen().\n Since 2.14\n Params:\n display = a GdkDisplay\n\t \n",
"line" : 140}
,
{
"name" : "setScreen",
"kind" : "function",
"protection" : "public",
"type" : "void(Screen screen)",
"comment" : "\n Sets the screen on which applications will be launched when\n using this context. See also gdk_app_launch_context_set_display().\n If both screen and display are set, the screen takes priority.\n If neither screen or display are set, the default screen and\n display are used.\n Since 2.14\n Params:\n screen = a GdkScreen\n\t \n",
"line" : 156}
,
{
"name" : "setDesktop",
"kind" : "function",
"protection" : "public",
"type" : "void(int desktop)",
"comment" : "\n Sets the workspace on which applications will be launched when\n using this context when running under a window manager that\n supports multiple workspaces, as described in the\n Extended\n Window Manager Hints.\n When the workspace is not specified or desktop is set to -1,\n it is up to the window manager to pick one, typically it will\n be the current workspace.\n Since 2.14\n Params:\n desktop = the number of a workspace, or -1\n\t \n",
"line" : 175}
,
{
"name" : "setTimestamp",
"kind" : "function",
"protection" : "public",
"type" : "void(uint timestamp)",
"comment" : "\n Sets the timestamp of context. The timestamp should ideally\n be taken from the event that triggered the launch.\n Window managers can use this information to avoid moving the\n focus to the newly launched application when the user is busy\n typing in another window. This is also known as 'focus stealing\n prevention'.\n Since 2.14\n Params:\n timestamp = a timestamp\n\t \n",
"line" : 192}
,
{
"name" : "setIcon",
"kind" : "function",
"protection" : "public",
"type" : "void(IconIF icon)",
"comment" : "\n Sets the icon for applications that are launched with this\n context.\n Window Managers can use this information when displaying startup\n notification.\n See also gdk_app_launch_context_set_icon_name().\n Since 2.14\n Params:\n icon = a GIcon, or NULL. [allow-none]\n\t \n",
"line" : 208}
,
{
"name" : "setIconName",
"kind" : "function",
"protection" : "public",
"type" : "void(string iconName)",
"comment" : "\n Sets the icon for applications that are launched with this context.\n The icon_name will be interpreted in the same way as the Icon field\n in desktop files. See also gdk_app_launch_context_set_icon().\n If both icon and icon_name are set, the icon_name takes priority.\n If neither icon or icon_name is set, the icon is taken from either\n the file that is passed to launched application or from the GAppInfo\n for the launched application itself.\n Since 2.14\n Params:\n iconName = an icon name, or NULL. [allow-none]\n\t \n",
"line" : 226}
]
}
]
}
,
{
"name" : "gdk.Bitmap",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/Bitmap.d",
"members" : [
{
"name" : "Bitmap",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n Pixmaps are offscreen drawables. They can be drawn upon with the\n standard drawing primitives, then copied to another drawable (such as\n a GdkWindow) with gdk_pixmap_draw(). The depth of a pixmap\n is the number of bits per pixels. Bitmaps are simply pixmaps\n with a depth of 1. (That is, they are monochrome bitmaps - each\n pixel can be either on or off).\n GTK 3 will remove GdkPixmap and GdkBitmap. You should use cairo\n surfaces instead. However, because a lot of functions still use these\n types, they are not deprecated.\n \n",
"line" : 82,
"base" : "Object",
"members" : [
{
"name" : "gdkBitmap",
"kind" : "variable",
"protection" : "protected",
"type" : "GdkBitmap*",
"comment" : " the main Gtk struct \n",
"line" : 85}
,
{
"name" : "getBitmapStruct",
"kind" : "function",
"protection" : "public",
"type" : "GdkBitmap*()",
"line" : 88}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 95}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Bitmap(GdkBitmap* gdkBitmap)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 103}
,
{
"name" : "createFromData",
"kind" : "function",
"protection" : "public",
"type" : "Bitmap(Drawable drawable, string data, int width, int height)",
"comment" : "\n\t \n\n Warning\n gdk_bitmap_create_from_data has been deprecated since version 2.22 and should not be used in newly-written code. You can create a Cairo image surface using\n cairo_image_surface_create_for_data() instead. Specify\n CAIRO_FORMAT_A1 as the format to get a bitmap. Keep in mind that\n Cairo images must have a rowstride of 4 bytes, so you will need\n to align your data properly. If you must use a pixmap, use\n gdk_pixmap_new() with a depth of 1 to create a bitmap and then use\n gdk_cairo_create(), cairo_set_source_surface() and cairo_paint()\n to draw the image surface to the bitmap.\n Creates a new bitmap from data in XBM format.\n Params:\n drawable = a GdkDrawable, used to determine default values\n for the new pixmap. Can be NULL, in which case the root\n window is used.\n data = a pointer to the XBM data.\n width = the width of the new pixmap in pixels.\n height = the height of the new pixmap in pixels.\n Returns: the GdkBitmap\n\t \n",
"line" : 136}
]
}
]
}
,
{
"name" : "gdk.Color",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/Color.d",
"members" : [
{
"name" : "Color",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n These functions are used to modify colormaps.\n A colormap is an object that contains the mapping\n between the color values stored in memory and\n the RGB values that are used to display color\n values. In general, colormaps only contain\n significant information for pseudo-color visuals,\n but even for other visual types, a colormap object\n is required in some circumstances.\n There are a couple of special colormaps that can\n be retrieved. The system colormap (retrieved\n with gdk_colormap_get_system()) is the default\n colormap of the system. If you are using GdkRGB,\n there is another colormap that is important - the\n colormap in which GdkRGB works, retrieved with\n gdk_rgb_get_colormap(). However, when using GdkRGB,\n it is not generally necessary to allocate colors\n directly.\n In previous revisions of this interface, a number\n of functions that take a GdkColormap parameter\n were replaced with functions whose names began\n with \"gdk_colormap_\". This process will probably\n be extended somewhat in the future -\n gdk_color_white(), gdk_color_black(), and\n gdk_color_change() will probably become aliases.\n \n",
"line" : 98,
"base" : "Object",
"members" : [
{
"name" : "gdkColor",
"kind" : "variable",
"protection" : "protected",
"type" : "GdkColor*",
"comment" : " the main Gtk struct \n",
"line" : 101}
,
{
"name" : "getColorStruct",
"kind" : "function",
"protection" : "public",
"type" : "GdkColor*()",
"line" : 104}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 111}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Color(GdkColor* gdkColor)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 119}
,
{
"name" : "_black",
"kind" : "variable",
"protection" : "public",
"type" : "gdk.Color.Color",
"line" : 129}
,
{
"name" : "_white",
"kind" : "variable",
"protection" : "public",
"type" : "gdk.Color.Color",
"line" : 130}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Color()",
"comment" : "\n Creates a new Color\n\t \n",
"line" : 135}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Color(ubyte red, ubyte green, ubyte blue)",
"comment" : " \n",
"line" : 141}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Color(ushort red, ushort green, ushort blue)",
"comment" : "\n Creates a new Color with RGB values\n Params:\n  red =\n  green =\n  blue =\n\t \n",
"line" : 154}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Color(uint rgb)",
"comment" : " \n",
"line" : 162}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Color(int rgb)",
"comment" : " \n",
"line" : 170}
,
{
"name" : "black",
"kind" : "function",
"protection" : "public",
"type" : "Color()",
"comment" : " \n",
"line" : 178}
,
{
"name" : "white",
"kind" : "function",
"protection" : "public",
"type" : "Color()",
"comment" : " \n",
"line" : 188}
,
{
"name" : "set",
"kind" : "function",
"protection" : "public",
"type" : "void(ushort red, ushort green, ushort blue)",
"comment" : "\n Sets the Color with RGB values\n Params:\n  red =\n  green =\n  blue =\n\t \n",
"line" : 204}
,
{
"name" : "set8",
"kind" : "function",
"protection" : "public",
"type" : "void(ubyte red, ubyte green, ubyte blue)",
"comment" : " \n",
"line" : 217}
,
{
"name" : "getValue",
"kind" : "function",
"protection" : "public",
"type" : "ulong()",
"comment" : " \n",
"line" : 229}
,
{
"name" : "getValue24",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : " \n",
"line" : 235}
,
{
"name" : "getPixelValue",
"kind" : "function",
"protection" : "public",
"type" : "uint()",
"comment" : " \n",
"line" : 241}
,
{
"name" : "copy",
"kind" : "function",
"protection" : "public",
"type" : "Color()",
"comment" : "\n\t \n\n Makes a copy of a color structure. The result\n must be freed using gdk_color_free().\n Returns: a copy of color.\n\t \n",
"line" : 255}
,
{
"name" : "free",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Frees a color structure created with\n gdk_color_copy().\n\t \n",
"line" : 270}
,
{
"name" : "white",
"kind" : "function",
"protection" : "public",
"type" : "int(Colormap colormap, out GdkColor color)",
"comment" : "\n Warning\n gdk_color_white is deprecated and should not be used in newly-written code.\n Returns the white color for a given colormap. The resulting\n value has already allocated been allocated.\n Params:\n colormap = a GdkColormap.\n color = the location to store the color.\n Returns: TRUE if the allocation succeeded.\n\t \n",
"line" : 286}
,
{
"name" : "black",
"kind" : "function",
"protection" : "public",
"type" : "int(Colormap colormap, out GdkColor color)",
"comment" : "\n Warning\n gdk_color_black is deprecated and should not be used in newly-written code.\n Returns the black color for a given colormap. The resulting\n value has already been allocated.\n Params:\n colormap = a GdkColormap.\n color = the location to store the color.\n Returns: TRUE if the allocation succeeded.\n\t \n",
"line" : 302}
,
{
"name" : "parse",
"kind" : "function",
"protection" : "public",
"type" : "int(string spec, out GdkColor color)",
"comment" : "\n Parses a textual specification of a color and fill in the\n red, green,\n and blue fields of a GdkColor\n structure. The color is not allocated, you\n must call gdk_colormap_alloc_color() yourself. The string can\n either one of a large set of standard names. (Taken from the X11\n rgb.txt file), or it can be a hex value in the\n form '#rgb' '#rrggbb' '#rrrgggbbb' or\n '#rrrrggggbbbb' where 'r', 'g' and 'b' are hex digits of the\n red, green, and blue components of the color, respectively. (White\n in the four forms is '#fff' '#ffffff' '#fffffffff' and\n '#ffffffffffff')\n Params:\n spec = the string specifying the color.\n color = the GdkColor to fill in. [out]\n Returns: TRUE if the parsing succeeded.\n\t \n",
"line" : 326}
,
{
"name" : "alloc",
"kind" : "function",
"protection" : "public",
"type" : "int(Colormap colormap, out GdkColor color)",
"comment" : "\n Warning\n gdk_color_alloc has been deprecated since version 2.2 and should not be used in newly-written code. Use gdk_colormap_alloc_color() instead.\n Allocates a single color from a colormap.\n Params:\n colormap = a GdkColormap.\n color = The color to allocate. On return, the\n  pixel field will be filled in.\n Returns: TRUE if the allocation succeeded.\n\t \n",
"line" : 342}
,
{
"name" : "change",
"kind" : "function",
"protection" : "public",
"type" : "int(Colormap colormap, Color color)",
"comment" : "\n Warning\n gdk_color_change is deprecated and should not be used in newly-written code.\n Changes the value of a color that has already\n been allocated. If colormap is not a private\n colormap, then the color must have been allocated\n using gdk_colormap_alloc_colors() with the\n writeable set to TRUE.\n Params:\n colormap = a GdkColormap.\n color = a GdkColor, with the color to change\n in the pixel field,\n and the new value in the remaining fields.\n Returns: TRUE if the color was successfully changed.\n\t \n",
"line" : 363}
,
{
"name" : "equal",
"kind" : "function",
"protection" : "public",
"type" : "int(Color colorb)",
"comment" : "\n Compares two colors.\n Params:\n colorb = another GdkColor.\n Returns: TRUE if the two colors compare equal\n\t \n",
"line" : 375}
,
{
"name" : "hash",
"kind" : "function",
"protection" : "public",
"type" : "uint()",
"comment" : "\n A hash function suitable for using for a hash\n table that stores GdkColor's.\n Returns: The hash function applied to colora\n\t \n",
"line" : 386}
,
{
"name" : "toString",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Returns a textual specification of color in the hexadecimal form\n #rrrrggggbbbb, where r,\n g and b are hex digits\n representing the red, green and blue components respectively.\n Since 2.12\n Returns: a newly-allocated text string\n\t \n",
"line" : 400}
]
}
]
}
,
{
"name" : "gdk.Colormap",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/Colormap.d",
"members" : [
{
"name" : "Colormap",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n These functions are used to modify colormaps.\n A colormap is an object that contains the mapping\n between the color values stored in memory and\n the RGB values that are used to display color\n values. In general, colormaps only contain\n significant information for pseudo-color visuals,\n but even for other visual types, a colormap object\n is required in some circumstances.\n There are a couple of special colormaps that can\n be retrieved. The system colormap (retrieved\n with gdk_colormap_get_system()) is the default\n colormap of the system. If you are using GdkRGB,\n there is another colormap that is important - the\n colormap in which GdkRGB works, retrieved with\n gdk_rgb_get_colormap(). However, when using GdkRGB,\n it is not generally necessary to allocate colors\n directly.\n In previous revisions of this interface, a number\n of functions that take a GdkColormap parameter\n were replaced with functions whose names began\n with \"gdk_colormap_\". This process will probably\n be extended somewhat in the future -\n gdk_color_white(), gdk_color_black(), and\n gdk_color_change() will probably become aliases.\n \n",
"line" : 103,
"base" : "Object",
"members" : [
{
"name" : "gdkColormap",
"kind" : "variable",
"protection" : "protected",
"type" : "GdkColormap*",
"comment" : " the main Gtk struct \n",
"line" : 106}
,
{
"name" : "getColormapStruct",
"kind" : "function",
"protection" : "public",
"type" : "GdkColormap*()",
"line" : 109}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 116}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Colormap(GdkColormap* gdkColormap)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 124}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Colormap(Visual visual, int allocate)",
"comment" : "\n\t \n\n Creates a new colormap for the given visual.\n Params:\n visual = a GdkVisual.\n allocate = if TRUE, the newly created colormap will be\n a private colormap, and all colors in it will be\n allocated for the applications use.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 146}
,
{
"name" : "doref",
"kind" : "function",
"protection" : "public",
"type" : "Colormap()",
"comment" : "\n Warning\n gdk_colormap_ref has been deprecated since version 2.0 and should not be used in newly-written code. Use g_object_ref() instead.\n Deprecated function; use g_object_ref() instead.\n Returns: the colormap\n\t \n",
"line" : 163}
,
{
"name" : "unref",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gdk_colormap_unref has been deprecated since version 2.0 and should not be used in newly-written code. Use g_object_unref() instead.\n Deprecated function; use g_object_unref() instead.\n\t \n",
"line" : 179}
,
{
"name" : "getSystem",
"kind" : "function",
"protection" : "public",
"type" : "Colormap()",
"comment" : "\n Gets the system's default colormap for the default screen. (See\n gdk_colormap_get_system_for_screen())\n Returns: the default colormap.\n\t \n",
"line" : 190}
,
{
"name" : "getSystemSize",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Warning\n gdk_colormap_get_system_size is deprecated and should not be used in newly-written code.\n Returns the size of the system's default colormap.\n (See the description of struct GdkColormap for an\n explanation of the size of a colormap.)\n Returns: the size of the system's default colormap.\n\t \n",
"line" : 209}
,
{
"name" : "change",
"kind" : "function",
"protection" : "public",
"type" : "void(int ncolors)",
"comment" : "\n Warning\n gdk_colormap_change is deprecated and should not be used in newly-written code.\n Changes the value of the first ncolors in a private colormap\n to match the values in the colors\n array in the colormap. This function is obsolete and\n should not be used. See gdk_color_change().\n Params:\n ncolors = the number of colors to change.\n\t \n",
"line" : 225}
,
{
"name" : "allocColors",
"kind" : "function",
"protection" : "public",
"type" : "int(GdkColor[] colors, int writeable, int bestMatch, int[] success)",
"comment" : "\n Allocates colors from a colormap.\n Params:\n colors = The color values to allocate. On return, the pixel\n  values for allocated colors will be filled in.\n writeable = If TRUE, the colors are allocated writeable\n  (their values can later be changed using gdk_color_change()).\n  Writeable colors cannot be shared between applications.\n bestMatch = If TRUE, GDK will attempt to do matching against\n  existing colors if the colors cannot be allocated as requested.\n success = An array of length ncolors. On return, this\n  indicates whether the corresponding color in colors was\n  successfully allocated or not.\n Returns: The number of colors that were not successfully allocated.\n\t \n",
"line" : 246}
,
{
"name" : "allocColor",
"kind" : "function",
"protection" : "public",
"type" : "int(out GdkColor color, int writeable, int bestMatch)",
"comment" : "\n Allocates a single color from a colormap.\n Params:\n color = the color to allocate. On return the\n  pixel field will be\n  filled in if allocation succeeds.\n writeable = If TRUE, the color is allocated writeable\n  (their values can later be changed using gdk_color_change()).\n  Writeable colors cannot be shared between applications.\n bestMatch = If TRUE, GDK will attempt to do matching against\n  existing colors if the color cannot be allocated as requested.\n Returns: TRUE if the allocation succeeded.\n\t \n",
"line" : 265}
,
{
"name" : "freeColors",
"kind" : "function",
"protection" : "public",
"type" : "void(GdkColor[] colors)",
"comment" : "\n Frees previously allocated colors.\n Params:\n colors = the colors to free.\n\t \n",
"line" : 276}
,
{
"name" : "queryColor",
"kind" : "function",
"protection" : "public",
"type" : "void(ulong pixel, out GdkColor result)",
"comment" : "\n Locates the RGB color in colormap corresponding to the given\n hardware pixel pixel. pixel must be a valid pixel in the\n colormap; it's a programmer error to call this function with a\n pixel which is not in the colormap. Hardware pixels are normally\n obtained from gdk_colormap_alloc_colors(), or from a GdkImage. (A\n GdkImage contains image data in hardware format, a GdkPixbuf\n contains image data in a canonical 24-bit RGB format.)\n This function is rarely useful; it's used for example to\n implement the eyedropper feature in GtkColorSelection.\n Params:\n pixel = pixel value in hardware display format\n result = GdkColor with red, green, blue fields initialized\n\t \n",
"line" : 296}
,
{
"name" : "getVisual",
"kind" : "function",
"protection" : "public",
"type" : "Visual()",
"comment" : "\n Returns the visual for which a given colormap was created.\n Returns: the visual of the colormap.\n\t \n",
"line" : 306}
,
{
"name" : "getScreen",
"kind" : "function",
"protection" : "public",
"type" : "Screen()",
"comment" : "\n Gets the screen for which this colormap was created.\n Since 2.2\n Returns: the screen for which this colormap was created.\n\t \n",
"line" : 322}
,
{
"name" : "colorsStore",
"kind" : "function",
"protection" : "public",
"type" : "void(GdkColor[] colors)",
"comment" : "\n Warning\n gdk_colors_store is deprecated and should not be used in newly-written code.\n Changes the value of the first ncolors colors in\n a private colormap. This function is obsolete and\n should not be used. See gdk_color_change().\n Params:\n colors = the new color values.\n\t \n",
"line" : 342}
,
{
"name" : "colorsAlloc",
"kind" : "function",
"protection" : "public",
"type" : "int(int contiguous, ulong[] planes, ulong[] pixels)",
"comment" : "\n Warning\n gdk_colors_alloc is deprecated and should not be used in newly-written code.\n Allocates colors from a colormap. This function\n is obsolete. See gdk_colormap_alloc_colors().\n For full documentation of the fields, see\n the Xlib documentation for XAllocColorCells().\n Params:\n contiguous = if TRUE, the colors should be allocated\n  in contiguous color cells.\n planes = an array in which to store the plane masks.\n pixels = an array into which to store allocated pixel values.\n Returns: TRUE if the allocation was successful\n\t \n",
"line" : 362}
,
{
"name" : "colorsFree",
"kind" : "function",
"protection" : "public",
"type" : "void(ulong[] pixels, ulong planes)",
"comment" : "\n Warning\n gdk_colors_free is deprecated and should not be used in newly-written code.\n Frees colors allocated with gdk_colors_alloc(). This\n function is obsolete. See gdk_colormap_free_colors().\n Params:\n pixels = the pixel values of the colors to free.\n planes = the plane masks for all planes to free, OR'd together.\n\t \n",
"line" : 377}
]
}
]
}
,
{
"name" : "gdk.Cursor",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/Cursor.d",
"members" : [
{
"name" : "Cursor",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n These functions are used to create and destroy cursors.\n There is a number of standard cursors, but it is also\n possible to construct new cursors from pixmaps and\n pixbufs. There may be limitations as to what kinds of\n cursors can be constructed on a given display, see\n gdk_display_supports_cursor_alpha(),\n gdk_display_supports_cursor_color(),\n gdk_display_get_default_cursor_size() and\n gdk_display_get_maximal_cursor_size().\n Cursors by themselves are not very interesting, they must be be\n bound to a window for users to see them. This is done with\n gdk_window_set_cursor() or by setting the cursor member of the\n GdkWindowAttr struct passed to gdk_window_new().\n \n",
"line" : 95,
"base" : "Object",
"members" : [
{
"name" : "gdkCursor",
"kind" : "variable",
"protection" : "protected",
"type" : "GdkCursor*",
"comment" : " the main Gtk struct \n",
"line" : 98}
,
{
"name" : "getCursorStruct",
"kind" : "function",
"protection" : "public",
"type" : "GdkCursor*()",
"line" : 101}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 108}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Cursor(GdkCursor* gdkCursor)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 116}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Cursor(GdkCursorType cursorType)",
"comment" : "\n\t \n\n Creates a new cursor from the set of builtin cursors for the default display.\n See gdk_cursor_new_for_display().\n To make the cursor invisible, use GDK_BLANK_CURSOR.\n Params:\n cursorType = cursor to create\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 137}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Cursor(Pixmap source, Pixmap mask, Color fg, Color bg, int x, int y)",
"comment" : "\n Creates a new cursor from a given pixmap and mask. Both the pixmap and mask\n must have a depth of 1 (i.e. each pixel has only 2 values - on or off).\n The standard cursor size is 16 by 16 pixels. You can create a bitmap\n from inline data as in the below example.\n $(DDOC_COMMENT example)\n Params:\n source = the pixmap specifying the cursor.\n mask = the pixmap specifying the mask, which must be the same size as\n  source.\n fg = the foreground color, used for the bits in the source which are 1.\n  The color does not have to be allocated first.\n bg = the background color, used for the bits in the source which are 0.\n  The color does not have to be allocated first.\n x = the horizontal offset of the 'hotspot' of the cursor.\n y = the vertical offset of the 'hotspot' of the cursor.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 166}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Cursor(Display display, Pixbuf pixbuf, int x, int y)",
"comment" : "\n Creates a new cursor from a pixbuf.\n Not all GDK backends support RGBA cursors. If they are not\n supported, a monochrome approximation will be displayed.\n The functions gdk_display_supports_cursor_alpha() and\n gdk_display_supports_cursor_color() can be used to determine\n whether RGBA cursors are supported;\n gdk_display_get_default_cursor_size() and\n gdk_display_get_maximal_cursor_size() give information about\n cursor sizes.\n On the X backend, support for RGBA cursors requires a\n sufficently new version of the X Render extension.\n Since 2.4\n Params:\n display = the GdkDisplay for which the cursor will be created\n pixbuf = the GdkPixbuf containing the cursor image\n x = the horizontal offset of the 'hotspot' of the cursor.\n y = the vertical offset of the 'hotspot' of the cursor.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 197}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Cursor(Display display, string name)",
"comment" : "\n Creates a new cursor by looking up name in the current cursor\n theme.\n Since 2.8\n Params:\n display = the GdkDisplay for which the cursor will be created\n name = the name of the cursor\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 217}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Cursor(Display display, GdkCursorType cursorType)",
"comment" : "\n Creates a new cursor from the set of builtin cursors.\n Since 2.2\n Params:\n display = the GdkDisplay for which the cursor will be created\n cursorType = cursor to create\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 236}
,
{
"name" : "getDisplay",
"kind" : "function",
"protection" : "public",
"type" : "Display()",
"comment" : "\n Returns the display on which the GdkCursor is defined.\n Since 2.2\n Returns: the GdkDisplay associated to cursor\n\t \n",
"line" : 252}
,
{
"name" : "getImage",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf()",
"comment" : "\n Returns a GdkPixbuf with the image used to display the cursor.\n Note that depending on the capabilities of the windowing system and\n on the cursor, GDK may not be able to obtain the image data. In this\n case, NULL is returned.\n Since 2.8\n Returns: a GdkPixbuf representing cursor, or NULL\n\t \n",
"line" : 271}
,
{
"name" : "getCursorType",
"kind" : "function",
"protection" : "public",
"type" : "GdkCursorType()",
"comment" : "\n Returns the cursor type for this cursor.\n Since 2.22\n Returns: a GdkCursorType\n\t \n",
"line" : 287}
,
{
"name" : "doref",
"kind" : "function",
"protection" : "public",
"type" : "Cursor()",
"comment" : "\n Adds a reference to cursor.\n Returns: Same cursor that was passed in\n\t \n",
"line" : 297}
,
{
"name" : "unref",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Removes a reference from cursor, deallocating the cursor\n if no references remain.\n\t \n",
"line" : 312}
]
}
]
}
,
{
"name" : "gdk.Device",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/Device.d",
"members" : [
{
"name" : "Device",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n In addition to the normal keyboard and mouse input devices, GTK+ also\n contains support for extended input devices. In\n particular, this support is targeted at graphics tablets. Graphics\n tablets typically return sub-pixel positioning information and possibly\n information about the pressure and tilt of the stylus. Under\n X, the support for extended devices is done through the\n XInput extension.\n Because handling extended input devices may involve considerable\n overhead, they need to be turned on for each GdkWindow\n individually using gdk_input_set_extension_events().\n (Or, more typically, for GtkWidgets, using gtk_widget_set_extension_events()).\n As an additional complication, depending on the support from\n the windowing system, its possible that a normal mouse\n cursor will not be displayed for a particular extension\n device. If an application does not want to deal with displaying\n a cursor itself, it can ask only to get extension events\n from devices that will display a cursor, by passing the\n GDK_EXTENSION_EVENTS_CURSOR value to\n gdk_input_set_extension_events(). Otherwise, the application\n must retrieve the device information using gdk_devices_list(),\n check the has_cursor field, and,\n if it is FALSE, draw a cursor itself when it receives\n motion events.\n Each pointing device is assigned a unique integer ID; events from a\n particular device can be identified by the\n deviceid field in the event structure. The\n events generated by pointer devices have also been extended to contain\n pressure, xtilt\n and ytilt fields which contain the extended\n information reported as additional valuators\n from the device. The pressure field is a\n a double value ranging from 0.0 to 1.0, while the tilt fields are\n double values ranging from -1.0 to 1.0. (With -1.0 representing the\n maximum tilt to the left or up, and 1.0 representing the maximum\n tilt to the right or down.)\n One additional field in each event is the\n source field, which contains an\n enumeration value describing the type of device; this currently\n can be one of GDK_SOURCE_MOUSE, GDK_SOURCE_PEN, GDK_SOURCE_ERASER,\n or GDK_SOURCE_CURSOR. This field is present to allow simple\n applications to (for instance) delete when they detect eraser\n devices without having to keep track of complicated per-device\n settings.\n Various aspects of each device may be configured.\n The configuration of devices is queried using gdk_devices_list().\n Each device must be activated using gdk_device_set_mode(), which\n also controls whether the device's range is mapped to the\n entire screen or to a single window. The mapping of the valuators of\n the device onto the predefined valuator types is set using\n gdk_device_set_axis_use(). And the source type for each device\n can be set with gdk_device_set_source().\n Devices may also have associated keys\n or macro buttons. Such keys can be globally set to map\n into normal X keyboard events. The mapping is set using\n gdk_device_set_key().\n The interfaces in this section will most likely be considerably\n modified in the future to accomodate devices that may have different\n sets of additional valuators than the pressure xtilt\n and ytilt.\n \n",
"line" : 136,
"base" : "Object",
"members" : [
{
"name" : "gdkDevice",
"kind" : "variable",
"protection" : "protected",
"type" : "GdkDevice*",
"comment" : " the main Gtk struct \n",
"line" : 139}
,
{
"name" : "getDeviceStruct",
"kind" : "function",
"protection" : "public",
"type" : "GdkDevice*()",
"line" : 142}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 149}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Device(GdkDevice* gdkDevice)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 157}
,
{
"name" : "getHistory",
"kind" : "function",
"protection" : "public",
"type" : "int(Window window, uint start, uint stop, out GdkTimeCoord*[] events)",
"comment" : "\n Obtains the motion history for a device; given a starting and\n ending timestamp, return all events in the motion history for\n the device in the given range of time. Some windowing systems\n do not support motion history, in which case, FALSE will\n be returned. (This is not distinguishable from the case where\n motion history is supported and no events were found.)\n Params:\n window =  the window with respect to which which the event coordinates will be reported\n start =  starting timestamp for range of events to return\n stop =  ending timestamp for the range of events to return\n events =  location to store a newly-allocated array of GdkTimeCoord, or NULL\n Returns: TRUE if the windowing system supports motion history and at least one event was found.\n\t \n",
"line" : 181}
,
{
"name" : "gdkDevicesList",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n\t \n\n Returns the list of available input devices for the default display.\n The list is statically allocated and should not be freed.\n Returns: a list of GdkDevice\n\t \n",
"line" : 201}
,
{
"name" : "getName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Determines the name of the device.\n Since 2.22\n Returns: a name\n\t \n",
"line" : 217}
,
{
"name" : "setSource",
"kind" : "function",
"protection" : "public",
"type" : "void(GdkInputSource source)",
"comment" : "\n Sets the source type for an input device.\n Params:\n source = the source type.\n\t \n",
"line" : 228}
,
{
"name" : "getSource",
"kind" : "function",
"protection" : "public",
"type" : "GdkInputSource()",
"comment" : "\n Determines the type of the device.\n Since 2.22\n Returns: a GdkInputSource\n\t \n",
"line" : 239}
,
{
"name" : "setMode",
"kind" : "function",
"protection" : "public",
"type" : "int(GdkInputMode mode)",
"comment" : "\n Sets a the mode of an input device. The mode controls if the\n device is active and whether the device's range is mapped to the\n entire screen or to a single window.\n Params:\n mode = the input mode.\n Returns: TRUE if the mode was successfully changed.\n\t \n",
"line" : 253}
,
{
"name" : "getMode",
"kind" : "function",
"protection" : "public",
"type" : "GdkInputMode()",
"comment" : "\n Determines the mode of the device.\n Since 2.22\n Returns: a GdkInputSource\n\t \n",
"line" : 264}
,
{
"name" : "setKey",
"kind" : "function",
"protection" : "public",
"type" : "void(uint index, uint keyval, GdkModifierType modifiers)",
"comment" : "\n Specifies the X key event to generate when a macro button of a device\n is pressed.\n Params:\n index = the index of the macro button to set.\n keyval = the keyval to generate.\n modifiers = the modifiers to set.\n\t \n",
"line" : 278}
,
{
"name" : "getKey",
"kind" : "function",
"protection" : "public",
"type" : "void(uint index, out uint keyval, out GdkModifierType modifiers)",
"comment" : "\n If index has a valid keyval, this function will\n fill in keyval and modifiers with the keyval settings.\n Since 2.22\n Params:\n index = the index of the macro button to get.\n keyval = return value for the keyval.\n modifiers = return value for modifiers.\n\t \n",
"line" : 293}
,
{
"name" : "setAxisUse",
"kind" : "function",
"protection" : "public",
"type" : "void(uint index, GdkAxisUse use)",
"comment" : "\n Specifies how an axis of a device is used.\n Params:\n index = the index of the axis.\n use = specifies how the axis is used.\n\t \n",
"line" : 305}
,
{
"name" : "getAxisUse",
"kind" : "function",
"protection" : "public",
"type" : "GdkAxisUse(uint index)",
"comment" : "\n Returns the axis use for index.\n Since 2.22\n Params:\n index = the index of the axis.\n Returns: a GdkAxisUse specifying how the axis is used.\n\t \n",
"line" : 318}
,
{
"name" : "getCorePointer",
"kind" : "function",
"protection" : "public",
"type" : "Device()",
"comment" : "\n Returns the core pointer device for the default display.\n Returns: the core pointer device; this is owned by the display and should not be freed.\n\t \n",
"line" : 328}
,
{
"name" : "getState",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, double[] axes, out GdkModifierType mask)",
"comment" : "\n Gets the current state of a device.\n Params:\n window = a GdkWindow.\n axes = an array of doubles to store the values of the axes of device in,\n or NULL.\n mask = location to store the modifiers, or NULL.\n\t \n",
"line" : 347}
,
{
"name" : "freeHistory",
"kind" : "function",
"protection" : "public",
"type" : "void(out GdkTimeCoord[] events)",
"comment" : "\n Frees an array of GdkTimeCoord that was returned by gdk_device_get_history().\n Frees an array of GdkTimeCoord that was returned by gdk_device_get_history().\n Params:\n events = an array of GdkTimeCoord. [inout][transfer none]\n\t \n",
"line" : 359}
,
{
"name" : "getAxis",
"kind" : "function",
"protection" : "public",
"type" : "int(double[] axes, GdkAxisUse use, out double value)",
"comment" : "\n Interprets an array of double as axis values for a given device,\n and locates the value in the array for a given axis use.\n Params:\n axes = pointer to an array of axes\n use = the use to look for\n value = location to store the found value.\n Returns: TRUE if the given axis use was found, otherwise FALSE\n\t \n",
"line" : 379}
,
{
"name" : "getNAxes",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the number of axes of a device.\n Since 2.22\n Returns: the number of axes of device\n\t \n",
"line" : 390}
,
{
"name" : "gdkInputSetExtensionEvents",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, int mask, GdkExtensionMode mode)",
"comment" : "\n Turns extension events on or off for a particular window,\n and specifies the event mask for extension events.\n Params:\n window = a GdkWindow.\n mask = the event mask\n mode = the type of extension events that are desired.\n\t \n",
"line" : 404}
]
}
]
}
,
{
"name" : "gdk.Display",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/Display.d",
"members" : [
{
"name" : "Display",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GdkDisplay objects purpose are two fold:\n To grab\/ungrab keyboard focus and mouse pointer\n To manage and provide information about the GdkScreen(s)\n \t\tavailable for this GdkDisplay\n  GdkDisplay objects are the GDK representation of the X Display which can be\n  described as a workstation consisting of a keyboard a pointing\n  device (such as a mouse) and one or more screens.\n  It is used to open and keep track of various GdkScreen objects currently\n  instanciated by the application. It is also used to grab and release the keyboard\n  and the mouse pointer.\n \n",
"line" : 94,
"base" : "ObjectG",
"members" : [
{
"name" : "gdkDisplay",
"kind" : "variable",
"protection" : "protected",
"type" : "GdkDisplay*",
"comment" : " the main Gtk struct \n",
"line" : 98}
,
{
"name" : "getDisplayStruct",
"kind" : "function",
"protection" : "public",
"type" : "GdkDisplay*()",
"line" : 101}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 108}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Display(GdkDisplay* gdkDisplay)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 116}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 134}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[const(char)[]]",
"comment" : "\n\t \n",
"line" : 142}
,
{
"name" : "onClosedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(int, Display)[]",
"line" : 144}
,
{
"name" : "addOnClosed",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(int, Display) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::closed signal is emitted when the connection to the windowing\n system for display is closed.\n TRUE if the display was closed due to an error\n Since 2.2\n\t \n",
"line" : 151}
,
{
"name" : "callBackClosed",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GdkDisplay* displayStruct, int isError, Display display)",
"line" : 166}
,
{
"name" : "open",
"kind" : "function",
"protection" : "public",
"type" : "Display(string displayName)",
"comment" : "\n Opens a display.\n Since 2.2\n Params:\n displayName = the name of the display to open\n Returns: a GdkDisplay, or NULL if the display could not be opened.\n\t \n",
"line" : 182}
,
{
"name" : "getDefault",
"kind" : "function",
"protection" : "public",
"type" : "Display()",
"comment" : "\n Gets the default GdkDisplay. This is a convenience\n function for\n gdk_display_manager_get_default_display (gdk_display_manager_get()).\n Since 2.2\n Returns: a GdkDisplay, or NULL if there is no default display. [transfer none]\n\t \n",
"line" : 200}
,
{
"name" : "getName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the name of the display.\n Since 2.2\n Returns: a string representing the display name. This string is owned by GDK and should not be modified or freed.\n\t \n",
"line" : 216}
,
{
"name" : "getNScreens",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the number of screen managed by the display.\n Since 2.2\n Returns: number of screens.\n\t \n",
"line" : 227}
,
{
"name" : "getScreen",
"kind" : "function",
"protection" : "public",
"type" : "Screen(int screenNum)",
"comment" : "\n Returns a screen object for one of the screens of the display.\n Since 2.2\n Params:\n screenNum = the screen number\n Returns: the GdkScreen object\n\t \n",
"line" : 240}
,
{
"name" : "getDefaultScreen",
"kind" : "function",
"protection" : "public",
"type" : "Screen()",
"comment" : "\n Get the default GdkScreen for display.\n Since 2.2\n Returns: the default GdkScreen object for display\n\t \n",
"line" : 256}
,
{
"name" : "pointerUngrab",
"kind" : "function",
"protection" : "public",
"type" : "void(uint time)",
"comment" : "\n Release any pointer grab.\n Since 2.2\n Params:\n time = a timestap (e.g. GDK_CURRENT_TIME).\n\t \n",
"line" : 273}
,
{
"name" : "keyboardUngrab",
"kind" : "function",
"protection" : "public",
"type" : "void(uint time)",
"comment" : "\n Release any keyboard grab\n Since 2.2\n Params:\n time = a timestap (e.g GDK_CURRENT_TIME).\n\t \n",
"line" : 285}
,
{
"name" : "pointerIsGrabbed",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Test if the pointer is grabbed.\n Since 2.2\n Returns: TRUE if an active X pointer grab is in effect\n\t \n",
"line" : 296}
,
{
"name" : "beep",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Emits a short beep on display\n Since 2.2\n\t \n",
"line" : 306}
,
{
"name" : "sync",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Flushes any requests queued for the windowing system and waits until all\n requests have been handled. This is often used for making sure that the\n display is synchronized with the current state of the program. Calling\n gdk_display_sync() before gdk_error_trap_pop() makes sure that any errors\n generated from earlier requests are handled before the error trap is\n removed.\n This is most useful for X11. On windowing systems where requests are\n handled synchronously, this function will do nothing.\n Since 2.2\n\t \n",
"line" : 323}
,
{
"name" : "flush",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Flushes any requests queued for the windowing system; this happens automatically\n when the main loop blocks waiting for new events, but if your application\n is drawing without returning control to the main loop, you may need\n to call this function explicitely. A common case where this function\n needs to be called is when an application is executing drawing commands\n from a thread other than the thread where the main loop is running.\n This is most useful for X11. On windowing systems where requests are\n handled synchronously, this function will do nothing.\n Since 2.4\n\t \n",
"line" : 340}
,
{
"name" : "close",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Closes the connection to the windowing system for the given display,\n and cleans up associated resources.\n Since 2.2\n\t \n",
"line" : 351}
,
{
"name" : "isClosed",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Finds out if the display has been closed.\n Since 2.22\n Returns: TRUE if the display is closed.\n\t \n",
"line" : 362}
,
{
"name" : "listDevices",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Returns the list of available input devices attached to display.\n The list is statically allocated and should not be freed.\n Since 2.2\n Returns: a list of GdkDevice\n\t \n",
"line" : 374}
,
{
"name" : "getEvent",
"kind" : "function",
"protection" : "public",
"type" : "Event()",
"comment" : "\n Gets the next GdkEvent to be processed for display, fetching events from the\n windowing system if necessary.\n Since 2.2\n Returns: the next GdkEvent to be processed, or NULL if no events are pending. The returned GdkEvent should be freed with gdk_event_free().\n\t \n",
"line" : 391}
,
{
"name" : "peekEvent",
"kind" : "function",
"protection" : "public",
"type" : "Event()",
"comment" : "\n Gets a copy of the first GdkEvent in the display's event queue, without\n removing the event from the queue. (Note that this function will\n not get more events from the windowing system. It only checks the events\n that have already been moved to the GDK event queue.)\n Since 2.2\n Returns: a copy of the first GdkEvent on the event queue, or NULL if no events are in the queue. The returned GdkEvent should be freed with gdk_event_free().\n\t \n",
"line" : 410}
,
{
"name" : "putEvent",
"kind" : "function",
"protection" : "public",
"type" : "void(Event event)",
"comment" : "\n Appends a copy of the given event onto the front of the event\n queue for display.\n Since 2.2\n Params:\n event = a GdkEvent.\n\t \n",
"line" : 428}
,
{
"name" : "addClientMessageFilter",
"kind" : "function",
"protection" : "public",
"type" : "void(void* messageType, extern (C) GdkFilterReturn function(void*, GdkEvent*, void*) func, void* data)",
"comment" : "\n Adds a filter to be called when X ClientMessage events are received.\n See gdk_window_add_filter() if you are interested in filtering other\n types of events.\n Since 2.2\n Params:\n messageType = the type of ClientMessage events to receive.\n  This will be checked against the message_type field\n  of the XClientMessage event struct.\n func = the function to call to process the event.\n data = user data to pass to func.\n\t \n",
"line" : 446}
,
{
"name" : "setDoubleClickTime",
"kind" : "function",
"protection" : "public",
"type" : "void(uint msec)",
"comment" : "\n Sets the double click time (two clicks within this time interval\n count as a double click and result in a GDK_2BUTTON_PRESS event).\n Applications should not set this, it is a global\n user-configured setting.\n Since 2.2\n Params:\n msec = double click time in milliseconds (thousandths of a second)\n\t \n",
"line" : 461}
,
{
"name" : "setDoubleClickDistance",
"kind" : "function",
"protection" : "public",
"type" : "void(uint distance)",
"comment" : "\n Sets the double click distance (two clicks within this distance\n count as a double click and result in a GDK_2BUTTON_PRESS event).\n See also gdk_display_set_double_click_time().\n Applications should not set this, it is a global\n user-configured setting.\n Since 2.4\n Params:\n distance = distance in pixels\n\t \n",
"line" : 477}
,
{
"name" : "getPointer",
"kind" : "function",
"protection" : "public",
"type" : "void(out Screen screen, out int x, out int y, out GdkModifierType mask)",
"comment" : "\n Gets the current location of the pointer and the current modifier\n mask for a given display.\n Since 2.2\n Params:\n screen = location to store the screen that the\n  cursor is on, or NULL. [allow-none]\n x = location to store root window X coordinate of pointer, or NULL. [out][allow-none]\n y = location to store root window Y coordinate of pointer, or NULL. [out][allow-none]\n mask = location to store current modifier mask, or NULL. [out][allow-none]\n\t \n",
"line" : 494}
,
{
"name" : "getWindowAtPointer",
"kind" : "function",
"protection" : "public",
"type" : "Window(out int winX, out int winY)",
"comment" : "\n Obtains the window underneath the mouse pointer, returning the location\n of the pointer in that window in win_x, win_y for screen. Returns NULL\n if the window under the mouse pointer is not known to GDK (for example,\n belongs to another application).\n Since 2.2\n Params:\n winX = return location for x coordinate of the pointer location relative\n  to the window origin, or NULL. [out][allow-none]\n winY = return location for y coordinate of the pointer location relative\n   to the window origin, or NULL. [out][allow-none]\n Returns: the window under the mouse pointer, or NULL. [transfer none]\n\t \n",
"line" : 517}
,
{
"name" : "setPointerHooks",
"kind" : "function",
"protection" : "public",
"type" : "GdkDisplayPointerHooks*(GdkDisplayPointerHooks* newHooks)",
"comment" : "\n This function allows for hooking into the operation\n of getting the current location of the pointer on a particular\n display. This is only useful for such low-level tools as an\n event recorder. Applications should never have any\n reason to use this facility.\n Since 2.2\n Params:\n newHooks = a table of pointers to functions for getting\n  quantities related to the current pointer position,\n  or NULL to restore the default table.\n Returns: the previous pointer hook table\n\t \n",
"line" : 541}
,
{
"name" : "warpPointer",
"kind" : "function",
"protection" : "public",
"type" : "void(Screen screen, int x, int y)",
"comment" : "\n Warps the pointer of display to the point x,y on\n the screen screen, unless the pointer is confined\n to a window by a grab, in which case it will be moved\n as far as allowed by the grab. Warping the pointer\n creates events as if the user had moved the mouse\n instantaneously to the destination.\n Note that the pointer should normally be under the\n control of the user. This function was added to cover\n some rare use cases like keyboard navigation support\n for the color picker in the GtkColorSelectionDialog.\n Since 2.8\n Params:\n screen = the screen of display to warp the pointer to\n x = the x coordinate of the destination\n y = the y coordinate of the destination\n\t \n",
"line" : 564}
,
{
"name" : "supportsCursorColor",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns TRUE if multicolored cursors are supported\n on display. Otherwise, cursors have only a forground\n and a background color.\n Since 2.4\n Returns: whether cursors can have multiple colors.\n\t \n",
"line" : 577}
,
{
"name" : "supportsCursorAlpha",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns TRUE if cursors can use an 8bit alpha channel\n on display. Otherwise, cursors are restricted to bilevel\n alpha (i.e. a mask).\n Since 2.4\n Returns: whether cursors can have alpha channels.\n\t \n",
"line" : 590}
,
{
"name" : "getDefaultCursorSize",
"kind" : "function",
"protection" : "public",
"type" : "uint()",
"comment" : "\n Returns the default size to use for cursors on display.\n Since 2.4\n Returns: the default cursor size.\n\t \n",
"line" : 601}
,
{
"name" : "getMaximalCursorSize",
"kind" : "function",
"protection" : "public",
"type" : "void(out uint width, out uint height)",
"comment" : "\n Gets the maximal size to use for cursors on display.\n Since 2.4\n Params:\n width = the return location for the maximal cursor width\n height = the return location for the maximal cursor height\n\t \n",
"line" : 614}
,
{
"name" : "getDefaultGroup",
"kind" : "function",
"protection" : "public",
"type" : "Window()",
"comment" : "\n Returns the default group leader window for all toplevel windows\n on display. This window is implicitly created by GDK.\n See gdk_window_set_group().\n Since 2.4\n Returns: The default group leader window for display\n\t \n",
"line" : 627}
,
{
"name" : "supportsSelectionNotification",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether GdkEventOwnerChange events will be\n sent when the owner of a selection changes.\n Since 2.6\n Returns: whether GdkEventOwnerChange events will be sent.\n\t \n",
"line" : 644}
,
{
"name" : "requestSelectionNotification",
"kind" : "function",
"protection" : "public",
"type" : "int(void* selection)",
"comment" : "\n Request GdkEventOwnerChange events for ownership changes\n of the selection named by the given atom.\n Since 2.6\n Params:\n selection = the GdkAtom naming the selection for which\n  ownership change notification is requested\n Returns: whether GdkEventOwnerChange events will be sent.\n\t \n",
"line" : 659}
,
{
"name" : "supportsClipboardPersistence",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the speicifed display supports clipboard\n persistance; i.e. if it's possible to store the clipboard data after an\n application has quit. On X11 this checks if a clipboard daemon is\n running.\n Since 2.6\n Returns: TRUE if the display supports clipboard persistance.\n\t \n",
"line" : 673}
,
{
"name" : "storeClipboard",
"kind" : "function",
"protection" : "public",
"type" : "void(Window clipboardWindow, uint time, void*[] targets)",
"comment" : "\n Issues a request to the clipboard manager to store the\n clipboard data. On X11, this is a special program that works\n according to the freedesktop clipboard specification, available at\n http:\/\/www.freedesktop.org\/Standards\/clipboard-manager-spec.\n Since 2.6\n Params:\n clipboardWindow = a GdkWindow belonging to the clipboard owner\n time = a timestamp\n targets = an array of targets that should be saved, or NULL\n  if all available targets should be saved.\n\t \n",
"line" : 691}
,
{
"name" : "supportsShapes",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns TRUE if gdk_window_shape_combine_mask() can\n be used to create shaped windows on display.\n Since 2.10\n Returns: TRUE if shaped windows are supported\n\t \n",
"line" : 703}
,
{
"name" : "supportsInputShapes",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns TRUE if gdk_window_input_shape_combine_mask() can\n be used to modify the input shape of windows on display.\n Since 2.10\n Returns: TRUE if windows with modified input shape are supported\n\t \n",
"line" : 715}
,
{
"name" : "supportsComposite",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns TRUE if gdk_window_set_composited() can be used\n to redirect drawing on the window using compositing.\n Currently this only works on X11 with XComposite and\n XDamage extensions available.\n Since 2.12\n Signal Details\n The \"closed\" signal\n void user_function (GdkDisplay *display,\n  gboolean is_error,\n  gpointer user_data) : Run Last\n The ::closed signal is emitted when the connection to the windowing\n system for display is closed.\n Since 2.2\n Returns: TRUE if windows may be composited.\n\t \n",
"line" : 737}
]
}
]
}
,
{
"name" : "gdk.DisplayManager",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/DisplayManager.d",
"members" : [
{
"name" : "DisplayManager",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The purpose of the GdkDisplayManager singleton object is to offer\n notification when displays appear or disappear or the default display\n changes.\n \n",
"line" : 82,
"base" : "ObjectG",
"members" : [
{
"name" : "gdkDisplayManager",
"kind" : "variable",
"protection" : "protected",
"type" : "GdkDisplayManager*",
"comment" : " the main Gtk struct \n",
"line" : 86}
,
{
"name" : "getDisplayManagerStruct",
"kind" : "function",
"protection" : "public",
"type" : "GdkDisplayManager*()",
"line" : 89}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 96}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "DisplayManager(GdkDisplayManager* gdkDisplayManager)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 104}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 122}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[const(char)[]]",
"comment" : "\n\t \n",
"line" : 130}
,
{
"name" : "onDisplayOpenedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Display, DisplayManager)[]",
"line" : 132}
,
{
"name" : "addOnDisplayOpened",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Display, DisplayManager) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::display_opened signal is emitted when a display is opened.\n Since 2.2\n\t \n",
"line" : 137}
,
{
"name" : "callBackDisplayOpened",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GdkDisplayManager* displayManagerStruct, GdkDisplay* display, DisplayManager displayManager)",
"line" : 152}
,
{
"name" : "get",
"kind" : "function",
"protection" : "public",
"type" : "DisplayManager()",
"comment" : "\n Gets the singleton GdkDisplayManager object.\n Since 2.2\n Returns: The global GdkDisplayManager singleton; gdk_parse_pargs(), gdk_init(), or gdk_init_check() must have been called first. [transfer none]\n\t \n",
"line" : 166}
,
{
"name" : "getDefaultDisplay",
"kind" : "function",
"protection" : "public",
"type" : "Display()",
"comment" : "\n Gets the default GdkDisplay.\n Since 2.2\n Returns: a GdkDisplay, or NULL if there is no default display. [transfer none]\n\t \n",
"line" : 182}
,
{
"name" : "setDefaultDisplay",
"kind" : "function",
"protection" : "public",
"type" : "void(Display display)",
"comment" : "\n Sets display as the default display.\n Since 2.2\n Params:\n display = a GdkDisplay\n\t \n",
"line" : 199}
,
{
"name" : "listDisplays",
"kind" : "function",
"protection" : "public",
"type" : "ListSG()",
"comment" : "\n List all currently open displays.\n Since 2.2\n Returns: a newly allocated GSList of GdkDisplay objects. Free this list with g_slist_free() when you are done with it. [transfer container][element-type GdkDisplay]\n\t \n",
"line" : 210}
,
{
"name" : "gdkDisplayGetCorePointer",
"kind" : "function",
"protection" : "public",
"type" : "Device(Display display)",
"comment" : "\n Returns the core pointer device for the given display\n Since 2.2\n Params:\n display = a GdkDisplay\n Returns: the core pointer device; this is owned by the display and should not be freed.\n\t \n",
"line" : 228}
]
}
]
}
,
{
"name" : "gdk.DragContext",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/DragContext.d",
"members" : [
{
"name" : "DragContext",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n These functions provide a low level interface for drag and drop.\n The X backend of GDK supports both the Xdnd and Motif drag and drop protocols\n transparently, the Win32 backend supports the WM_DROPFILES protocol.\n GTK+ provides a higher level abstraction based on top of these functions,\n and so they are not normally needed in GTK+ applications.\n See the Drag and Drop section of\n the GTK+ documentation for more information.\n \n",
"line" : 88,
"base" : "Object",
"members" : [
{
"name" : "gdkDragContext",
"kind" : "variable",
"protection" : "protected",
"type" : "GdkDragContext*",
"comment" : " the main Gtk struct \n",
"line" : 91}
,
{
"name" : "getDragContextStruct",
"kind" : "function",
"protection" : "public",
"type" : "GdkDragContext*()",
"line" : 94}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 101}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "DragContext(GdkDragContext* gdkDragContext)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 109}
,
{
"name" : "dragGetSelection",
"kind" : "function",
"protection" : "public",
"type" : "void*()",
"comment" : "\n\t \n\n Returns the selection atom for the current source window.\n Returns: the selection atom.\n\t \n",
"line" : 126}
,
{
"name" : "dragAbort",
"kind" : "function",
"protection" : "public",
"type" : "void(uint time)",
"comment" : "\n Aborts a drag without dropping.\n This function is called by the drag source.\n Params:\n time = the timestamp for this operation.\n\t \n",
"line" : 138}
,
{
"name" : "dropReply",
"kind" : "function",
"protection" : "public",
"type" : "void(int ok, uint time)",
"comment" : "\n Accepts or rejects a drop.\n This function is called by the drag destination in response\n to a drop initiated by the drag source.\n Params:\n ok = TRUE if the drop is accepted.\n time = the timestamp for this operation.\n\t \n",
"line" : 152}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "DragContext()",
"comment" : "\n Creates a new GdkDragContext.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 162}
,
{
"name" : "dragDrop",
"kind" : "function",
"protection" : "public",
"type" : "void(uint time)",
"comment" : "\n Drops on the current destination.\n This function is called by the drag source.\n Params:\n time = the timestamp for this operation.\n\t \n",
"line" : 179}
,
{
"name" : "dragFindWindow",
"kind" : "function",
"protection" : "public",
"type" : "void(Window dragWindow, int xRoot, int yRoot, out Window destWindow, out GdkDragProtocol protocol)",
"comment" : "\n Finds the destination window and DND protocol to use at the\n given pointer position.\n This function is called by the drag source to obtain the\n dest_window and protocol parameters for gdk_drag_motion().\n Params:\n dragWindow = a window which may be at the pointer position, but\n  should be ignored, since it is put up by the drag source as an icon.\n xRoot = the x position of the pointer in root coordinates.\n yRoot = the y position of the pointer in root coordinates.\n destWindow = location to store the destination window in. [out]\n protocol = location to store the DND protocol in. [out]\n\t \n",
"line" : 198}
,
{
"name" : "dragFindWindowForScreen",
"kind" : "function",
"protection" : "public",
"type" : "void(Window dragWindow, Screen screen, int xRoot, int yRoot, out Window destWindow, out GdkDragProtocol protocol)",
"comment" : "\n Finds the destination window and DND protocol to use at the\n given pointer position.\n This function is called by the drag source to obtain the\n dest_window and protocol parameters for gdk_drag_motion().\n Since 2.2\n Params:\n dragWindow = a window which may be at the pointer position, but\n should be ignored, since it is put up by the drag source as an icon.\n screen = the screen where the destination window is sought.\n xRoot = the x position of the pointer in root coordinates.\n yRoot = the y position of the pointer in root coordinates.\n destWindow = location to store the destination window in. [out]\n protocol = location to store the DND protocol in. [out]\n\t \n",
"line" : 223}
,
{
"name" : "doref",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gdk_drag_context_ref has been deprecated since version 2.2 and should not be used in newly-written code. Use g_object_ref() instead.\n Deprecated function; use g_object_ref() instead.\n\t \n",
"line" : 238}
,
{
"name" : "getActions",
"kind" : "function",
"protection" : "public",
"type" : "GdkDragAction()",
"comment" : "\n Determines the bitmask of actions proposed by the source if\n gdk_drag_context_suggested_action() returns GDK_ACTION_ASK.\n Since 2.22\n Returns: the GdkDragAction flags\n\t \n",
"line" : 250}
,
{
"name" : "getSelectedAction",
"kind" : "function",
"protection" : "public",
"type" : "GdkDragAction()",
"comment" : "\n Determines the action chosen by the drag destination.\n Since 2.22\n Returns: a GdkDragAction value\n\t \n",
"line" : 261}
,
{
"name" : "getSuggestedAction",
"kind" : "function",
"protection" : "public",
"type" : "GdkDragAction()",
"comment" : "\n Determines the suggested drag action of the context.\n Since 2.22\n Returns: a GdkDragAction value\n\t \n",
"line" : 272}
,
{
"name" : "listTargets",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Retrieves the list of targets of the context.\n Since 2.22\n Returns: a GList of targets. [transfer none][element-type GdkAtom]\n\t \n",
"line" : 283}
,
{
"name" : "getSourceWindow",
"kind" : "function",
"protection" : "public",
"type" : "Window()",
"comment" : "\n Returns the GdkWindow where the DND operation started.\n Since 2.22\n Returns: a GdkWindow. [transfer none]\n\t \n",
"line" : 299}
,
{
"name" : "dragBegin",
"kind" : "function",
"protection" : "public",
"type" : "DragContext(Window window, ListG targets)",
"comment" : "\n Starts a drag and creates a new drag context for it.\n This function is called by the drag source.\n Params:\n window = the source window for this drag.\n targets = the offered targets,\n  as list of GdkAtoms. [transfer none][element-type GdkAtom]\n Returns: a newly created GdkDragContext.\n\t \n",
"line" : 319}
,
{
"name" : "dragMotion",
"kind" : "function",
"protection" : "public",
"type" : "int(Window destWindow, GdkDragProtocol protocol, int xRoot, int yRoot, GdkDragAction suggestedAction, GdkDragAction possibleActions, uint time)",
"comment" : "\n Updates the drag context when the pointer moves or the\n set of actions changes.\n This function is called by the drag source.\n Params:\n destWindow = the new destination window, obtained by\n  gdk_drag_find_window().\n protocol = the DND protocol in use, obtained by gdk_drag_find_window().\n xRoot = the x position of the pointer in root coordinates.\n yRoot = the y position of the pointer in root coordinates.\n suggestedAction = the suggested action.\n possibleActions = the possible actions.\n time = the timestamp for this operation.\n Returns: FIXME\n\t \n",
"line" : 345}
,
{
"name" : "dropFinish",
"kind" : "function",
"protection" : "public",
"type" : "void(int success, uint time)",
"comment" : "\n Ends the drag operation after a drop.\n This function is called by the drag destination.\n Params:\n success = TRUE if the data was successfully received.\n time = the timestamp for this operation.\n\t \n",
"line" : 358}
,
{
"name" : "dragGetProtocol",
"kind" : "function",
"protection" : "public",
"type" : "void*(void* xid, out GdkDragProtocol protocol)",
"comment" : "\n Finds out the DND protocol supported by a window.\n Params:\n xid = the windowing system id of the destination window.\n protocol = location where the supported DND protocol is returned.\n Returns: the windowing system specific id for the window where the drop should happen. This may be xid or the id of a proxy window, or zero if xid doesn't support Drag and Drop.\n\t \n",
"line" : 371}
,
{
"name" : "dragGetProtocolForDisplay",
"kind" : "function",
"protection" : "public",
"type" : "void*(Display display, void* xid, out GdkDragProtocol protocol)",
"comment" : "\n Finds out the DND protocol supported by a window.\n Since 2.2\n Params:\n display = the GdkDisplay where the destination window resides\n xid = the windowing system id of the destination window.\n protocol = location where the supported DND protocol is returned.\n Returns: the windowing system id of the window where the drop should happen. This may be xid or the id of a proxy window, or zero if xid doesn't support Drag and Drop.\n\t \n",
"line" : 386}
,
{
"name" : "unref",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gdk_drag_context_unref has been deprecated since version 2.2 and should not be used in newly-written code. Use g_object_unref() instead.\n Deprecated function; use g_object_unref() instead.\n\t \n",
"line" : 397}
,
{
"name" : "dragStatus",
"kind" : "function",
"protection" : "public",
"type" : "void(GdkDragAction action, uint time)",
"comment" : "\n Selects one of the actions offered by the drag source.\n This function is called by the drag destination in response to\n gdk_drag_motion() called by the drag source.\n Params:\n action = the selected action which will be taken when a drop happens,\n  or 0 to indicate that a drop will not be accepted.\n time = the timestamp for this operation.\n\t \n",
"line" : 412}
,
{
"name" : "dragDropSucceeded",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the dropped data has been successfully\n transferred. This function is intended to be used while\n handling a GDK_DROP_FINISHED event, its return value is\n meaningless at other times.\n Since 2.6\n Returns: TRUE if the drop was successful.\n\t \n",
"line" : 426}
]
}
]
}
,
{
"name" : "gdk.Drawable",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/Drawable.d",
"members" : [
{
"name" : "Drawable",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n These functions provide support for drawing points, lines, arcs and text\n onto what are called 'drawables'. Drawables, as the name suggests, are things\n which support drawing onto them, and are either GdkWindow or GdkPixmap\n objects.\n Many of the drawing operations take a GdkGC argument, which represents a\n graphics context. This GdkGC contains a number of drawing attributes such\n as foreground color, background color and line width, and is used to reduce\n the number of arguments needed for each drawing operation. See the\n Graphics Contexts section for\n more information.\n Some of the drawing operations take Pango data structures like PangoContext,\n PangoLayout or PangoLayoutLine as arguments. If you're using GTK+, the ususal\n way to obtain these structures is via gtk_widget_create_pango_context() or\n gtk_widget_create_pango_layout().\n \n",
"line" : 133,
"base" : "ObjectG",
"members" : [
{
"name" : "gdkDrawable",
"kind" : "variable",
"protection" : "protected",
"type" : "GdkDrawable*",
"comment" : " the main Gtk struct \n",
"line" : 137}
,
{
"name" : "getDrawableStruct",
"kind" : "function",
"protection" : "public",
"type" : "GdkDrawable*()",
"line" : 140}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 147}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Drawable(GdkDrawable* gdkDrawable)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 155}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 173}
,
{
"name" : "drawPixbuf",
"kind" : "function",
"protection" : "public",
"type" : "void(Pixbuf pixbuf, int destX, int destY)",
"comment" : " \n",
"line" : 180}
,
{
"name" : "drawPixbuf",
"kind" : "function",
"protection" : "public",
"type" : "void(GC gc, Pixbuf pixbuf, int destX, int destY)",
"comment" : " \n",
"line" : 186}
,
{
"name" : "setData",
"kind" : "function",
"protection" : "public",
"type" : "void(string key, void* data, extern (C) void function(void* cbData) destroyFunc)",
"comment" : "\n\t \n\n Warning\n gdk_drawable_set_data is deprecated and should not be used in newly-written code.\n This function is equivalent to g_object_set_data(),\n the GObject variant should be used instead.\n Params:\n key = name to store the data under\n data = arbitrary data\n destroyFunc = function to free data, or NULL. [allow-none]\n\t \n",
"line" : 211}
,
{
"name" : "getData",
"kind" : "function",
"protection" : "public",
"type" : "void*(string key)",
"comment" : "\n Warning\n gdk_drawable_get_data is deprecated and should not be used in newly-written code.\n Equivalent to g_object_get_data(); the GObject variant should be\n used instead.\n Params:\n key = name the data was stored under\n Returns: the data stored at key\n\t \n",
"line" : 226}
,
{
"name" : "getDisplay",
"kind" : "function",
"protection" : "public",
"type" : "Display()",
"comment" : "\n Gets the GdkDisplay associated with a GdkDrawable.\n Since 2.2\n Returns: the GdkDisplay associated with drawable\n\t \n",
"line" : 237}
,
{
"name" : "getScreen",
"kind" : "function",
"protection" : "public",
"type" : "Screen()",
"comment" : "\n Gets the GdkScreen associated with a GdkDrawable.\n Since 2.2\n Returns: the GdkScreen associated with drawable\n\t \n",
"line" : 253}
,
{
"name" : "getVisual",
"kind" : "function",
"protection" : "public",
"type" : "Visual()",
"comment" : "\n Gets the GdkVisual describing the pixel format of drawable.\n Returns: a GdkVisual\n\t \n",
"line" : 268}
,
{
"name" : "setColormap",
"kind" : "function",
"protection" : "public",
"type" : "void(Colormap colormap)",
"comment" : "\n Sets the colormap associated with drawable. Normally this will\n happen automatically when the drawable is created; you only need to\n use this function if the drawable-creating function did not have a\n way to determine the colormap, and you then use drawable operations\n that require a colormap. The colormap for all drawables and\n graphics contexts you intend to use together should match. i.e.\n when using a GdkGC to draw to a drawable, or copying one drawable\n to another, the colormaps should match.\n Params:\n colormap = a GdkColormap\n\t \n",
"line" : 291}
,
{
"name" : "getColormap",
"kind" : "function",
"protection" : "public",
"type" : "Colormap()",
"comment" : "\n Gets the colormap for drawable, if one is set; returns\n NULL otherwise.\n Returns: the colormap, or NULL\n\t \n",
"line" : 302}
,
{
"name" : "getDepth",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Obtains the bit depth of the drawable, that is, the number of bits\n that make up a pixel in the drawable's visual. Examples are 8 bits\n per pixel, 24 bits per pixel, etc.\n Returns: number of bits per pixel\n\t \n",
"line" : 319}
,
{
"name" : "getSize",
"kind" : "function",
"protection" : "public",
"type" : "void(out int width, out int height)",
"comment" : "\n Fills *width and *height with the size of drawable.\n width or height can be NULL if you only want the other one.\n On the X11 platform, if drawable is a GdkWindow, the returned\n size is the size reported in the most-recently-processed configure\n event, rather than the current size on the X server.\n Params:\n width = location to store drawable's width, or NULL. [out][allow-none]\n height = location to store drawable's height, or NULL. [out][allow-none]\n\t \n",
"line" : 335}
,
{
"name" : "getClipRegion",
"kind" : "function",
"protection" : "public",
"type" : "Region()",
"comment" : "\n Computes the region of a drawable that potentially can be written\n to by drawing primitives. This region will not take into account\n the clip region for the GC, and may also not take into account\n other factors such as if the window is obscured by other windows,\n but no area outside of this region will be affected by drawing\n primitives.\n Returns: a GdkRegion. This must be freed with gdk_region_destroy() when you are done.\n\t \n",
"line" : 350}
,
{
"name" : "getVisibleRegion",
"kind" : "function",
"protection" : "public",
"type" : "Region()",
"comment" : "\n Computes the region of a drawable that is potentially visible.\n This does not necessarily take into account if the window is\n obscured by other windows, but no area outside of this region\n is visible.\n Returns: a GdkRegion. This must be freed with gdk_region_destroy() when you are done.\n\t \n",
"line" : 368}
,
{
"name" : "drawPoint",
"kind" : "function",
"protection" : "public",
"type" : "void(GC gc, int x, int y)",
"comment" : "\n Warning\n gdk_draw_point has been deprecated since version 2.22 and should not be used in newly-written code. Use cairo_rectangle() and cairo_fill() or\n cairo_move_to() and cairo_stroke() instead.\n Draws a point, using the foreground color and other attributes of\n the GdkGC.\n Params:\n gc = a GdkGC.\n x = the x coordinate of the point.\n y = the y coordinate of the point.\n\t \n",
"line" : 390}
,
{
"name" : "drawPoints",
"kind" : "function",
"protection" : "public",
"type" : "void(GC gc, GdkPoint[] points)",
"comment" : "\n Warning\n gdk_draw_points has been deprecated since version 2.22 and should not be used in newly-written code. Use n_points calls to cairo_rectangle() and\n cairo_fill() instead.\n Draws a number of points, using the foreground color and other\n attributes of the GdkGC.\n Params:\n gc = a GdkGC.\n points = an array of GdkPoint structures.\n\t \n",
"line" : 406}
,
{
"name" : "drawLine",
"kind" : "function",
"protection" : "public",
"type" : "void(GC gc, int x1_, int y1_, int x2_, int y2_)",
"comment" : "\n Warning\n gdk_draw_line has been deprecated since version 2.22 and should not be used in newly-written code. Use cairo_line_to() and cairo_stroke() instead.\n Be aware that the default line width in Cairo is 2 pixels and that your\n coordinates need to describe the center of the line. To draw a single\n Params:\n gc = a GdkGC.\n x1_ = the x coordinate of the start point.\n y1_ = the y coordinate of the start point.\n x2_ = the x coordinate of the end point.\n y2_ = the y coordinate of the end point.\n\t \n",
"line" : 424}
,
{
"name" : "drawLines",
"kind" : "function",
"protection" : "public",
"type" : "void(GC gc, GdkPoint[] points)",
"comment" : "\n Warning\n gdk_draw_lines has been deprecated since version 2.22 and should not be used in newly-written code. Use cairo_line_to() and cairo_stroke() instead. See the\n documentation of gdk_draw_line() for notes on line drawing with Cairo.\n Draws a series of lines connecting the given points.\n The way in which joins between lines are draw is determined by the\n GdkCapStyle value in the GdkGC. This can be set with\n gdk_gc_set_line_attributes().\n Params:\n gc = a GdkGC.\n points = an array of GdkPoint structures specifying the endpoints of the\n\t \n",
"line" : 442}
,
{
"name" : "drawPixbuf",
"kind" : "function",
"protection" : "public",
"type" : "void(GC gc, Pixbuf pixbuf, int srcX, int srcY, int destX, int destY, int width, int height, GdkRgbDither dither, int xDither, int yDither)",
"comment" : "\n Warning\n gdk_draw_pixbuf has been deprecated since version 2.22 and should not be used in newly-written code. Use gdk_cairo_set_source_pixbuf() and cairo_paint() or\n cairo_rectangle() and cairo_fill() instead.\n Renders a rectangular portion of a pixbuf to a drawable. The destination\n drawable must have a colormap. All windows have a colormap, however, pixmaps\n only have colormap by default if they were created with a non-NULL window\n argument. Otherwise a colormap must be set on them with\n gdk_drawable_set_colormap().\n On older X servers, rendering pixbufs with an alpha channel involves round\n trips to the X server, and may be somewhat slow.\n If GDK is built with the Sun mediaLib library, the gdk_draw_pixbuf\n function is accelerated using mediaLib, which provides hardware\n acceleration on Intel, AMD, and Sparc chipsets. If desired, mediaLib\n support can be turned off by setting the GDK_DISABLE_MEDIALIB environment\n variable.\n Since 2.2\n Params:\n gc = a GdkGC, used for clipping, or NULL. [allow-none]\n pixbuf = a GdkPixbuf\n srcX = Source X coordinate within pixbuf.\n srcY = Source Y coordinates within pixbuf.\n destX = Destination X coordinate within drawable.\n destY = Destination Y coordinate within drawable.\n width = Width of region to render, in pixels, or -1 to use pixbuf width.\n height = Height of region to render, in pixels, or -1 to use pixbuf height.\n dither = Dithering mode for GdkRGB.\n xDither = X offset for dither.\n yDither = Y offset for dither.\n\t \n",
"line" : 478}
,
{
"name" : "drawSegments",
"kind" : "function",
"protection" : "public",
"type" : "void(GC gc, GdkSegment[] segs)",
"comment" : "\n Warning\n gdk_draw_segments has been deprecated since version 2.22 and should not be used in newly-written code. Use cairo_move_to(), cairo_line_to() and cairo_stroke()\n instead. See the documentation of gdk_draw_line() for notes on line drawing\n with Cairo.\n Draws a number of unconnected lines.\n Params:\n gc = a GdkGC.\n segs = an array of GdkSegment structures specifying the start and\n  end points of the lines to be drawn.\n\t \n",
"line" : 495}
,
{
"name" : "drawRectangle",
"kind" : "function",
"protection" : "public",
"type" : "void(GC gc, int filled, int x, int y, int width, int height)",
"comment" : "\n Warning\n gdk_draw_rectangle has been deprecated since version 2.22 and should not be used in newly-written code. Use cairo_rectangle() and cairo_fill() or cairo_stroke()\n instead. For stroking, the same caveats for converting code apply as for\n gdk_draw_line().\n Draws a rectangular outline or filled rectangle, using the foreground color\n and other attributes of the GdkGC.\n A rectangle drawn filled is 1 pixel smaller in both dimensions than a\n rectangle outlined. Calling\n gdk_draw_rectangle (window, gc, TRUE, 0, 0, 20, 20)\n results in a filled rectangle 20 pixels wide and 20 pixels high. Calling\n gdk_draw_rectangle (window, gc, FALSE, 0, 0, 20, 20)\n results in an outlined rectangle with corners at (0, 0), (0, 20), (20, 20),\n and (20, 0), which makes it 21 pixels wide and 21 pixels high.\n Params:\n gc = a GdkGC.\n filled = TRUE if the rectangle should be filled.\n x = the x coordinate of the left edge of the rectangle.\n y = the y coordinate of the top edge of the rectangle.\n width = the width of the rectangle.\n height = the height of the rectangle.\n\t \n",
"line" : 523}
,
{
"name" : "drawArc",
"kind" : "function",
"protection" : "public",
"type" : "void(GC gc, int filled, int x, int y, int width, int height, int angle1, int angle2)",
"comment" : "\n Warning\n gdk_draw_arc has been deprecated since version 2.22 and should not be used in newly-written code. Use cairo_arc() and cairo_fill() or cairo_stroke()\n instead. Note that arcs just like any drawing operation in Cairo are\n antialiased unless you call cairo_set_antialias().\n Draws an arc or a filled 'pie slice'. The arc is defined by the bounding\n rectangle of the entire ellipse, and the start and end angles of the part\n of the ellipse to be drawn.\n Params:\n gc = a GdkGC.\n filled = TRUE if the arc should be filled, producing a 'pie slice'.\n x = the x coordinate of the left edge of the bounding rectangle.\n y = the y coordinate of the top edge of the bounding rectangle.\n width = the width of the bounding rectangle.\n height = the height of the bounding rectangle.\n angle1 = the start angle of the arc, relative to the 3 o'clock position,\n  counter-clockwise, in 1\/64ths of a degree.\n angle2 = the end angle of the arc, relative to angle1, in 1\/64ths\n  of a degree.\n\t \n",
"line" : 549}
,
{
"name" : "drawPolygon",
"kind" : "function",
"protection" : "public",
"type" : "void(GC gc, int filled, GdkPoint[] points)",
"comment" : "\n Warning\n gdk_draw_polygon has been deprecated since version 2.22 and should not be used in newly-written code. Use cairo_line_to() or cairo_append_path() and\n cairo_fill() or cairo_stroke() instead.\n Draws an outlined or filled polygon.\n Params:\n gc = a GdkGC.\n filled = TRUE if the polygon should be filled. The polygon is closed\n  automatically, connecting the last point to the first point if\n  necessary.\n points = an array of GdkPoint structures specifying the points making\n  up the polygon.\n\t \n",
"line" : 568}
,
{
"name" : "drawTrapezoids",
"kind" : "function",
"protection" : "public",
"type" : "void(GC gc, GdkTrapezoid[] trapezoids)",
"comment" : "\n Warning\n gdk_draw_trapezoids has been deprecated since version 2.22 and should not be used in newly-written code. Use Cairo path contruction functions and cairo_fill()\n instead.\n Draws a set of anti-aliased trapezoids. The trapezoids are\n combined using saturation addition, then drawn over the background\n as a set. This is low level functionality used internally to implement\n rotated underlines and backgrouds when rendering a PangoLayout and is\n likely not useful for applications.\n Since 2.6\n Params:\n gc = a GdkGC\n trapezoids = an array of GdkTrapezoid structures\n\t \n",
"line" : 588}
,
{
"name" : "drawGlyphs",
"kind" : "function",
"protection" : "public",
"type" : "void(GC gc, PgFont font, int x, int y, PgGlyphString glyphs)",
"comment" : "\n Warning\n gdk_draw_glyphs has been deprecated since version 2.22 and should not be used in newly-written code. Use pango_cairo_show_glyphs() instead.\n This is a low-level function; 99% of text rendering should be done\n using gdk_draw_layout() instead.\n A glyph is a single image in a font. This function draws a sequence of\n glyphs. To obtain a sequence of glyphs you have to understand a\n lot about internationalized text handling, which you don't want to\n understand; thus, use gdk_draw_layout() instead of this function,\n gdk_draw_layout() handles the details.\n Params:\n gc = a GdkGC\n font = font to be used\n x = X coordinate of baseline origin\n y = Y coordinate of baseline origin\n glyphs = the glyph string to draw\n\t \n",
"line" : 611}
,
{
"name" : "drawGlyphsTransformed",
"kind" : "function",
"protection" : "public",
"type" : "void(GC gc, PgMatrix matrix, PgFont font, int x, int y, PgGlyphString glyphs)",
"comment" : "\n Warning\n gdk_draw_glyphs_transformed has been deprecated since version 2.22 and should not be used in newly-written code. Use pango_cairo_show_glyphs() instead.\n Renders a PangoGlyphString onto a drawable, possibly\n transforming the layed-out coordinates through a transformation\n matrix. Note that the transformation matrix for font is not\n changed, so to produce correct rendering results, the font\n must have been loaded using a PangoContext with an identical\n transformation matrix to that passed in to this function.\n See also gdk_draw_glyphs(), gdk_draw_layout().\n Since 2.6\n Params:\n gc = a GdkGC\n matrix = a PangoMatrix, or NULL to use an identity transformation. [allow-none]\n font = the font in which to draw the string\n x = the x position of the start of the string (in Pango\n  units in user space coordinates)\n y = the y position of the baseline (in Pango units\n  in user space coordinates)\n glyphs = the glyph string to draw\n\t \n",
"line" : 638}
,
{
"name" : "drawLayoutLine",
"kind" : "function",
"protection" : "public",
"type" : "void(GC gc, int x, int y, PgLayoutLine line)",
"comment" : "\n Warning\n gdk_draw_layout_line is deprecated and should not be used in newly-written code.\n Render a PangoLayoutLine onto an GDK drawable\n If the layout's PangoContext has a transformation matrix set, then\n x and y specify the position of the left edge of the baseline\n (left is in before-tranform user coordinates) in after-transform\n device coordinates.\n Params:\n gc = base graphics to use\n x = the x position of start of string (in pixels)\n y = the y position of baseline (in pixels)\n line = a PangoLayoutLine\n\t \n",
"line" : 658}
,
{
"name" : "drawLayoutLineWithColors",
"kind" : "function",
"protection" : "public",
"type" : "void(GC gc, int x, int y, PgLayoutLine line, Color foreground, Color background)",
"comment" : "\n Warning\n gdk_draw_layout_line_with_colors is deprecated and should not be used in newly-written code.\n Render a PangoLayoutLine onto a GdkDrawable, overriding the\n layout's normal colors with foreground and\/or background.\n foreground and background need not be allocated.\n If the layout's PangoContext has a transformation matrix set, then\n x and y specify the position of the left edge of the baseline\n (left is in before-tranform user coordinates) in after-transform\n device coordinates.\n Params:\n gc = base graphics to use\n x = the x position of start of string (in pixels)\n y = the y position of baseline (in pixels)\n line = a PangoLayoutLine\n foreground = foreground override color, or NULL for none. [allow-none]\n background = background override color, or NULL for none. [allow-none]\n\t \n",
"line" : 682}
,
{
"name" : "drawLayout",
"kind" : "function",
"protection" : "public",
"type" : "void(GC gc, int x, int y, PgLayout layout)",
"comment" : "\n Warning\n gdk_draw_layout is deprecated and should not be used in newly-written code.\n Render a PangoLayout onto a GDK drawable\n If the layout's PangoContext has a transformation matrix set, then\n x and y specify the position of the top left corner of the\n bounding box (in device space) of the transformed layout.\n If you're using GTK+, the usual way to obtain a PangoLayout\n is gtk_widget_create_pango_layout().\n Params:\n gc = base graphics context to use\n x = the X position of the left of the layout (in pixels)\n y = the Y position of the top of the layout (in pixels)\n layout = a PangoLayout\n\t \n",
"line" : 703}
,
{
"name" : "drawLayoutWithColors",
"kind" : "function",
"protection" : "public",
"type" : "void(GC gc, int x, int y, PgLayout layout, Color foreground, Color background)",
"comment" : "\n Warning\n gdk_draw_layout_with_colors is deprecated and should not be used in newly-written code.\n Render a PangoLayout onto a GdkDrawable, overriding the\n layout's normal colors with foreground and\/or background.\n foreground and background need not be allocated.\n If the layout's PangoContext has a transformation matrix set, then\n x and y specify the position of the top left corner of the\n bounding box (in device space) of the transformed layout.\n If you're using GTK+, the ususal way to obtain a PangoLayout\n is gtk_widget_create_pango_layout().\n Params:\n gc = base graphics context to use\n x = the X position of the left of the layout (in pixels)\n y = the Y position of the top of the layout (in pixels)\n layout = a PangoLayout\n foreground = foreground override color, or NULL for none. [allow-none]\n background = background override color, or NULL for none. [allow-none]\n\t \n",
"line" : 728}
,
{
"name" : "drawString",
"kind" : "function",
"protection" : "public",
"type" : "void(Font font, GC gc, int x, int y, string string)",
"comment" : "\n Warning\n gdk_draw_string has been deprecated since version 2.4 and should not be used in newly-written code. Use gdk_draw_layout() instead.\n Draws a string of characters in the given font or fontset.\n Params:\n font = a GdkFont.\n gc = a GdkGC.\n x = the x coordinate of the left edge of the text.\n y = the y coordinate of the baseline of the text.\n string = the string of characters to draw.\n\t \n",
"line" : 745}
,
{
"name" : "drawText",
"kind" : "function",
"protection" : "public",
"type" : "void(Font font, GC gc, int x, int y, string text, int textLength)",
"comment" : "\n Warning\n gdk_draw_text has been deprecated since version 2.4 and should not be used in newly-written code. Use gdk_draw_layout() instead.\n Draws a number of characters in the given font or fontset.\n Params:\n font = a GdkFont.\n gc = a GdkGC.\n x = the x coordinate of the left edge of the text.\n y = the y coordinate of the baseline of the text.\n text = the characters to draw.\n textLength = the number of characters of text to draw.\n\t \n",
"line" : 763}
,
{
"name" : "drawTextWc",
"kind" : "function",
"protection" : "public",
"type" : "void(Font font, GC gc, int x, int y, uint[] text)",
"comment" : "\n Warning\n gdk_draw_text_wc has been deprecated since version 2.4 and should not be used in newly-written code. Use gdk_draw_layout() instead.\n Draws a number of wide characters using the given font of fontset.\n If the font is a 1-byte font, the string is converted into 1-byte\n characters (discarding the high bytes) before output.\n Params:\n font = a GdkFont.\n gc = a GdkGC.\n x = the x coordinate of the left edge of the text.\n y = the y coordinate of the baseline of the text.\n text = the wide characters to draw.\n\t \n",
"line" : 782}
,
{
"name" : "drawDrawable",
"kind" : "function",
"protection" : "public",
"type" : "void(GC gc, Drawable src, int xsrc, int ysrc, int xdest, int ydest, int width, int height)",
"comment" : "\n Warning\n gdk_draw_drawable has been deprecated since version 2.22 and should not be used in newly-written code. Use gdk_cairo_set_source_pixmap(), cairo_rectangle()\n and cairo_fill() to draw pixmap on top of other drawables. Also keep\n in mind that the limitations on allowed sources do not apply to Cairo.\n Copies the width x height region of src at coordinates (xsrc,\n ysrc) to coordinates (xdest, ydest) in drawable.\n width and\/or height may be given as -1, in which case the entire\n src drawable will be copied.\n Most fields in gc are not used for this operation, but notably the\n clip mask or clip region will be honored.\n The source and destination drawables must have the same visual and\n colormap, or errors will result. (On X11, failure to match\n visual\/colormap results in a BadMatch error from the X server.)\n A common cause of this problem is an attempt to draw a bitmap to\n a color drawable. The way to draw a bitmap is to set the bitmap as\n the stipple on the GdkGC, set the fill mode to GDK_STIPPLED, and\n then draw the rectangle.\n Params:\n gc = a GdkGC sharing the drawable's visual and colormap\n src = the source GdkDrawable, which may be the same as drawable\n xsrc = X position in src of rectangle to draw\n ysrc = Y position in src of rectangle to draw\n xdest = X position in drawable where the rectangle should be drawn\n ydest = Y position in drawable where the rectangle should be drawn\n width = width of rectangle to draw, or -1 for entire src width\n height = height of rectangle to draw, or -1 for entire src height\n\t \n",
"line" : 816}
,
{
"name" : "drawImage",
"kind" : "function",
"protection" : "public",
"type" : "void(GC gc, ImageGdk image, int xsrc, int ysrc, int xdest, int ydest, int width, int height)",
"comment" : "\n Warning\n gdk_draw_image has been deprecated since version 2.22 and should not be used in newly-written code. Do not use GdkImage anymore, instead use Cairo image\n surfaces.\n Draws a GdkImage onto a drawable.\n The depth of the GdkImage must match the depth of the GdkDrawable.\n Params:\n gc = a GdkGC.\n image = the GdkImage to draw.\n xsrc = the left edge of the source rectangle within image.\n ysrc = the top of the source rectangle within image.\n xdest = the x coordinate of the destination within drawable.\n ydest = the y coordinate of the destination within drawable.\n width = the width of the area to be copied, or -1 to make the area\n  extend to the right edge of image.\n height = the height of the area to be copied, or -1 to make the area\n  extend to the bottom edge of image.\n\t \n",
"line" : 840}
,
{
"name" : "getImage",
"kind" : "function",
"protection" : "public",
"type" : "ImageGdk(int x, int y, int width, int height)",
"comment" : "\n Warning\n gdk_drawable_get_image has been deprecated since version 2.22 and should not be used in newly-written code. Use drawable as the source and draw to a Cairo image\n surface if you want to download contents to the client.\n A GdkImage stores client-side image data (pixels). In contrast,\n GdkPixmap and GdkWindow are server-side\n objects. gdk_drawable_get_image() obtains the pixels from a\n server-side drawable as a client-side GdkImage. The format of a\n GdkImage depends on the GdkVisual of the current display, which\n makes manipulating GdkImage extremely difficult; therefore, in\n most cases you should use gdk_pixbuf_get_from_drawable() instead of\n this lower-level function. A GdkPixbuf contains image data in a\n canonicalized RGB format, rather than a display-dependent format.\n Of course, there's a convenience vs. speed tradeoff here, so you'll\n want to think about what makes sense for your application.\n x, y, width, and height define the region of drawable to\n obtain as an image.\n You would usually copy image data to the client side if you intend\n to examine the values of individual pixels, for example to darken\n an image or add a red tint. It would be prohibitively slow to\n make a round-trip request to the windowing system for each pixel,\n so instead you get all of them at once, modify them, then copy\n them all back at once.\n If the X server or other windowing system backend is on the local\n machine, this function may use shared memory to avoid copying\n the image data.\n If the source drawable is a GdkWindow and partially offscreen\n or obscured, then the obscured portions of the returned image\n will contain undefined data.\n Params:\n x = x coordinate on drawable\n y = y coordinate on drawable\n width = width of region to get\n height = height or region to get\n Returns: a GdkImage containing the contents of drawable\n\t \n",
"line" : 882}
,
{
"name" : "copyToImage",
"kind" : "function",
"protection" : "public",
"type" : "ImageGdk(ImageGdk image, int srcX, int srcY, int destX, int destY, int width, int height)",
"comment" : "\n Warning\n gdk_drawable_copy_to_image has been deprecated since version 2.22 and should not be used in newly-written code. Use drawable as the source and draw to a Cairo image\n surface if you want to download contents to the client.\n Copies a portion of drawable into the client side image structure\n image. If image is NULL, creates a new image of size width x height\n and copies into that. See gdk_drawable_get_image() for further details.\n Since 2.4\n Params:\n image = a GdkDrawable, or NULL if a new image should be created. [allow-none]\n srcX = x coordinate on drawable\n srcY = y coordinate on drawable\n destX = x coordinate within image. Must be 0 if image is NULL\n destY = y coordinate within image. Must be 0 if image is NULL\n width = width of region to get\n height = height or region to get\n Returns: image, or a new a GdkImage containing the contents of drawable\n\t \n",
"line" : 911}
]
}
]
}
,
{
"name" : "gdk.Event",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/Event.d",
"members" : [
{
"name" : "Event",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n This section describes functions dealing with events from the window system.\n In GTK+ applications the events are handled automatically in\n gtk_main_do_event() and passed on to the appropriate widgets, so these\n functions are rarely needed. Though some of the fields in the\n Event Structures are useful.\n \n",
"line" : 87,
"base" : "Object",
"members" : [
{
"name" : "gdkEvent",
"kind" : "variable",
"protection" : "protected",
"type" : "GdkEvent*",
"comment" : " the main Gtk struct \n",
"line" : 90}
,
{
"name" : "getEventStruct",
"kind" : "function",
"protection" : "public",
"type" : "GdkEvent*()",
"line" : 93}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 100}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Event(GdkEvent* gdkEvent)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 108}
,
{
"name" : "isDoubleClick",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventButton* eventButton, int buttonNumber = 1)",
"comment" : " \n",
"line" : 119}
,
{
"name" : "isTripleClick",
"kind" : "function",
"protection" : "public",
"type" : "bool(GdkEventButton* eventButton, int buttonNumber = 1)",
"comment" : " \n",
"line" : 126}
,
{
"name" : "gdkEventsPending",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n\t \n\n Checks if any events are ready to be processed for any display.\n Returns: TRUE if any events are pending.\n\t \n",
"line" : 139}
,
{
"name" : "peek",
"kind" : "function",
"protection" : "public",
"type" : "Event()",
"comment" : "\n If there is an event waiting in the event queue of some open\n display, returns a copy of it. See gdk_display_peek_event().\n Returns: a copy of the first GdkEvent on some event queue, or NULL if no events are in any queues. The returned GdkEvent should be freed with gdk_event_free().\n\t \n",
"line" : 150}
,
{
"name" : "get",
"kind" : "function",
"protection" : "public",
"type" : "Event()",
"comment" : "\n Checks all open displays for a GdkEvent to process,to be processed\n on, fetching events from the windowing system if necessary.\n See gdk_display_get_event().\n Returns: the next GdkEvent to be processed, or NULL if no events are pending. The returned GdkEvent should be freed with gdk_event_free().\n\t \n",
"line" : 167}
,
{
"name" : "getGraphicsExpose",
"kind" : "function",
"protection" : "public",
"type" : "Event(Window window)",
"comment" : "\n Warning\n gdk_event_get_graphics_expose has been deprecated since version 2.18 and should not be used in newly-written code.\n Waits for a GraphicsExpose or NoExpose event from the X server.\n This is used in the GtkText and GtkCList widgets in GTK+ to make sure any\n GraphicsExpose events are handled before the widget is scrolled.\n Params:\n window = the GdkWindow to wait for the events for.\n Returns: a GdkEventExpose if a GraphicsExpose was received, or NULL if a NoExpose event was received.\n\t \n",
"line" : 188}
,
{
"name" : "put",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Appends a copy of the given event onto the front of the event\n queue for event->any.window's display, or the default event\n queue if event->any.window is NULL. See gdk_display_put_event().\n\t \n",
"line" : 204}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Event(GdkEventType type)",
"comment" : "\n Creates a new event of the given type. All fields are set to 0.\n Since 2.2\n Params:\n type = a GdkEventType\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 217}
,
{
"name" : "copy",
"kind" : "function",
"protection" : "public",
"type" : "Event()",
"comment" : "\n Copies a GdkEvent, copying or incrementing the reference count of the\n resources associated with it (e.g. GdkWindow's and strings).\n Returns: a copy of event. The returned GdkEvent should be freed with gdk_event_free().\n\t \n",
"line" : 233}
,
{
"name" : "free",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Frees a GdkEvent, freeing or decrementing any resources associated with it.\n Note that this function should only be called with events returned from\n functions such as gdk_event_peek(), gdk_event_get(),\n gdk_event_get_graphics_expose() and gdk_event_copy() and gdk_event_new().\n\t \n",
"line" : 250}
,
{
"name" : "getTime",
"kind" : "function",
"protection" : "public",
"type" : "uint()",
"comment" : "\n Returns the time stamp from event, if there is one; otherwise\n returns GDK_CURRENT_TIME. If event is NULL, returns GDK_CURRENT_TIME.\n Returns: time stamp field from event\n\t \n",
"line" : 261}
,
{
"name" : "getState",
"kind" : "function",
"protection" : "public",
"type" : "int(out GdkModifierType state)",
"comment" : "\n If the event contains a \"state\" field, puts that field in state. Otherwise\n stores an empty state (0). Returns TRUE if there was a state field\n in the event. event may be NULL, in which case it's treated\n as if the event had no state field.\n Params:\n state = return location for state. [out]\n Returns: TRUE if there was a state field in the event\n\t \n",
"line" : 276}
,
{
"name" : "getAxis",
"kind" : "function",
"protection" : "public",
"type" : "int(GdkAxisUse axisUse, out double value)",
"comment" : "\n Extract the axis value for a particular axis use from\n an event structure.\n Params:\n axisUse = the axis use to look for. [out]\n value = location to store the value found. [out]\n Returns: TRUE if the specified axis was found, otherwise FALSE\n\t \n",
"line" : 290}
,
{
"name" : "getCoords",
"kind" : "function",
"protection" : "public",
"type" : "int(out double xWin, out double yWin)",
"comment" : "\n Extract the event window relative x\/y coordinates from an event.\n Params:\n xWin = location to put event window x coordinate. [out]\n yWin = location to put event window y coordinate. [out]\n Returns: TRUE if the event delivered event window coordinates\n\t \n",
"line" : 303}
,
{
"name" : "getRootCoords",
"kind" : "function",
"protection" : "public",
"type" : "int(out double xRoot, out double yRoot)",
"comment" : "\n Extract the root window relative x\/y coordinates from an event.\n Params:\n xRoot = location to put root window x coordinate. [out]\n yRoot = location to put root window y coordinate. [out]\n Returns: TRUE if the event delivered root window coordinates\n\t \n",
"line" : 316}
,
{
"name" : "requestMotions",
"kind" : "function",
"protection" : "public",
"type" : "void(GdkEventMotion* event)",
"comment" : "\n Request more motion notifies if event is a motion notify hint event.\n This function should be used instead of gdk_window_get_pointer() to\n request further motion notifies, because it also works for extension\n events where motion notifies are provided for devices other than the\n core pointer. Coordinate extraction, processing and requesting more\n Since 2.12\n Params:\n event = a valid GdkEvent\n\t \n",
"line" : 332}
,
{
"name" : "handlerSet",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) void function(GdkEvent*, void*) func, void* data, extern (C) void function(void* cbData) notify)",
"comment" : "\n Sets the function to call to handle all events from GDK.\n Note that GTK+ uses this to install its own event handler, so it is\n usually not useful for GTK+ applications. (Although an application\n can call this function then call gtk_main_do_event() to pass\n events to GTK+.)\n Params:\n func = the function to call to handle events from GDK.\n data = user data to pass to the function.\n notify = the function to call when the handler function is removed, i.e. when\n  gdk_event_handler_set() is called with another event handler.\n\t \n",
"line" : 350}
,
{
"name" : "sendClientMessage",
"kind" : "function",
"protection" : "public",
"type" : "int(void* winid)",
"comment" : "\n Sends an X ClientMessage event to a given window (which must be\n on the default GdkDisplay.)\n This could be used for communicating between different applications,\n though the amount of data is limited to 20 bytes.\n Params:\n winid = the window to send the X ClientMessage event to.\n Returns: non-zero on success.\n\t \n",
"line" : 365}
,
{
"name" : "sendClientMessageForDisplay",
"kind" : "function",
"protection" : "public",
"type" : "int(Display display, Event event, void* winid)",
"comment" : "\n On X11, sends an X ClientMessage event to a given window. On\n Windows, sends a message registered with the name\n GDK_WIN32_CLIENT_MESSAGE.\n This could be used for communicating between different\n applications, though the amount of data is limited to 20 bytes on\n X11, and to just four bytes on Windows.\n Since 2.2\n Params:\n display = the GdkDisplay for the window where the message is to be sent.\n event = the GdkEvent to send, which should be a GdkEventClient.\n winid = the window to send the client message to.\n Returns: non-zero on success.\n\t \n",
"line" : 385}
,
{
"name" : "sendClientmessageToall",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Sends an X ClientMessage event to all toplevel windows on the default\n GdkScreen.\n Toplevel windows are determined by checking for the WM_STATE property, as\n described in the Inter-Client Communication Conventions Manual (ICCCM).\n If no windows are found with the WM_STATE property set, the message is sent\n to all children of the root window.\n\t \n",
"line" : 399}
,
{
"name" : "gdkAddClientMessageFilter",
"kind" : "function",
"protection" : "public",
"type" : "void(void* messageType, extern (C) GdkFilterReturn function(void*, GdkEvent*, void*) func, void* data)",
"comment" : "\n Adds a filter to the default display to be called when X ClientMessage events\n are received. See gdk_display_add_client_message_filter().\n Params:\n messageType = the type of ClientMessage events to receive. This will be\n  checked against the message_type field of the\n  XClientMessage event struct.\n func = the function to call to process the event.\n data = user data to pass to func.\n\t \n",
"line" : 415}
,
{
"name" : "gdkGetShowEvents",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets whether event debugging output is enabled.\n Returns: TRUE if event debugging output is enabled.\n\t \n",
"line" : 425}
,
{
"name" : "gdkSetShowEvents",
"kind" : "function",
"protection" : "public",
"type" : "void(int showEvents)",
"comment" : "\n Sets whether a trace of received events is output.\n Note that GTK+ must be compiled with debugging (that is,\n configured using the --enable-debug option)\n to use this option.\n Params:\n showEvents = TRUE to output event debugging information.\n\t \n",
"line" : 439}
,
{
"name" : "setScreen",
"kind" : "function",
"protection" : "public",
"type" : "void(Screen screen)",
"comment" : "\n Sets the screen for event to screen. The event must\n have been allocated by GTK+, for instance, by\n gdk_event_copy().\n Since 2.2\n Params:\n screen = a GdkScreen\n\t \n",
"line" : 453}
,
{
"name" : "getScreen",
"kind" : "function",
"protection" : "public",
"type" : "Screen()",
"comment" : "\n Returns the screen for the event. The screen is\n typically the screen for event->any.window, but\n for events such as mouse events, it is the screen\n where the pointer was when the event occurs -\n that is, the screen which has the root window\n to which event->motion.x_root and\n event->motion.y_root are relative.\n Since 2.2\n Returns: the screen for the event\n\t \n",
"line" : 470}
,
{
"name" : "gdkSettingGet",
"kind" : "function",
"protection" : "public",
"type" : "int(string name, Value value)",
"comment" : "\n Obtains a desktop-wide setting, such as the double-click time,\n for the default screen. See gdk_screen_get_setting().\n Params:\n name = the name of the setting.\n value = location to store the value of the setting.\n Returns: TRUE if the setting existed and a value was stored in value, FALSE otherwise.\n\t \n",
"line" : 489}
]
}
]
}
,
{
"name" : "gdk.EventStruct",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/EventStruct.d",
"members" : [
]
}
,
{
"name" : "gdk.Font",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/Font.d",
"members" : [
{
"name" : "Font",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GdkFont data type represents a font for drawing on\n the screen. These functions provide support for\n loading fonts, and also for determining the dimensions\n of characters and strings when drawn with a particular\n font.\n Fonts in X are specified by a\n X Logical Font Description.\n The following description is considerably simplified.\n For definitive information about XLFD's see the\n X reference documentation. A X Logical Font Description (XLFD)\n consists of a sequence of fields separated (and surrounded by) '-'\n characters. For example, Adobe Helvetica Bold 12 pt, has the\n full description:\n $(DDOC_COMMENT example)\n The fields in the XLFD are:\n Foundry\n the company or organization where the font originated.\n Family\n the font family (a group of related font designs).\n Weight\n A name for the font's typographic weight\n For example, 'bold' or 'medium').\n Slant\n The slant of the font. Common values are 'R' for Roman,\n 'I' for italoc, and 'O' for oblique.\n Set Width\n A name for the width of the font. For example,\n 'normal' or 'condensed'.\n Add Style\n Additional information to distinguish a font from\n other fonts of the same family.\n Pixel Size\n The body size of the font in pixels.\n Point Size\n The body size of the font in 10ths of a point.\n (A point is 1\/72.27 inch)\n Resolution X\n The horizontal resolution that the font was designed for.\n Resolution Y\n The vertical resolution that the font was designed for .\n Spacing\n The type of spacing for the font - can be 'p' for proportional,\n 'm' for monospaced or 'c' for charcell.\n Average Width\n The average width of a glyph in the font. For monospaced\n and charcell fonts, all glyphs in the font have this width\n Charset Registry\n The registration authority that owns the encoding for\n the font. Together with the Charset Encoding field, this\n defines the character set for the font.\n Charset Encoding\n An identifier for the particular character set encoding.\n When specifying a font via a X logical Font Description,\n '*' can be used as a wildcard to match any portion of\n the XLFD. For instance, the above example could\n also be specified as\n $(DDOC_COMMENT example)\n It is generally a good idea to use wildcards for any\n portion of the XLFD that your program does not care\n about specifically, since that will improve the\n chances of finding a matching font.\n A fontset is a list of fonts\n that is used for drawing international text that may\n contain characters from a number of different character\n sets. It is represented by a list of XLFD's.\n The font for a given character set is determined by going\n through the list of XLFD's in order. For each one, if\n the registry and and encoding fields match the desired\n character set, then that font is used, otherwise if\n the XLFD contains wild-cards for the registry and encoding\n fields, the registry and encoding for the desired character\n set are substituted in and a lookup is done. If a match is found\n that font is used. Otherwise, processing continues\n on to the next font in the list.\n The functions for determining the metrics of a string\n come in several varieties that can take a number\n of forms of string input:\n 8-bit string\n  When using functions like gdk_string_width() that\n  take a gchar *, if the font is of type\n  GDK_FONT_FONT and is an 8-bit font, then each\n  gchar indexes the glyphs in the font directly.\n 16-bit string\n  For functions taking a gchar *, if the\n  font is of type GDK_FONT_FONT, and is a 16-bit\n  font, then the gchar * argument is\n  interpreted as a guint16 * cast to\n  a gchar * and each guint16\n  indexes the glyphs in the font directly.\n Multibyte string\n  For functions taking a gchar *, if the\n  font is of type GDK_FONT_FONTSET, then the input\n  string is interpreted as a multibyte\n  encoded according to the current locale. (A multibyte\n  string is one in which each character may consist\n  of one or more bytes, with different lengths for different\n  characters in the string). They can be converted to and\n  from wide character strings (see below) using\n  gdk_wcstombs() and gdk_mbstowcs().) The string will\n  be rendered using one or more different fonts from\n  the fontset.\n Wide character string\n  For a number of the text-measuring functions, GDK\n  provides a variant (such as gdk_text_width_wc()) which\n  takes a GdkWChar * instead of a\n  gchar *. The input is then taken to\n  be a wide character string in the encoding of the\n  current locale. (A wide character string is a string\n  in which each character consists of several bytes,\n  and the width of each character in the string is\n  constant.)\n GDK provides functions to determine a number of different\n measurements (metrics) for a given string. (Need diagram\n here).\n ascent\n  The vertical distance from the origin of the drawing\n  opereration to the top of the drawn character.\n descent\n  The vertical distance from the origin of the drawing\n  opereration to the bottom of the drawn character.\n left bearing\n  The horizontal distance from the origin of the drawing\n  operation to the left-most part of the drawn character.\n right bearing\n  The horizontal distance from the origin of the drawing\n  operation to the right-most part of the drawn character.\n width bearing\n  The horizontal distance from the origin of the drawing\n  operation to the correct origin for drawing another\n  string to follow the current one. Depending on the\n  font, this could be greater than or less than the\n  right bearing.\n \n",
"line" : 209,
"base" : "Object",
"members" : [
{
"name" : "gdkFont",
"kind" : "variable",
"protection" : "protected",
"type" : "GdkFont*",
"comment" : " the main Gtk struct \n",
"line" : 212}
,
{
"name" : "getFontStruct",
"kind" : "function",
"protection" : "public",
"type" : "GdkFont*()",
"line" : 215}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 222}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Font(GdkFont* gdkFont)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 230}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Font(string fontName)",
"comment" : "\n Create and loads a font\n\t \n",
"line" : 243}
,
{
"name" : "load",
"kind" : "function",
"protection" : "public",
"type" : "Font(string fontName)",
"comment" : "\n\t \n\n Warning\n gdk_font_load is deprecated and should not be used in newly-written code.\n Loads a font.\n The font may be newly loaded or looked up the font in a cache.\n You should make no assumptions about the initial reference count.\n Params:\n fontName = a XLFD describing the font to load.\n Returns: a GdkFont, or NULL if the font could not be loaded.\n\t \n",
"line" : 261}
,
{
"name" : "loadForDisplay",
"kind" : "function",
"protection" : "public",
"type" : "Font(Display display, string fontName)",
"comment" : "\n Warning\n gdk_font_load_for_display is deprecated and should not be used in newly-written code.\n Loads a font for use on display.\n The font may be newly loaded or looked up the font in a cache.\n You should make no assumptions about the initial reference count.\n Since 2.2\n Params:\n display = a GdkDisplay\n fontName = a XLFD describing the font to load.\n Returns: a GdkFont, or NULL if the font could not be loaded.\n\t \n",
"line" : 284}
,
{
"name" : "fontsetLoad",
"kind" : "function",
"protection" : "public",
"type" : "Font(string fontsetName)",
"comment" : "\n Warning\n gdk_fontset_load is deprecated and should not be used in newly-written code.\n Loads a fontset.\n The fontset may be newly loaded or looked up in a cache.\n You should make no assumptions about the initial reference count.\n Params:\n fontsetName = a comma-separated list of XLFDs describing\n  the component fonts of the fontset to load.\n Returns: a GdkFont, or NULL if the fontset could not be loaded.\n\t \n",
"line" : 306}
,
{
"name" : "fontsetLoadForDisplay",
"kind" : "function",
"protection" : "public",
"type" : "Font(Display display, string fontsetName)",
"comment" : "\n Warning\n gdk_fontset_load_for_display is deprecated and should not be used in newly-written code.\n Loads a fontset for use on display.\n The fontset may be newly loaded or looked up in a cache.\n You should make no assumptions about the initial reference count.\n Since 2.2\n Params:\n display = a GdkDisplay\n fontsetName = a comma-separated list of XLFDs describing\n  the component fonts of the fontset to load.\n Returns: a GdkFont, or NULL if the fontset could not be loaded.\n\t \n",
"line" : 330}
,
{
"name" : "fromDescription",
"kind" : "function",
"protection" : "public",
"type" : "Font(PgFontDescription fontDesc)",
"comment" : "\n Warning\n gdk_font_from_description is deprecated and should not be used in newly-written code.\n Load a GdkFont based on a Pango font description. This font will\n only be an approximation of the Pango font, and\n internationalization will not be handled correctly. This function\n should only be used for legacy code that cannot be easily converted\n to use Pango. Using Pango directly will produce better results.\n Params:\n fontDesc = a PangoFontDescription.\n Returns: the newly loaded font, or NULL if the font cannot be loaded.\n\t \n",
"line" : 353}
,
{
"name" : "fromDescriptionForDisplay",
"kind" : "function",
"protection" : "public",
"type" : "Font(Display display, PgFontDescription fontDesc)",
"comment" : "\n Warning\n gdk_font_from_description_for_display is deprecated and should not be used in newly-written code.\n Loads a GdkFont based on a Pango font description for use on display.\n This font will only be an approximation of the Pango font, and\n internationalization will not be handled correctly. This function\n should only be used for legacy code that cannot be easily converted\n to use Pango. Using Pango directly will produce better results.\n Since 2.2\n Params:\n display = a GdkDisplay\n fontDesc = a PangoFontDescription.\n Returns: the newly loaded font, or NULL if the font cannot be loaded.\n\t \n",
"line" : 378}
,
{
"name" : "getDisplay",
"kind" : "function",
"protection" : "public",
"type" : "Display()",
"comment" : "\n Warning\n gdk_font_get_display is deprecated and should not be used in newly-written code.\n Returns the GdkDisplay for font.\n Since 2.2\n Returns: the corresponding GdkDisplay.\n\t \n",
"line" : 396}
,
{
"name" : "doref",
"kind" : "function",
"protection" : "public",
"type" : "Font()",
"comment" : "\n Warning\n gdk_font_ref is deprecated and should not be used in newly-written code.\n Increases the reference count of a font by one.\n Returns: font\n\t \n",
"line" : 413}
,
{
"name" : "unref",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gdk_font_unref is deprecated and should not be used in newly-written code.\n Decreases the reference count of a font by one.\n If the result is zero, destroys the font.\n\t \n",
"line" : 430}
,
{
"name" : "id",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Warning\n gdk_font_id is deprecated and should not be used in newly-written code.\n Returns the X Font ID for the given font.\n Returns: the numeric X Font ID\n\t \n",
"line" : 442}
,
{
"name" : "equal",
"kind" : "function",
"protection" : "public",
"type" : "int(Font fontb)",
"comment" : "\n Warning\n gdk_font_equal is deprecated and should not be used in newly-written code.\n Compares two fonts for equality. Single fonts compare equal\n if they have the same X font ID. This operation does\n not currently work correctly for fontsets.\n Params:\n fontb = another GdkFont.\n Returns: TRUE if the fonts are equal.\n\t \n",
"line" : 458}
,
{
"name" : "stringExtents",
"kind" : "function",
"protection" : "public",
"type" : "void(string string, out int lbearing, out int rbearing, out int width, out int ascent, out int descent)",
"comment" : "\n Warning\n gdk_string_extents is deprecated and should not be used in newly-written code.\n Gets the metrics of a nul-terminated string.\n Params:\n string = the nul-terminated string to measure.\n lbearing = the left bearing of the string.\n rbearing = the right bearing of the string.\n width = the width of the string.\n ascent = the ascent of the string.\n descent = the descent of the string.\n\t \n",
"line" : 476}
,
{
"name" : "textExtents",
"kind" : "function",
"protection" : "public",
"type" : "void(string text, int textLength, out int lbearing, out int rbearing, out int width, out int ascent, out int descent)",
"comment" : "\n Warning\n gdk_text_extents is deprecated and should not be used in newly-written code.\n Gets the metrics of a string.\n Params:\n text = the text to measure\n textLength = the length of the text in bytes. (If the\n  font is a 16-bit font, this is twice the length\n  of the text in characters.)\n lbearing = the left bearing of the string.\n rbearing = the right bearing of the string.\n width = the width of the string.\n ascent = the ascent of the string.\n descent = the descent of the string.\n\t \n",
"line" : 497}
,
{
"name" : "textExtentsWc",
"kind" : "function",
"protection" : "public",
"type" : "void(uint[] text, out int lbearing, out int rbearing, out int width, out int ascent, out int descent)",
"comment" : "\n Warning\n gdk_text_extents_wc is deprecated and should not be used in newly-written code.\n Gets the metrics of a string of wide characters.\n Params:\n text = the text to measure.\n lbearing = the left bearing of the string.\n rbearing = the right bearing of the string.\n width = the width of the string.\n ascent = the ascent of the string.\n descent = the descent of the string.\n\t \n",
"line" : 515}
,
{
"name" : "stringWidth",
"kind" : "function",
"protection" : "public",
"type" : "int(string string)",
"comment" : "\n Warning\n gdk_string_width is deprecated and should not be used in newly-written code.\n Determines the width of a nul-terminated string.\n (The distance from the origin of the string to the\n point where the next string in a sequence of strings\n should be drawn)\n Params:\n string = the nul-terminated string to measure\n Returns: the width of the string in pixels.\n\t \n",
"line" : 532}
,
{
"name" : "textWidth",
"kind" : "function",
"protection" : "public",
"type" : "int(string text, int textLength)",
"comment" : "\n Warning\n gdk_text_width is deprecated and should not be used in newly-written code.\n Determines the width of a given string.\n Params:\n text = the text to measure.\n textLength = the length of the text in bytes.\n Returns: the width of the string in pixels.\n\t \n",
"line" : 547}
,
{
"name" : "textWidthWc",
"kind" : "function",
"protection" : "public",
"type" : "int(uint[] text)",
"comment" : "\n Warning\n gdk_text_width_wc is deprecated and should not be used in newly-written code.\n Determines the width of a given wide-character string.\n Params:\n text = the text to measure.\n Returns: the width of the string in pixels.\n\t \n",
"line" : 561}
,
{
"name" : "charWidth",
"kind" : "function",
"protection" : "public",
"type" : "int(char character)",
"comment" : "\n Warning\n gdk_char_width has been deprecated since version 2.2 and should not be used in newly-written code. Use gdk_text_extents() instead.\n Determines the width of a given character.\n Params:\n character = the character to measure.\n Returns: the width of the character in pixels.\n\t \n",
"line" : 575}
,
{
"name" : "charWidthWc",
"kind" : "function",
"protection" : "public",
"type" : "int(uint character)",
"comment" : "\n Warning\n gdk_char_width_wc is deprecated and should not be used in newly-written code.\n Determines the width of a given wide character. (Encoded\n in the wide-character encoding of the current locale).\n Params:\n character = the character to measure.\n Returns: the width of the character in pixels.\n\t \n",
"line" : 590}
,
{
"name" : "stringMeasure",
"kind" : "function",
"protection" : "public",
"type" : "int(string string)",
"comment" : "\n Warning\n gdk_string_measure is deprecated and should not be used in newly-written code.\n Determines the distance from the origin to the rightmost\n portion of a nul-terminated string when drawn. This is not the\n correct value for determining the origin of the next\n portion when drawing text in multiple pieces.\n See gdk_string_width().\n Params:\n string = the nul-terminated string to measure.\n Returns: the right bearing of the string in pixels.\n\t \n",
"line" : 608}
,
{
"name" : "textMeasure",
"kind" : "function",
"protection" : "public",
"type" : "int(string text, int textLength)",
"comment" : "\n Warning\n gdk_text_measure is deprecated and should not be used in newly-written code.\n Determines the distance from the origin to the rightmost\n portion of a string when drawn. This is not the\n correct value for determining the origin of the next\n portion when drawing text in multiple pieces.\n See gdk_text_width().\n Params:\n text = the text to measure.\n textLength = the length of the text in bytes.\n Returns: the right bearing of the string in pixels.\n\t \n",
"line" : 627}
,
{
"name" : "charMeasure",
"kind" : "function",
"protection" : "public",
"type" : "int(char character)",
"comment" : "\n Warning\n gdk_char_measure is deprecated and should not be used in newly-written code.\n Determines the distance from the origin to the rightmost\n portion of a character when drawn. This is not the\n correct value for determining the origin of the next\n portion when drawing text in multiple pieces.\n Params:\n character = the character to measure.\n Returns: the right bearing of the character in pixels.\n\t \n",
"line" : 644}
,
{
"name" : "stringHeight",
"kind" : "function",
"protection" : "public",
"type" : "int(string string)",
"comment" : "\n Warning\n gdk_string_height is deprecated and should not be used in newly-written code.\n Determines the total height of a given nul-terminated\n string. This value is not generally useful, because you\n cannot determine how this total height will be drawn in\n relation to the baseline. See gdk_string_extents().\n Params:\n string = the nul-terminated string to measure.\n Returns: the height of the string in pixels.\n\t \n",
"line" : 661}
,
{
"name" : "textHeight",
"kind" : "function",
"protection" : "public",
"type" : "int(string text, int textLength)",
"comment" : "\n Warning\n gdk_text_height is deprecated and should not be used in newly-written code.\n Determines the total height of a given string.\n This value is not generally useful, because you cannot\n determine how this total height will be drawn in\n relation to the baseline. See gdk_text_extents().\n Params:\n text = the text to measure.\n textLength = the length of the text in bytes.\n Returns: the height of the string in pixels.\n\t \n",
"line" : 679}
,
{
"name" : "charHeight",
"kind" : "function",
"protection" : "public",
"type" : "int(char character)",
"comment" : "\n Warning\n gdk_char_height has been deprecated since version 2.2 and should not be used in newly-written code. Use gdk_text_extents() instead.\n Determines the total height of a given character.\n This value is not generally useful, because you cannot\n determine how this total height will be drawn in\n relation to the baseline. See gdk_text_extents().\n Params:\n character = the character to measure.\n Returns: the height of the character in pixels.\n\t \n",
"line" : 696}
,
{
"name" : "wcstombs",
"kind" : "function",
"protection" : "public",
"type" : "string(uint* src)",
"comment" : "\n Warning\n gdk_wcstombs is deprecated and should not be used in newly-written code.\n Converts a wide character string to a multi-byte string.\n (The function name comes from an acronym of 'Wide Character String TO\n Multi-Byte String').\n Params:\n src = a wide character string.\n Returns: the multi-byte string corresponding to src, or NULL if the conversion failed. The returned string should be freed with g_free() when no longer needed.\n\t \n",
"line" : 712}
,
{
"name" : "mbstowcs",
"kind" : "function",
"protection" : "public",
"type" : "int(uint* dest, string src, int destMax)",
"comment" : "\n Warning\n gdk_mbstowcs is deprecated and should not be used in newly-written code.\n Converts a multi-byte string to a wide character string.\n (The function name comes from an acronym of 'Multi-Byte String TO Wide\n Character String').\n Params:\n dest = the space to place the converted wide character string into.\n src = the multi-byte string to convert, which must be nul-terminated.\n destMax = the maximum number of wide characters to place in dest.\n Returns: the number of wide characters written into dest, or -1 if the conversion failed.\n\t \n",
"line" : 730}
]
}
]
}
,
{
"name" : "gdk.GC",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/GC.d",
"members" : [
{
"name" : "GC",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n All drawing operations in GDK take a\n graphics context (GC) argument.\n A graphics context encapsulates information about\n the way things are drawn, such as the foreground\n color or line width. By using graphics contexts,\n the number of arguments to each drawing call is\n greatly reduced, and communication overhead is\n minimized, since identical arguments do not need\n to be passed repeatedly.\n Most values of a graphics context can be set at\n creation time by using gdk_gc_new_with_values(),\n or can be set one-by-one using functions such\n as gdk_gc_set_foreground(). A few of the values\n in the GC, such as the dash pattern, can only\n be set by the latter method.\n \n",
"line" : 112,
"base" : "ObjectG",
"members" : [
{
"name" : "gdkGC",
"kind" : "variable",
"protection" : "protected",
"type" : "GdkGC*",
"comment" : " the main Gtk struct \n",
"line" : 116}
,
{
"name" : "getGCStruct",
"kind" : "function",
"protection" : "public",
"type" : "GdkGC*()",
"line" : 119}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 126}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "GC(GdkGC* gdkGC)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 134}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 152}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "GC(Drawable drawable)",
"comment" : "\n\t \n\n Warning\n gdk_gc_new has been deprecated since version 2.22 and should not be used in newly-written code. Use Cairo for rendering.\n Create a new graphics context with default values.\n Params:\n drawable = a GdkDrawable. The created GC must always be used\n  with drawables of the same depth as this one.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 170}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "GC(Drawable drawable, GdkGCValues* values, GdkGCValuesMask valuesMask)",
"comment" : "\n Warning\n gdk_gc_new_with_values has been deprecated since version 2.22 and should not be used in newly-written code. Use Cairo for rendering.\n Create a new GC with the given initial values.\n Params:\n drawable = a GdkDrawable. The created GC must always be used\n  with drawables of the same depth as this one.\n values = a structure containing initial values for the GC.\n valuesMask = a bit mask indicating which fields in values\n  are set.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 193}
,
{
"name" : "getScreen",
"kind" : "function",
"protection" : "public",
"type" : "Screen()",
"comment" : "\n Warning\n gdk_gc_get_screen is deprecated and should not be used in newly-written code.\n Gets the GdkScreen for which gc was created\n Since 2.2\n Returns: the GdkScreen for gc.\n\t \n",
"line" : 211}
,
{
"name" : "setValues",
"kind" : "function",
"protection" : "public",
"type" : "void(GdkGCValues* values, GdkGCValuesMask valuesMask)",
"comment" : "\n Warning\n gdk_gc_set_values has been deprecated since version 2.22 and should not be used in newly-written code. Use Cairo for rendering.\n Sets attributes of a graphics context in bulk. For each flag set in\n values_mask, the corresponding field will be read from values and\n set as the new value for gc. If you're only setting a few values\n on gc, calling individual \"setter\" functions is likely more\n convenient.\n Params:\n values = struct containing the new values\n valuesMask = mask indicating which struct fields are to be used\n\t \n",
"line" : 234}
,
{
"name" : "getValues",
"kind" : "function",
"protection" : "public",
"type" : "void(GdkGCValues* values)",
"comment" : "\n Warning\n gdk_gc_get_values has been deprecated since version 2.22 and should not be used in newly-written code. Use Cairo for rendering.\n Retrieves the current values from a graphics context. Note that\n only the pixel values of the values->foreground and values->background\n are filled, use gdk_colormap_query_color() to obtain the rgb values\n if you need them.\n Params:\n values = the GdkGCValues structure in which to store the results.\n\t \n",
"line" : 250}
,
{
"name" : "setForeground",
"kind" : "function",
"protection" : "public",
"type" : "void(Color color)",
"comment" : "\n Warning\n gdk_gc_set_foreground has been deprecated since version 2.22 and should not be used in newly-written code. Use gdk_cairo_set_source_color() to use a GdkColor\n as the source in Cairo.\n Sets the foreground color for a graphics context.\n Note that this function uses color->pixel, use\n gdk_gc_set_rgb_fg_color() to specify the foreground\n color as red, green, blue components.\n Params:\n color = the new foreground color.\n\t \n",
"line" : 267}
,
{
"name" : "setBackground",
"kind" : "function",
"protection" : "public",
"type" : "void(Color color)",
"comment" : "\n Warning\n gdk_gc_set_background has been deprecated since version 2.22 and should not be used in newly-written code. Use gdk_cairo_set_source_color() to use a GdkColor\n as the source in Cairo. Note that if you want to draw a background and a\n foreground in Cairo, you need to call drawing functions (like cairo_fill())\n twice.\n Sets the background color for a graphics context.\n Note that this function uses color->pixel, use\n gdk_gc_set_rgb_bg_color() to specify the background\n color as red, green, blue components.\n Params:\n color = the new background color.\n\t \n",
"line" : 286}
,
{
"name" : "setRgbFgColor",
"kind" : "function",
"protection" : "public",
"type" : "void(Color color)",
"comment" : "\n Warning\n gdk_gc_set_rgb_fg_color has been deprecated since version 2.22 and should not be used in newly-written code. Use gdk_cairo_set_source_color() instead.\n Set the foreground color of a GC using an unallocated color. The\n pixel value for the color will be determined using GdkRGB. If the\n colormap for the GC has not previously been initialized for GdkRGB,\n then for pseudo-color colormaps (colormaps with a small modifiable\n number of colors), a colorcube will be allocated in the colormap.\n Calling this function for a GC without a colormap is an error.\n Params:\n color = an unallocated GdkColor.\n\t \n",
"line" : 304}
,
{
"name" : "setRgbBgColor",
"kind" : "function",
"protection" : "public",
"type" : "void(Color color)",
"comment" : "\n Warning\n gdk_gc_set_rgb_bg_color has been deprecated since version 2.22 and should not be used in newly-written code. Use gdk_cairo_set_source_color() instead.\n Set the background color of a GC using an unallocated color. The\n pixel value for the color will be determined using GdkRGB. If the\n colormap for the GC has not previously been initialized for GdkRGB,\n then for pseudo-color colormaps (colormaps with a small modifiable\n number of colors), a colorcube will be allocated in the colormap.\n Calling this function for a GC without a colormap is an error.\n Params:\n color = an unallocated GdkColor.\n\t \n",
"line" : 322}
,
{
"name" : "setFont",
"kind" : "function",
"protection" : "public",
"type" : "void(Font font)",
"comment" : "\n Warning\n gdk_gc_set_font is deprecated and should not be used in newly-written code.\n Sets the font for a graphics context. (Note that\n all text-drawing functions in GDK take a font\n argument; the value set here is used when that\n argument is NULL.)\n Params:\n font = the new font.\n\t \n",
"line" : 338}
,
{
"name" : "setFunction",
"kind" : "function",
"protection" : "public",
"type" : "void(GdkFunction funct)",
"comment" : "\n Warning\n gdk_gc_set_function has been deprecated since version 2.22 and should not be used in newly-written code. Use cairo_set_operator() with Cairo.\n Determines how the current pixel values and the\n pixel values being drawn are combined to produce\n the final pixel values.\n\t \n",
"line" : 351}
,
{
"name" : "setFill",
"kind" : "function",
"protection" : "public",
"type" : "void(GdkFill fill)",
"comment" : "\n Warning\n gdk_gc_set_fill has been deprecated since version 2.22 and should not be used in newly-written code. You can achieve tiling in Cairo by using\n cairo_pattern_set_extend() on the source. For stippling, see the\n deprecation comments on gdk_gc_set_stipple().\n Set the fill mode for a graphics context.\n Params:\n fill = the new fill mode.\n\t \n",
"line" : 366}
,
{
"name" : "setTile",
"kind" : "function",
"protection" : "public",
"type" : "void(Pixmap tile)",
"comment" : "\n Warning\n gdk_gc_set_tile has been deprecated since version 2.22 and should not be used in newly-written code. The following code snippet sets a tiling GdkPixmap\n Params:\n tile = the new tile pixmap.\n\t \n",
"line" : 378}
,
{
"name" : "setStipple",
"kind" : "function",
"protection" : "public",
"type" : "void(Pixmap stipple)",
"comment" : "\n Warning\n gdk_gc_set_stipple has been deprecated since version 2.22 and should not be used in newly-written code. Stippling has no direct replacement in Cairo. If you\n want to achieve an identical look, you can use the stipple bitmap as a\n mask. Most likely, this involves rendering the source to an intermediate\n surface using cairo_push_group() first, so that you can then use\n cairo_mask() to achieve the stippled look.\n Set the stipple bitmap for a graphics context. The\n stipple will only be used if the fill mode is\n GDK_STIPPLED or GDK_OPAQUE_STIPPLED.\n Params:\n stipple = the new stipple bitmap.\n\t \n",
"line" : 397}
,
{
"name" : "setTsOrigin",
"kind" : "function",
"protection" : "public",
"type" : "void(int x, int y)",
"comment" : "\n Warning\n gdk_gc_set_ts_origin has been deprecated since version 2.22 and should not be used in newly-written code. You can set the origin for tiles and stipples in Cairo\n by changing the source's matrix using cairo_pattern_set_matrix(). Or you\n can specify it with gdk_cairo_set_source_pixmap() as shown in the example\n for gdk_gc_set_tile().\n Set the origin when using tiles or stipples with\n the GC. The tile or stipple will be aligned such\n that the upper left corner of the tile or stipple\n will coincide with this point.\n Params:\n x = the x-coordinate of the origin.\n y = the y-coordinate of the origin.\n\t \n",
"line" : 417}
,
{
"name" : "setClipOrigin",
"kind" : "function",
"protection" : "public",
"type" : "void(int x, int y)",
"comment" : "\n Warning\n gdk_gc_set_clip_origin has been deprecated since version 2.22 and should not be used in newly-written code. Use cairo_translate() before applying the clip path in\n Cairo.\n Sets the origin of the clip mask. The coordinates are\n interpreted relative to the upper-left corner of\n the destination drawable of the current operation.\n Params:\n x = the x-coordinate of the origin.\n y = the y-coordinate of the origin.\n\t \n",
"line" : 434}
,
{
"name" : "setClipMask",
"kind" : "function",
"protection" : "public",
"type" : "void(Bitmap mask)",
"comment" : "\n Warning\n gdk_gc_set_clip_mask has been deprecated since version 2.22 and should not be used in newly-written code. Use cairo_mask() instead.\n Sets the clip mask for a graphics context from a bitmap.\n The clip mask is interpreted relative to the clip\n origin. (See gdk_gc_set_clip_origin()).\n Params:\n mask = a bitmap.\n\t \n",
"line" : 449}
,
{
"name" : "setClipRectangle",
"kind" : "function",
"protection" : "public",
"type" : "void(Rectangle rectangle)",
"comment" : "\n Warning\n gdk_gc_set_clip_rectangle has been deprecated since version 2.22 and should not be used in newly-written code. Use cairo_rectangle() and cairo_clip() in Cairo.\n Sets the clip mask for a graphics context from a\n rectangle. The clip mask is interpreted relative to the clip\n origin. (See gdk_gc_set_clip_origin()).\n Params:\n rectangle = the rectangle to clip to.\n\t \n",
"line" : 464}
,
{
"name" : "setClipRegion",
"kind" : "function",
"protection" : "public",
"type" : "void(Region region)",
"comment" : "\n Warning\n gdk_gc_set_clip_region has been deprecated since version 2.22 and should not be used in newly-written code. Use gdk_cairo_region() and cairo_clip() in Cairo.\n Sets the clip mask for a graphics context from a region structure.\n The clip mask is interpreted relative to the clip origin. (See\n gdk_gc_set_clip_origin()).\n Params:\n region = the GdkRegion.\n\t \n",
"line" : 479}
,
{
"name" : "setSubwindow",
"kind" : "function",
"protection" : "public",
"type" : "void(GdkSubwindowMode mode)",
"comment" : "\n Warning\n gdk_gc_set_subwindow has been deprecated since version 2.22 and should not be used in newly-written code. There is no replacement. If you need to control\n subwindows, you must use drawing operations of the underlying window\n system manually. Cairo will always use GDK_INCLUDE_INFERIORS on sources\n and masks and GDK_CLIP_BY_CHILDREN on targets.\n Sets how drawing with this GC on a window will affect child\n windows of that window.\n Params:\n mode = the subwindow mode.\n\t \n",
"line" : 496}
,
{
"name" : "setExposures",
"kind" : "function",
"protection" : "public",
"type" : "void(int exposures)",
"comment" : "\n Warning\n gdk_gc_set_exposures has been deprecated since version 2.22 and should not be used in newly-written code. There is no replacement. If you need to control\n exposures, you must use drawing operations of the underlying window\n system or use gdk_window_invalidate_rect(). Cairo will never\n generate exposures.\n Sets whether copying non-visible portions of a drawable\n using this graphics context generate exposure events\n for the corresponding regions of the destination\n drawable. (See gdk_draw_drawable()).\n Params:\n exposures = if TRUE, exposure events will be generated.\n\t \n",
"line" : 515}
,
{
"name" : "setLineAttributes",
"kind" : "function",
"protection" : "public",
"type" : "void(int lineWidth, GdkLineStyle lineStyle, GdkCapStyle capStyle, GdkJoinStyle joinStyle)",
"comment" : "\n Warning\n gdk_gc_set_line_attributes has been deprecated since version 2.22 and should not be used in newly-written code. Use the Cairo functions cairo_set_line_width(),\n cairo_set_line_join(), cairo_set_line_cap() and cairo_set_dash()\n to affect the stroking behavior in Cairo. Keep in mind that the default\n attributes of a cairo_t are different from the default attributes of\n a GdkGC.\n Sets various attributes of how lines are drawn. See\n the corresponding members of GdkGCValues for full\n explanations of the arguments.\n Params:\n lineWidth = the width of lines.\n lineStyle = the dash-style for lines.\n capStyle = the manner in which the ends of lines are drawn.\n joinStyle = the in which lines are joined together.\n\t \n",
"line" : 537}
,
{
"name" : "setDashes",
"kind" : "function",
"protection" : "public",
"type" : "void(int dashOffset, byte[] dashList)",
"comment" : "\n Warning\n gdk_gc_set_dashes has been deprecated since version 2.22 and should not be used in newly-written code. Use cairo_set_dash() to set the dash in Cairo.\n Sets the way dashed-lines are drawn. Lines will be\n drawn with alternating on and off segments of the\n lengths specified in dash_list. The manner in\n which the on and off segments are drawn is determined\n by the line_style value of the GC. (This can\n be changed with gdk_gc_set_line_attributes().)\n The dash_offset defines the phase of the pattern,\n specifying how many pixels into the dash-list the pattern\n should actually begin.\n Params:\n dashOffset = the phase of the dash pattern.\n dashList = an array of dash lengths.\n n = the number of elements in dash_list.\n\t \n",
"line" : 560}
,
{
"name" : "copy",
"kind" : "function",
"protection" : "public",
"type" : "void(GC srcGc)",
"comment" : "\n Warning\n gdk_gc_copy has been deprecated since version 2.22 and should not be used in newly-written code. Use Cairo for drawing. cairo_save() and cairo_restore()\n can be helpful in cases where you'd have copied a GdkGC.\n Copy the set of values from one graphics context\n onto another graphics context.\n Params:\n srcGc = the source graphics context.\n\t \n",
"line" : 575}
,
{
"name" : "setColormap",
"kind" : "function",
"protection" : "public",
"type" : "void(Colormap colormap)",
"comment" : "\n Warning\n gdk_gc_set_colormap has been deprecated since version 2.22 and should not be used in newly-written code. There is no replacement. Cairo handles colormaps\n automatically, so there is no need to care about them.\n Sets the colormap for the GC to the given colormap. The depth\n of the colormap's visual must match the depth of the drawable\n for which the GC was created.\n Params:\n colormap = a GdkColormap\n\t \n",
"line" : 591}
,
{
"name" : "getColormap",
"kind" : "function",
"protection" : "public",
"type" : "Colormap()",
"comment" : "\n Warning\n gdk_gc_get_colormap has been deprecated since version 2.22 and should not be used in newly-written code. There is no replacement. Cairo handles colormaps\n automatically, so there is no need to care about them.\n Retrieves the colormap for a given GC, if it exists.\n A GC will have a colormap if the drawable for which it was created\n has a colormap, or if a colormap was set explicitely with\n gdk_gc_set_colormap.\n Returns: the colormap of gc, or NULL if gc doesn't have one.\n\t \n",
"line" : 607}
,
{
"name" : "offset",
"kind" : "function",
"protection" : "public",
"type" : "void(int xOffset, int yOffset)",
"comment" : "\n Warning\n gdk_gc_offset has been deprecated since version 2.22 and should not be used in newly-written code. There is no direct replacement, as this is just a\n convenience function for gdk_gc_set_ts_origin and gdk_gc_set_clip_origin().\n Offset attributes such as the clip and tile-stipple origins\n of the GC so that drawing at x - x_offset, y - y_offset with\n the offset GC has the same effect as drawing at x, y with the original\n GC.\n Params:\n xOffset = amount by which to offset the GC in the X direction\n yOffset = amount by which to offset the GC in the Y direction\n\t \n",
"line" : 630}
]
}
]
}
,
{
"name" : "gdk.GdkCairo",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/GdkCairo.d",
"members" : [
]
}
,
{
"name" : "gdk.Gdk",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/Gdk.d",
"members" : [
{
"name" : "Gdk",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n This section describes the GDK initialization functions and miscellaneous\n utility functions.\n \n",
"line" : 77,
"base" : "Object",
"members" : [
{
"name" : "init",
"kind" : "function",
"protection" : "public",
"type" : "void(ref string[] argv)",
"comment" : "\n\t \n\n Initializes the GDK library and connects to the X server.\n If initialization fails, a warning message is output and the application\n terminates with a call to exit(1).\n Any arguments used by GDK are removed from the array and argc and argv are\n updated accordingly.\n GTK+ initializes GDK in gtk_init() and so this function is not usually needed\n by GTK+ applications.\n Params:\n argv = . [array length=argc][inout length=argc]\n\t \n",
"line" : 93}
,
{
"name" : "initCheck",
"kind" : "function",
"protection" : "public",
"type" : "int(ref string[] argv)",
"comment" : "\n Initialize the library for use.\n Params:\n argv = . [array length=argc][inout length=argc]\n Returns: TRUE if initialization succeeded.\n\t \n",
"line" : 114}
,
{
"name" : "parseArgs",
"kind" : "function",
"protection" : "public",
"type" : "void(ref string[] argv)",
"comment" : "\n Parse command line arguments, and store for future\n use by calls to gdk_display_open().\n Any arguments used by GDK are removed from the array and argc and argv are\n updated accordingly.\n You shouldn't call this function explicitely if you are using\n gtk_init(), gtk_init_check(), gdk_init(), or gdk_init_check().\n Since 2.2\n Params:\n argv = the array of command line arguments.\n\t \n",
"line" : 141}
,
{
"name" : "getDisplayArgName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the display name specified in the command line arguments passed\n to gdk_init() or gdk_parse_args(), if any.\n Since 2.2\n Returns: the display name, if specified explicitely, otherwise NULL this string is owned by GTK+ and must not be modified or freed.\n\t \n",
"line" : 162}
,
{
"name" : "setLocale",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Initializes the support for internationalization by calling the setlocale()\n system call. This function is called by gtk_set_locale() and so GTK+\n applications should use that instead.\n The locale to use is determined by the LANG environment variable,\n Returns: the resulting locale.\n\t \n",
"line" : 175}
,
{
"name" : "setSmClientId",
"kind" : "function",
"protection" : "public",
"type" : "void(string smClientId)",
"comment" : "\n Sets the SM_CLIENT_ID property on the application's leader window so that\n the window manager can save the application's state using the X11R6 ICCCM\n session management protocol.\n See the X Session Management Library documentation for more information on\n session management and the Inter-Client Communication Conventions Manual\n (ICCCM) for information on the WM_CLIENT_LEADER property.\n (Both documents are part of the X Window System distribution.)\n Params:\n smClientId = the client id assigned by the session manager when the\n  connection was opened, or NULL to remove the property.\n\t \n",
"line" : 193}
,
{
"name" : "exit",
"kind" : "function",
"protection" : "public",
"type" : "void(int errorCode)",
"comment" : "\n Warning\n gdk_exit is deprecated and should not be used in newly-written code.\n Exits the application using the exit() system call.\n This routine is provided mainly for backwards compatibility, since it used to\n perform tasks necessary to exit the application cleanly. Those tasks are now\n performed in a function which is automatically called on exit (via the use\n of g_atexit()).\n Params:\n errorCode = the error code to pass to the exit() call.\n\t \n",
"line" : 210}
,
{
"name" : "notifyStartupComplete",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Indicates to the GUI environment that the application has finished\n loading. If the applications opens windows, this function is\n normally called after opening the application's initial set of\n windows.\n GTK+ will call this function automatically after opening the first\n GtkWindow unless gtk_window_set_auto_startup_notification() is called\n to disable that feature.\n Since 2.2\n\t \n",
"line" : 226}
,
{
"name" : "notifyStartupCompleteWithId",
"kind" : "function",
"protection" : "public",
"type" : "void(string startupId)",
"comment" : "\n Indicates to the GUI environment that the application has finished\n loading, using a given identifier.\n GTK+ will call this function automatically for GtkWindow with custom\n startup-notification identifier unless\n gtk_window_set_auto_startup_notification() is called to disable\n that feature.\n Since 2.12\n Params:\n startupId = a startup-notification identifier, for which notification\n  process should be completed\n\t \n",
"line" : 244}
,
{
"name" : "getProgramClass",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the program class. Unless the program class has explicitly\n been set with gdk_set_program_class() or with the --class\n commandline option, the default value is the program name (determined\n with g_get_prgname()) with the first character converted to uppercase.\n Returns: the program class.\n\t \n",
"line" : 257}
,
{
"name" : "setProgramClass",
"kind" : "function",
"protection" : "public",
"type" : "void(string programClass)",
"comment" : "\n Sets the program class. The X11 backend uses the program class to set\n the class name part of the WM_CLASS property on\n toplevel windows; see the ICCCM.\n Params:\n programClass = a string.\n\t \n",
"line" : 270}
,
{
"name" : "getDisplay",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Gets the name of the display, which usually comes from the DISPLAY\n environment variable or the --display command line option.\n Returns: the name of the display.\n\t \n",
"line" : 281}
,
{
"name" : "flush",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Flushes the X output buffer and waits until all requests have been processed\n by the server. This is rarely needed by applications. It's main use is for\n trapping X errors with gdk_error_trap_push() and gdk_error_trap_pop().\n\t \n",
"line" : 292}
,
{
"name" : "screenWidth",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the width of the default screen in pixels.\n Returns: the width of the default screen in pixels.\n\t \n",
"line" : 302}
,
{
"name" : "screenHeight",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the height of the default screen in pixels.\n Returns: the height of the default screen in pixels.\n\t \n",
"line" : 312}
,
{
"name" : "screenWidthMm",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the width of the default screen in millimeters.\n Note that on many X servers this value will not be correct.\n Returns: the width of the default screen in millimeters, though it is not always correct.\n\t \n",
"line" : 323}
,
{
"name" : "screenHeightMm",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the height of the default screen in millimeters.\n Note that on many X servers this value will not be correct.\n Returns: the height of the default screen in millimeters, though it is not always correct.\n\t \n",
"line" : 334}
,
{
"name" : "pointerGrab",
"kind" : "function",
"protection" : "public",
"type" : "GdkGrabStatus(Window window, int ownerEvents, GdkEventMask eventMask, Window confineTo, Cursor cursor, uint time)",
"comment" : "\n Grabs the pointer (usually a mouse) so that all events are passed to this\n application until the pointer is ungrabbed with gdk_pointer_ungrab(), or\n the grab window becomes unviewable.\n This overrides any previous pointer grab by this client.\n Pointer grabs are used for operations which need complete control over mouse\n events, even if the mouse leaves the application.\n For example in GTK+ it is used for Drag and Drop, for dragging the handle in\n the GtkHPaned and GtkVPaned widgets, and for resizing columns in GtkCList\n widgets.\n Note that if the event mask of an X window has selected both button press and\n button release events, then a button press event will cause an automatic\n pointer grab until the button is released.\n X does this automatically since most applications expect to receive button\n press and release events in pairs.\n It is equivalent to a pointer grab on the window with owner_events set to\n TRUE.\n If you set up anything at the time you take the grab that needs to be cleaned\n up when the grab ends, you should handle the GdkEventGrabBroken events that\n are emitted when the grab ends unvoluntarily.\n Params:\n window = the GdkWindow which will own the grab (the grab window).\n ownerEvents = if FALSE then all pointer events are reported with respect to\n window and are only reported if selected by event_mask. If TRUE then pointer\n events for this application are reported as normal, but pointer events outside\n this application are reported with respect to window and only if selected by\n event_mask. In either mode, unreported events are discarded.\n eventMask = specifies the event mask, which is used in accordance with\n owner_events. Note that only pointer events (i.e. button and motion events)\n  may be selected.\n confineTo = If non-NULL, the pointer will be confined to this\n window during the grab. If the pointer is outside confine_to, it will\n automatically be moved to the closest edge of confine_to and enter\n and leave events will be generated as necessary.\n cursor = the cursor to display while the grab is active. If this is NULL then\n the normal cursors are used for window and its descendants, and the cursor\n for window is used for all other windows.\n time = the timestamp of the event which led to this pointer grab. This usually\n comes from a GdkEventButton struct, though GDK_CURRENT_TIME can be used if\n the time isn't known.\n Returns: GDK_GRAB_SUCCESS if the grab was successful.\n\t \n",
"line" : 382}
,
{
"name" : "pointerUngrab",
"kind" : "function",
"protection" : "public",
"type" : "void(uint time)",
"comment" : "\n Ungrabs the pointer on the default display, if it is grabbed by this\n application.\n Params:\n time = a timestamp from a GdkEvent, or GDK_CURRENT_TIME if no\n  timestamp is available.\n\t \n",
"line" : 395}
,
{
"name" : "pointerIsGrabbed",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns TRUE if the pointer on the default display is currently\n grabbed by this application.\n Note that this does not take the inmplicit pointer grab on button\n presses into account.\n Returns: TRUE if the pointer is currently grabbed by this application.*\n\t \n",
"line" : 408}
,
{
"name" : "setDoubleClickTime",
"kind" : "function",
"protection" : "public",
"type" : "void(uint msec)",
"comment" : "\n Set the double click time for the default display. See\n gdk_display_set_double_click_time().\n See also gdk_display_set_double_click_distance().\n Applications should not set this, it is a\n global user-configured setting.\n Params:\n msec = double click time in milliseconds (thousandths of a second)\n\t \n",
"line" : 423}
,
{
"name" : "keyboardGrab",
"kind" : "function",
"protection" : "public",
"type" : "GdkGrabStatus(Window window, int ownerEvents, uint time)",
"comment" : "\n Grabs the keyboard so that all events are passed to this\n application until the keyboard is ungrabbed with gdk_keyboard_ungrab().\n This overrides any previous keyboard grab by this client.\n If you set up anything at the time you take the grab that needs to be cleaned\n up when the grab ends, you should handle the GdkEventGrabBroken events that\n are emitted when the grab ends unvoluntarily.\n Params:\n window = the GdkWindow which will own the grab (the grab window).\n ownerEvents = if FALSE then all keyboard events are reported with respect to\n window. If TRUE then keyboard events for this application are reported as\n normal, but keyboard events outside this application are reported with respect\n to window. Both key press and key release events are always reported,\n independant of the event mask set by the application.\n time = a timestamp from a GdkEvent, or GDK_CURRENT_TIME if no timestamp is\n available.\n Returns: GDK_GRAB_SUCCESS if the grab was successful.\n\t \n",
"line" : 447}
,
{
"name" : "keyboardUngrab",
"kind" : "function",
"protection" : "public",
"type" : "void(uint time)",
"comment" : "\n Ungrabs the keyboard on the default display, if it is grabbed by this\n application.\n Params:\n time = a timestamp from a GdkEvent, or GDK_CURRENT_TIME if no\n  timestamp is available.\n\t \n",
"line" : 460}
,
{
"name" : "beep",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Emits a short beep on the default display.\n\t \n",
"line" : 469}
,
{
"name" : "getUseXshm",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Warning\n gdk_get_use_xshm is deprecated and should not be used in newly-written code.\n Returns TRUE if GDK will attempt to use the MIT-SHM shared memory extension.\n The shared memory extension is used for GdkImage, and consequently for\n GdkRGB.\n It enables much faster drawing by communicating with the X server through\n SYSV shared memory calls. However, it can only be used if the X client and\n server are on the same machine and the server supports it.\n Returns: TRUE if use of the MIT shared memory extension will be attempted.\n\t \n",
"line" : 486}
,
{
"name" : "setUseXshm",
"kind" : "function",
"protection" : "public",
"type" : "void(int useXshm)",
"comment" : "\n Warning\n gdk_set_use_xshm is deprecated and should not be used in newly-written code.\n Sets whether the use of the MIT shared memory extension should be attempted.\n This function is mainly for internal use. It is only safe for an application\n to set this to FALSE, since if it is set to TRUE and the server does not\n support the extension it may cause warning messages to be output.\n Params:\n useXshm = TRUE if use of the MIT shared memory extension should be attempted.\n\t \n",
"line" : 502}
,
{
"name" : "errorTrapPush",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n This function allows X errors to be trapped instead of the normal behavior\n of exiting the application. It should only be used if it is not possible to\n avoid the X error in any other way.\n $(DDOC_COMMENT example)\n\t \n",
"line" : 514}
,
{
"name" : "errorTrapPop",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Removes the X error trap installed with gdk_error_trap_push().\n Returns: the X error code, or 0 if no error occurred.\n\t \n",
"line" : 524}
]
}
]
}
,
{
"name" : "gdk.ImageGdk",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/ImageGdk.d",
"members" : [
{
"name" : "ImageGdk",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The GdkImage type represents an area for drawing graphics.\n It has now been superceded to a large extent by the much more flexible\n GdkRGB functions.\n To create an empty GdkImage use gdk_image_new().\n To create a GdkImage from bitmap data use gdk_image_new_bitmap().\n To create an image from part of a GdkWindow use gdk_drawable_get_image().\n The image can be manipulated with gdk_image_get_pixel() and\n gdk_image_put_pixel(), or alternatively by changing the actual pixel data.\n Though manipulating the pixel data requires complicated code to cope with\n the different formats that may be used.\n To draw a GdkImage in a GdkWindow or GdkPixmap use gdk_draw_image().\n To destroy a GdkImage use gdk_image_destroy().\n \n",
"line" : 89,
"base" : "Object",
"members" : [
{
"name" : "gdkImage",
"kind" : "variable",
"protection" : "protected",
"type" : "GdkImage*",
"comment" : " the main Gtk struct \n",
"line" : 92}
,
{
"name" : "getImageGdkStruct",
"kind" : "function",
"protection" : "public",
"type" : "GdkImage*()",
"line" : 95}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 102}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ImageGdk(GdkImage* gdkImage)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 110}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ImageGdk(GdkImageType type, Visual visual, int width, int height)",
"comment" : "\n\t \n\n Warning\n gdk_image_new is deprecated and should not be used in newly-written code.\n Creates a new GdkImage.\n Params:\n type = the type of the GdkImage, one of GDK_IMAGE_NORMAL, GDK_IMAGE_SHARED\n and GDK_IMAGE_FASTEST. GDK_IMAGE_FASTEST is probably the best choice, since\n it will try creating a GDK_IMAGE_SHARED image first and if that fails it will\n then use GDK_IMAGE_NORMAL.\n visual = the GdkVisual to use for the image.\n width = the width of the image in pixels.\n height = the height of the image in pixels.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 137}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "ImageGdk(Visual visual, void* data, int width, int height)",
"comment" : "\n Warning\n gdk_image_new_bitmap is deprecated and should not be used in newly-written code.\n Creates a new GdkImage with a depth of 1 from the given data.\n Warning\n THIS FUNCTION IS INCREDIBLY BROKEN. The passed-in data must\n be allocated by malloc() (NOT g_malloc()) and will be freed when the\n image is freed.\n Params:\n visual = the GdkVisual to use for the image.\n data = the pixel data.\n width = the width of the image in pixels.\n height = the height of the image in pixels.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 163}
,
{
"name" : "get",
"kind" : "function",
"protection" : "public",
"type" : "ImageGdk(Drawable drawable, int x, int y, int width, int height)",
"comment" : "\n Warning\n gdk_image_get is deprecated and should not be used in newly-written code.\n This is a deprecated wrapper for gdk_drawable_get_image();\n gdk_drawable_get_image() should be used instead. Or even better: in\n most cases gdk_pixbuf_get_from_drawable() is the most convenient\n choice.\n Params:\n drawable = a GdkDrawable\n x = x coordinate in window\n y = y coordinate in window\n width = width of area in window\n height = height of area in window\n Returns: a new GdkImage or NULL\n\t \n",
"line" : 189}
,
{
"name" : "doref",
"kind" : "function",
"protection" : "public",
"type" : "ImageGdk()",
"comment" : "\n Warning\n gdk_image_ref has been deprecated since version 2.0 and should not be used in newly-written code. Use g_object_ref() instead.\n Deprecated function; use g_object_ref() instead.\n Returns: the image\n\t \n",
"line" : 206}
,
{
"name" : "unref",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gdk_image_unref has been deprecated since version 2.0 and should not be used in newly-written code. Use g_object_unref() instead.\n Deprecated function; use g_object_unref() instead.\n\t \n",
"line" : 222}
,
{
"name" : "getColormap",
"kind" : "function",
"protection" : "public",
"type" : "Colormap()",
"comment" : "\n Warning\n gdk_image_get_colormap has been deprecated since version 2.22 and should not be used in newly-written code. GdkImage should not be used anymore.\n Retrieves the colormap for a given image, if it exists. An image\n will have a colormap if the drawable from which it was created has\n a colormap, or if a colormap was set explicitely with\n gdk_image_set_colormap().\n Returns: colormap for the image\n\t \n",
"line" : 237}
,
{
"name" : "setColormap",
"kind" : "function",
"protection" : "public",
"type" : "void(Colormap colormap)",
"comment" : "\n Warning\n gdk_image_set_colormap has been deprecated since version 2.22 and should not be used in newly-written code. GdkImage should not be used anymore.\n Sets the colormap for the image to the given colormap. Normally\n there's no need to use this function, images are created with the\n correct colormap if you get the image from a drawable. If you\n create the image from scratch, use the colormap of the drawable you\n intend to render the image to.\n Params:\n colormap = a GdkColormap\n\t \n",
"line" : 259}
,
{
"name" : "getBitsPerPixel",
"kind" : "function",
"protection" : "public",
"type" : "ushort()",
"comment" : "\n Warning\n gdk_image_get_bits_per_pixel has been deprecated since version 2.22 and should not be used in newly-written code. GdkImage should not be used anymore.\n Determines the number of bits per pixel of the image.\n Since 2.22\n Returns: the bits per pixel\n\t \n",
"line" : 272}
,
{
"name" : "getBytesPerPixel",
"kind" : "function",
"protection" : "public",
"type" : "ushort()",
"comment" : "\n Warning\n gdk_image_get_bytes_per_pixel has been deprecated since version 2.22 and should not be used in newly-written code. GdkImage should not be used anymore.\n Determines the number of bytes per pixel of the image.\n Since 2.22\n Returns: the bytes per pixel\n\t \n",
"line" : 285}
,
{
"name" : "getBytesPerLine",
"kind" : "function",
"protection" : "public",
"type" : "ushort()",
"comment" : "\n Warning\n gdk_image_get_bytes_per_line has been deprecated since version 2.22 and should not be used in newly-written code. GdkImage should not be used anymore.\n Determines the number of bytes per line of the image.\n Since 2.22\n Returns: the bytes per line\n\t \n",
"line" : 298}
,
{
"name" : "getByteOrder",
"kind" : "function",
"protection" : "public",
"type" : "GdkByteOrder()",
"comment" : "\n Warning\n gdk_image_get_byte_order has been deprecated since version 2.22 and should not be used in newly-written code. GdkImage should not be used anymore.\n Determines the byte order of the image.\n Since 2.22\n Returns: a GdkVisual\n\t \n",
"line" : 311}
,
{
"name" : "getDepth",
"kind" : "function",
"protection" : "public",
"type" : "ushort()",
"comment" : "\n Warning\n gdk_image_get_depth has been deprecated since version 2.22 and should not be used in newly-written code. GdkImage should not be used anymore.\n Determines the depth of the image.\n Since 2.22\n Returns: the depth\n\t \n",
"line" : 324}
,
{
"name" : "getHeight",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Warning\n gdk_image_get_height has been deprecated since version 2.22 and should not be used in newly-written code. GdkImage should not be used anymore.\n Determines the height of the image.\n Since 2.22\n Returns: the height\n\t \n",
"line" : 337}
,
{
"name" : "getImageType",
"kind" : "function",
"protection" : "public",
"type" : "GdkImageType()",
"comment" : "\n Warning\n gdk_image_get_image_type has been deprecated since version 2.22 and should not be used in newly-written code. GdkImage should not be used anymore.\n Determines the type of a given image.\n Since 2.22\n Returns: the GdkImageType of the image\n\t \n",
"line" : 350}
,
{
"name" : "getVisual",
"kind" : "function",
"protection" : "public",
"type" : "Visual()",
"comment" : "\n Warning\n gdk_image_get_visual has been deprecated since version 2.22 and should not be used in newly-written code. GdkImage should not be used anymore.\n Determines the visual that was used to create the image.\n Since 2.22\n Returns: a GdkVisual\n\t \n",
"line" : 363}
,
{
"name" : "getWidth",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Warning\n gdk_image_get_width has been deprecated since version 2.22 and should not be used in newly-written code. GdkImage should not be used anymore.\n Determines the width of the image.\n Since 2.22\n Returns: the width\n\t \n",
"line" : 381}
,
{
"name" : "getPixels",
"kind" : "function",
"protection" : "public",
"type" : "void*()",
"comment" : "\n Warning\n gdk_image_get_pixels has been deprecated since version 2.22 and should not be used in newly-written code. GdkImage should not be used anymore.\n Returns a pointer to the pixel data of the image.\n Since 2.22\n Returns: the pixel data of the image\n\t \n",
"line" : 394}
,
{
"name" : "putPixel",
"kind" : "function",
"protection" : "public",
"type" : "void(int x, int y, uint pixel)",
"comment" : "\n Warning\n gdk_image_put_pixel is deprecated and should not be used in newly-written code.\n Sets a pixel in a GdkImage to a given pixel value.\n Params:\n x = the x coordinate of the pixel to set.\n y = the y coordinate of the pixel to set.\n pixel = the pixel value to set.\n\t \n",
"line" : 409}
,
{
"name" : "getPixel",
"kind" : "function",
"protection" : "public",
"type" : "uint(int x, int y)",
"comment" : "\n Warning\n gdk_image_get_pixel is deprecated and should not be used in newly-written code.\n Gets a pixel value at a specified position in a GdkImage.\n Params:\n x = the x coordinate of the pixel to get.\n y = the y coordinate of the pixel to get.\n Returns: the pixel value at the given position.\n\t \n",
"line" : 424}
]
}
]
}
,
{
"name" : "gdk.Input",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/Input.d",
"members" : [
{
"name" : "Input",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The functions in this section are used to establish\n callbacks when some condition becomes true for\n a file descriptor. They are currently just wrappers around\n the IO Channel\n facility.\n \n",
"line" : 72,
"base" : "Object",
"members" : [
{
"name" : "addFull",
"kind" : "function",
"protection" : "public",
"type" : "int(int source, GdkInputCondition condition, extern (C) void function(void*, int, GdkInputCondition) funct, void* data, extern (C) void function(void* cbData) destroy)",
"comment" : "\n\t \n\n Warning\n gdk_input_add_full has been deprecated since version 2.14 and should not be used in newly-written code. Use g_io_add_watch_full() on a GIOChannel\n Establish a callback when a condition becomes true on\n a file descriptor.\n Params:\n source = a file descriptor.\n condition = the condition.\n data = callback data passed to function.\n destroy = callback function to call with data when the input\n handler is removed.\n Returns: a tag that can later be used as an argument to gdk_input_remove().\n\t \n",
"line" : 90}
,
{
"name" : "add",
"kind" : "function",
"protection" : "public",
"type" : "int(int source, GdkInputCondition condition, extern (C) void function(void*, int, GdkInputCondition) funct, void* data)",
"comment" : "\n Warning\n gdk_input_add has been deprecated since version 2.14 and should not be used in newly-written code. Use g_io_add_watch() on a GIOChannel\n Establish a callback when a condition becomes true on\n a file descriptor.\n Params:\n source = a file descriptor.\n condition = the condition.\n data = callback data passed to function.\n Returns: a tag that can later be used as an argument to gdk_input_remove().\n\t \n",
"line" : 107}
,
{
"name" : "remove",
"kind" : "function",
"protection" : "public",
"type" : "void(int tag)",
"comment" : "\n Warning\n gdk_input_remove is deprecated and should not be used in newly-written code.\n Remove a callback added with gdk_input_add() or\n gdk_input_add_full().\n Params:\n tag = the tag returned when the callback was set up.\n\t \n",
"line" : 121}
]
}
]
}
,
{
"name" : "gdk.Keymap",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/Keymap.d",
"members" : [
{
"name" : "Keymap",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n Key values are the codes which are sent whenever a key is pressed or released.\n They appear in the keyval field of the\n GdkEventKey structure, which is passed to signal handlers for the\n \"key-press-event\" and \"key-release-event\" signals.\n The complete list of key values can be found in the <gdk\/gdkkeysyms.h>\n header file. <gdk\/gdkkeysyms.h> is not included in <gdk\/gdk.h>,\n it must be included independently, because the file is quite large.\n Key values are regularly updated from the upstream X.org X11 implementation,\n so new values are added regularly. They will be prefixed with GDK_ rather than\n XF86XK_ or XK_ (for older symbols).\n Key values can be converted into a string representation using\n gdk_keyval_name(). The reverse function, converting a string to a key value,\n is provided by gdk_keyval_from_name().\n The case of key values can be determined using gdk_keyval_is_upper() and\n gdk_keyval_is_lower(). Key values can be converted to upper or lower case\n using gdk_keyval_to_upper() and gdk_keyval_to_lower().\n When it makes sense, key values can be converted to and from\n Unicode characters with gdk_keyval_to_unicode() and gdk_unicode_to_keyval().\n One GdkKeymap object exists for each user display. gdk_keymap_get_default()\n returns the GdkKeymap for the default display; to obtain keymaps for other\n displays, use gdk_keymap_get_for_display(). A keymap\n is a mapping from GdkKeymapKey to key values. You can think of a GdkKeymapKey\n as a representation of a symbol printed on a physical keyboard key. That is, it\n contains three pieces of information. First, it contains the hardware keycode;\n this is an identifying number for a physical key. Second, it contains the\n level of the key. The level indicates which symbol on the\n key will be used, in a vertical direction. So on a standard US keyboard, the key\n with the number \"1\" on it also has the exclamation point (\"!\") character on\n it. The level indicates whether to use the \"1\" or the \"!\" symbol. The letter\n keys are considered to have a lowercase letter at level 0, and an uppercase\n letter at level 1, though only the uppercase letter is printed. Third, the\n GdkKeymapKey contains a group; groups are not used on standard US keyboards,\n but are used in many other countries. On a keyboard with groups, there can be 3\n or 4 symbols printed on a single key. The group indicates movement in a\n horizontal direction. Usually groups are used for two different languages. In\n group 0, a key might have two English characters, and in group 1 it might have\n two Hebrew characters. The Hebrew characters will be printed on the key next to\n the English characters.\n In order to use a keymap to interpret a key event, it's necessary to first\n convert the keyboard state into an effective group and level. This is done via a\n set of rules that varies widely according to type of keyboard and user\n configuration. The function gdk_keymap_translate_keyboard_state() accepts a\n keyboard state -- consisting of hardware keycode pressed, active modifiers, and\n active group -- applies the appropriate rules, and returns the group\/level to be\n used to index the keymap, along with the modifiers which did not affect the\n group and level. i.e. it returns \"unconsumed modifiers.\" The keyboard group may\n differ from the effective group used for keymap lookups because some keys don't\n have multiple groups - e.g. the Enter key is always in group 0 regardless of\n keyboard state.\n Note that gdk_keymap_translate_keyboard_state() also returns the keyval, i.e. it\n goes ahead and performs the keymap lookup in addition to telling you which\n effective group\/level values were used for the lookup. GdkEventKey already\n contains this keyval, however, so you don't normally need to call\n gdk_keymap_translate_keyboard_state() just to get the keyval.\n \n",
"line" : 129,
"base" : "ObjectG",
"members" : [
{
"name" : "gdkKeymap",
"kind" : "variable",
"protection" : "protected",
"type" : "GdkKeymap*",
"comment" : " the main Gtk struct \n",
"line" : 133}
,
{
"name" : "getKeymapStruct",
"kind" : "function",
"protection" : "public",
"type" : "GdkKeymap*()",
"line" : 136}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 143}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Keymap(GdkKeymap* gdkKeymap)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 151}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 169}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[const(char)[]]",
"comment" : "\n\t \n",
"line" : 177}
,
{
"name" : "onDirectionChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Keymap)[]",
"line" : 179}
,
{
"name" : "addOnDirectionChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Keymap) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::direction-changed signal gets emitted when the direction of\n the keymap changes.\n Since 2.0\n\t \n",
"line" : 185}
,
{
"name" : "callBackDirectionChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GdkKeymap* keymapStruct, Keymap keymap)",
"line" : 200}
,
{
"name" : "onKeysChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Keymap)[]",
"line" : 208}
,
{
"name" : "addOnKeysChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Keymap) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::keys-changed signal is emitted when the mapping represented by\n keymap changes.\n Since 2.2\n\t \n",
"line" : 214}
,
{
"name" : "callBackKeysChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GdkKeymap* keymapStruct, Keymap keymap)",
"line" : 229}
,
{
"name" : "onStateChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Keymap)[]",
"line" : 237}
,
{
"name" : "addOnStateChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Keymap) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::state-changed signal is emitted when the state of the\n keyboard changes, e.g when Caps Lock is turned on or off.\n See gdk_keymap_get_caps_lock_state().\n Since 2.16\n\t \n",
"line" : 244}
,
{
"name" : "callBackStateChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GdkKeymap* keymapStruct, Keymap keymap)",
"line" : 259}
,
{
"name" : "getDefault",
"kind" : "function",
"protection" : "public",
"type" : "Keymap()",
"comment" : "\n Returns the GdkKeymap attached to the default display.\n Returns: the GdkKeymap attached to the default display.\n\t \n",
"line" : 272}
,
{
"name" : "getForDisplay",
"kind" : "function",
"protection" : "public",
"type" : "Keymap(Display display)",
"comment" : "\n Returns the GdkKeymap attached to display.\n Since 2.2\n Params:\n display = the GdkDisplay.\n Returns: the GdkKeymap attached to display.\n\t \n",
"line" : 290}
,
{
"name" : "lookupKey",
"kind" : "function",
"protection" : "public",
"type" : "uint(out GdkKeymapKey key)",
"comment" : "\n Looks up the keyval mapped to a keycode\/group\/level triplet.\n If no keyval is bound to key, returns 0. For normal user input,\n you want to use gdk_keymap_translate_keyboard_state() instead of\n this function, since the effective group\/level may not be\n the same as the current keyboard state.\n Params:\n key = a GdkKeymapKey with keycode, group, and level initialized\n Returns: a keyval, or 0 if none was mapped to the given key\n\t \n",
"line" : 311}
,
{
"name" : "translateKeyboardState",
"kind" : "function",
"protection" : "public",
"type" : "int(uint hardwareKeycode, GdkModifierType state, int group, out uint keyval, out int effectiveGroup, out int level, out GdkModifierType consumedModifiers)",
"comment" : "\n Translates the contents of a GdkEventKey into a keyval, effective\n group, and level. Modifiers that affected the translation and\n are thus unavailable for application use are returned in\n consumed_modifiers. See the section called “Description” for an explanation of\n groups and levels. The effective_group is the group that was\n actually used for the translation; some keys such as Enter are not\n affected by the active keyboard group. The level is derived from\n state. For convenience, GdkEventKey already contains the translated\n keyval, so this function isn't as useful as you might think.\n Note\n consumed_modifiers gives modifiers that should be masked out\n from state when comparing this key press to a hot key. For\n instance, on a US keyboard, the plus\n symbol is shifted, so when comparing a key press to a\n <Control>plus accelerator <Shift> should\n be masked out.\n $(DDOC_COMMENT example)\n An older interpretation consumed_modifiers was that it contained\n all modifiers that might affect the translation of the key;\n this allowed accelerators to be stored with irrelevant consumed\n Params:\n hardwareKeycode = a keycode\n state = a modifier state\n group = active keyboard group\n keyval = return location for keyval, or NULL. [out][allow-none]\n effectiveGroup = return location for effective group, or NULL. [out][allow-none]\n level = return location for level, or NULL. [out][allow-none]\n consumedModifiers = return location for modifiers that were used to\n  determine the group or level, or NULL. [out][allow-none]\n Returns: TRUE if there was a keyval bound to the keycode\/state\/group\n\t \n",
"line" : 349}
,
{
"name" : "getEntriesForKeyval",
"kind" : "function",
"protection" : "public",
"type" : "int(uint keyval, out GdkKeymapKey[] keys)",
"comment" : "\n Obtains a list of keycode\/group\/level combinations that will\n generate keyval. Groups and levels are two kinds of keyboard mode;\n in general, the level determines whether the top or bottom symbol\n on a key is used, and the group determines whether the left or\n right symbol is used. On US keyboards, the shift key changes the\n keyboard level, and there are no groups. A group switch key might\n convert a keyboard between Hebrew to English modes, for example.\n GdkEventKey contains a group field that indicates the active\n keyboard group. The level is computed from the modifier mask.\n The returned array should be freed\n with g_free().\n Params:\n keyval = a keyval, such as GDK_a, GDK_Up, GDK_Return, etc.\n keys = return location for an array of GdkKeymapKey\n Returns: TRUE if keys were found and returned\n\t \n",
"line" : 372}
,
{
"name" : "getEntriesForKeycode",
"kind" : "function",
"protection" : "public",
"type" : "int(uint hardwareKeycode, out GdkKeymapKey[] keys, out uint[] keyvals)",
"comment" : "\n Returns the keyvals bound to hardware_keycode.\n The Nth GdkKeymapKey in keys is bound to the Nth\n keyval in keyvals. Free the returned arrays with g_free().\n When a keycode is pressed by the user, the keyval from\n this list of entries is selected by considering the effective\n keyboard group and level. See gdk_keymap_translate_keyboard_state().\n Params:\n hardwareKeycode = a keycode\n keys = return location for array of GdkKeymapKey, or NULL\n keyvals = return location for array of keyvals, or NULL\n Returns: TRUE if there were any entries\n\t \n",
"line" : 397}
,
{
"name" : "getDirection",
"kind" : "function",
"protection" : "public",
"type" : "PangoDirection()",
"comment" : "\n Returns the direction of effective layout of the keymap.\n Returns the direction of the keymap.\n Returns: PANGO_DIRECTION_LTR or PANGO_DIRECTION_RTL if it can determine the direction. PANGO_DIRECTION_NEUTRAL otherwise.\n\t \n",
"line" : 416}
,
{
"name" : "haveBidiLayouts",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines if keyboard layouts for both right-to-left and left-to-right\n languages are in use.\n Since 2.12\n Returns: TRUE if there are layouts in both directions, FALSE otherwise\n\t \n",
"line" : 428}
,
{
"name" : "getCapsLockState",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether the Caps Lock modifer is locked.\n Since 2.16\n Returns: TRUE if Caps Lock is on\n\t \n",
"line" : 439}
,
{
"name" : "addVirtualModifiers",
"kind" : "function",
"protection" : "public",
"type" : "void(ref GdkModifierType state)",
"comment" : "\n Adds virtual modifiers (i.e. Super, Hyper and Meta) which correspond\n to the real modifiers (i.e Mod2, Mod3, ...) in modifiers.\n are set in state to their non-virtual counterparts (i.e. Mod2,\n Mod3,...) and set the corresponding bits in state.\n GDK already does this before delivering key events, but for\n compatibility reasons, it only sets the first virtual modifier\n it finds, whereas this function sets all matching virtual modifiers.\n This function is useful when matching key events against\n accelerators.\n Since 2.20\n Params:\n state = pointer to the modifier mask to change\n\t \n",
"line" : 459}
,
{
"name" : "mapVirtualModifiers",
"kind" : "function",
"protection" : "public",
"type" : "int(ref GdkModifierType state)",
"comment" : "\n Maps the virtual modifiers (i.e. Super, Hyper and Meta) which\n are set in state to their non-virtual counterparts (i.e. Mod2,\n Mod3,...) and set the corresponding bits in state.\n This function is useful when matching key events against\n accelerators.\n Since 2.20\n Params:\n state = pointer to the modifier state to map\n Returns: TRUE if no virtual modifiers were mapped to the same non-virtual modifier. Note that FALSE is also returned if a virtual modifier is mapped to a non-virtual modifier that was already set in state.\n\t \n",
"line" : 476}
,
{
"name" : "gdkKeyvalName",
"kind" : "function",
"protection" : "public",
"type" : "string(uint keyval)",
"comment" : "\n Converts a key value into a symbolic name.\n The names are the same as those in the <gdk\/gdkkeysyms.h> header file\n but without the leading \"GDK_\".\n Params:\n keyval = a key value.\n Returns: a string containing the name of the key, or NULL if keyval is not a valid key. The string should not be modified.\n\t \n",
"line" : 490}
,
{
"name" : "gdkKeyvalFromName",
"kind" : "function",
"protection" : "public",
"type" : "uint(string keyvalName)",
"comment" : "\n Converts a key name to a key value.\n Params:\n keyvalName = a key name.\n Returns: the corresponding key value, or GDK_VoidSymbol if the key name is not a valid key.\n\t \n",
"line" : 502}
,
{
"name" : "gdkKeyvalConvertCase",
"kind" : "function",
"protection" : "public",
"type" : "void(uint symbol, out uint lower, out uint upper)",
"comment" : "\n Obtains the upper- and lower-case versions of the keyval symbol.\n Examples of keyvals are GDK_a, GDK_Enter, GDK_F1, etc.\n Params:\n symbol = a keyval\n lower = return location for lowercase version of symbol. [out]\n upper = return location for uppercase version of symbol. [out]\n\t \n",
"line" : 516}
,
{
"name" : "gdkKeyvalToUpper",
"kind" : "function",
"protection" : "public",
"type" : "uint(uint keyval)",
"comment" : "\n Converts a key value to upper case, if applicable.\n Params:\n keyval = a key value.\n Returns: the upper case form of keyval, or keyval itself if it is already in upper case or it is not subject to case conversion.\n\t \n",
"line" : 528}
,
{
"name" : "gdkKeyvalToLower",
"kind" : "function",
"protection" : "public",
"type" : "uint(uint keyval)",
"comment" : "\n Converts a key value to lower case, if applicable.\n Params:\n keyval = a key value.\n Returns: the lower case form of keyval, or keyval itself if it is already in lower case or it is not subject to case conversion.\n\t \n",
"line" : 540}
,
{
"name" : "gdkKeyvalIsUpper",
"kind" : "function",
"protection" : "public",
"type" : "int(uint keyval)",
"comment" : "\n Returns TRUE if the given key value is in upper case.\n Params:\n keyval = a key value.\n Returns: TRUE if keyval is in upper case, or if keyval is not subject to case conversion.\n\t \n",
"line" : 552}
,
{
"name" : "gdkKeyvalIsLower",
"kind" : "function",
"protection" : "public",
"type" : "int(uint keyval)",
"comment" : "\n Returns TRUE if the given key value is in lower case.\n Params:\n keyval = a key value.\n Returns: TRUE if keyval is in lower case, or if keyval is not subject to case conversion.\n\t \n",
"line" : 564}
,
{
"name" : "gdkKeyvalToUnicode",
"kind" : "function",
"protection" : "public",
"type" : "uint(uint keyval)",
"comment" : "\n Convert from a GDK key symbol to the corresponding ISO10646 (Unicode)\n character.\n Params:\n keyval = a GDK key symbol\n Returns: the corresponding unicode character, or 0 if there is no corresponding character.\n\t \n",
"line" : 577}
,
{
"name" : "gdkUnicodeToKeyval",
"kind" : "function",
"protection" : "public",
"type" : "uint(uint wc)",
"comment" : "\n Convert from a ISO10646 character to a key symbol.\n Since 2.0\n Params:\n wc = a ISO10646 encoded character\n Returns: the corresponding GDK key symbol, if one exists. or, if there is no corresponding symbol, wc | 0x01000000 Signal Details The \"direction-changed\" signal void user_function (GdkKeymap *keymap, gpointer user_data) : Run Last The ::direction-changed signal gets emitted when the direction of the keymap changes.\n\t \n",
"line" : 590}
]
}
]
}
,
{
"name" : "gdk.Keysyms",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/Keysyms.d",
"members" : [
{
"name" : "GdkKeysyms",
"kind" : "enum",
"protection" : "public",
"line" : 40,
"base" : "int",
"members" : [
{
"name" : "GDK_VoidSymbol",
"kind" : "enum member",
"protection" : "public",
"line" : 43}
,
{
"name" : "GDK_BackSpace",
"kind" : "enum member",
"protection" : "public",
"line" : 45}
,
{
"name" : "GDK_Tab",
"kind" : "enum member",
"protection" : "public",
"line" : 47}
,
{
"name" : "GDK_Linefeed",
"kind" : "enum member",
"protection" : "public",
"line" : 49}
,
{
"name" : "GDK_Clear",
"kind" : "enum member",
"protection" : "public",
"line" : 51}
,
{
"name" : "GDK_Return",
"kind" : "enum member",
"protection" : "public",
"line" : 53}
,
{
"name" : "GDK_Pause",
"kind" : "enum member",
"protection" : "public",
"line" : 55}
,
{
"name" : "GDK_Scroll_Lock",
"kind" : "enum member",
"protection" : "public",
"line" : 57}
,
{
"name" : "GDK_Sys_Req",
"kind" : "enum member",
"protection" : "public",
"line" : 59}
,
{
"name" : "GDK_Escape",
"kind" : "enum member",
"protection" : "public",
"line" : 61}
,
{
"name" : "GDK_Delete",
"kind" : "enum member",
"protection" : "public",
"line" : 63}
,
{
"name" : "GDK_Multi_key",
"kind" : "enum member",
"protection" : "public",
"line" : 65}
,
{
"name" : "GDK_Codeinput",
"kind" : "enum member",
"protection" : "public",
"line" : 67}
,
{
"name" : "GDK_SingleCandidate",
"kind" : "enum member",
"protection" : "public",
"line" : 69}
,
{
"name" : "GDK_MultipleCandidate",
"kind" : "enum member",
"protection" : "public",
"line" : 71}
,
{
"name" : "GDK_PreviousCandidate",
"kind" : "enum member",
"protection" : "public",
"line" : 73}
,
{
"name" : "GDK_Kanji",
"kind" : "enum member",
"protection" : "public",
"line" : 75}
,
{
"name" : "GDK_Muhenkan",
"kind" : "enum member",
"protection" : "public",
"line" : 77}
,
{
"name" : "GDK_Henkan_Mode",
"kind" : "enum member",
"protection" : "public",
"line" : 79}
,
{
"name" : "GDK_Henkan",
"kind" : "enum member",
"protection" : "public",
"line" : 81}
,
{
"name" : "GDK_Romaji",
"kind" : "enum member",
"protection" : "public",
"line" : 83}
,
{
"name" : "GDK_Hiragana",
"kind" : "enum member",
"protection" : "public",
"line" : 85}
,
{
"name" : "GDK_Katakana",
"kind" : "enum member",
"protection" : "public",
"line" : 87}
,
{
"name" : "GDK_Hiragana_Katakana",
"kind" : "enum member",
"protection" : "public",
"line" : 89}
,
{
"name" : "GDK_Zenkaku",
"kind" : "enum member",
"protection" : "public",
"line" : 91}
,
{
"name" : "GDK_Hankaku",
"kind" : "enum member",
"protection" : "public",
"line" : 93}
,
{
"name" : "GDK_Zenkaku_Hankaku",
"kind" : "enum member",
"protection" : "public",
"line" : 95}
,
{
"name" : "GDK_Touroku",
"kind" : "enum member",
"protection" : "public",
"line" : 97}
,
{
"name" : "GDK_Massyo",
"kind" : "enum member",
"protection" : "public",
"line" : 99}
,
{
"name" : "GDK_Kana_Lock",
"kind" : "enum member",
"protection" : "public",
"line" : 101}
,
{
"name" : "GDK_Kana_Shift",
"kind" : "enum member",
"protection" : "public",
"line" : 103}
,
{
"name" : "GDK_Eisu_Shift",
"kind" : "enum member",
"protection" : "public",
"line" : 105}
,
{
"name" : "GDK_Eisu_toggle",
"kind" : "enum member",
"protection" : "public",
"line" : 107}
,
{
"name" : "GDK_Kanji_Bangou",
"kind" : "enum member",
"protection" : "public",
"line" : 109}
,
{
"name" : "GDK_Zen_Koho",
"kind" : "enum member",
"protection" : "public",
"line" : 111}
,
{
"name" : "GDK_Mae_Koho",
"kind" : "enum member",
"protection" : "public",
"line" : 113}
,
{
"name" : "GDK_Home",
"kind" : "enum member",
"protection" : "public",
"line" : 115}
,
{
"name" : "GDK_Left",
"kind" : "enum member",
"protection" : "public",
"line" : 117}
,
{
"name" : "GDK_Up",
"kind" : "enum member",
"protection" : "public",
"line" : 119}
,
{
"name" : "GDK_Right",
"kind" : "enum member",
"protection" : "public",
"line" : 121}
,
{
"name" : "GDK_Down",
"kind" : "enum member",
"protection" : "public",
"line" : 123}
,
{
"name" : "GDK_Prior",
"kind" : "enum member",
"protection" : "public",
"line" : 125}
,
{
"name" : "GDK_Page_Up",
"kind" : "enum member",
"protection" : "public",
"line" : 127}
,
{
"name" : "GDK_Next",
"kind" : "enum member",
"protection" : "public",
"line" : 129}
,
{
"name" : "GDK_Page_Down",
"kind" : "enum member",
"protection" : "public",
"line" : 131}
,
{
"name" : "GDK_End",
"kind" : "enum member",
"protection" : "public",
"line" : 133}
,
{
"name" : "GDK_Begin",
"kind" : "enum member",
"protection" : "public",
"line" : 135}
,
{
"name" : "GDK_Select",
"kind" : "enum member",
"protection" : "public",
"line" : 137}
,
{
"name" : "GDK_Print",
"kind" : "enum member",
"protection" : "public",
"line" : 139}
,
{
"name" : "GDK_Execute",
"kind" : "enum member",
"protection" : "public",
"line" : 141}
,
{
"name" : "GDK_Insert",
"kind" : "enum member",
"protection" : "public",
"line" : 143}
,
{
"name" : "GDK_Undo",
"kind" : "enum member",
"protection" : "public",
"line" : 145}
,
{
"name" : "GDK_Redo",
"kind" : "enum member",
"protection" : "public",
"line" : 147}
,
{
"name" : "GDK_Menu",
"kind" : "enum member",
"protection" : "public",
"line" : 149}
,
{
"name" : "GDK_Find",
"kind" : "enum member",
"protection" : "public",
"line" : 151}
,
{
"name" : "GDK_Cancel",
"kind" : "enum member",
"protection" : "public",
"line" : 153}
,
{
"name" : "GDK_Help",
"kind" : "enum member",
"protection" : "public",
"line" : 155}
,
{
"name" : "GDK_Break",
"kind" : "enum member",
"protection" : "public",
"line" : 157}
,
{
"name" : "GDK_Mode_switch",
"kind" : "enum member",
"protection" : "public",
"line" : 159}
,
{
"name" : "GDK_script_switch",
"kind" : "enum member",
"protection" : "public",
"line" : 161}
,
{
"name" : "GDK_Num_Lock",
"kind" : "enum member",
"protection" : "public",
"line" : 163}
,
{
"name" : "GDK_KP_Space",
"kind" : "enum member",
"protection" : "public",
"line" : 165}
,
{
"name" : "GDK_KP_Tab",
"kind" : "enum member",
"protection" : "public",
"line" : 167}
,
{
"name" : "GDK_KP_Enter",
"kind" : "enum member",
"protection" : "public",
"line" : 169}
,
{
"name" : "GDK_KP_F1",
"kind" : "enum member",
"protection" : "public",
"line" : 171}
,
{
"name" : "GDK_KP_F2",
"kind" : "enum member",
"protection" : "public",
"line" : 173}
,
{
"name" : "GDK_KP_F3",
"kind" : "enum member",
"protection" : "public",
"line" : 175}
,
{
"name" : "GDK_KP_F4",
"kind" : "enum member",
"protection" : "public",
"line" : 177}
,
{
"name" : "GDK_KP_Home",
"kind" : "enum member",
"protection" : "public",
"line" : 179}
,
{
"name" : "GDK_KP_Left",
"kind" : "enum member",
"protection" : "public",
"line" : 181}
,
{
"name" : "GDK_KP_Up",
"kind" : "enum member",
"protection" : "public",
"line" : 183}
,
{
"name" : "GDK_KP_Right",
"kind" : "enum member",
"protection" : "public",
"line" : 185}
,
{
"name" : "GDK_KP_Down",
"kind" : "enum member",
"protection" : "public",
"line" : 187}
,
{
"name" : "GDK_KP_Prior",
"kind" : "enum member",
"protection" : "public",
"line" : 189}
,
{
"name" : "GDK_KP_Page_Up",
"kind" : "enum member",
"protection" : "public",
"line" : 191}
,
{
"name" : "GDK_KP_Next",
"kind" : "enum member",
"protection" : "public",
"line" : 193}
,
{
"name" : "GDK_KP_Page_Down",
"kind" : "enum member",
"protection" : "public",
"line" : 195}
,
{
"name" : "GDK_KP_End",
"kind" : "enum member",
"protection" : "public",
"line" : 197}
,
{
"name" : "GDK_KP_Begin",
"kind" : "enum member",
"protection" : "public",
"line" : 199}
,
{
"name" : "GDK_KP_Insert",
"kind" : "enum member",
"protection" : "public",
"line" : 201}
,
{
"name" : "GDK_KP_Delete",
"kind" : "enum member",
"protection" : "public",
"line" : 203}
,
{
"name" : "GDK_KP_Equal",
"kind" : "enum member",
"protection" : "public",
"line" : 205}
,
{
"name" : "GDK_KP_Multiply",
"kind" : "enum member",
"protection" : "public",
"line" : 207}
,
{
"name" : "GDK_KP_Add",
"kind" : "enum member",
"protection" : "public",
"line" : 209}
,
{
"name" : "GDK_KP_Separator",
"kind" : "enum member",
"protection" : "public",
"line" : 211}
,
{
"name" : "GDK_KP_Subtract",
"kind" : "enum member",
"protection" : "public",
"line" : 213}
,
{
"name" : "GDK_KP_Decimal",
"kind" : "enum member",
"protection" : "public",
"line" : 215}
,
{
"name" : "GDK_KP_Divide",
"kind" : "enum member",
"protection" : "public",
"line" : 217}
,
{
"name" : "GDK_KP_0",
"kind" : "enum member",
"protection" : "public",
"line" : 219}
,
{
"name" : "GDK_KP_1",
"kind" : "enum member",
"protection" : "public",
"line" : 221}
,
{
"name" : "GDK_KP_2",
"kind" : "enum member",
"protection" : "public",
"line" : 223}
,
{
"name" : "GDK_KP_3",
"kind" : "enum member",
"protection" : "public",
"line" : 225}
,
{
"name" : "GDK_KP_4",
"kind" : "enum member",
"protection" : "public",
"line" : 227}
,
{
"name" : "GDK_KP_5",
"kind" : "enum member",
"protection" : "public",
"line" : 229}
,
{
"name" : "GDK_KP_6",
"kind" : "enum member",
"protection" : "public",
"line" : 231}
,
{
"name" : "GDK_KP_7",
"kind" : "enum member",
"protection" : "public",
"line" : 233}
,
{
"name" : "GDK_KP_8",
"kind" : "enum member",
"protection" : "public",
"line" : 235}
,
{
"name" : "GDK_KP_9",
"kind" : "enum member",
"protection" : "public",
"line" : 237}
,
{
"name" : "GDK_F1",
"kind" : "enum member",
"protection" : "public",
"line" : 239}
,
{
"name" : "GDK_F2",
"kind" : "enum member",
"protection" : "public",
"line" : 241}
,
{
"name" : "GDK_F3",
"kind" : "enum member",
"protection" : "public",
"line" : 243}
,
{
"name" : "GDK_F4",
"kind" : "enum member",
"protection" : "public",
"line" : 245}
,
{
"name" : "GDK_F5",
"kind" : "enum member",
"protection" : "public",
"line" : 247}
,
{
"name" : "GDK_F6",
"kind" : "enum member",
"protection" : "public",
"line" : 249}
,
{
"name" : "GDK_F7",
"kind" : "enum member",
"protection" : "public",
"line" : 251}
,
{
"name" : "GDK_F8",
"kind" : "enum member",
"protection" : "public",
"line" : 253}
,
{
"name" : "GDK_F9",
"kind" : "enum member",
"protection" : "public",
"line" : 255}
,
{
"name" : "GDK_F10",
"kind" : "enum member",
"protection" : "public",
"line" : 257}
,
{
"name" : "GDK_F11",
"kind" : "enum member",
"protection" : "public",
"line" : 259}
,
{
"name" : "GDK_L1",
"kind" : "enum member",
"protection" : "public",
"line" : 261}
,
{
"name" : "GDK_F12",
"kind" : "enum member",
"protection" : "public",
"line" : 263}
,
{
"name" : "GDK_L2",
"kind" : "enum member",
"protection" : "public",
"line" : 265}
,
{
"name" : "GDK_F13",
"kind" : "enum member",
"protection" : "public",
"line" : 267}
,
{
"name" : "GDK_L3",
"kind" : "enum member",
"protection" : "public",
"line" : 269}
,
{
"name" : "GDK_F14",
"kind" : "enum member",
"protection" : "public",
"line" : 271}
,
{
"name" : "GDK_L4",
"kind" : "enum member",
"protection" : "public",
"line" : 273}
,
{
"name" : "GDK_F15",
"kind" : "enum member",
"protection" : "public",
"line" : 275}
,
{
"name" : "GDK_L5",
"kind" : "enum member",
"protection" : "public",
"line" : 277}
,
{
"name" : "GDK_F16",
"kind" : "enum member",
"protection" : "public",
"line" : 279}
,
{
"name" : "GDK_L6",
"kind" : "enum member",
"protection" : "public",
"line" : 281}
,
{
"name" : "GDK_F17",
"kind" : "enum member",
"protection" : "public",
"line" : 283}
,
{
"name" : "GDK_L7",
"kind" : "enum member",
"protection" : "public",
"line" : 285}
,
{
"name" : "GDK_F18",
"kind" : "enum member",
"protection" : "public",
"line" : 287}
,
{
"name" : "GDK_L8",
"kind" : "enum member",
"protection" : "public",
"line" : 289}
,
{
"name" : "GDK_F19",
"kind" : "enum member",
"protection" : "public",
"line" : 291}
,
{
"name" : "GDK_L9",
"kind" : "enum member",
"protection" : "public",
"line" : 293}
,
{
"name" : "GDK_F20",
"kind" : "enum member",
"protection" : "public",
"line" : 295}
,
{
"name" : "GDK_L10",
"kind" : "enum member",
"protection" : "public",
"line" : 297}
,
{
"name" : "GDK_F21",
"kind" : "enum member",
"protection" : "public",
"line" : 299}
,
{
"name" : "GDK_R1",
"kind" : "enum member",
"protection" : "public",
"line" : 301}
,
{
"name" : "GDK_F22",
"kind" : "enum member",
"protection" : "public",
"line" : 303}
,
{
"name" : "GDK_R2",
"kind" : "enum member",
"protection" : "public",
"line" : 305}
,
{
"name" : "GDK_F23",
"kind" : "enum member",
"protection" : "public",
"line" : 307}
,
{
"name" : "GDK_R3",
"kind" : "enum member",
"protection" : "public",
"line" : 309}
,
{
"name" : "GDK_F24",
"kind" : "enum member",
"protection" : "public",
"line" : 311}
,
{
"name" : "GDK_R4",
"kind" : "enum member",
"protection" : "public",
"line" : 313}
,
{
"name" : "GDK_F25",
"kind" : "enum member",
"protection" : "public",
"line" : 315}
,
{
"name" : "GDK_R5",
"kind" : "enum member",
"protection" : "public",
"line" : 317}
,
{
"name" : "GDK_F26",
"kind" : "enum member",
"protection" : "public",
"line" : 319}
,
{
"name" : "GDK_R6",
"kind" : "enum member",
"protection" : "public",
"line" : 321}
,
{
"name" : "GDK_F27",
"kind" : "enum member",
"protection" : "public",
"line" : 323}
,
{
"name" : "GDK_R7",
"kind" : "enum member",
"protection" : "public",
"line" : 325}
,
{
"name" : "GDK_F28",
"kind" : "enum member",
"protection" : "public",
"line" : 327}
,
{
"name" : "GDK_R8",
"kind" : "enum member",
"protection" : "public",
"line" : 329}
,
{
"name" : "GDK_F29",
"kind" : "enum member",
"protection" : "public",
"line" : 331}
,
{
"name" : "GDK_R9",
"kind" : "enum member",
"protection" : "public",
"line" : 333}
,
{
"name" : "GDK_F30",
"kind" : "enum member",
"protection" : "public",
"line" : 335}
,
{
"name" : "GDK_R10",
"kind" : "enum member",
"protection" : "public",
"line" : 337}
,
{
"name" : "GDK_F31",
"kind" : "enum member",
"protection" : "public",
"line" : 339}
,
{
"name" : "GDK_R11",
"kind" : "enum member",
"protection" : "public",
"line" : 341}
,
{
"name" : "GDK_F32",
"kind" : "enum member",
"protection" : "public",
"line" : 343}
,
{
"name" : "GDK_R12",
"kind" : "enum member",
"protection" : "public",
"line" : 345}
,
{
"name" : "GDK_F33",
"kind" : "enum member",
"protection" : "public",
"line" : 347}
,
{
"name" : "GDK_R13",
"kind" : "enum member",
"protection" : "public",
"line" : 349}
,
{
"name" : "GDK_F34",
"kind" : "enum member",
"protection" : "public",
"line" : 351}
,
{
"name" : "GDK_R14",
"kind" : "enum member",
"protection" : "public",
"line" : 353}
,
{
"name" : "GDK_F35",
"kind" : "enum member",
"protection" : "public",
"line" : 355}
,
{
"name" : "GDK_R15",
"kind" : "enum member",
"protection" : "public",
"line" : 357}
,
{
"name" : "GDK_Shift_L",
"kind" : "enum member",
"protection" : "public",
"line" : 359}
,
{
"name" : "GDK_Shift_R",
"kind" : "enum member",
"protection" : "public",
"line" : 361}
,
{
"name" : "GDK_Control_L",
"kind" : "enum member",
"protection" : "public",
"line" : 363}
,
{
"name" : "GDK_Control_R",
"kind" : "enum member",
"protection" : "public",
"line" : 365}
,
{
"name" : "GDK_Caps_Lock",
"kind" : "enum member",
"protection" : "public",
"line" : 367}
,
{
"name" : "GDK_Shift_Lock",
"kind" : "enum member",
"protection" : "public",
"line" : 369}
,
{
"name" : "GDK_Meta_L",
"kind" : "enum member",
"protection" : "public",
"line" : 371}
,
{
"name" : "GDK_Meta_R",
"kind" : "enum member",
"protection" : "public",
"line" : 373}
,
{
"name" : "GDK_Alt_L",
"kind" : "enum member",
"protection" : "public",
"line" : 375}
,
{
"name" : "GDK_Alt_R",
"kind" : "enum member",
"protection" : "public",
"line" : 377}
,
{
"name" : "GDK_Super_L",
"kind" : "enum member",
"protection" : "public",
"line" : 379}
,
{
"name" : "GDK_Super_R",
"kind" : "enum member",
"protection" : "public",
"line" : 381}
,
{
"name" : "GDK_Hyper_L",
"kind" : "enum member",
"protection" : "public",
"line" : 383}
,
{
"name" : "GDK_Hyper_R",
"kind" : "enum member",
"protection" : "public",
"line" : 385}
,
{
"name" : "GDK_ISO_Lock",
"kind" : "enum member",
"protection" : "public",
"line" : 387}
,
{
"name" : "GDK_ISO_Level2_Latch",
"kind" : "enum member",
"protection" : "public",
"line" : 389}
,
{
"name" : "GDK_ISO_Level3_Shift",
"kind" : "enum member",
"protection" : "public",
"line" : 391}
,
{
"name" : "GDK_ISO_Level3_Latch",
"kind" : "enum member",
"protection" : "public",
"line" : 393}
,
{
"name" : "GDK_ISO_Level3_Lock",
"kind" : "enum member",
"protection" : "public",
"line" : 395}
,
{
"name" : "GDK_ISO_Group_Shift",
"kind" : "enum member",
"protection" : "public",
"line" : 397}
,
{
"name" : "GDK_ISO_Group_Latch",
"kind" : "enum member",
"protection" : "public",
"line" : 399}
,
{
"name" : "GDK_ISO_Group_Lock",
"kind" : "enum member",
"protection" : "public",
"line" : 401}
,
{
"name" : "GDK_ISO_Next_Group",
"kind" : "enum member",
"protection" : "public",
"line" : 403}
,
{
"name" : "GDK_ISO_Next_Group_Lock",
"kind" : "enum member",
"protection" : "public",
"line" : 405}
,
{
"name" : "GDK_ISO_Prev_Group",
"kind" : "enum member",
"protection" : "public",
"line" : 407}
,
{
"name" : "GDK_ISO_Prev_Group_Lock",
"kind" : "enum member",
"protection" : "public",
"line" : 409}
,
{
"name" : "GDK_ISO_First_Group",
"kind" : "enum member",
"protection" : "public",
"line" : 411}
,
{
"name" : "GDK_ISO_First_Group_Lock",
"kind" : "enum member",
"protection" : "public",
"line" : 413}
,
{
"name" : "GDK_ISO_Last_Group",
"kind" : "enum member",
"protection" : "public",
"line" : 415}
,
{
"name" : "GDK_ISO_Last_Group_Lock",
"kind" : "enum member",
"protection" : "public",
"line" : 417}
,
{
"name" : "GDK_ISO_Left_Tab",
"kind" : "enum member",
"protection" : "public",
"line" : 419}
,
{
"name" : "GDK_ISO_Move_Line_Up",
"kind" : "enum member",
"protection" : "public",
"line" : 421}
,
{
"name" : "GDK_ISO_Move_Line_Down",
"kind" : "enum member",
"protection" : "public",
"line" : 423}
,
{
"name" : "GDK_ISO_Partial_Line_Up",
"kind" : "enum member",
"protection" : "public",
"line" : 425}
,
{
"name" : "GDK_ISO_Partial_Line_Down",
"kind" : "enum member",
"protection" : "public",
"line" : 427}
,
{
"name" : "GDK_ISO_Partial_Space_Left",
"kind" : "enum member",
"protection" : "public",
"line" : 429}
,
{
"name" : "GDK_ISO_Partial_Space_Right",
"kind" : "enum member",
"protection" : "public",
"line" : 431}
,
{
"name" : "GDK_ISO_Set_Margin_Left",
"kind" : "enum member",
"protection" : "public",
"line" : 433}
,
{
"name" : "GDK_ISO_Set_Margin_Right",
"kind" : "enum member",
"protection" : "public",
"line" : 435}
,
{
"name" : "GDK_ISO_Release_Margin_Left",
"kind" : "enum member",
"protection" : "public",
"line" : 437}
,
{
"name" : "GDK_ISO_Release_Margin_Right",
"kind" : "enum member",
"protection" : "public",
"line" : 439}
,
{
"name" : "GDK_ISO_Release_Both_Margins",
"kind" : "enum member",
"protection" : "public",
"line" : 441}
,
{
"name" : "GDK_ISO_Fast_Cursor_Left",
"kind" : "enum member",
"protection" : "public",
"line" : 443}
,
{
"name" : "GDK_ISO_Fast_Cursor_Right",
"kind" : "enum member",
"protection" : "public",
"line" : 445}
,
{
"name" : "GDK_ISO_Fast_Cursor_Up",
"kind" : "enum member",
"protection" : "public",
"line" : 447}
,
{
"name" : "GDK_ISO_Fast_Cursor_Down",
"kind" : "enum member",
"protection" : "public",
"line" : 449}
,
{
"name" : "GDK_ISO_Continuous_Underline",
"kind" : "enum member",
"protection" : "public",
"line" : 451}
,
{
"name" : "GDK_ISO_Discontinuous_Underline",
"kind" : "enum member",
"protection" : "public",
"line" : 453}
,
{
"name" : "GDK_ISO_Emphasize",
"kind" : "enum member",
"protection" : "public",
"line" : 455}
,
{
"name" : "GDK_ISO_Center_Object",
"kind" : "enum member",
"protection" : "public",
"line" : 457}
,
{
"name" : "GDK_ISO_Enter",
"kind" : "enum member",
"protection" : "public",
"line" : 459}
,
{
"name" : "GDK_dead_grave",
"kind" : "enum member",
"protection" : "public",
"line" : 461}
,
{
"name" : "GDK_dead_acute",
"kind" : "enum member",
"protection" : "public",
"line" : 463}
,
{
"name" : "GDK_dead_circumflex",
"kind" : "enum member",
"protection" : "public",
"line" : 465}
,
{
"name" : "GDK_dead_tilde",
"kind" : "enum member",
"protection" : "public",
"line" : 467}
,
{
"name" : "GDK_dead_macron",
"kind" : "enum member",
"protection" : "public",
"line" : 469}
,
{
"name" : "GDK_dead_breve",
"kind" : "enum member",
"protection" : "public",
"line" : 471}
,
{
"name" : "GDK_dead_abovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 473}
,
{
"name" : "GDK_dead_diaeresis",
"kind" : "enum member",
"protection" : "public",
"line" : 475}
,
{
"name" : "GDK_dead_abovering",
"kind" : "enum member",
"protection" : "public",
"line" : 477}
,
{
"name" : "GDK_dead_doubleacute",
"kind" : "enum member",
"protection" : "public",
"line" : 479}
,
{
"name" : "GDK_dead_caron",
"kind" : "enum member",
"protection" : "public",
"line" : 481}
,
{
"name" : "GDK_dead_cedilla",
"kind" : "enum member",
"protection" : "public",
"line" : 483}
,
{
"name" : "GDK_dead_ogonek",
"kind" : "enum member",
"protection" : "public",
"line" : 485}
,
{
"name" : "GDK_dead_iota",
"kind" : "enum member",
"protection" : "public",
"line" : 487}
,
{
"name" : "GDK_dead_voiced_sound",
"kind" : "enum member",
"protection" : "public",
"line" : 489}
,
{
"name" : "GDK_dead_semivoiced_sound",
"kind" : "enum member",
"protection" : "public",
"line" : 491}
,
{
"name" : "GDK_dead_belowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 493}
,
{
"name" : "GDK_dead_hook",
"kind" : "enum member",
"protection" : "public",
"line" : 495}
,
{
"name" : "GDK_dead_horn",
"kind" : "enum member",
"protection" : "public",
"line" : 497}
,
{
"name" : "GDK_First_Virtual_Screen",
"kind" : "enum member",
"protection" : "public",
"line" : 499}
,
{
"name" : "GDK_Prev_Virtual_Screen",
"kind" : "enum member",
"protection" : "public",
"line" : 501}
,
{
"name" : "GDK_Next_Virtual_Screen",
"kind" : "enum member",
"protection" : "public",
"line" : 503}
,
{
"name" : "GDK_Last_Virtual_Screen",
"kind" : "enum member",
"protection" : "public",
"line" : 505}
,
{
"name" : "GDK_Terminate_Server",
"kind" : "enum member",
"protection" : "public",
"line" : 507}
,
{
"name" : "GDK_AccessX_Enable",
"kind" : "enum member",
"protection" : "public",
"line" : 509}
,
{
"name" : "GDK_AccessX_Feedback_Enable",
"kind" : "enum member",
"protection" : "public",
"line" : 511}
,
{
"name" : "GDK_RepeatKeys_Enable",
"kind" : "enum member",
"protection" : "public",
"line" : 513}
,
{
"name" : "GDK_SlowKeys_Enable",
"kind" : "enum member",
"protection" : "public",
"line" : 515}
,
{
"name" : "GDK_BounceKeys_Enable",
"kind" : "enum member",
"protection" : "public",
"line" : 517}
,
{
"name" : "GDK_StickyKeys_Enable",
"kind" : "enum member",
"protection" : "public",
"line" : 519}
,
{
"name" : "GDK_MouseKeys_Enable",
"kind" : "enum member",
"protection" : "public",
"line" : 521}
,
{
"name" : "GDK_MouseKeys_Accel_Enable",
"kind" : "enum member",
"protection" : "public",
"line" : 523}
,
{
"name" : "GDK_Overlay1_Enable",
"kind" : "enum member",
"protection" : "public",
"line" : 525}
,
{
"name" : "GDK_Overlay2_Enable",
"kind" : "enum member",
"protection" : "public",
"line" : 527}
,
{
"name" : "GDK_AudibleBell_Enable",
"kind" : "enum member",
"protection" : "public",
"line" : 529}
,
{
"name" : "GDK_Pointer_Left",
"kind" : "enum member",
"protection" : "public",
"line" : 531}
,
{
"name" : "GDK_Pointer_Right",
"kind" : "enum member",
"protection" : "public",
"line" : 533}
,
{
"name" : "GDK_Pointer_Up",
"kind" : "enum member",
"protection" : "public",
"line" : 535}
,
{
"name" : "GDK_Pointer_Down",
"kind" : "enum member",
"protection" : "public",
"line" : 537}
,
{
"name" : "GDK_Pointer_UpLeft",
"kind" : "enum member",
"protection" : "public",
"line" : 539}
,
{
"name" : "GDK_Pointer_UpRight",
"kind" : "enum member",
"protection" : "public",
"line" : 541}
,
{
"name" : "GDK_Pointer_DownLeft",
"kind" : "enum member",
"protection" : "public",
"line" : 543}
,
{
"name" : "GDK_Pointer_DownRight",
"kind" : "enum member",
"protection" : "public",
"line" : 545}
,
{
"name" : "GDK_Pointer_Button_Dflt",
"kind" : "enum member",
"protection" : "public",
"line" : 547}
,
{
"name" : "GDK_Pointer_Button1",
"kind" : "enum member",
"protection" : "public",
"line" : 549}
,
{
"name" : "GDK_Pointer_Button2",
"kind" : "enum member",
"protection" : "public",
"line" : 551}
,
{
"name" : "GDK_Pointer_Button3",
"kind" : "enum member",
"protection" : "public",
"line" : 553}
,
{
"name" : "GDK_Pointer_Button4",
"kind" : "enum member",
"protection" : "public",
"line" : 555}
,
{
"name" : "GDK_Pointer_Button5",
"kind" : "enum member",
"protection" : "public",
"line" : 557}
,
{
"name" : "GDK_Pointer_DblClick_Dflt",
"kind" : "enum member",
"protection" : "public",
"line" : 559}
,
{
"name" : "GDK_Pointer_DblClick1",
"kind" : "enum member",
"protection" : "public",
"line" : 561}
,
{
"name" : "GDK_Pointer_DblClick2",
"kind" : "enum member",
"protection" : "public",
"line" : 563}
,
{
"name" : "GDK_Pointer_DblClick3",
"kind" : "enum member",
"protection" : "public",
"line" : 565}
,
{
"name" : "GDK_Pointer_DblClick4",
"kind" : "enum member",
"protection" : "public",
"line" : 567}
,
{
"name" : "GDK_Pointer_DblClick5",
"kind" : "enum member",
"protection" : "public",
"line" : 569}
,
{
"name" : "GDK_Pointer_Drag_Dflt",
"kind" : "enum member",
"protection" : "public",
"line" : 571}
,
{
"name" : "GDK_Pointer_Drag1",
"kind" : "enum member",
"protection" : "public",
"line" : 573}
,
{
"name" : "GDK_Pointer_Drag2",
"kind" : "enum member",
"protection" : "public",
"line" : 575}
,
{
"name" : "GDK_Pointer_Drag3",
"kind" : "enum member",
"protection" : "public",
"line" : 577}
,
{
"name" : "GDK_Pointer_Drag4",
"kind" : "enum member",
"protection" : "public",
"line" : 579}
,
{
"name" : "GDK_Pointer_Drag5",
"kind" : "enum member",
"protection" : "public",
"line" : 581}
,
{
"name" : "GDK_Pointer_EnableKeys",
"kind" : "enum member",
"protection" : "public",
"line" : 583}
,
{
"name" : "GDK_Pointer_Accelerate",
"kind" : "enum member",
"protection" : "public",
"line" : 585}
,
{
"name" : "GDK_Pointer_DfltBtnNext",
"kind" : "enum member",
"protection" : "public",
"line" : 587}
,
{
"name" : "GDK_Pointer_DfltBtnPrev",
"kind" : "enum member",
"protection" : "public",
"line" : 589}
,
{
"name" : "GDK_3270_Duplicate",
"kind" : "enum member",
"protection" : "public",
"line" : 591}
,
{
"name" : "GDK_3270_FieldMark",
"kind" : "enum member",
"protection" : "public",
"line" : 593}
,
{
"name" : "GDK_3270_Right2",
"kind" : "enum member",
"protection" : "public",
"line" : 595}
,
{
"name" : "GDK_3270_Left2",
"kind" : "enum member",
"protection" : "public",
"line" : 597}
,
{
"name" : "GDK_3270_BackTab",
"kind" : "enum member",
"protection" : "public",
"line" : 599}
,
{
"name" : "GDK_3270_EraseEOF",
"kind" : "enum member",
"protection" : "public",
"line" : 601}
,
{
"name" : "GDK_3270_EraseInput",
"kind" : "enum member",
"protection" : "public",
"line" : 603}
,
{
"name" : "GDK_3270_Reset",
"kind" : "enum member",
"protection" : "public",
"line" : 605}
,
{
"name" : "GDK_3270_Quit",
"kind" : "enum member",
"protection" : "public",
"line" : 607}
,
{
"name" : "GDK_3270_PA1",
"kind" : "enum member",
"protection" : "public",
"line" : 609}
,
{
"name" : "GDK_3270_PA2",
"kind" : "enum member",
"protection" : "public",
"line" : 611}
,
{
"name" : "GDK_3270_PA3",
"kind" : "enum member",
"protection" : "public",
"line" : 613}
,
{
"name" : "GDK_3270_Test",
"kind" : "enum member",
"protection" : "public",
"line" : 615}
,
{
"name" : "GDK_3270_Attn",
"kind" : "enum member",
"protection" : "public",
"line" : 617}
,
{
"name" : "GDK_3270_CursorBlink",
"kind" : "enum member",
"protection" : "public",
"line" : 619}
,
{
"name" : "GDK_3270_AltCursor",
"kind" : "enum member",
"protection" : "public",
"line" : 621}
,
{
"name" : "GDK_3270_KeyClick",
"kind" : "enum member",
"protection" : "public",
"line" : 623}
,
{
"name" : "GDK_3270_Jump",
"kind" : "enum member",
"protection" : "public",
"line" : 625}
,
{
"name" : "GDK_3270_Ident",
"kind" : "enum member",
"protection" : "public",
"line" : 627}
,
{
"name" : "GDK_3270_Rule",
"kind" : "enum member",
"protection" : "public",
"line" : 629}
,
{
"name" : "GDK_3270_Copy",
"kind" : "enum member",
"protection" : "public",
"line" : 631}
,
{
"name" : "GDK_3270_Play",
"kind" : "enum member",
"protection" : "public",
"line" : 633}
,
{
"name" : "GDK_3270_Setup",
"kind" : "enum member",
"protection" : "public",
"line" : 635}
,
{
"name" : "GDK_3270_Record",
"kind" : "enum member",
"protection" : "public",
"line" : 637}
,
{
"name" : "GDK_3270_ChangeScreen",
"kind" : "enum member",
"protection" : "public",
"line" : 639}
,
{
"name" : "GDK_3270_DeleteWord",
"kind" : "enum member",
"protection" : "public",
"line" : 641}
,
{
"name" : "GDK_3270_ExSelect",
"kind" : "enum member",
"protection" : "public",
"line" : 643}
,
{
"name" : "GDK_3270_CursorSelect",
"kind" : "enum member",
"protection" : "public",
"line" : 645}
,
{
"name" : "GDK_3270_PrintScreen",
"kind" : "enum member",
"protection" : "public",
"line" : 647}
,
{
"name" : "GDK_3270_Enter",
"kind" : "enum member",
"protection" : "public",
"line" : 649}
,
{
"name" : "GDK_space",
"kind" : "enum member",
"protection" : "public",
"line" : 651}
,
{
"name" : "GDK_exclam",
"kind" : "enum member",
"protection" : "public",
"line" : 653}
,
{
"name" : "GDK_quotedbl",
"kind" : "enum member",
"protection" : "public",
"line" : 655}
,
{
"name" : "GDK_numbersign",
"kind" : "enum member",
"protection" : "public",
"line" : 657}
,
{
"name" : "GDK_dollar",
"kind" : "enum member",
"protection" : "public",
"line" : 659}
,
{
"name" : "GDK_percent",
"kind" : "enum member",
"protection" : "public",
"line" : 661}
,
{
"name" : "GDK_ampersand",
"kind" : "enum member",
"protection" : "public",
"line" : 663}
,
{
"name" : "GDK_apostrophe",
"kind" : "enum member",
"protection" : "public",
"line" : 665}
,
{
"name" : "GDK_quoteright",
"kind" : "enum member",
"protection" : "public",
"line" : 667}
,
{
"name" : "GDK_parenleft",
"kind" : "enum member",
"protection" : "public",
"line" : 669}
,
{
"name" : "GDK_parenright",
"kind" : "enum member",
"protection" : "public",
"line" : 671}
,
{
"name" : "GDK_asterisk",
"kind" : "enum member",
"protection" : "public",
"line" : 673}
,
{
"name" : "GDK_plus",
"kind" : "enum member",
"protection" : "public",
"line" : 675}
,
{
"name" : "GDK_comma",
"kind" : "enum member",
"protection" : "public",
"line" : 677}
,
{
"name" : "GDK_minus",
"kind" : "enum member",
"protection" : "public",
"line" : 679}
,
{
"name" : "GDK_period",
"kind" : "enum member",
"protection" : "public",
"line" : 681}
,
{
"name" : "GDK_slash",
"kind" : "enum member",
"protection" : "public",
"line" : 683}
,
{
"name" : "GDK_0",
"kind" : "enum member",
"protection" : "public",
"line" : 685}
,
{
"name" : "GDK_1",
"kind" : "enum member",
"protection" : "public",
"line" : 687}
,
{
"name" : "GDK_2",
"kind" : "enum member",
"protection" : "public",
"line" : 689}
,
{
"name" : "GDK_3",
"kind" : "enum member",
"protection" : "public",
"line" : 691}
,
{
"name" : "GDK_4",
"kind" : "enum member",
"protection" : "public",
"line" : 693}
,
{
"name" : "GDK_5",
"kind" : "enum member",
"protection" : "public",
"line" : 695}
,
{
"name" : "GDK_6",
"kind" : "enum member",
"protection" : "public",
"line" : 697}
,
{
"name" : "GDK_7",
"kind" : "enum member",
"protection" : "public",
"line" : 699}
,
{
"name" : "GDK_8",
"kind" : "enum member",
"protection" : "public",
"line" : 701}
,
{
"name" : "GDK_9",
"kind" : "enum member",
"protection" : "public",
"line" : 703}
,
{
"name" : "GDK_colon",
"kind" : "enum member",
"protection" : "public",
"line" : 705}
,
{
"name" : "GDK_semicolon",
"kind" : "enum member",
"protection" : "public",
"line" : 707}
,
{
"name" : "GDK_less",
"kind" : "enum member",
"protection" : "public",
"line" : 709}
,
{
"name" : "GDK_equal",
"kind" : "enum member",
"protection" : "public",
"line" : 711}
,
{
"name" : "GDK_greater",
"kind" : "enum member",
"protection" : "public",
"line" : 713}
,
{
"name" : "GDK_question",
"kind" : "enum member",
"protection" : "public",
"line" : 715}
,
{
"name" : "GDK_at",
"kind" : "enum member",
"protection" : "public",
"line" : 717}
,
{
"name" : "GDK_A",
"kind" : "enum member",
"protection" : "public",
"line" : 719}
,
{
"name" : "GDK_B",
"kind" : "enum member",
"protection" : "public",
"line" : 721}
,
{
"name" : "GDK_C",
"kind" : "enum member",
"protection" : "public",
"line" : 723}
,
{
"name" : "GDK_D",
"kind" : "enum member",
"protection" : "public",
"line" : 725}
,
{
"name" : "GDK_E",
"kind" : "enum member",
"protection" : "public",
"line" : 727}
,
{
"name" : "GDK_F",
"kind" : "enum member",
"protection" : "public",
"line" : 729}
,
{
"name" : "GDK_G",
"kind" : "enum member",
"protection" : "public",
"line" : 731}
,
{
"name" : "GDK_H",
"kind" : "enum member",
"protection" : "public",
"line" : 733}
,
{
"name" : "GDK_I",
"kind" : "enum member",
"protection" : "public",
"line" : 735}
,
{
"name" : "GDK_J",
"kind" : "enum member",
"protection" : "public",
"line" : 737}
,
{
"name" : "GDK_K",
"kind" : "enum member",
"protection" : "public",
"line" : 739}
,
{
"name" : "GDK_L",
"kind" : "enum member",
"protection" : "public",
"line" : 741}
,
{
"name" : "GDK_M",
"kind" : "enum member",
"protection" : "public",
"line" : 743}
,
{
"name" : "GDK_N",
"kind" : "enum member",
"protection" : "public",
"line" : 745}
,
{
"name" : "GDK_O",
"kind" : "enum member",
"protection" : "public",
"line" : 747}
,
{
"name" : "GDK_P",
"kind" : "enum member",
"protection" : "public",
"line" : 749}
,
{
"name" : "GDK_Q",
"kind" : "enum member",
"protection" : "public",
"line" : 751}
,
{
"name" : "GDK_R",
"kind" : "enum member",
"protection" : "public",
"line" : 753}
,
{
"name" : "GDK_S",
"kind" : "enum member",
"protection" : "public",
"line" : 755}
,
{
"name" : "GDK_T",
"kind" : "enum member",
"protection" : "public",
"line" : 757}
,
{
"name" : "GDK_U",
"kind" : "enum member",
"protection" : "public",
"line" : 759}
,
{
"name" : "GDK_V",
"kind" : "enum member",
"protection" : "public",
"line" : 761}
,
{
"name" : "GDK_W",
"kind" : "enum member",
"protection" : "public",
"line" : 763}
,
{
"name" : "GDK_X",
"kind" : "enum member",
"protection" : "public",
"line" : 765}
,
{
"name" : "GDK_Y",
"kind" : "enum member",
"protection" : "public",
"line" : 767}
,
{
"name" : "GDK_Z",
"kind" : "enum member",
"protection" : "public",
"line" : 769}
,
{
"name" : "GDK_bracketleft",
"kind" : "enum member",
"protection" : "public",
"line" : 771}
,
{
"name" : "GDK_backslash",
"kind" : "enum member",
"protection" : "public",
"line" : 773}
,
{
"name" : "GDK_bracketright",
"kind" : "enum member",
"protection" : "public",
"line" : 775}
,
{
"name" : "GDK_asciicircum",
"kind" : "enum member",
"protection" : "public",
"line" : 777}
,
{
"name" : "GDK_underscore",
"kind" : "enum member",
"protection" : "public",
"line" : 779}
,
{
"name" : "GDK_grave",
"kind" : "enum member",
"protection" : "public",
"line" : 781}
,
{
"name" : "GDK_quoteleft",
"kind" : "enum member",
"protection" : "public",
"line" : 783}
,
{
"name" : "GDK_a",
"kind" : "enum member",
"protection" : "public",
"line" : 785}
,
{
"name" : "GDK_b",
"kind" : "enum member",
"protection" : "public",
"line" : 787}
,
{
"name" : "GDK_c",
"kind" : "enum member",
"protection" : "public",
"line" : 789}
,
{
"name" : "GDK_d",
"kind" : "enum member",
"protection" : "public",
"line" : 791}
,
{
"name" : "GDK_e",
"kind" : "enum member",
"protection" : "public",
"line" : 793}
,
{
"name" : "GDK_f",
"kind" : "enum member",
"protection" : "public",
"line" : 795}
,
{
"name" : "GDK_g",
"kind" : "enum member",
"protection" : "public",
"line" : 797}
,
{
"name" : "GDK_h",
"kind" : "enum member",
"protection" : "public",
"line" : 799}
,
{
"name" : "GDK_i",
"kind" : "enum member",
"protection" : "public",
"line" : 801}
,
{
"name" : "GDK_j",
"kind" : "enum member",
"protection" : "public",
"line" : 803}
,
{
"name" : "GDK_k",
"kind" : "enum member",
"protection" : "public",
"line" : 805}
,
{
"name" : "GDK_l",
"kind" : "enum member",
"protection" : "public",
"line" : 807}
,
{
"name" : "GDK_m",
"kind" : "enum member",
"protection" : "public",
"line" : 809}
,
{
"name" : "GDK_n",
"kind" : "enum member",
"protection" : "public",
"line" : 811}
,
{
"name" : "GDK_o",
"kind" : "enum member",
"protection" : "public",
"line" : 813}
,
{
"name" : "GDK_p",
"kind" : "enum member",
"protection" : "public",
"line" : 815}
,
{
"name" : "GDK_q",
"kind" : "enum member",
"protection" : "public",
"line" : 817}
,
{
"name" : "GDK_r",
"kind" : "enum member",
"protection" : "public",
"line" : 819}
,
{
"name" : "GDK_s",
"kind" : "enum member",
"protection" : "public",
"line" : 821}
,
{
"name" : "GDK_t",
"kind" : "enum member",
"protection" : "public",
"line" : 823}
,
{
"name" : "GDK_u",
"kind" : "enum member",
"protection" : "public",
"line" : 825}
,
{
"name" : "GDK_v",
"kind" : "enum member",
"protection" : "public",
"line" : 827}
,
{
"name" : "GDK_w",
"kind" : "enum member",
"protection" : "public",
"line" : 829}
,
{
"name" : "GDK_x",
"kind" : "enum member",
"protection" : "public",
"line" : 831}
,
{
"name" : "GDK_y",
"kind" : "enum member",
"protection" : "public",
"line" : 833}
,
{
"name" : "GDK_z",
"kind" : "enum member",
"protection" : "public",
"line" : 835}
,
{
"name" : "GDK_braceleft",
"kind" : "enum member",
"protection" : "public",
"line" : 837}
,
{
"name" : "GDK_bar",
"kind" : "enum member",
"protection" : "public",
"line" : 839}
,
{
"name" : "GDK_braceright",
"kind" : "enum member",
"protection" : "public",
"line" : 841}
,
{
"name" : "GDK_asciitilde",
"kind" : "enum member",
"protection" : "public",
"line" : 843}
,
{
"name" : "GDK_nobreakspace",
"kind" : "enum member",
"protection" : "public",
"line" : 845}
,
{
"name" : "GDK_exclamdown",
"kind" : "enum member",
"protection" : "public",
"line" : 847}
,
{
"name" : "GDK_cent",
"kind" : "enum member",
"protection" : "public",
"line" : 849}
,
{
"name" : "GDK_sterling",
"kind" : "enum member",
"protection" : "public",
"line" : 851}
,
{
"name" : "GDK_currency",
"kind" : "enum member",
"protection" : "public",
"line" : 853}
,
{
"name" : "GDK_yen",
"kind" : "enum member",
"protection" : "public",
"line" : 855}
,
{
"name" : "GDK_brokenbar",
"kind" : "enum member",
"protection" : "public",
"line" : 857}
,
{
"name" : "GDK_section",
"kind" : "enum member",
"protection" : "public",
"line" : 859}
,
{
"name" : "GDK_diaeresis",
"kind" : "enum member",
"protection" : "public",
"line" : 861}
,
{
"name" : "GDK_copyright",
"kind" : "enum member",
"protection" : "public",
"line" : 863}
,
{
"name" : "GDK_ordfeminine",
"kind" : "enum member",
"protection" : "public",
"line" : 865}
,
{
"name" : "GDK_guillemotleft",
"kind" : "enum member",
"protection" : "public",
"line" : 867}
,
{
"name" : "GDK_notsign",
"kind" : "enum member",
"protection" : "public",
"line" : 869}
,
{
"name" : "GDK_hyphen",
"kind" : "enum member",
"protection" : "public",
"line" : 871}
,
{
"name" : "GDK_registered",
"kind" : "enum member",
"protection" : "public",
"line" : 873}
,
{
"name" : "GDK_macron",
"kind" : "enum member",
"protection" : "public",
"line" : 875}
,
{
"name" : "GDK_degree",
"kind" : "enum member",
"protection" : "public",
"line" : 877}
,
{
"name" : "GDK_plusminus",
"kind" : "enum member",
"protection" : "public",
"line" : 879}
,
{
"name" : "GDK_twosuperior",
"kind" : "enum member",
"protection" : "public",
"line" : 881}
,
{
"name" : "GDK_threesuperior",
"kind" : "enum member",
"protection" : "public",
"line" : 883}
,
{
"name" : "GDK_acute",
"kind" : "enum member",
"protection" : "public",
"line" : 885}
,
{
"name" : "GDK_mu",
"kind" : "enum member",
"protection" : "public",
"line" : 887}
,
{
"name" : "GDK_paragraph",
"kind" : "enum member",
"protection" : "public",
"line" : 889}
,
{
"name" : "GDK_periodcentered",
"kind" : "enum member",
"protection" : "public",
"line" : 891}
,
{
"name" : "GDK_cedilla",
"kind" : "enum member",
"protection" : "public",
"line" : 893}
,
{
"name" : "GDK_onesuperior",
"kind" : "enum member",
"protection" : "public",
"line" : 895}
,
{
"name" : "GDK_masculine",
"kind" : "enum member",
"protection" : "public",
"line" : 897}
,
{
"name" : "GDK_guillemotright",
"kind" : "enum member",
"protection" : "public",
"line" : 899}
,
{
"name" : "GDK_onequarter",
"kind" : "enum member",
"protection" : "public",
"line" : 901}
,
{
"name" : "GDK_onehalf",
"kind" : "enum member",
"protection" : "public",
"line" : 903}
,
{
"name" : "GDK_threequarters",
"kind" : "enum member",
"protection" : "public",
"line" : 905}
,
{
"name" : "GDK_questiondown",
"kind" : "enum member",
"protection" : "public",
"line" : 907}
,
{
"name" : "GDK_Agrave",
"kind" : "enum member",
"protection" : "public",
"line" : 909}
,
{
"name" : "GDK_Aacute",
"kind" : "enum member",
"protection" : "public",
"line" : 911}
,
{
"name" : "GDK_Acircumflex",
"kind" : "enum member",
"protection" : "public",
"line" : 913}
,
{
"name" : "GDK_Atilde",
"kind" : "enum member",
"protection" : "public",
"line" : 915}
,
{
"name" : "GDK_Adiaeresis",
"kind" : "enum member",
"protection" : "public",
"line" : 917}
,
{
"name" : "GDK_Aring",
"kind" : "enum member",
"protection" : "public",
"line" : 919}
,
{
"name" : "GDK_AE",
"kind" : "enum member",
"protection" : "public",
"line" : 921}
,
{
"name" : "GDK_Ccedilla",
"kind" : "enum member",
"protection" : "public",
"line" : 923}
,
{
"name" : "GDK_Egrave",
"kind" : "enum member",
"protection" : "public",
"line" : 925}
,
{
"name" : "GDK_Eacute",
"kind" : "enum member",
"protection" : "public",
"line" : 927}
,
{
"name" : "GDK_Ecircumflex",
"kind" : "enum member",
"protection" : "public",
"line" : 929}
,
{
"name" : "GDK_Ediaeresis",
"kind" : "enum member",
"protection" : "public",
"line" : 931}
,
{
"name" : "GDK_Igrave",
"kind" : "enum member",
"protection" : "public",
"line" : 933}
,
{
"name" : "GDK_Iacute",
"kind" : "enum member",
"protection" : "public",
"line" : 935}
,
{
"name" : "GDK_Icircumflex",
"kind" : "enum member",
"protection" : "public",
"line" : 937}
,
{
"name" : "GDK_Idiaeresis",
"kind" : "enum member",
"protection" : "public",
"line" : 939}
,
{
"name" : "GDK_ETH",
"kind" : "enum member",
"protection" : "public",
"line" : 941}
,
{
"name" : "GDK_Eth",
"kind" : "enum member",
"protection" : "public",
"line" : 943}
,
{
"name" : "GDK_Ntilde",
"kind" : "enum member",
"protection" : "public",
"line" : 945}
,
{
"name" : "GDK_Ograve",
"kind" : "enum member",
"protection" : "public",
"line" : 947}
,
{
"name" : "GDK_Oacute",
"kind" : "enum member",
"protection" : "public",
"line" : 949}
,
{
"name" : "GDK_Ocircumflex",
"kind" : "enum member",
"protection" : "public",
"line" : 951}
,
{
"name" : "GDK_Otilde",
"kind" : "enum member",
"protection" : "public",
"line" : 953}
,
{
"name" : "GDK_Odiaeresis",
"kind" : "enum member",
"protection" : "public",
"line" : 955}
,
{
"name" : "GDK_multiply",
"kind" : "enum member",
"protection" : "public",
"line" : 957}
,
{
"name" : "GDK_Oslash",
"kind" : "enum member",
"protection" : "public",
"line" : 959}
,
{
"name" : "GDK_Ooblique",
"kind" : "enum member",
"protection" : "public",
"line" : 961}
,
{
"name" : "GDK_Ugrave",
"kind" : "enum member",
"protection" : "public",
"line" : 963}
,
{
"name" : "GDK_Uacute",
"kind" : "enum member",
"protection" : "public",
"line" : 965}
,
{
"name" : "GDK_Ucircumflex",
"kind" : "enum member",
"protection" : "public",
"line" : 967}
,
{
"name" : "GDK_Udiaeresis",
"kind" : "enum member",
"protection" : "public",
"line" : 969}
,
{
"name" : "GDK_Yacute",
"kind" : "enum member",
"protection" : "public",
"line" : 971}
,
{
"name" : "GDK_THORN",
"kind" : "enum member",
"protection" : "public",
"line" : 973}
,
{
"name" : "GDK_Thorn",
"kind" : "enum member",
"protection" : "public",
"line" : 975}
,
{
"name" : "GDK_ssharp",
"kind" : "enum member",
"protection" : "public",
"line" : 977}
,
{
"name" : "GDK_agrave",
"kind" : "enum member",
"protection" : "public",
"line" : 979}
,
{
"name" : "GDK_aacute",
"kind" : "enum member",
"protection" : "public",
"line" : 981}
,
{
"name" : "GDK_acircumflex",
"kind" : "enum member",
"protection" : "public",
"line" : 983}
,
{
"name" : "GDK_atilde",
"kind" : "enum member",
"protection" : "public",
"line" : 985}
,
{
"name" : "GDK_adiaeresis",
"kind" : "enum member",
"protection" : "public",
"line" : 987}
,
{
"name" : "GDK_aring",
"kind" : "enum member",
"protection" : "public",
"line" : 989}
,
{
"name" : "GDK_ae",
"kind" : "enum member",
"protection" : "public",
"line" : 991}
,
{
"name" : "GDK_ccedilla",
"kind" : "enum member",
"protection" : "public",
"line" : 993}
,
{
"name" : "GDK_egrave",
"kind" : "enum member",
"protection" : "public",
"line" : 995}
,
{
"name" : "GDK_eacute",
"kind" : "enum member",
"protection" : "public",
"line" : 997}
,
{
"name" : "GDK_ecircumflex",
"kind" : "enum member",
"protection" : "public",
"line" : 999}
,
{
"name" : "GDK_ediaeresis",
"kind" : "enum member",
"protection" : "public",
"line" : 1001}
,
{
"name" : "GDK_igrave",
"kind" : "enum member",
"protection" : "public",
"line" : 1003}
,
{
"name" : "GDK_iacute",
"kind" : "enum member",
"protection" : "public",
"line" : 1005}
,
{
"name" : "GDK_icircumflex",
"kind" : "enum member",
"protection" : "public",
"line" : 1007}
,
{
"name" : "GDK_idiaeresis",
"kind" : "enum member",
"protection" : "public",
"line" : 1009}
,
{
"name" : "GDK_eth",
"kind" : "enum member",
"protection" : "public",
"line" : 1011}
,
{
"name" : "GDK_ntilde",
"kind" : "enum member",
"protection" : "public",
"line" : 1013}
,
{
"name" : "GDK_ograve",
"kind" : "enum member",
"protection" : "public",
"line" : 1015}
,
{
"name" : "GDK_oacute",
"kind" : "enum member",
"protection" : "public",
"line" : 1017}
,
{
"name" : "GDK_ocircumflex",
"kind" : "enum member",
"protection" : "public",
"line" : 1019}
,
{
"name" : "GDK_otilde",
"kind" : "enum member",
"protection" : "public",
"line" : 1021}
,
{
"name" : "GDK_odiaeresis",
"kind" : "enum member",
"protection" : "public",
"line" : 1023}
,
{
"name" : "GDK_division",
"kind" : "enum member",
"protection" : "public",
"line" : 1025}
,
{
"name" : "GDK_oslash",
"kind" : "enum member",
"protection" : "public",
"line" : 1027}
,
{
"name" : "GDK_ooblique",
"kind" : "enum member",
"protection" : "public",
"line" : 1029}
,
{
"name" : "GDK_ugrave",
"kind" : "enum member",
"protection" : "public",
"line" : 1031}
,
{
"name" : "GDK_uacute",
"kind" : "enum member",
"protection" : "public",
"line" : 1033}
,
{
"name" : "GDK_ucircumflex",
"kind" : "enum member",
"protection" : "public",
"line" : 1035}
,
{
"name" : "GDK_udiaeresis",
"kind" : "enum member",
"protection" : "public",
"line" : 1037}
,
{
"name" : "GDK_yacute",
"kind" : "enum member",
"protection" : "public",
"line" : 1039}
,
{
"name" : "GDK_thorn",
"kind" : "enum member",
"protection" : "public",
"line" : 1041}
,
{
"name" : "GDK_ydiaeresis",
"kind" : "enum member",
"protection" : "public",
"line" : 1043}
,
{
"name" : "GDK_Aogonek",
"kind" : "enum member",
"protection" : "public",
"line" : 1045}
,
{
"name" : "GDK_breve",
"kind" : "enum member",
"protection" : "public",
"line" : 1047}
,
{
"name" : "GDK_Lstroke",
"kind" : "enum member",
"protection" : "public",
"line" : 1049}
,
{
"name" : "GDK_Lcaron",
"kind" : "enum member",
"protection" : "public",
"line" : 1051}
,
{
"name" : "GDK_Sacute",
"kind" : "enum member",
"protection" : "public",
"line" : 1053}
,
{
"name" : "GDK_Scaron",
"kind" : "enum member",
"protection" : "public",
"line" : 1055}
,
{
"name" : "GDK_Scedilla",
"kind" : "enum member",
"protection" : "public",
"line" : 1057}
,
{
"name" : "GDK_Tcaron",
"kind" : "enum member",
"protection" : "public",
"line" : 1059}
,
{
"name" : "GDK_Zacute",
"kind" : "enum member",
"protection" : "public",
"line" : 1061}
,
{
"name" : "GDK_Zcaron",
"kind" : "enum member",
"protection" : "public",
"line" : 1063}
,
{
"name" : "GDK_Zabovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 1065}
,
{
"name" : "GDK_aogonek",
"kind" : "enum member",
"protection" : "public",
"line" : 1067}
,
{
"name" : "GDK_ogonek",
"kind" : "enum member",
"protection" : "public",
"line" : 1069}
,
{
"name" : "GDK_lstroke",
"kind" : "enum member",
"protection" : "public",
"line" : 1071}
,
{
"name" : "GDK_lcaron",
"kind" : "enum member",
"protection" : "public",
"line" : 1073}
,
{
"name" : "GDK_sacute",
"kind" : "enum member",
"protection" : "public",
"line" : 1075}
,
{
"name" : "GDK_caron",
"kind" : "enum member",
"protection" : "public",
"line" : 1077}
,
{
"name" : "GDK_scaron",
"kind" : "enum member",
"protection" : "public",
"line" : 1079}
,
{
"name" : "GDK_scedilla",
"kind" : "enum member",
"protection" : "public",
"line" : 1081}
,
{
"name" : "GDK_tcaron",
"kind" : "enum member",
"protection" : "public",
"line" : 1083}
,
{
"name" : "GDK_zacute",
"kind" : "enum member",
"protection" : "public",
"line" : 1085}
,
{
"name" : "GDK_doubleacute",
"kind" : "enum member",
"protection" : "public",
"line" : 1087}
,
{
"name" : "GDK_zcaron",
"kind" : "enum member",
"protection" : "public",
"line" : 1089}
,
{
"name" : "GDK_zabovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 1091}
,
{
"name" : "GDK_Racute",
"kind" : "enum member",
"protection" : "public",
"line" : 1093}
,
{
"name" : "GDK_Abreve",
"kind" : "enum member",
"protection" : "public",
"line" : 1095}
,
{
"name" : "GDK_Lacute",
"kind" : "enum member",
"protection" : "public",
"line" : 1097}
,
{
"name" : "GDK_Cacute",
"kind" : "enum member",
"protection" : "public",
"line" : 1099}
,
{
"name" : "GDK_Ccaron",
"kind" : "enum member",
"protection" : "public",
"line" : 1101}
,
{
"name" : "GDK_Eogonek",
"kind" : "enum member",
"protection" : "public",
"line" : 1103}
,
{
"name" : "GDK_Ecaron",
"kind" : "enum member",
"protection" : "public",
"line" : 1105}
,
{
"name" : "GDK_Dcaron",
"kind" : "enum member",
"protection" : "public",
"line" : 1107}
,
{
"name" : "GDK_Dstroke",
"kind" : "enum member",
"protection" : "public",
"line" : 1109}
,
{
"name" : "GDK_Nacute",
"kind" : "enum member",
"protection" : "public",
"line" : 1111}
,
{
"name" : "GDK_Ncaron",
"kind" : "enum member",
"protection" : "public",
"line" : 1113}
,
{
"name" : "GDK_Odoubleacute",
"kind" : "enum member",
"protection" : "public",
"line" : 1115}
,
{
"name" : "GDK_Rcaron",
"kind" : "enum member",
"protection" : "public",
"line" : 1117}
,
{
"name" : "GDK_Uring",
"kind" : "enum member",
"protection" : "public",
"line" : 1119}
,
{
"name" : "GDK_Udoubleacute",
"kind" : "enum member",
"protection" : "public",
"line" : 1121}
,
{
"name" : "GDK_Tcedilla",
"kind" : "enum member",
"protection" : "public",
"line" : 1123}
,
{
"name" : "GDK_racute",
"kind" : "enum member",
"protection" : "public",
"line" : 1125}
,
{
"name" : "GDK_abreve",
"kind" : "enum member",
"protection" : "public",
"line" : 1127}
,
{
"name" : "GDK_lacute",
"kind" : "enum member",
"protection" : "public",
"line" : 1129}
,
{
"name" : "GDK_cacute",
"kind" : "enum member",
"protection" : "public",
"line" : 1131}
,
{
"name" : "GDK_ccaron",
"kind" : "enum member",
"protection" : "public",
"line" : 1133}
,
{
"name" : "GDK_eogonek",
"kind" : "enum member",
"protection" : "public",
"line" : 1135}
,
{
"name" : "GDK_ecaron",
"kind" : "enum member",
"protection" : "public",
"line" : 1137}
,
{
"name" : "GDK_dcaron",
"kind" : "enum member",
"protection" : "public",
"line" : 1139}
,
{
"name" : "GDK_dstroke",
"kind" : "enum member",
"protection" : "public",
"line" : 1141}
,
{
"name" : "GDK_nacute",
"kind" : "enum member",
"protection" : "public",
"line" : 1143}
,
{
"name" : "GDK_ncaron",
"kind" : "enum member",
"protection" : "public",
"line" : 1145}
,
{
"name" : "GDK_odoubleacute",
"kind" : "enum member",
"protection" : "public",
"line" : 1147}
,
{
"name" : "GDK_udoubleacute",
"kind" : "enum member",
"protection" : "public",
"line" : 1149}
,
{
"name" : "GDK_rcaron",
"kind" : "enum member",
"protection" : "public",
"line" : 1151}
,
{
"name" : "GDK_uring",
"kind" : "enum member",
"protection" : "public",
"line" : 1153}
,
{
"name" : "GDK_tcedilla",
"kind" : "enum member",
"protection" : "public",
"line" : 1155}
,
{
"name" : "GDK_abovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 1157}
,
{
"name" : "GDK_Hstroke",
"kind" : "enum member",
"protection" : "public",
"line" : 1159}
,
{
"name" : "GDK_Hcircumflex",
"kind" : "enum member",
"protection" : "public",
"line" : 1161}
,
{
"name" : "GDK_Iabovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 1163}
,
{
"name" : "GDK_Gbreve",
"kind" : "enum member",
"protection" : "public",
"line" : 1165}
,
{
"name" : "GDK_Jcircumflex",
"kind" : "enum member",
"protection" : "public",
"line" : 1167}
,
{
"name" : "GDK_hstroke",
"kind" : "enum member",
"protection" : "public",
"line" : 1169}
,
{
"name" : "GDK_hcircumflex",
"kind" : "enum member",
"protection" : "public",
"line" : 1171}
,
{
"name" : "GDK_idotless",
"kind" : "enum member",
"protection" : "public",
"line" : 1173}
,
{
"name" : "GDK_gbreve",
"kind" : "enum member",
"protection" : "public",
"line" : 1175}
,
{
"name" : "GDK_jcircumflex",
"kind" : "enum member",
"protection" : "public",
"line" : 1177}
,
{
"name" : "GDK_Cabovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 1179}
,
{
"name" : "GDK_Ccircumflex",
"kind" : "enum member",
"protection" : "public",
"line" : 1181}
,
{
"name" : "GDK_Gabovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 1183}
,
{
"name" : "GDK_Gcircumflex",
"kind" : "enum member",
"protection" : "public",
"line" : 1185}
,
{
"name" : "GDK_Ubreve",
"kind" : "enum member",
"protection" : "public",
"line" : 1187}
,
{
"name" : "GDK_Scircumflex",
"kind" : "enum member",
"protection" : "public",
"line" : 1189}
,
{
"name" : "GDK_cabovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 1191}
,
{
"name" : "GDK_ccircumflex",
"kind" : "enum member",
"protection" : "public",
"line" : 1193}
,
{
"name" : "GDK_gabovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 1195}
,
{
"name" : "GDK_gcircumflex",
"kind" : "enum member",
"protection" : "public",
"line" : 1197}
,
{
"name" : "GDK_ubreve",
"kind" : "enum member",
"protection" : "public",
"line" : 1199}
,
{
"name" : "GDK_scircumflex",
"kind" : "enum member",
"protection" : "public",
"line" : 1201}
,
{
"name" : "GDK_kra",
"kind" : "enum member",
"protection" : "public",
"line" : 1203}
,
{
"name" : "GDK_kappa",
"kind" : "enum member",
"protection" : "public",
"line" : 1205}
,
{
"name" : "GDK_Rcedilla",
"kind" : "enum member",
"protection" : "public",
"line" : 1207}
,
{
"name" : "GDK_Itilde",
"kind" : "enum member",
"protection" : "public",
"line" : 1209}
,
{
"name" : "GDK_Lcedilla",
"kind" : "enum member",
"protection" : "public",
"line" : 1211}
,
{
"name" : "GDK_Emacron",
"kind" : "enum member",
"protection" : "public",
"line" : 1213}
,
{
"name" : "GDK_Gcedilla",
"kind" : "enum member",
"protection" : "public",
"line" : 1215}
,
{
"name" : "GDK_Tslash",
"kind" : "enum member",
"protection" : "public",
"line" : 1217}
,
{
"name" : "GDK_rcedilla",
"kind" : "enum member",
"protection" : "public",
"line" : 1219}
,
{
"name" : "GDK_itilde",
"kind" : "enum member",
"protection" : "public",
"line" : 1221}
,
{
"name" : "GDK_lcedilla",
"kind" : "enum member",
"protection" : "public",
"line" : 1223}
,
{
"name" : "GDK_emacron",
"kind" : "enum member",
"protection" : "public",
"line" : 1225}
,
{
"name" : "GDK_gcedilla",
"kind" : "enum member",
"protection" : "public",
"line" : 1227}
,
{
"name" : "GDK_tslash",
"kind" : "enum member",
"protection" : "public",
"line" : 1229}
,
{
"name" : "GDK_ENG",
"kind" : "enum member",
"protection" : "public",
"line" : 1231}
,
{
"name" : "GDK_eng",
"kind" : "enum member",
"protection" : "public",
"line" : 1233}
,
{
"name" : "GDK_Amacron",
"kind" : "enum member",
"protection" : "public",
"line" : 1235}
,
{
"name" : "GDK_Iogonek",
"kind" : "enum member",
"protection" : "public",
"line" : 1237}
,
{
"name" : "GDK_Eabovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 1239}
,
{
"name" : "GDK_Imacron",
"kind" : "enum member",
"protection" : "public",
"line" : 1241}
,
{
"name" : "GDK_Ncedilla",
"kind" : "enum member",
"protection" : "public",
"line" : 1243}
,
{
"name" : "GDK_Omacron",
"kind" : "enum member",
"protection" : "public",
"line" : 1245}
,
{
"name" : "GDK_Kcedilla",
"kind" : "enum member",
"protection" : "public",
"line" : 1247}
,
{
"name" : "GDK_Uogonek",
"kind" : "enum member",
"protection" : "public",
"line" : 1249}
,
{
"name" : "GDK_Utilde",
"kind" : "enum member",
"protection" : "public",
"line" : 1251}
,
{
"name" : "GDK_Umacron",
"kind" : "enum member",
"protection" : "public",
"line" : 1253}
,
{
"name" : "GDK_amacron",
"kind" : "enum member",
"protection" : "public",
"line" : 1255}
,
{
"name" : "GDK_iogonek",
"kind" : "enum member",
"protection" : "public",
"line" : 1257}
,
{
"name" : "GDK_eabovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 1259}
,
{
"name" : "GDK_imacron",
"kind" : "enum member",
"protection" : "public",
"line" : 1261}
,
{
"name" : "GDK_ncedilla",
"kind" : "enum member",
"protection" : "public",
"line" : 1263}
,
{
"name" : "GDK_omacron",
"kind" : "enum member",
"protection" : "public",
"line" : 1265}
,
{
"name" : "GDK_kcedilla",
"kind" : "enum member",
"protection" : "public",
"line" : 1267}
,
{
"name" : "GDK_uogonek",
"kind" : "enum member",
"protection" : "public",
"line" : 1269}
,
{
"name" : "GDK_utilde",
"kind" : "enum member",
"protection" : "public",
"line" : 1271}
,
{
"name" : "GDK_umacron",
"kind" : "enum member",
"protection" : "public",
"line" : 1273}
,
{
"name" : "GDK_Babovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 1275}
,
{
"name" : "GDK_babovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 1277}
,
{
"name" : "GDK_Dabovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 1279}
,
{
"name" : "GDK_Wgrave",
"kind" : "enum member",
"protection" : "public",
"line" : 1281}
,
{
"name" : "GDK_Wacute",
"kind" : "enum member",
"protection" : "public",
"line" : 1283}
,
{
"name" : "GDK_dabovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 1285}
,
{
"name" : "GDK_Ygrave",
"kind" : "enum member",
"protection" : "public",
"line" : 1287}
,
{
"name" : "GDK_Fabovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 1289}
,
{
"name" : "GDK_fabovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 1291}
,
{
"name" : "GDK_Mabovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 1293}
,
{
"name" : "GDK_mabovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 1295}
,
{
"name" : "GDK_Pabovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 1297}
,
{
"name" : "GDK_wgrave",
"kind" : "enum member",
"protection" : "public",
"line" : 1299}
,
{
"name" : "GDK_pabovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 1301}
,
{
"name" : "GDK_wacute",
"kind" : "enum member",
"protection" : "public",
"line" : 1303}
,
{
"name" : "GDK_Sabovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 1305}
,
{
"name" : "GDK_ygrave",
"kind" : "enum member",
"protection" : "public",
"line" : 1307}
,
{
"name" : "GDK_Wdiaeresis",
"kind" : "enum member",
"protection" : "public",
"line" : 1309}
,
{
"name" : "GDK_wdiaeresis",
"kind" : "enum member",
"protection" : "public",
"line" : 1311}
,
{
"name" : "GDK_sabovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 1313}
,
{
"name" : "GDK_Wcircumflex",
"kind" : "enum member",
"protection" : "public",
"line" : 1315}
,
{
"name" : "GDK_Tabovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 1317}
,
{
"name" : "GDK_Ycircumflex",
"kind" : "enum member",
"protection" : "public",
"line" : 1319}
,
{
"name" : "GDK_wcircumflex",
"kind" : "enum member",
"protection" : "public",
"line" : 1321}
,
{
"name" : "GDK_tabovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 1323}
,
{
"name" : "GDK_ycircumflex",
"kind" : "enum member",
"protection" : "public",
"line" : 1325}
,
{
"name" : "GDK_OE",
"kind" : "enum member",
"protection" : "public",
"line" : 1327}
,
{
"name" : "GDK_oe",
"kind" : "enum member",
"protection" : "public",
"line" : 1329}
,
{
"name" : "GDK_Ydiaeresis",
"kind" : "enum member",
"protection" : "public",
"line" : 1331}
,
{
"name" : "GDK_overline",
"kind" : "enum member",
"protection" : "public",
"line" : 1333}
,
{
"name" : "GDK_kana_fullstop",
"kind" : "enum member",
"protection" : "public",
"line" : 1335}
,
{
"name" : "GDK_kana_openingbracket",
"kind" : "enum member",
"protection" : "public",
"line" : 1337}
,
{
"name" : "GDK_kana_closingbracket",
"kind" : "enum member",
"protection" : "public",
"line" : 1339}
,
{
"name" : "GDK_kana_comma",
"kind" : "enum member",
"protection" : "public",
"line" : 1341}
,
{
"name" : "GDK_kana_conjunctive",
"kind" : "enum member",
"protection" : "public",
"line" : 1343}
,
{
"name" : "GDK_kana_middledot",
"kind" : "enum member",
"protection" : "public",
"line" : 1345}
,
{
"name" : "GDK_kana_WO",
"kind" : "enum member",
"protection" : "public",
"line" : 1347}
,
{
"name" : "GDK_kana_a",
"kind" : "enum member",
"protection" : "public",
"line" : 1349}
,
{
"name" : "GDK_kana_i",
"kind" : "enum member",
"protection" : "public",
"line" : 1351}
,
{
"name" : "GDK_kana_u",
"kind" : "enum member",
"protection" : "public",
"line" : 1353}
,
{
"name" : "GDK_kana_e",
"kind" : "enum member",
"protection" : "public",
"line" : 1355}
,
{
"name" : "GDK_kana_o",
"kind" : "enum member",
"protection" : "public",
"line" : 1357}
,
{
"name" : "GDK_kana_ya",
"kind" : "enum member",
"protection" : "public",
"line" : 1359}
,
{
"name" : "GDK_kana_yu",
"kind" : "enum member",
"protection" : "public",
"line" : 1361}
,
{
"name" : "GDK_kana_yo",
"kind" : "enum member",
"protection" : "public",
"line" : 1363}
,
{
"name" : "GDK_kana_tsu",
"kind" : "enum member",
"protection" : "public",
"line" : 1365}
,
{
"name" : "GDK_kana_tu",
"kind" : "enum member",
"protection" : "public",
"line" : 1367}
,
{
"name" : "GDK_prolongedsound",
"kind" : "enum member",
"protection" : "public",
"line" : 1369}
,
{
"name" : "GDK_kana_A",
"kind" : "enum member",
"protection" : "public",
"line" : 1371}
,
{
"name" : "GDK_kana_I",
"kind" : "enum member",
"protection" : "public",
"line" : 1373}
,
{
"name" : "GDK_kana_U",
"kind" : "enum member",
"protection" : "public",
"line" : 1375}
,
{
"name" : "GDK_kana_E",
"kind" : "enum member",
"protection" : "public",
"line" : 1377}
,
{
"name" : "GDK_kana_O",
"kind" : "enum member",
"protection" : "public",
"line" : 1379}
,
{
"name" : "GDK_kana_KA",
"kind" : "enum member",
"protection" : "public",
"line" : 1381}
,
{
"name" : "GDK_kana_KI",
"kind" : "enum member",
"protection" : "public",
"line" : 1383}
,
{
"name" : "GDK_kana_KU",
"kind" : "enum member",
"protection" : "public",
"line" : 1385}
,
{
"name" : "GDK_kana_KE",
"kind" : "enum member",
"protection" : "public",
"line" : 1387}
,
{
"name" : "GDK_kana_KO",
"kind" : "enum member",
"protection" : "public",
"line" : 1389}
,
{
"name" : "GDK_kana_SA",
"kind" : "enum member",
"protection" : "public",
"line" : 1391}
,
{
"name" : "GDK_kana_SHI",
"kind" : "enum member",
"protection" : "public",
"line" : 1393}
,
{
"name" : "GDK_kana_SU",
"kind" : "enum member",
"protection" : "public",
"line" : 1395}
,
{
"name" : "GDK_kana_SE",
"kind" : "enum member",
"protection" : "public",
"line" : 1397}
,
{
"name" : "GDK_kana_SO",
"kind" : "enum member",
"protection" : "public",
"line" : 1399}
,
{
"name" : "GDK_kana_TA",
"kind" : "enum member",
"protection" : "public",
"line" : 1401}
,
{
"name" : "GDK_kana_CHI",
"kind" : "enum member",
"protection" : "public",
"line" : 1403}
,
{
"name" : "GDK_kana_TI",
"kind" : "enum member",
"protection" : "public",
"line" : 1405}
,
{
"name" : "GDK_kana_TSU",
"kind" : "enum member",
"protection" : "public",
"line" : 1407}
,
{
"name" : "GDK_kana_TU",
"kind" : "enum member",
"protection" : "public",
"line" : 1409}
,
{
"name" : "GDK_kana_TE",
"kind" : "enum member",
"protection" : "public",
"line" : 1411}
,
{
"name" : "GDK_kana_TO",
"kind" : "enum member",
"protection" : "public",
"line" : 1413}
,
{
"name" : "GDK_kana_NA",
"kind" : "enum member",
"protection" : "public",
"line" : 1415}
,
{
"name" : "GDK_kana_NI",
"kind" : "enum member",
"protection" : "public",
"line" : 1417}
,
{
"name" : "GDK_kana_NU",
"kind" : "enum member",
"protection" : "public",
"line" : 1419}
,
{
"name" : "GDK_kana_NE",
"kind" : "enum member",
"protection" : "public",
"line" : 1421}
,
{
"name" : "GDK_kana_NO",
"kind" : "enum member",
"protection" : "public",
"line" : 1423}
,
{
"name" : "GDK_kana_HA",
"kind" : "enum member",
"protection" : "public",
"line" : 1425}
,
{
"name" : "GDK_kana_HI",
"kind" : "enum member",
"protection" : "public",
"line" : 1427}
,
{
"name" : "GDK_kana_FU",
"kind" : "enum member",
"protection" : "public",
"line" : 1429}
,
{
"name" : "GDK_kana_HU",
"kind" : "enum member",
"protection" : "public",
"line" : 1431}
,
{
"name" : "GDK_kana_HE",
"kind" : "enum member",
"protection" : "public",
"line" : 1433}
,
{
"name" : "GDK_kana_HO",
"kind" : "enum member",
"protection" : "public",
"line" : 1435}
,
{
"name" : "GDK_kana_MA",
"kind" : "enum member",
"protection" : "public",
"line" : 1437}
,
{
"name" : "GDK_kana_MI",
"kind" : "enum member",
"protection" : "public",
"line" : 1439}
,
{
"name" : "GDK_kana_MU",
"kind" : "enum member",
"protection" : "public",
"line" : 1441}
,
{
"name" : "GDK_kana_ME",
"kind" : "enum member",
"protection" : "public",
"line" : 1443}
,
{
"name" : "GDK_kana_MO",
"kind" : "enum member",
"protection" : "public",
"line" : 1445}
,
{
"name" : "GDK_kana_YA",
"kind" : "enum member",
"protection" : "public",
"line" : 1447}
,
{
"name" : "GDK_kana_YU",
"kind" : "enum member",
"protection" : "public",
"line" : 1449}
,
{
"name" : "GDK_kana_YO",
"kind" : "enum member",
"protection" : "public",
"line" : 1451}
,
{
"name" : "GDK_kana_RA",
"kind" : "enum member",
"protection" : "public",
"line" : 1453}
,
{
"name" : "GDK_kana_RI",
"kind" : "enum member",
"protection" : "public",
"line" : 1455}
,
{
"name" : "GDK_kana_RU",
"kind" : "enum member",
"protection" : "public",
"line" : 1457}
,
{
"name" : "GDK_kana_RE",
"kind" : "enum member",
"protection" : "public",
"line" : 1459}
,
{
"name" : "GDK_kana_RO",
"kind" : "enum member",
"protection" : "public",
"line" : 1461}
,
{
"name" : "GDK_kana_WA",
"kind" : "enum member",
"protection" : "public",
"line" : 1463}
,
{
"name" : "GDK_kana_N",
"kind" : "enum member",
"protection" : "public",
"line" : 1465}
,
{
"name" : "GDK_voicedsound",
"kind" : "enum member",
"protection" : "public",
"line" : 1467}
,
{
"name" : "GDK_semivoicedsound",
"kind" : "enum member",
"protection" : "public",
"line" : 1469}
,
{
"name" : "GDK_kana_switch",
"kind" : "enum member",
"protection" : "public",
"line" : 1471}
,
{
"name" : "GDK_Farsi_0",
"kind" : "enum member",
"protection" : "public",
"line" : 1473}
,
{
"name" : "GDK_Farsi_1",
"kind" : "enum member",
"protection" : "public",
"line" : 1475}
,
{
"name" : "GDK_Farsi_2",
"kind" : "enum member",
"protection" : "public",
"line" : 1477}
,
{
"name" : "GDK_Farsi_3",
"kind" : "enum member",
"protection" : "public",
"line" : 1479}
,
{
"name" : "GDK_Farsi_4",
"kind" : "enum member",
"protection" : "public",
"line" : 1481}
,
{
"name" : "GDK_Farsi_5",
"kind" : "enum member",
"protection" : "public",
"line" : 1483}
,
{
"name" : "GDK_Farsi_6",
"kind" : "enum member",
"protection" : "public",
"line" : 1485}
,
{
"name" : "GDK_Farsi_7",
"kind" : "enum member",
"protection" : "public",
"line" : 1487}
,
{
"name" : "GDK_Farsi_8",
"kind" : "enum member",
"protection" : "public",
"line" : 1489}
,
{
"name" : "GDK_Farsi_9",
"kind" : "enum member",
"protection" : "public",
"line" : 1491}
,
{
"name" : "GDK_Arabic_percent",
"kind" : "enum member",
"protection" : "public",
"line" : 1493}
,
{
"name" : "GDK_Arabic_superscript_alef",
"kind" : "enum member",
"protection" : "public",
"line" : 1495}
,
{
"name" : "GDK_Arabic_tteh",
"kind" : "enum member",
"protection" : "public",
"line" : 1497}
,
{
"name" : "GDK_Arabic_peh",
"kind" : "enum member",
"protection" : "public",
"line" : 1499}
,
{
"name" : "GDK_Arabic_tcheh",
"kind" : "enum member",
"protection" : "public",
"line" : 1501}
,
{
"name" : "GDK_Arabic_ddal",
"kind" : "enum member",
"protection" : "public",
"line" : 1503}
,
{
"name" : "GDK_Arabic_rreh",
"kind" : "enum member",
"protection" : "public",
"line" : 1505}
,
{
"name" : "GDK_Arabic_comma",
"kind" : "enum member",
"protection" : "public",
"line" : 1507}
,
{
"name" : "GDK_Arabic_fullstop",
"kind" : "enum member",
"protection" : "public",
"line" : 1509}
,
{
"name" : "GDK_Arabic_0",
"kind" : "enum member",
"protection" : "public",
"line" : 1511}
,
{
"name" : "GDK_Arabic_1",
"kind" : "enum member",
"protection" : "public",
"line" : 1513}
,
{
"name" : "GDK_Arabic_2",
"kind" : "enum member",
"protection" : "public",
"line" : 1515}
,
{
"name" : "GDK_Arabic_3",
"kind" : "enum member",
"protection" : "public",
"line" : 1517}
,
{
"name" : "GDK_Arabic_4",
"kind" : "enum member",
"protection" : "public",
"line" : 1519}
,
{
"name" : "GDK_Arabic_5",
"kind" : "enum member",
"protection" : "public",
"line" : 1521}
,
{
"name" : "GDK_Arabic_6",
"kind" : "enum member",
"protection" : "public",
"line" : 1523}
,
{
"name" : "GDK_Arabic_7",
"kind" : "enum member",
"protection" : "public",
"line" : 1525}
,
{
"name" : "GDK_Arabic_8",
"kind" : "enum member",
"protection" : "public",
"line" : 1527}
,
{
"name" : "GDK_Arabic_9",
"kind" : "enum member",
"protection" : "public",
"line" : 1529}
,
{
"name" : "GDK_Arabic_semicolon",
"kind" : "enum member",
"protection" : "public",
"line" : 1531}
,
{
"name" : "GDK_Arabic_question_mark",
"kind" : "enum member",
"protection" : "public",
"line" : 1533}
,
{
"name" : "GDK_Arabic_hamza",
"kind" : "enum member",
"protection" : "public",
"line" : 1535}
,
{
"name" : "GDK_Arabic_maddaonalef",
"kind" : "enum member",
"protection" : "public",
"line" : 1537}
,
{
"name" : "GDK_Arabic_hamzaonalef",
"kind" : "enum member",
"protection" : "public",
"line" : 1539}
,
{
"name" : "GDK_Arabic_hamzaonwaw",
"kind" : "enum member",
"protection" : "public",
"line" : 1541}
,
{
"name" : "GDK_Arabic_hamzaunderalef",
"kind" : "enum member",
"protection" : "public",
"line" : 1543}
,
{
"name" : "GDK_Arabic_hamzaonyeh",
"kind" : "enum member",
"protection" : "public",
"line" : 1545}
,
{
"name" : "GDK_Arabic_alef",
"kind" : "enum member",
"protection" : "public",
"line" : 1547}
,
{
"name" : "GDK_Arabic_beh",
"kind" : "enum member",
"protection" : "public",
"line" : 1549}
,
{
"name" : "GDK_Arabic_tehmarbuta",
"kind" : "enum member",
"protection" : "public",
"line" : 1551}
,
{
"name" : "GDK_Arabic_teh",
"kind" : "enum member",
"protection" : "public",
"line" : 1553}
,
{
"name" : "GDK_Arabic_theh",
"kind" : "enum member",
"protection" : "public",
"line" : 1555}
,
{
"name" : "GDK_Arabic_jeem",
"kind" : "enum member",
"protection" : "public",
"line" : 1557}
,
{
"name" : "GDK_Arabic_hah",
"kind" : "enum member",
"protection" : "public",
"line" : 1559}
,
{
"name" : "GDK_Arabic_khah",
"kind" : "enum member",
"protection" : "public",
"line" : 1561}
,
{
"name" : "GDK_Arabic_dal",
"kind" : "enum member",
"protection" : "public",
"line" : 1563}
,
{
"name" : "GDK_Arabic_thal",
"kind" : "enum member",
"protection" : "public",
"line" : 1565}
,
{
"name" : "GDK_Arabic_ra",
"kind" : "enum member",
"protection" : "public",
"line" : 1567}
,
{
"name" : "GDK_Arabic_zain",
"kind" : "enum member",
"protection" : "public",
"line" : 1569}
,
{
"name" : "GDK_Arabic_seen",
"kind" : "enum member",
"protection" : "public",
"line" : 1571}
,
{
"name" : "GDK_Arabic_sheen",
"kind" : "enum member",
"protection" : "public",
"line" : 1573}
,
{
"name" : "GDK_Arabic_sad",
"kind" : "enum member",
"protection" : "public",
"line" : 1575}
,
{
"name" : "GDK_Arabic_dad",
"kind" : "enum member",
"protection" : "public",
"line" : 1577}
,
{
"name" : "GDK_Arabic_tah",
"kind" : "enum member",
"protection" : "public",
"line" : 1579}
,
{
"name" : "GDK_Arabic_zah",
"kind" : "enum member",
"protection" : "public",
"line" : 1581}
,
{
"name" : "GDK_Arabic_ain",
"kind" : "enum member",
"protection" : "public",
"line" : 1583}
,
{
"name" : "GDK_Arabic_ghain",
"kind" : "enum member",
"protection" : "public",
"line" : 1585}
,
{
"name" : "GDK_Arabic_tatweel",
"kind" : "enum member",
"protection" : "public",
"line" : 1587}
,
{
"name" : "GDK_Arabic_feh",
"kind" : "enum member",
"protection" : "public",
"line" : 1589}
,
{
"name" : "GDK_Arabic_qaf",
"kind" : "enum member",
"protection" : "public",
"line" : 1591}
,
{
"name" : "GDK_Arabic_kaf",
"kind" : "enum member",
"protection" : "public",
"line" : 1593}
,
{
"name" : "GDK_Arabic_lam",
"kind" : "enum member",
"protection" : "public",
"line" : 1595}
,
{
"name" : "GDK_Arabic_meem",
"kind" : "enum member",
"protection" : "public",
"line" : 1597}
,
{
"name" : "GDK_Arabic_noon",
"kind" : "enum member",
"protection" : "public",
"line" : 1599}
,
{
"name" : "GDK_Arabic_ha",
"kind" : "enum member",
"protection" : "public",
"line" : 1601}
,
{
"name" : "GDK_Arabic_heh",
"kind" : "enum member",
"protection" : "public",
"line" : 1603}
,
{
"name" : "GDK_Arabic_waw",
"kind" : "enum member",
"protection" : "public",
"line" : 1605}
,
{
"name" : "GDK_Arabic_alefmaksura",
"kind" : "enum member",
"protection" : "public",
"line" : 1607}
,
{
"name" : "GDK_Arabic_yeh",
"kind" : "enum member",
"protection" : "public",
"line" : 1609}
,
{
"name" : "GDK_Arabic_fathatan",
"kind" : "enum member",
"protection" : "public",
"line" : 1611}
,
{
"name" : "GDK_Arabic_dammatan",
"kind" : "enum member",
"protection" : "public",
"line" : 1613}
,
{
"name" : "GDK_Arabic_kasratan",
"kind" : "enum member",
"protection" : "public",
"line" : 1615}
,
{
"name" : "GDK_Arabic_fatha",
"kind" : "enum member",
"protection" : "public",
"line" : 1617}
,
{
"name" : "GDK_Arabic_damma",
"kind" : "enum member",
"protection" : "public",
"line" : 1619}
,
{
"name" : "GDK_Arabic_kasra",
"kind" : "enum member",
"protection" : "public",
"line" : 1621}
,
{
"name" : "GDK_Arabic_shadda",
"kind" : "enum member",
"protection" : "public",
"line" : 1623}
,
{
"name" : "GDK_Arabic_sukun",
"kind" : "enum member",
"protection" : "public",
"line" : 1625}
,
{
"name" : "GDK_Arabic_madda_above",
"kind" : "enum member",
"protection" : "public",
"line" : 1627}
,
{
"name" : "GDK_Arabic_hamza_above",
"kind" : "enum member",
"protection" : "public",
"line" : 1629}
,
{
"name" : "GDK_Arabic_hamza_below",
"kind" : "enum member",
"protection" : "public",
"line" : 1631}
,
{
"name" : "GDK_Arabic_jeh",
"kind" : "enum member",
"protection" : "public",
"line" : 1633}
,
{
"name" : "GDK_Arabic_veh",
"kind" : "enum member",
"protection" : "public",
"line" : 1635}
,
{
"name" : "GDK_Arabic_keheh",
"kind" : "enum member",
"protection" : "public",
"line" : 1637}
,
{
"name" : "GDK_Arabic_gaf",
"kind" : "enum member",
"protection" : "public",
"line" : 1639}
,
{
"name" : "GDK_Arabic_noon_ghunna",
"kind" : "enum member",
"protection" : "public",
"line" : 1641}
,
{
"name" : "GDK_Arabic_heh_doachashmee",
"kind" : "enum member",
"protection" : "public",
"line" : 1643}
,
{
"name" : "GDK_Farsi_yeh",
"kind" : "enum member",
"protection" : "public",
"line" : 1645}
,
{
"name" : "GDK_Arabic_farsi_yeh",
"kind" : "enum member",
"protection" : "public",
"line" : 1647}
,
{
"name" : "GDK_Arabic_yeh_baree",
"kind" : "enum member",
"protection" : "public",
"line" : 1649}
,
{
"name" : "GDK_Arabic_heh_goal",
"kind" : "enum member",
"protection" : "public",
"line" : 1651}
,
{
"name" : "GDK_Arabic_switch",
"kind" : "enum member",
"protection" : "public",
"line" : 1653}
,
{
"name" : "GDK_Cyrillic_GHE_bar",
"kind" : "enum member",
"protection" : "public",
"line" : 1655}
,
{
"name" : "GDK_Cyrillic_ghe_bar",
"kind" : "enum member",
"protection" : "public",
"line" : 1657}
,
{
"name" : "GDK_Cyrillic_ZHE_descender",
"kind" : "enum member",
"protection" : "public",
"line" : 1659}
,
{
"name" : "GDK_Cyrillic_zhe_descender",
"kind" : "enum member",
"protection" : "public",
"line" : 1661}
,
{
"name" : "GDK_Cyrillic_KA_descender",
"kind" : "enum member",
"protection" : "public",
"line" : 1663}
,
{
"name" : "GDK_Cyrillic_ka_descender",
"kind" : "enum member",
"protection" : "public",
"line" : 1665}
,
{
"name" : "GDK_Cyrillic_KA_vertstroke",
"kind" : "enum member",
"protection" : "public",
"line" : 1667}
,
{
"name" : "GDK_Cyrillic_ka_vertstroke",
"kind" : "enum member",
"protection" : "public",
"line" : 1669}
,
{
"name" : "GDK_Cyrillic_EN_descender",
"kind" : "enum member",
"protection" : "public",
"line" : 1671}
,
{
"name" : "GDK_Cyrillic_en_descender",
"kind" : "enum member",
"protection" : "public",
"line" : 1673}
,
{
"name" : "GDK_Cyrillic_U_straight",
"kind" : "enum member",
"protection" : "public",
"line" : 1675}
,
{
"name" : "GDK_Cyrillic_u_straight",
"kind" : "enum member",
"protection" : "public",
"line" : 1677}
,
{
"name" : "GDK_Cyrillic_U_straight_bar",
"kind" : "enum member",
"protection" : "public",
"line" : 1679}
,
{
"name" : "GDK_Cyrillic_u_straight_bar",
"kind" : "enum member",
"protection" : "public",
"line" : 1681}
,
{
"name" : "GDK_Cyrillic_HA_descender",
"kind" : "enum member",
"protection" : "public",
"line" : 1683}
,
{
"name" : "GDK_Cyrillic_ha_descender",
"kind" : "enum member",
"protection" : "public",
"line" : 1685}
,
{
"name" : "GDK_Cyrillic_CHE_descender",
"kind" : "enum member",
"protection" : "public",
"line" : 1687}
,
{
"name" : "GDK_Cyrillic_che_descender",
"kind" : "enum member",
"protection" : "public",
"line" : 1689}
,
{
"name" : "GDK_Cyrillic_CHE_vertstroke",
"kind" : "enum member",
"protection" : "public",
"line" : 1691}
,
{
"name" : "GDK_Cyrillic_che_vertstroke",
"kind" : "enum member",
"protection" : "public",
"line" : 1693}
,
{
"name" : "GDK_Cyrillic_SHHA",
"kind" : "enum member",
"protection" : "public",
"line" : 1695}
,
{
"name" : "GDK_Cyrillic_shha",
"kind" : "enum member",
"protection" : "public",
"line" : 1697}
,
{
"name" : "GDK_Cyrillic_SCHWA",
"kind" : "enum member",
"protection" : "public",
"line" : 1699}
,
{
"name" : "GDK_Cyrillic_schwa",
"kind" : "enum member",
"protection" : "public",
"line" : 1701}
,
{
"name" : "GDK_Cyrillic_I_macron",
"kind" : "enum member",
"protection" : "public",
"line" : 1703}
,
{
"name" : "GDK_Cyrillic_i_macron",
"kind" : "enum member",
"protection" : "public",
"line" : 1705}
,
{
"name" : "GDK_Cyrillic_O_bar",
"kind" : "enum member",
"protection" : "public",
"line" : 1707}
,
{
"name" : "GDK_Cyrillic_o_bar",
"kind" : "enum member",
"protection" : "public",
"line" : 1709}
,
{
"name" : "GDK_Cyrillic_U_macron",
"kind" : "enum member",
"protection" : "public",
"line" : 1711}
,
{
"name" : "GDK_Cyrillic_u_macron",
"kind" : "enum member",
"protection" : "public",
"line" : 1713}
,
{
"name" : "GDK_Serbian_dje",
"kind" : "enum member",
"protection" : "public",
"line" : 1715}
,
{
"name" : "GDK_Macedonia_gje",
"kind" : "enum member",
"protection" : "public",
"line" : 1717}
,
{
"name" : "GDK_Cyrillic_io",
"kind" : "enum member",
"protection" : "public",
"line" : 1719}
,
{
"name" : "GDK_Ukrainian_ie",
"kind" : "enum member",
"protection" : "public",
"line" : 1721}
,
{
"name" : "GDK_Ukranian_je",
"kind" : "enum member",
"protection" : "public",
"line" : 1723}
,
{
"name" : "GDK_Macedonia_dse",
"kind" : "enum member",
"protection" : "public",
"line" : 1725}
,
{
"name" : "GDK_Ukrainian_i",
"kind" : "enum member",
"protection" : "public",
"line" : 1727}
,
{
"name" : "GDK_Ukranian_i",
"kind" : "enum member",
"protection" : "public",
"line" : 1729}
,
{
"name" : "GDK_Ukrainian_yi",
"kind" : "enum member",
"protection" : "public",
"line" : 1731}
,
{
"name" : "GDK_Ukranian_yi",
"kind" : "enum member",
"protection" : "public",
"line" : 1733}
,
{
"name" : "GDK_Cyrillic_je",
"kind" : "enum member",
"protection" : "public",
"line" : 1735}
,
{
"name" : "GDK_Serbian_je",
"kind" : "enum member",
"protection" : "public",
"line" : 1737}
,
{
"name" : "GDK_Cyrillic_lje",
"kind" : "enum member",
"protection" : "public",
"line" : 1739}
,
{
"name" : "GDK_Serbian_lje",
"kind" : "enum member",
"protection" : "public",
"line" : 1741}
,
{
"name" : "GDK_Cyrillic_nje",
"kind" : "enum member",
"protection" : "public",
"line" : 1743}
,
{
"name" : "GDK_Serbian_nje",
"kind" : "enum member",
"protection" : "public",
"line" : 1745}
,
{
"name" : "GDK_Serbian_tshe",
"kind" : "enum member",
"protection" : "public",
"line" : 1747}
,
{
"name" : "GDK_Macedonia_kje",
"kind" : "enum member",
"protection" : "public",
"line" : 1749}
,
{
"name" : "GDK_Ukrainian_ghe_with_upturn",
"kind" : "enum member",
"protection" : "public",
"line" : 1751}
,
{
"name" : "GDK_Byelorussian_shortu",
"kind" : "enum member",
"protection" : "public",
"line" : 1753}
,
{
"name" : "GDK_Cyrillic_dzhe",
"kind" : "enum member",
"protection" : "public",
"line" : 1755}
,
{
"name" : "GDK_Serbian_dze",
"kind" : "enum member",
"protection" : "public",
"line" : 1757}
,
{
"name" : "GDK_numerosign",
"kind" : "enum member",
"protection" : "public",
"line" : 1759}
,
{
"name" : "GDK_Serbian_DJE",
"kind" : "enum member",
"protection" : "public",
"line" : 1761}
,
{
"name" : "GDK_Macedonia_GJE",
"kind" : "enum member",
"protection" : "public",
"line" : 1763}
,
{
"name" : "GDK_Cyrillic_IO",
"kind" : "enum member",
"protection" : "public",
"line" : 1765}
,
{
"name" : "GDK_Ukrainian_IE",
"kind" : "enum member",
"protection" : "public",
"line" : 1767}
,
{
"name" : "GDK_Ukranian_JE",
"kind" : "enum member",
"protection" : "public",
"line" : 1769}
,
{
"name" : "GDK_Macedonia_DSE",
"kind" : "enum member",
"protection" : "public",
"line" : 1771}
,
{
"name" : "GDK_Ukrainian_I",
"kind" : "enum member",
"protection" : "public",
"line" : 1773}
,
{
"name" : "GDK_Ukranian_I",
"kind" : "enum member",
"protection" : "public",
"line" : 1775}
,
{
"name" : "GDK_Ukrainian_YI",
"kind" : "enum member",
"protection" : "public",
"line" : 1777}
,
{
"name" : "GDK_Ukranian_YI",
"kind" : "enum member",
"protection" : "public",
"line" : 1779}
,
{
"name" : "GDK_Cyrillic_JE",
"kind" : "enum member",
"protection" : "public",
"line" : 1781}
,
{
"name" : "GDK_Serbian_JE",
"kind" : "enum member",
"protection" : "public",
"line" : 1783}
,
{
"name" : "GDK_Cyrillic_LJE",
"kind" : "enum member",
"protection" : "public",
"line" : 1785}
,
{
"name" : "GDK_Serbian_LJE",
"kind" : "enum member",
"protection" : "public",
"line" : 1787}
,
{
"name" : "GDK_Cyrillic_NJE",
"kind" : "enum member",
"protection" : "public",
"line" : 1789}
,
{
"name" : "GDK_Serbian_NJE",
"kind" : "enum member",
"protection" : "public",
"line" : 1791}
,
{
"name" : "GDK_Serbian_TSHE",
"kind" : "enum member",
"protection" : "public",
"line" : 1793}
,
{
"name" : "GDK_Macedonia_KJE",
"kind" : "enum member",
"protection" : "public",
"line" : 1795}
,
{
"name" : "GDK_Ukrainian_GHE_WITH_UPTURN",
"kind" : "enum member",
"protection" : "public",
"line" : 1797}
,
{
"name" : "GDK_Byelorussian_SHORTU",
"kind" : "enum member",
"protection" : "public",
"line" : 1799}
,
{
"name" : "GDK_Cyrillic_DZHE",
"kind" : "enum member",
"protection" : "public",
"line" : 1801}
,
{
"name" : "GDK_Serbian_DZE",
"kind" : "enum member",
"protection" : "public",
"line" : 1803}
,
{
"name" : "GDK_Cyrillic_yu",
"kind" : "enum member",
"protection" : "public",
"line" : 1805}
,
{
"name" : "GDK_Cyrillic_a",
"kind" : "enum member",
"protection" : "public",
"line" : 1807}
,
{
"name" : "GDK_Cyrillic_be",
"kind" : "enum member",
"protection" : "public",
"line" : 1809}
,
{
"name" : "GDK_Cyrillic_tse",
"kind" : "enum member",
"protection" : "public",
"line" : 1811}
,
{
"name" : "GDK_Cyrillic_de",
"kind" : "enum member",
"protection" : "public",
"line" : 1813}
,
{
"name" : "GDK_Cyrillic_ie",
"kind" : "enum member",
"protection" : "public",
"line" : 1815}
,
{
"name" : "GDK_Cyrillic_ef",
"kind" : "enum member",
"protection" : "public",
"line" : 1817}
,
{
"name" : "GDK_Cyrillic_ghe",
"kind" : "enum member",
"protection" : "public",
"line" : 1819}
,
{
"name" : "GDK_Cyrillic_ha",
"kind" : "enum member",
"protection" : "public",
"line" : 1821}
,
{
"name" : "GDK_Cyrillic_i",
"kind" : "enum member",
"protection" : "public",
"line" : 1823}
,
{
"name" : "GDK_Cyrillic_shorti",
"kind" : "enum member",
"protection" : "public",
"line" : 1825}
,
{
"name" : "GDK_Cyrillic_ka",
"kind" : "enum member",
"protection" : "public",
"line" : 1827}
,
{
"name" : "GDK_Cyrillic_el",
"kind" : "enum member",
"protection" : "public",
"line" : 1829}
,
{
"name" : "GDK_Cyrillic_em",
"kind" : "enum member",
"protection" : "public",
"line" : 1831}
,
{
"name" : "GDK_Cyrillic_en",
"kind" : "enum member",
"protection" : "public",
"line" : 1833}
,
{
"name" : "GDK_Cyrillic_o",
"kind" : "enum member",
"protection" : "public",
"line" : 1835}
,
{
"name" : "GDK_Cyrillic_pe",
"kind" : "enum member",
"protection" : "public",
"line" : 1837}
,
{
"name" : "GDK_Cyrillic_ya",
"kind" : "enum member",
"protection" : "public",
"line" : 1839}
,
{
"name" : "GDK_Cyrillic_er",
"kind" : "enum member",
"protection" : "public",
"line" : 1841}
,
{
"name" : "GDK_Cyrillic_es",
"kind" : "enum member",
"protection" : "public",
"line" : 1843}
,
{
"name" : "GDK_Cyrillic_te",
"kind" : "enum member",
"protection" : "public",
"line" : 1845}
,
{
"name" : "GDK_Cyrillic_u",
"kind" : "enum member",
"protection" : "public",
"line" : 1847}
,
{
"name" : "GDK_Cyrillic_zhe",
"kind" : "enum member",
"protection" : "public",
"line" : 1849}
,
{
"name" : "GDK_Cyrillic_ve",
"kind" : "enum member",
"protection" : "public",
"line" : 1851}
,
{
"name" : "GDK_Cyrillic_softsign",
"kind" : "enum member",
"protection" : "public",
"line" : 1853}
,
{
"name" : "GDK_Cyrillic_yeru",
"kind" : "enum member",
"protection" : "public",
"line" : 1855}
,
{
"name" : "GDK_Cyrillic_ze",
"kind" : "enum member",
"protection" : "public",
"line" : 1857}
,
{
"name" : "GDK_Cyrillic_sha",
"kind" : "enum member",
"protection" : "public",
"line" : 1859}
,
{
"name" : "GDK_Cyrillic_e",
"kind" : "enum member",
"protection" : "public",
"line" : 1861}
,
{
"name" : "GDK_Cyrillic_shcha",
"kind" : "enum member",
"protection" : "public",
"line" : 1863}
,
{
"name" : "GDK_Cyrillic_che",
"kind" : "enum member",
"protection" : "public",
"line" : 1865}
,
{
"name" : "GDK_Cyrillic_hardsign",
"kind" : "enum member",
"protection" : "public",
"line" : 1867}
,
{
"name" : "GDK_Cyrillic_YU",
"kind" : "enum member",
"protection" : "public",
"line" : 1869}
,
{
"name" : "GDK_Cyrillic_A",
"kind" : "enum member",
"protection" : "public",
"line" : 1871}
,
{
"name" : "GDK_Cyrillic_BE",
"kind" : "enum member",
"protection" : "public",
"line" : 1873}
,
{
"name" : "GDK_Cyrillic_TSE",
"kind" : "enum member",
"protection" : "public",
"line" : 1875}
,
{
"name" : "GDK_Cyrillic_DE",
"kind" : "enum member",
"protection" : "public",
"line" : 1877}
,
{
"name" : "GDK_Cyrillic_IE",
"kind" : "enum member",
"protection" : "public",
"line" : 1879}
,
{
"name" : "GDK_Cyrillic_EF",
"kind" : "enum member",
"protection" : "public",
"line" : 1881}
,
{
"name" : "GDK_Cyrillic_GHE",
"kind" : "enum member",
"protection" : "public",
"line" : 1883}
,
{
"name" : "GDK_Cyrillic_HA",
"kind" : "enum member",
"protection" : "public",
"line" : 1885}
,
{
"name" : "GDK_Cyrillic_I",
"kind" : "enum member",
"protection" : "public",
"line" : 1887}
,
{
"name" : "GDK_Cyrillic_SHORTI",
"kind" : "enum member",
"protection" : "public",
"line" : 1889}
,
{
"name" : "GDK_Cyrillic_KA",
"kind" : "enum member",
"protection" : "public",
"line" : 1891}
,
{
"name" : "GDK_Cyrillic_EL",
"kind" : "enum member",
"protection" : "public",
"line" : 1893}
,
{
"name" : "GDK_Cyrillic_EM",
"kind" : "enum member",
"protection" : "public",
"line" : 1895}
,
{
"name" : "GDK_Cyrillic_EN",
"kind" : "enum member",
"protection" : "public",
"line" : 1897}
,
{
"name" : "GDK_Cyrillic_O",
"kind" : "enum member",
"protection" : "public",
"line" : 1899}
,
{
"name" : "GDK_Cyrillic_PE",
"kind" : "enum member",
"protection" : "public",
"line" : 1901}
,
{
"name" : "GDK_Cyrillic_YA",
"kind" : "enum member",
"protection" : "public",
"line" : 1903}
,
{
"name" : "GDK_Cyrillic_ER",
"kind" : "enum member",
"protection" : "public",
"line" : 1905}
,
{
"name" : "GDK_Cyrillic_ES",
"kind" : "enum member",
"protection" : "public",
"line" : 1907}
,
{
"name" : "GDK_Cyrillic_TE",
"kind" : "enum member",
"protection" : "public",
"line" : 1909}
,
{
"name" : "GDK_Cyrillic_U",
"kind" : "enum member",
"protection" : "public",
"line" : 1911}
,
{
"name" : "GDK_Cyrillic_ZHE",
"kind" : "enum member",
"protection" : "public",
"line" : 1913}
,
{
"name" : "GDK_Cyrillic_VE",
"kind" : "enum member",
"protection" : "public",
"line" : 1915}
,
{
"name" : "GDK_Cyrillic_SOFTSIGN",
"kind" : "enum member",
"protection" : "public",
"line" : 1917}
,
{
"name" : "GDK_Cyrillic_YERU",
"kind" : "enum member",
"protection" : "public",
"line" : 1919}
,
{
"name" : "GDK_Cyrillic_ZE",
"kind" : "enum member",
"protection" : "public",
"line" : 1921}
,
{
"name" : "GDK_Cyrillic_SHA",
"kind" : "enum member",
"protection" : "public",
"line" : 1923}
,
{
"name" : "GDK_Cyrillic_E",
"kind" : "enum member",
"protection" : "public",
"line" : 1925}
,
{
"name" : "GDK_Cyrillic_SHCHA",
"kind" : "enum member",
"protection" : "public",
"line" : 1927}
,
{
"name" : "GDK_Cyrillic_CHE",
"kind" : "enum member",
"protection" : "public",
"line" : 1929}
,
{
"name" : "GDK_Cyrillic_HARDSIGN",
"kind" : "enum member",
"protection" : "public",
"line" : 1931}
,
{
"name" : "GDK_Greek_ALPHAaccent",
"kind" : "enum member",
"protection" : "public",
"line" : 1933}
,
{
"name" : "GDK_Greek_EPSILONaccent",
"kind" : "enum member",
"protection" : "public",
"line" : 1935}
,
{
"name" : "GDK_Greek_ETAaccent",
"kind" : "enum member",
"protection" : "public",
"line" : 1937}
,
{
"name" : "GDK_Greek_IOTAaccent",
"kind" : "enum member",
"protection" : "public",
"line" : 1939}
,
{
"name" : "GDK_Greek_IOTAdieresis",
"kind" : "enum member",
"protection" : "public",
"line" : 1941}
,
{
"name" : "GDK_Greek_IOTAdiaeresis",
"kind" : "enum member",
"protection" : "public",
"line" : 1943}
,
{
"name" : "GDK_Greek_OMICRONaccent",
"kind" : "enum member",
"protection" : "public",
"line" : 1945}
,
{
"name" : "GDK_Greek_UPSILONaccent",
"kind" : "enum member",
"protection" : "public",
"line" : 1947}
,
{
"name" : "GDK_Greek_UPSILONdieresis",
"kind" : "enum member",
"protection" : "public",
"line" : 1949}
,
{
"name" : "GDK_Greek_OMEGAaccent",
"kind" : "enum member",
"protection" : "public",
"line" : 1951}
,
{
"name" : "GDK_Greek_accentdieresis",
"kind" : "enum member",
"protection" : "public",
"line" : 1953}
,
{
"name" : "GDK_Greek_horizbar",
"kind" : "enum member",
"protection" : "public",
"line" : 1955}
,
{
"name" : "GDK_Greek_alphaaccent",
"kind" : "enum member",
"protection" : "public",
"line" : 1957}
,
{
"name" : "GDK_Greek_epsilonaccent",
"kind" : "enum member",
"protection" : "public",
"line" : 1959}
,
{
"name" : "GDK_Greek_etaaccent",
"kind" : "enum member",
"protection" : "public",
"line" : 1961}
,
{
"name" : "GDK_Greek_iotaaccent",
"kind" : "enum member",
"protection" : "public",
"line" : 1963}
,
{
"name" : "GDK_Greek_iotadieresis",
"kind" : "enum member",
"protection" : "public",
"line" : 1965}
,
{
"name" : "GDK_Greek_iotaaccentdieresis",
"kind" : "enum member",
"protection" : "public",
"line" : 1967}
,
{
"name" : "GDK_Greek_omicronaccent",
"kind" : "enum member",
"protection" : "public",
"line" : 1969}
,
{
"name" : "GDK_Greek_upsilonaccent",
"kind" : "enum member",
"protection" : "public",
"line" : 1971}
,
{
"name" : "GDK_Greek_upsilondieresis",
"kind" : "enum member",
"protection" : "public",
"line" : 1973}
,
{
"name" : "GDK_Greek_upsilonaccentdieresis",
"kind" : "enum member",
"protection" : "public",
"line" : 1975}
,
{
"name" : "GDK_Greek_omegaaccent",
"kind" : "enum member",
"protection" : "public",
"line" : 1977}
,
{
"name" : "GDK_Greek_ALPHA",
"kind" : "enum member",
"protection" : "public",
"line" : 1979}
,
{
"name" : "GDK_Greek_BETA",
"kind" : "enum member",
"protection" : "public",
"line" : 1981}
,
{
"name" : "GDK_Greek_GAMMA",
"kind" : "enum member",
"protection" : "public",
"line" : 1983}
,
{
"name" : "GDK_Greek_DELTA",
"kind" : "enum member",
"protection" : "public",
"line" : 1985}
,
{
"name" : "GDK_Greek_EPSILON",
"kind" : "enum member",
"protection" : "public",
"line" : 1987}
,
{
"name" : "GDK_Greek_ZETA",
"kind" : "enum member",
"protection" : "public",
"line" : 1989}
,
{
"name" : "GDK_Greek_ETA",
"kind" : "enum member",
"protection" : "public",
"line" : 1991}
,
{
"name" : "GDK_Greek_THETA",
"kind" : "enum member",
"protection" : "public",
"line" : 1993}
,
{
"name" : "GDK_Greek_IOTA",
"kind" : "enum member",
"protection" : "public",
"line" : 1995}
,
{
"name" : "GDK_Greek_KAPPA",
"kind" : "enum member",
"protection" : "public",
"line" : 1997}
,
{
"name" : "GDK_Greek_LAMDA",
"kind" : "enum member",
"protection" : "public",
"line" : 1999}
,
{
"name" : "GDK_Greek_LAMBDA",
"kind" : "enum member",
"protection" : "public",
"line" : 2001}
,
{
"name" : "GDK_Greek_MU",
"kind" : "enum member",
"protection" : "public",
"line" : 2003}
,
{
"name" : "GDK_Greek_NU",
"kind" : "enum member",
"protection" : "public",
"line" : 2005}
,
{
"name" : "GDK_Greek_XI",
"kind" : "enum member",
"protection" : "public",
"line" : 2007}
,
{
"name" : "GDK_Greek_OMICRON",
"kind" : "enum member",
"protection" : "public",
"line" : 2009}
,
{
"name" : "GDK_Greek_PI",
"kind" : "enum member",
"protection" : "public",
"line" : 2011}
,
{
"name" : "GDK_Greek_RHO",
"kind" : "enum member",
"protection" : "public",
"line" : 2013}
,
{
"name" : "GDK_Greek_SIGMA",
"kind" : "enum member",
"protection" : "public",
"line" : 2015}
,
{
"name" : "GDK_Greek_TAU",
"kind" : "enum member",
"protection" : "public",
"line" : 2017}
,
{
"name" : "GDK_Greek_UPSILON",
"kind" : "enum member",
"protection" : "public",
"line" : 2019}
,
{
"name" : "GDK_Greek_PHI",
"kind" : "enum member",
"protection" : "public",
"line" : 2021}
,
{
"name" : "GDK_Greek_CHI",
"kind" : "enum member",
"protection" : "public",
"line" : 2023}
,
{
"name" : "GDK_Greek_PSI",
"kind" : "enum member",
"protection" : "public",
"line" : 2025}
,
{
"name" : "GDK_Greek_OMEGA",
"kind" : "enum member",
"protection" : "public",
"line" : 2027}
,
{
"name" : "GDK_Greek_alpha",
"kind" : "enum member",
"protection" : "public",
"line" : 2029}
,
{
"name" : "GDK_Greek_beta",
"kind" : "enum member",
"protection" : "public",
"line" : 2031}
,
{
"name" : "GDK_Greek_gamma",
"kind" : "enum member",
"protection" : "public",
"line" : 2033}
,
{
"name" : "GDK_Greek_delta",
"kind" : "enum member",
"protection" : "public",
"line" : 2035}
,
{
"name" : "GDK_Greek_epsilon",
"kind" : "enum member",
"protection" : "public",
"line" : 2037}
,
{
"name" : "GDK_Greek_zeta",
"kind" : "enum member",
"protection" : "public",
"line" : 2039}
,
{
"name" : "GDK_Greek_eta",
"kind" : "enum member",
"protection" : "public",
"line" : 2041}
,
{
"name" : "GDK_Greek_theta",
"kind" : "enum member",
"protection" : "public",
"line" : 2043}
,
{
"name" : "GDK_Greek_iota",
"kind" : "enum member",
"protection" : "public",
"line" : 2045}
,
{
"name" : "GDK_Greek_kappa",
"kind" : "enum member",
"protection" : "public",
"line" : 2047}
,
{
"name" : "GDK_Greek_lamda",
"kind" : "enum member",
"protection" : "public",
"line" : 2049}
,
{
"name" : "GDK_Greek_lambda",
"kind" : "enum member",
"protection" : "public",
"line" : 2051}
,
{
"name" : "GDK_Greek_mu",
"kind" : "enum member",
"protection" : "public",
"line" : 2053}
,
{
"name" : "GDK_Greek_nu",
"kind" : "enum member",
"protection" : "public",
"line" : 2055}
,
{
"name" : "GDK_Greek_xi",
"kind" : "enum member",
"protection" : "public",
"line" : 2057}
,
{
"name" : "GDK_Greek_omicron",
"kind" : "enum member",
"protection" : "public",
"line" : 2059}
,
{
"name" : "GDK_Greek_pi",
"kind" : "enum member",
"protection" : "public",
"line" : 2061}
,
{
"name" : "GDK_Greek_rho",
"kind" : "enum member",
"protection" : "public",
"line" : 2063}
,
{
"name" : "GDK_Greek_sigma",
"kind" : "enum member",
"protection" : "public",
"line" : 2065}
,
{
"name" : "GDK_Greek_finalsmallsigma",
"kind" : "enum member",
"protection" : "public",
"line" : 2067}
,
{
"name" : "GDK_Greek_tau",
"kind" : "enum member",
"protection" : "public",
"line" : 2069}
,
{
"name" : "GDK_Greek_upsilon",
"kind" : "enum member",
"protection" : "public",
"line" : 2071}
,
{
"name" : "GDK_Greek_phi",
"kind" : "enum member",
"protection" : "public",
"line" : 2073}
,
{
"name" : "GDK_Greek_chi",
"kind" : "enum member",
"protection" : "public",
"line" : 2075}
,
{
"name" : "GDK_Greek_psi",
"kind" : "enum member",
"protection" : "public",
"line" : 2077}
,
{
"name" : "GDK_Greek_omega",
"kind" : "enum member",
"protection" : "public",
"line" : 2079}
,
{
"name" : "GDK_Greek_switch",
"kind" : "enum member",
"protection" : "public",
"line" : 2081}
,
{
"name" : "GDK_leftradical",
"kind" : "enum member",
"protection" : "public",
"line" : 2083}
,
{
"name" : "GDK_topleftradical",
"kind" : "enum member",
"protection" : "public",
"line" : 2085}
,
{
"name" : "GDK_horizconnector",
"kind" : "enum member",
"protection" : "public",
"line" : 2087}
,
{
"name" : "GDK_topintegral",
"kind" : "enum member",
"protection" : "public",
"line" : 2089}
,
{
"name" : "GDK_botintegral",
"kind" : "enum member",
"protection" : "public",
"line" : 2091}
,
{
"name" : "GDK_vertconnector",
"kind" : "enum member",
"protection" : "public",
"line" : 2093}
,
{
"name" : "GDK_topleftsqbracket",
"kind" : "enum member",
"protection" : "public",
"line" : 2095}
,
{
"name" : "GDK_botleftsqbracket",
"kind" : "enum member",
"protection" : "public",
"line" : 2097}
,
{
"name" : "GDK_toprightsqbracket",
"kind" : "enum member",
"protection" : "public",
"line" : 2099}
,
{
"name" : "GDK_botrightsqbracket",
"kind" : "enum member",
"protection" : "public",
"line" : 2101}
,
{
"name" : "GDK_topleftparens",
"kind" : "enum member",
"protection" : "public",
"line" : 2103}
,
{
"name" : "GDK_botleftparens",
"kind" : "enum member",
"protection" : "public",
"line" : 2105}
,
{
"name" : "GDK_toprightparens",
"kind" : "enum member",
"protection" : "public",
"line" : 2107}
,
{
"name" : "GDK_botrightparens",
"kind" : "enum member",
"protection" : "public",
"line" : 2109}
,
{
"name" : "GDK_leftmiddlecurlybrace",
"kind" : "enum member",
"protection" : "public",
"line" : 2111}
,
{
"name" : "GDK_rightmiddlecurlybrace",
"kind" : "enum member",
"protection" : "public",
"line" : 2113}
,
{
"name" : "GDK_topleftsummation",
"kind" : "enum member",
"protection" : "public",
"line" : 2115}
,
{
"name" : "GDK_botleftsummation",
"kind" : "enum member",
"protection" : "public",
"line" : 2117}
,
{
"name" : "GDK_topvertsummationconnector",
"kind" : "enum member",
"protection" : "public",
"line" : 2119}
,
{
"name" : "GDK_botvertsummationconnector",
"kind" : "enum member",
"protection" : "public",
"line" : 2121}
,
{
"name" : "GDK_toprightsummation",
"kind" : "enum member",
"protection" : "public",
"line" : 2123}
,
{
"name" : "GDK_botrightsummation",
"kind" : "enum member",
"protection" : "public",
"line" : 2125}
,
{
"name" : "GDK_rightmiddlesummation",
"kind" : "enum member",
"protection" : "public",
"line" : 2127}
,
{
"name" : "GDK_lessthanequal",
"kind" : "enum member",
"protection" : "public",
"line" : 2129}
,
{
"name" : "GDK_notequal",
"kind" : "enum member",
"protection" : "public",
"line" : 2131}
,
{
"name" : "GDK_greaterthanequal",
"kind" : "enum member",
"protection" : "public",
"line" : 2133}
,
{
"name" : "GDK_integral",
"kind" : "enum member",
"protection" : "public",
"line" : 2135}
,
{
"name" : "GDK_therefore",
"kind" : "enum member",
"protection" : "public",
"line" : 2137}
,
{
"name" : "GDK_variation",
"kind" : "enum member",
"protection" : "public",
"line" : 2139}
,
{
"name" : "GDK_infinity",
"kind" : "enum member",
"protection" : "public",
"line" : 2141}
,
{
"name" : "GDK_nabla",
"kind" : "enum member",
"protection" : "public",
"line" : 2143}
,
{
"name" : "GDK_approximate",
"kind" : "enum member",
"protection" : "public",
"line" : 2145}
,
{
"name" : "GDK_similarequal",
"kind" : "enum member",
"protection" : "public",
"line" : 2147}
,
{
"name" : "GDK_ifonlyif",
"kind" : "enum member",
"protection" : "public",
"line" : 2149}
,
{
"name" : "GDK_implies",
"kind" : "enum member",
"protection" : "public",
"line" : 2151}
,
{
"name" : "GDK_identical",
"kind" : "enum member",
"protection" : "public",
"line" : 2153}
,
{
"name" : "GDK_radical",
"kind" : "enum member",
"protection" : "public",
"line" : 2155}
,
{
"name" : "GDK_includedin",
"kind" : "enum member",
"protection" : "public",
"line" : 2157}
,
{
"name" : "GDK_includes",
"kind" : "enum member",
"protection" : "public",
"line" : 2159}
,
{
"name" : "GDK_intersection",
"kind" : "enum member",
"protection" : "public",
"line" : 2161}
,
{
"name" : "GDK_union",
"kind" : "enum member",
"protection" : "public",
"line" : 2163}
,
{
"name" : "GDK_logicaland",
"kind" : "enum member",
"protection" : "public",
"line" : 2165}
,
{
"name" : "GDK_logicalor",
"kind" : "enum member",
"protection" : "public",
"line" : 2167}
,
{
"name" : "GDK_partialderivative",
"kind" : "enum member",
"protection" : "public",
"line" : 2169}
,
{
"name" : "GDK_function",
"kind" : "enum member",
"protection" : "public",
"line" : 2171}
,
{
"name" : "GDK_leftarrow",
"kind" : "enum member",
"protection" : "public",
"line" : 2173}
,
{
"name" : "GDK_uparrow",
"kind" : "enum member",
"protection" : "public",
"line" : 2175}
,
{
"name" : "GDK_rightarrow",
"kind" : "enum member",
"protection" : "public",
"line" : 2177}
,
{
"name" : "GDK_downarrow",
"kind" : "enum member",
"protection" : "public",
"line" : 2179}
,
{
"name" : "GDK_blank",
"kind" : "enum member",
"protection" : "public",
"line" : 2181}
,
{
"name" : "GDK_soliddiamond",
"kind" : "enum member",
"protection" : "public",
"line" : 2183}
,
{
"name" : "GDK_checkerboard",
"kind" : "enum member",
"protection" : "public",
"line" : 2185}
,
{
"name" : "GDK_ht",
"kind" : "enum member",
"protection" : "public",
"line" : 2187}
,
{
"name" : "GDK_ff",
"kind" : "enum member",
"protection" : "public",
"line" : 2189}
,
{
"name" : "GDK_cr",
"kind" : "enum member",
"protection" : "public",
"line" : 2191}
,
{
"name" : "GDK_lf",
"kind" : "enum member",
"protection" : "public",
"line" : 2193}
,
{
"name" : "GDK_nl",
"kind" : "enum member",
"protection" : "public",
"line" : 2195}
,
{
"name" : "GDK_vt",
"kind" : "enum member",
"protection" : "public",
"line" : 2197}
,
{
"name" : "GDK_lowrightcorner",
"kind" : "enum member",
"protection" : "public",
"line" : 2199}
,
{
"name" : "GDK_uprightcorner",
"kind" : "enum member",
"protection" : "public",
"line" : 2201}
,
{
"name" : "GDK_upleftcorner",
"kind" : "enum member",
"protection" : "public",
"line" : 2203}
,
{
"name" : "GDK_lowleftcorner",
"kind" : "enum member",
"protection" : "public",
"line" : 2205}
,
{
"name" : "GDK_crossinglines",
"kind" : "enum member",
"protection" : "public",
"line" : 2207}
,
{
"name" : "GDK_horizlinescan1",
"kind" : "enum member",
"protection" : "public",
"line" : 2209}
,
{
"name" : "GDK_horizlinescan3",
"kind" : "enum member",
"protection" : "public",
"line" : 2211}
,
{
"name" : "GDK_horizlinescan5",
"kind" : "enum member",
"protection" : "public",
"line" : 2213}
,
{
"name" : "GDK_horizlinescan7",
"kind" : "enum member",
"protection" : "public",
"line" : 2215}
,
{
"name" : "GDK_horizlinescan9",
"kind" : "enum member",
"protection" : "public",
"line" : 2217}
,
{
"name" : "GDK_leftt",
"kind" : "enum member",
"protection" : "public",
"line" : 2219}
,
{
"name" : "GDK_rightt",
"kind" : "enum member",
"protection" : "public",
"line" : 2221}
,
{
"name" : "GDK_bott",
"kind" : "enum member",
"protection" : "public",
"line" : 2223}
,
{
"name" : "GDK_topt",
"kind" : "enum member",
"protection" : "public",
"line" : 2225}
,
{
"name" : "GDK_vertbar",
"kind" : "enum member",
"protection" : "public",
"line" : 2227}
,
{
"name" : "GDK_emspace",
"kind" : "enum member",
"protection" : "public",
"line" : 2229}
,
{
"name" : "GDK_enspace",
"kind" : "enum member",
"protection" : "public",
"line" : 2231}
,
{
"name" : "GDK_em3space",
"kind" : "enum member",
"protection" : "public",
"line" : 2233}
,
{
"name" : "GDK_em4space",
"kind" : "enum member",
"protection" : "public",
"line" : 2235}
,
{
"name" : "GDK_digitspace",
"kind" : "enum member",
"protection" : "public",
"line" : 2237}
,
{
"name" : "GDK_punctspace",
"kind" : "enum member",
"protection" : "public",
"line" : 2239}
,
{
"name" : "GDK_thinspace",
"kind" : "enum member",
"protection" : "public",
"line" : 2241}
,
{
"name" : "GDK_hairspace",
"kind" : "enum member",
"protection" : "public",
"line" : 2243}
,
{
"name" : "GDK_emdash",
"kind" : "enum member",
"protection" : "public",
"line" : 2245}
,
{
"name" : "GDK_endash",
"kind" : "enum member",
"protection" : "public",
"line" : 2247}
,
{
"name" : "GDK_signifblank",
"kind" : "enum member",
"protection" : "public",
"line" : 2249}
,
{
"name" : "GDK_ellipsis",
"kind" : "enum member",
"protection" : "public",
"line" : 2251}
,
{
"name" : "GDK_doubbaselinedot",
"kind" : "enum member",
"protection" : "public",
"line" : 2253}
,
{
"name" : "GDK_onethird",
"kind" : "enum member",
"protection" : "public",
"line" : 2255}
,
{
"name" : "GDK_twothirds",
"kind" : "enum member",
"protection" : "public",
"line" : 2257}
,
{
"name" : "GDK_onefifth",
"kind" : "enum member",
"protection" : "public",
"line" : 2259}
,
{
"name" : "GDK_twofifths",
"kind" : "enum member",
"protection" : "public",
"line" : 2261}
,
{
"name" : "GDK_threefifths",
"kind" : "enum member",
"protection" : "public",
"line" : 2263}
,
{
"name" : "GDK_fourfifths",
"kind" : "enum member",
"protection" : "public",
"line" : 2265}
,
{
"name" : "GDK_onesixth",
"kind" : "enum member",
"protection" : "public",
"line" : 2267}
,
{
"name" : "GDK_fivesixths",
"kind" : "enum member",
"protection" : "public",
"line" : 2269}
,
{
"name" : "GDK_careof",
"kind" : "enum member",
"protection" : "public",
"line" : 2271}
,
{
"name" : "GDK_figdash",
"kind" : "enum member",
"protection" : "public",
"line" : 2273}
,
{
"name" : "GDK_leftanglebracket",
"kind" : "enum member",
"protection" : "public",
"line" : 2275}
,
{
"name" : "GDK_decimalpoint",
"kind" : "enum member",
"protection" : "public",
"line" : 2277}
,
{
"name" : "GDK_rightanglebracket",
"kind" : "enum member",
"protection" : "public",
"line" : 2279}
,
{
"name" : "GDK_marker",
"kind" : "enum member",
"protection" : "public",
"line" : 2281}
,
{
"name" : "GDK_oneeighth",
"kind" : "enum member",
"protection" : "public",
"line" : 2283}
,
{
"name" : "GDK_threeeighths",
"kind" : "enum member",
"protection" : "public",
"line" : 2285}
,
{
"name" : "GDK_fiveeighths",
"kind" : "enum member",
"protection" : "public",
"line" : 2287}
,
{
"name" : "GDK_seveneighths",
"kind" : "enum member",
"protection" : "public",
"line" : 2289}
,
{
"name" : "GDK_trademark",
"kind" : "enum member",
"protection" : "public",
"line" : 2291}
,
{
"name" : "GDK_signaturemark",
"kind" : "enum member",
"protection" : "public",
"line" : 2293}
,
{
"name" : "GDK_trademarkincircle",
"kind" : "enum member",
"protection" : "public",
"line" : 2295}
,
{
"name" : "GDK_leftopentriangle",
"kind" : "enum member",
"protection" : "public",
"line" : 2297}
,
{
"name" : "GDK_rightopentriangle",
"kind" : "enum member",
"protection" : "public",
"line" : 2299}
,
{
"name" : "GDK_emopencircle",
"kind" : "enum member",
"protection" : "public",
"line" : 2301}
,
{
"name" : "GDK_emopenrectangle",
"kind" : "enum member",
"protection" : "public",
"line" : 2303}
,
{
"name" : "GDK_leftsinglequotemark",
"kind" : "enum member",
"protection" : "public",
"line" : 2305}
,
{
"name" : "GDK_rightsinglequotemark",
"kind" : "enum member",
"protection" : "public",
"line" : 2307}
,
{
"name" : "GDK_leftdoublequotemark",
"kind" : "enum member",
"protection" : "public",
"line" : 2309}
,
{
"name" : "GDK_rightdoublequotemark",
"kind" : "enum member",
"protection" : "public",
"line" : 2311}
,
{
"name" : "GDK_prescription",
"kind" : "enum member",
"protection" : "public",
"line" : 2313}
,
{
"name" : "GDK_minutes",
"kind" : "enum member",
"protection" : "public",
"line" : 2315}
,
{
"name" : "GDK_seconds",
"kind" : "enum member",
"protection" : "public",
"line" : 2317}
,
{
"name" : "GDK_latincross",
"kind" : "enum member",
"protection" : "public",
"line" : 2319}
,
{
"name" : "GDK_hexagram",
"kind" : "enum member",
"protection" : "public",
"line" : 2321}
,
{
"name" : "GDK_filledrectbullet",
"kind" : "enum member",
"protection" : "public",
"line" : 2323}
,
{
"name" : "GDK_filledlefttribullet",
"kind" : "enum member",
"protection" : "public",
"line" : 2325}
,
{
"name" : "GDK_filledrighttribullet",
"kind" : "enum member",
"protection" : "public",
"line" : 2327}
,
{
"name" : "GDK_emfilledcircle",
"kind" : "enum member",
"protection" : "public",
"line" : 2329}
,
{
"name" : "GDK_emfilledrect",
"kind" : "enum member",
"protection" : "public",
"line" : 2331}
,
{
"name" : "GDK_enopencircbullet",
"kind" : "enum member",
"protection" : "public",
"line" : 2333}
,
{
"name" : "GDK_enopensquarebullet",
"kind" : "enum member",
"protection" : "public",
"line" : 2335}
,
{
"name" : "GDK_openrectbullet",
"kind" : "enum member",
"protection" : "public",
"line" : 2337}
,
{
"name" : "GDK_opentribulletup",
"kind" : "enum member",
"protection" : "public",
"line" : 2339}
,
{
"name" : "GDK_opentribulletdown",
"kind" : "enum member",
"protection" : "public",
"line" : 2341}
,
{
"name" : "GDK_openstar",
"kind" : "enum member",
"protection" : "public",
"line" : 2343}
,
{
"name" : "GDK_enfilledcircbullet",
"kind" : "enum member",
"protection" : "public",
"line" : 2345}
,
{
"name" : "GDK_enfilledsqbullet",
"kind" : "enum member",
"protection" : "public",
"line" : 2347}
,
{
"name" : "GDK_filledtribulletup",
"kind" : "enum member",
"protection" : "public",
"line" : 2349}
,
{
"name" : "GDK_filledtribulletdown",
"kind" : "enum member",
"protection" : "public",
"line" : 2351}
,
{
"name" : "GDK_leftpointer",
"kind" : "enum member",
"protection" : "public",
"line" : 2353}
,
{
"name" : "GDK_rightpointer",
"kind" : "enum member",
"protection" : "public",
"line" : 2355}
,
{
"name" : "GDK_club",
"kind" : "enum member",
"protection" : "public",
"line" : 2357}
,
{
"name" : "GDK_diamond",
"kind" : "enum member",
"protection" : "public",
"line" : 2359}
,
{
"name" : "GDK_heart",
"kind" : "enum member",
"protection" : "public",
"line" : 2361}
,
{
"name" : "GDK_maltesecross",
"kind" : "enum member",
"protection" : "public",
"line" : 2363}
,
{
"name" : "GDK_dagger",
"kind" : "enum member",
"protection" : "public",
"line" : 2365}
,
{
"name" : "GDK_doubledagger",
"kind" : "enum member",
"protection" : "public",
"line" : 2367}
,
{
"name" : "GDK_checkmark",
"kind" : "enum member",
"protection" : "public",
"line" : 2369}
,
{
"name" : "GDK_ballotcross",
"kind" : "enum member",
"protection" : "public",
"line" : 2371}
,
{
"name" : "GDK_musicalsharp",
"kind" : "enum member",
"protection" : "public",
"line" : 2373}
,
{
"name" : "GDK_musicalflat",
"kind" : "enum member",
"protection" : "public",
"line" : 2375}
,
{
"name" : "GDK_malesymbol",
"kind" : "enum member",
"protection" : "public",
"line" : 2377}
,
{
"name" : "GDK_femalesymbol",
"kind" : "enum member",
"protection" : "public",
"line" : 2379}
,
{
"name" : "GDK_telephone",
"kind" : "enum member",
"protection" : "public",
"line" : 2381}
,
{
"name" : "GDK_telephonerecorder",
"kind" : "enum member",
"protection" : "public",
"line" : 2383}
,
{
"name" : "GDK_phonographcopyright",
"kind" : "enum member",
"protection" : "public",
"line" : 2385}
,
{
"name" : "GDK_caret",
"kind" : "enum member",
"protection" : "public",
"line" : 2387}
,
{
"name" : "GDK_singlelowquotemark",
"kind" : "enum member",
"protection" : "public",
"line" : 2389}
,
{
"name" : "GDK_doublelowquotemark",
"kind" : "enum member",
"protection" : "public",
"line" : 2391}
,
{
"name" : "GDK_cursor",
"kind" : "enum member",
"protection" : "public",
"line" : 2393}
,
{
"name" : "GDK_leftcaret",
"kind" : "enum member",
"protection" : "public",
"line" : 2395}
,
{
"name" : "GDK_rightcaret",
"kind" : "enum member",
"protection" : "public",
"line" : 2397}
,
{
"name" : "GDK_downcaret",
"kind" : "enum member",
"protection" : "public",
"line" : 2399}
,
{
"name" : "GDK_upcaret",
"kind" : "enum member",
"protection" : "public",
"line" : 2401}
,
{
"name" : "GDK_overbar",
"kind" : "enum member",
"protection" : "public",
"line" : 2403}
,
{
"name" : "GDK_downtack",
"kind" : "enum member",
"protection" : "public",
"line" : 2405}
,
{
"name" : "GDK_upshoe",
"kind" : "enum member",
"protection" : "public",
"line" : 2407}
,
{
"name" : "GDK_downstile",
"kind" : "enum member",
"protection" : "public",
"line" : 2409}
,
{
"name" : "GDK_underbar",
"kind" : "enum member",
"protection" : "public",
"line" : 2411}
,
{
"name" : "GDK_jot",
"kind" : "enum member",
"protection" : "public",
"line" : 2413}
,
{
"name" : "GDK_quad",
"kind" : "enum member",
"protection" : "public",
"line" : 2415}
,
{
"name" : "GDK_uptack",
"kind" : "enum member",
"protection" : "public",
"line" : 2417}
,
{
"name" : "GDK_circle",
"kind" : "enum member",
"protection" : "public",
"line" : 2419}
,
{
"name" : "GDK_upstile",
"kind" : "enum member",
"protection" : "public",
"line" : 2421}
,
{
"name" : "GDK_downshoe",
"kind" : "enum member",
"protection" : "public",
"line" : 2423}
,
{
"name" : "GDK_rightshoe",
"kind" : "enum member",
"protection" : "public",
"line" : 2425}
,
{
"name" : "GDK_leftshoe",
"kind" : "enum member",
"protection" : "public",
"line" : 2427}
,
{
"name" : "GDK_lefttack",
"kind" : "enum member",
"protection" : "public",
"line" : 2429}
,
{
"name" : "GDK_righttack",
"kind" : "enum member",
"protection" : "public",
"line" : 2431}
,
{
"name" : "GDK_hebrew_doublelowline",
"kind" : "enum member",
"protection" : "public",
"line" : 2433}
,
{
"name" : "GDK_hebrew_aleph",
"kind" : "enum member",
"protection" : "public",
"line" : 2435}
,
{
"name" : "GDK_hebrew_bet",
"kind" : "enum member",
"protection" : "public",
"line" : 2437}
,
{
"name" : "GDK_hebrew_beth",
"kind" : "enum member",
"protection" : "public",
"line" : 2439}
,
{
"name" : "GDK_hebrew_gimel",
"kind" : "enum member",
"protection" : "public",
"line" : 2441}
,
{
"name" : "GDK_hebrew_gimmel",
"kind" : "enum member",
"protection" : "public",
"line" : 2443}
,
{
"name" : "GDK_hebrew_dalet",
"kind" : "enum member",
"protection" : "public",
"line" : 2445}
,
{
"name" : "GDK_hebrew_daleth",
"kind" : "enum member",
"protection" : "public",
"line" : 2447}
,
{
"name" : "GDK_hebrew_he",
"kind" : "enum member",
"protection" : "public",
"line" : 2449}
,
{
"name" : "GDK_hebrew_waw",
"kind" : "enum member",
"protection" : "public",
"line" : 2451}
,
{
"name" : "GDK_hebrew_zain",
"kind" : "enum member",
"protection" : "public",
"line" : 2453}
,
{
"name" : "GDK_hebrew_zayin",
"kind" : "enum member",
"protection" : "public",
"line" : 2455}
,
{
"name" : "GDK_hebrew_chet",
"kind" : "enum member",
"protection" : "public",
"line" : 2457}
,
{
"name" : "GDK_hebrew_het",
"kind" : "enum member",
"protection" : "public",
"line" : 2459}
,
{
"name" : "GDK_hebrew_tet",
"kind" : "enum member",
"protection" : "public",
"line" : 2461}
,
{
"name" : "GDK_hebrew_teth",
"kind" : "enum member",
"protection" : "public",
"line" : 2463}
,
{
"name" : "GDK_hebrew_yod",
"kind" : "enum member",
"protection" : "public",
"line" : 2465}
,
{
"name" : "GDK_hebrew_finalkaph",
"kind" : "enum member",
"protection" : "public",
"line" : 2467}
,
{
"name" : "GDK_hebrew_kaph",
"kind" : "enum member",
"protection" : "public",
"line" : 2469}
,
{
"name" : "GDK_hebrew_lamed",
"kind" : "enum member",
"protection" : "public",
"line" : 2471}
,
{
"name" : "GDK_hebrew_finalmem",
"kind" : "enum member",
"protection" : "public",
"line" : 2473}
,
{
"name" : "GDK_hebrew_mem",
"kind" : "enum member",
"protection" : "public",
"line" : 2475}
,
{
"name" : "GDK_hebrew_finalnun",
"kind" : "enum member",
"protection" : "public",
"line" : 2477}
,
{
"name" : "GDK_hebrew_nun",
"kind" : "enum member",
"protection" : "public",
"line" : 2479}
,
{
"name" : "GDK_hebrew_samech",
"kind" : "enum member",
"protection" : "public",
"line" : 2481}
,
{
"name" : "GDK_hebrew_samekh",
"kind" : "enum member",
"protection" : "public",
"line" : 2483}
,
{
"name" : "GDK_hebrew_ayin",
"kind" : "enum member",
"protection" : "public",
"line" : 2485}
,
{
"name" : "GDK_hebrew_finalpe",
"kind" : "enum member",
"protection" : "public",
"line" : 2487}
,
{
"name" : "GDK_hebrew_pe",
"kind" : "enum member",
"protection" : "public",
"line" : 2489}
,
{
"name" : "GDK_hebrew_finalzade",
"kind" : "enum member",
"protection" : "public",
"line" : 2491}
,
{
"name" : "GDK_hebrew_finalzadi",
"kind" : "enum member",
"protection" : "public",
"line" : 2493}
,
{
"name" : "GDK_hebrew_zade",
"kind" : "enum member",
"protection" : "public",
"line" : 2495}
,
{
"name" : "GDK_hebrew_zadi",
"kind" : "enum member",
"protection" : "public",
"line" : 2497}
,
{
"name" : "GDK_hebrew_qoph",
"kind" : "enum member",
"protection" : "public",
"line" : 2499}
,
{
"name" : "GDK_hebrew_kuf",
"kind" : "enum member",
"protection" : "public",
"line" : 2501}
,
{
"name" : "GDK_hebrew_resh",
"kind" : "enum member",
"protection" : "public",
"line" : 2503}
,
{
"name" : "GDK_hebrew_shin",
"kind" : "enum member",
"protection" : "public",
"line" : 2505}
,
{
"name" : "GDK_hebrew_taw",
"kind" : "enum member",
"protection" : "public",
"line" : 2507}
,
{
"name" : "GDK_hebrew_taf",
"kind" : "enum member",
"protection" : "public",
"line" : 2509}
,
{
"name" : "GDK_Hebrew_switch",
"kind" : "enum member",
"protection" : "public",
"line" : 2511}
,
{
"name" : "GDK_Thai_kokai",
"kind" : "enum member",
"protection" : "public",
"line" : 2513}
,
{
"name" : "GDK_Thai_khokhai",
"kind" : "enum member",
"protection" : "public",
"line" : 2515}
,
{
"name" : "GDK_Thai_khokhuat",
"kind" : "enum member",
"protection" : "public",
"line" : 2517}
,
{
"name" : "GDK_Thai_khokhwai",
"kind" : "enum member",
"protection" : "public",
"line" : 2519}
,
{
"name" : "GDK_Thai_khokhon",
"kind" : "enum member",
"protection" : "public",
"line" : 2521}
,
{
"name" : "GDK_Thai_khorakhang",
"kind" : "enum member",
"protection" : "public",
"line" : 2523}
,
{
"name" : "GDK_Thai_ngongu",
"kind" : "enum member",
"protection" : "public",
"line" : 2525}
,
{
"name" : "GDK_Thai_chochan",
"kind" : "enum member",
"protection" : "public",
"line" : 2527}
,
{
"name" : "GDK_Thai_choching",
"kind" : "enum member",
"protection" : "public",
"line" : 2529}
,
{
"name" : "GDK_Thai_chochang",
"kind" : "enum member",
"protection" : "public",
"line" : 2531}
,
{
"name" : "GDK_Thai_soso",
"kind" : "enum member",
"protection" : "public",
"line" : 2533}
,
{
"name" : "GDK_Thai_chochoe",
"kind" : "enum member",
"protection" : "public",
"line" : 2535}
,
{
"name" : "GDK_Thai_yoying",
"kind" : "enum member",
"protection" : "public",
"line" : 2537}
,
{
"name" : "GDK_Thai_dochada",
"kind" : "enum member",
"protection" : "public",
"line" : 2539}
,
{
"name" : "GDK_Thai_topatak",
"kind" : "enum member",
"protection" : "public",
"line" : 2541}
,
{
"name" : "GDK_Thai_thothan",
"kind" : "enum member",
"protection" : "public",
"line" : 2543}
,
{
"name" : "GDK_Thai_thonangmontho",
"kind" : "enum member",
"protection" : "public",
"line" : 2545}
,
{
"name" : "GDK_Thai_thophuthao",
"kind" : "enum member",
"protection" : "public",
"line" : 2547}
,
{
"name" : "GDK_Thai_nonen",
"kind" : "enum member",
"protection" : "public",
"line" : 2549}
,
{
"name" : "GDK_Thai_dodek",
"kind" : "enum member",
"protection" : "public",
"line" : 2551}
,
{
"name" : "GDK_Thai_totao",
"kind" : "enum member",
"protection" : "public",
"line" : 2553}
,
{
"name" : "GDK_Thai_thothung",
"kind" : "enum member",
"protection" : "public",
"line" : 2555}
,
{
"name" : "GDK_Thai_thothahan",
"kind" : "enum member",
"protection" : "public",
"line" : 2557}
,
{
"name" : "GDK_Thai_thothong",
"kind" : "enum member",
"protection" : "public",
"line" : 2559}
,
{
"name" : "GDK_Thai_nonu",
"kind" : "enum member",
"protection" : "public",
"line" : 2561}
,
{
"name" : "GDK_Thai_bobaimai",
"kind" : "enum member",
"protection" : "public",
"line" : 2563}
,
{
"name" : "GDK_Thai_popla",
"kind" : "enum member",
"protection" : "public",
"line" : 2565}
,
{
"name" : "GDK_Thai_phophung",
"kind" : "enum member",
"protection" : "public",
"line" : 2567}
,
{
"name" : "GDK_Thai_fofa",
"kind" : "enum member",
"protection" : "public",
"line" : 2569}
,
{
"name" : "GDK_Thai_phophan",
"kind" : "enum member",
"protection" : "public",
"line" : 2571}
,
{
"name" : "GDK_Thai_fofan",
"kind" : "enum member",
"protection" : "public",
"line" : 2573}
,
{
"name" : "GDK_Thai_phosamphao",
"kind" : "enum member",
"protection" : "public",
"line" : 2575}
,
{
"name" : "GDK_Thai_moma",
"kind" : "enum member",
"protection" : "public",
"line" : 2577}
,
{
"name" : "GDK_Thai_yoyak",
"kind" : "enum member",
"protection" : "public",
"line" : 2579}
,
{
"name" : "GDK_Thai_rorua",
"kind" : "enum member",
"protection" : "public",
"line" : 2581}
,
{
"name" : "GDK_Thai_ru",
"kind" : "enum member",
"protection" : "public",
"line" : 2583}
,
{
"name" : "GDK_Thai_loling",
"kind" : "enum member",
"protection" : "public",
"line" : 2585}
,
{
"name" : "GDK_Thai_lu",
"kind" : "enum member",
"protection" : "public",
"line" : 2587}
,
{
"name" : "GDK_Thai_wowaen",
"kind" : "enum member",
"protection" : "public",
"line" : 2589}
,
{
"name" : "GDK_Thai_sosala",
"kind" : "enum member",
"protection" : "public",
"line" : 2591}
,
{
"name" : "GDK_Thai_sorusi",
"kind" : "enum member",
"protection" : "public",
"line" : 2593}
,
{
"name" : "GDK_Thai_sosua",
"kind" : "enum member",
"protection" : "public",
"line" : 2595}
,
{
"name" : "GDK_Thai_hohip",
"kind" : "enum member",
"protection" : "public",
"line" : 2597}
,
{
"name" : "GDK_Thai_lochula",
"kind" : "enum member",
"protection" : "public",
"line" : 2599}
,
{
"name" : "GDK_Thai_oang",
"kind" : "enum member",
"protection" : "public",
"line" : 2601}
,
{
"name" : "GDK_Thai_honokhuk",
"kind" : "enum member",
"protection" : "public",
"line" : 2603}
,
{
"name" : "GDK_Thai_paiyannoi",
"kind" : "enum member",
"protection" : "public",
"line" : 2605}
,
{
"name" : "GDK_Thai_saraa",
"kind" : "enum member",
"protection" : "public",
"line" : 2607}
,
{
"name" : "GDK_Thai_maihanakat",
"kind" : "enum member",
"protection" : "public",
"line" : 2609}
,
{
"name" : "GDK_Thai_saraaa",
"kind" : "enum member",
"protection" : "public",
"line" : 2611}
,
{
"name" : "GDK_Thai_saraam",
"kind" : "enum member",
"protection" : "public",
"line" : 2613}
,
{
"name" : "GDK_Thai_sarai",
"kind" : "enum member",
"protection" : "public",
"line" : 2615}
,
{
"name" : "GDK_Thai_saraii",
"kind" : "enum member",
"protection" : "public",
"line" : 2617}
,
{
"name" : "GDK_Thai_saraue",
"kind" : "enum member",
"protection" : "public",
"line" : 2619}
,
{
"name" : "GDK_Thai_sarauee",
"kind" : "enum member",
"protection" : "public",
"line" : 2621}
,
{
"name" : "GDK_Thai_sarau",
"kind" : "enum member",
"protection" : "public",
"line" : 2623}
,
{
"name" : "GDK_Thai_sarauu",
"kind" : "enum member",
"protection" : "public",
"line" : 2625}
,
{
"name" : "GDK_Thai_phinthu",
"kind" : "enum member",
"protection" : "public",
"line" : 2627}
,
{
"name" : "GDK_Thai_maihanakat_maitho",
"kind" : "enum member",
"protection" : "public",
"line" : 2629}
,
{
"name" : "GDK_Thai_baht",
"kind" : "enum member",
"protection" : "public",
"line" : 2631}
,
{
"name" : "GDK_Thai_sarae",
"kind" : "enum member",
"protection" : "public",
"line" : 2633}
,
{
"name" : "GDK_Thai_saraae",
"kind" : "enum member",
"protection" : "public",
"line" : 2635}
,
{
"name" : "GDK_Thai_sarao",
"kind" : "enum member",
"protection" : "public",
"line" : 2637}
,
{
"name" : "GDK_Thai_saraaimaimuan",
"kind" : "enum member",
"protection" : "public",
"line" : 2639}
,
{
"name" : "GDK_Thai_saraaimaimalai",
"kind" : "enum member",
"protection" : "public",
"line" : 2641}
,
{
"name" : "GDK_Thai_lakkhangyao",
"kind" : "enum member",
"protection" : "public",
"line" : 2643}
,
{
"name" : "GDK_Thai_maiyamok",
"kind" : "enum member",
"protection" : "public",
"line" : 2645}
,
{
"name" : "GDK_Thai_maitaikhu",
"kind" : "enum member",
"protection" : "public",
"line" : 2647}
,
{
"name" : "GDK_Thai_maiek",
"kind" : "enum member",
"protection" : "public",
"line" : 2649}
,
{
"name" : "GDK_Thai_maitho",
"kind" : "enum member",
"protection" : "public",
"line" : 2651}
,
{
"name" : "GDK_Thai_maitri",
"kind" : "enum member",
"protection" : "public",
"line" : 2653}
,
{
"name" : "GDK_Thai_maichattawa",
"kind" : "enum member",
"protection" : "public",
"line" : 2655}
,
{
"name" : "GDK_Thai_thanthakhat",
"kind" : "enum member",
"protection" : "public",
"line" : 2657}
,
{
"name" : "GDK_Thai_nikhahit",
"kind" : "enum member",
"protection" : "public",
"line" : 2659}
,
{
"name" : "GDK_Thai_leksun",
"kind" : "enum member",
"protection" : "public",
"line" : 2661}
,
{
"name" : "GDK_Thai_leknung",
"kind" : "enum member",
"protection" : "public",
"line" : 2663}
,
{
"name" : "GDK_Thai_leksong",
"kind" : "enum member",
"protection" : "public",
"line" : 2665}
,
{
"name" : "GDK_Thai_leksam",
"kind" : "enum member",
"protection" : "public",
"line" : 2667}
,
{
"name" : "GDK_Thai_leksi",
"kind" : "enum member",
"protection" : "public",
"line" : 2669}
,
{
"name" : "GDK_Thai_lekha",
"kind" : "enum member",
"protection" : "public",
"line" : 2671}
,
{
"name" : "GDK_Thai_lekhok",
"kind" : "enum member",
"protection" : "public",
"line" : 2673}
,
{
"name" : "GDK_Thai_lekchet",
"kind" : "enum member",
"protection" : "public",
"line" : 2675}
,
{
"name" : "GDK_Thai_lekpaet",
"kind" : "enum member",
"protection" : "public",
"line" : 2677}
,
{
"name" : "GDK_Thai_lekkao",
"kind" : "enum member",
"protection" : "public",
"line" : 2679}
,
{
"name" : "GDK_Hangul",
"kind" : "enum member",
"protection" : "public",
"line" : 2681}
,
{
"name" : "GDK_Hangul_Start",
"kind" : "enum member",
"protection" : "public",
"line" : 2683}
,
{
"name" : "GDK_Hangul_End",
"kind" : "enum member",
"protection" : "public",
"line" : 2685}
,
{
"name" : "GDK_Hangul_Hanja",
"kind" : "enum member",
"protection" : "public",
"line" : 2687}
,
{
"name" : "GDK_Hangul_Jamo",
"kind" : "enum member",
"protection" : "public",
"line" : 2689}
,
{
"name" : "GDK_Hangul_Romaja",
"kind" : "enum member",
"protection" : "public",
"line" : 2691}
,
{
"name" : "GDK_Hangul_Codeinput",
"kind" : "enum member",
"protection" : "public",
"line" : 2693}
,
{
"name" : "GDK_Hangul_Jeonja",
"kind" : "enum member",
"protection" : "public",
"line" : 2695}
,
{
"name" : "GDK_Hangul_Banja",
"kind" : "enum member",
"protection" : "public",
"line" : 2697}
,
{
"name" : "GDK_Hangul_PreHanja",
"kind" : "enum member",
"protection" : "public",
"line" : 2699}
,
{
"name" : "GDK_Hangul_PostHanja",
"kind" : "enum member",
"protection" : "public",
"line" : 2701}
,
{
"name" : "GDK_Hangul_SingleCandidate",
"kind" : "enum member",
"protection" : "public",
"line" : 2703}
,
{
"name" : "GDK_Hangul_MultipleCandidate",
"kind" : "enum member",
"protection" : "public",
"line" : 2705}
,
{
"name" : "GDK_Hangul_PreviousCandidate",
"kind" : "enum member",
"protection" : "public",
"line" : 2707}
,
{
"name" : "GDK_Hangul_Special",
"kind" : "enum member",
"protection" : "public",
"line" : 2709}
,
{
"name" : "GDK_Hangul_switch",
"kind" : "enum member",
"protection" : "public",
"line" : 2711}
,
{
"name" : "GDK_Hangul_Kiyeog",
"kind" : "enum member",
"protection" : "public",
"line" : 2713}
,
{
"name" : "GDK_Hangul_SsangKiyeog",
"kind" : "enum member",
"protection" : "public",
"line" : 2715}
,
{
"name" : "GDK_Hangul_KiyeogSios",
"kind" : "enum member",
"protection" : "public",
"line" : 2717}
,
{
"name" : "GDK_Hangul_Nieun",
"kind" : "enum member",
"protection" : "public",
"line" : 2719}
,
{
"name" : "GDK_Hangul_NieunJieuj",
"kind" : "enum member",
"protection" : "public",
"line" : 2721}
,
{
"name" : "GDK_Hangul_NieunHieuh",
"kind" : "enum member",
"protection" : "public",
"line" : 2723}
,
{
"name" : "GDK_Hangul_Dikeud",
"kind" : "enum member",
"protection" : "public",
"line" : 2725}
,
{
"name" : "GDK_Hangul_SsangDikeud",
"kind" : "enum member",
"protection" : "public",
"line" : 2727}
,
{
"name" : "GDK_Hangul_Rieul",
"kind" : "enum member",
"protection" : "public",
"line" : 2729}
,
{
"name" : "GDK_Hangul_RieulKiyeog",
"kind" : "enum member",
"protection" : "public",
"line" : 2731}
,
{
"name" : "GDK_Hangul_RieulMieum",
"kind" : "enum member",
"protection" : "public",
"line" : 2733}
,
{
"name" : "GDK_Hangul_RieulPieub",
"kind" : "enum member",
"protection" : "public",
"line" : 2735}
,
{
"name" : "GDK_Hangul_RieulSios",
"kind" : "enum member",
"protection" : "public",
"line" : 2737}
,
{
"name" : "GDK_Hangul_RieulTieut",
"kind" : "enum member",
"protection" : "public",
"line" : 2739}
,
{
"name" : "GDK_Hangul_RieulPhieuf",
"kind" : "enum member",
"protection" : "public",
"line" : 2741}
,
{
"name" : "GDK_Hangul_RieulHieuh",
"kind" : "enum member",
"protection" : "public",
"line" : 2743}
,
{
"name" : "GDK_Hangul_Mieum",
"kind" : "enum member",
"protection" : "public",
"line" : 2745}
,
{
"name" : "GDK_Hangul_Pieub",
"kind" : "enum member",
"protection" : "public",
"line" : 2747}
,
{
"name" : "GDK_Hangul_SsangPieub",
"kind" : "enum member",
"protection" : "public",
"line" : 2749}
,
{
"name" : "GDK_Hangul_PieubSios",
"kind" : "enum member",
"protection" : "public",
"line" : 2751}
,
{
"name" : "GDK_Hangul_Sios",
"kind" : "enum member",
"protection" : "public",
"line" : 2753}
,
{
"name" : "GDK_Hangul_SsangSios",
"kind" : "enum member",
"protection" : "public",
"line" : 2755}
,
{
"name" : "GDK_Hangul_Ieung",
"kind" : "enum member",
"protection" : "public",
"line" : 2757}
,
{
"name" : "GDK_Hangul_Jieuj",
"kind" : "enum member",
"protection" : "public",
"line" : 2759}
,
{
"name" : "GDK_Hangul_SsangJieuj",
"kind" : "enum member",
"protection" : "public",
"line" : 2761}
,
{
"name" : "GDK_Hangul_Cieuc",
"kind" : "enum member",
"protection" : "public",
"line" : 2763}
,
{
"name" : "GDK_Hangul_Khieuq",
"kind" : "enum member",
"protection" : "public",
"line" : 2765}
,
{
"name" : "GDK_Hangul_Tieut",
"kind" : "enum member",
"protection" : "public",
"line" : 2767}
,
{
"name" : "GDK_Hangul_Phieuf",
"kind" : "enum member",
"protection" : "public",
"line" : 2769}
,
{
"name" : "GDK_Hangul_Hieuh",
"kind" : "enum member",
"protection" : "public",
"line" : 2771}
,
{
"name" : "GDK_Hangul_A",
"kind" : "enum member",
"protection" : "public",
"line" : 2773}
,
{
"name" : "GDK_Hangul_AE",
"kind" : "enum member",
"protection" : "public",
"line" : 2775}
,
{
"name" : "GDK_Hangul_YA",
"kind" : "enum member",
"protection" : "public",
"line" : 2777}
,
{
"name" : "GDK_Hangul_YAE",
"kind" : "enum member",
"protection" : "public",
"line" : 2779}
,
{
"name" : "GDK_Hangul_EO",
"kind" : "enum member",
"protection" : "public",
"line" : 2781}
,
{
"name" : "GDK_Hangul_E",
"kind" : "enum member",
"protection" : "public",
"line" : 2783}
,
{
"name" : "GDK_Hangul_YEO",
"kind" : "enum member",
"protection" : "public",
"line" : 2785}
,
{
"name" : "GDK_Hangul_YE",
"kind" : "enum member",
"protection" : "public",
"line" : 2787}
,
{
"name" : "GDK_Hangul_O",
"kind" : "enum member",
"protection" : "public",
"line" : 2789}
,
{
"name" : "GDK_Hangul_WA",
"kind" : "enum member",
"protection" : "public",
"line" : 2791}
,
{
"name" : "GDK_Hangul_WAE",
"kind" : "enum member",
"protection" : "public",
"line" : 2793}
,
{
"name" : "GDK_Hangul_OE",
"kind" : "enum member",
"protection" : "public",
"line" : 2795}
,
{
"name" : "GDK_Hangul_YO",
"kind" : "enum member",
"protection" : "public",
"line" : 2797}
,
{
"name" : "GDK_Hangul_U",
"kind" : "enum member",
"protection" : "public",
"line" : 2799}
,
{
"name" : "GDK_Hangul_WEO",
"kind" : "enum member",
"protection" : "public",
"line" : 2801}
,
{
"name" : "GDK_Hangul_WE",
"kind" : "enum member",
"protection" : "public",
"line" : 2803}
,
{
"name" : "GDK_Hangul_WI",
"kind" : "enum member",
"protection" : "public",
"line" : 2805}
,
{
"name" : "GDK_Hangul_YU",
"kind" : "enum member",
"protection" : "public",
"line" : 2807}
,
{
"name" : "GDK_Hangul_EU",
"kind" : "enum member",
"protection" : "public",
"line" : 2809}
,
{
"name" : "GDK_Hangul_YI",
"kind" : "enum member",
"protection" : "public",
"line" : 2811}
,
{
"name" : "GDK_Hangul_I",
"kind" : "enum member",
"protection" : "public",
"line" : 2813}
,
{
"name" : "GDK_Hangul_J_Kiyeog",
"kind" : "enum member",
"protection" : "public",
"line" : 2815}
,
{
"name" : "GDK_Hangul_J_SsangKiyeog",
"kind" : "enum member",
"protection" : "public",
"line" : 2817}
,
{
"name" : "GDK_Hangul_J_KiyeogSios",
"kind" : "enum member",
"protection" : "public",
"line" : 2819}
,
{
"name" : "GDK_Hangul_J_Nieun",
"kind" : "enum member",
"protection" : "public",
"line" : 2821}
,
{
"name" : "GDK_Hangul_J_NieunJieuj",
"kind" : "enum member",
"protection" : "public",
"line" : 2823}
,
{
"name" : "GDK_Hangul_J_NieunHieuh",
"kind" : "enum member",
"protection" : "public",
"line" : 2825}
,
{
"name" : "GDK_Hangul_J_Dikeud",
"kind" : "enum member",
"protection" : "public",
"line" : 2827}
,
{
"name" : "GDK_Hangul_J_Rieul",
"kind" : "enum member",
"protection" : "public",
"line" : 2829}
,
{
"name" : "GDK_Hangul_J_RieulKiyeog",
"kind" : "enum member",
"protection" : "public",
"line" : 2831}
,
{
"name" : "GDK_Hangul_J_RieulMieum",
"kind" : "enum member",
"protection" : "public",
"line" : 2833}
,
{
"name" : "GDK_Hangul_J_RieulPieub",
"kind" : "enum member",
"protection" : "public",
"line" : 2835}
,
{
"name" : "GDK_Hangul_J_RieulSios",
"kind" : "enum member",
"protection" : "public",
"line" : 2837}
,
{
"name" : "GDK_Hangul_J_RieulTieut",
"kind" : "enum member",
"protection" : "public",
"line" : 2839}
,
{
"name" : "GDK_Hangul_J_RieulPhieuf",
"kind" : "enum member",
"protection" : "public",
"line" : 2841}
,
{
"name" : "GDK_Hangul_J_RieulHieuh",
"kind" : "enum member",
"protection" : "public",
"line" : 2843}
,
{
"name" : "GDK_Hangul_J_Mieum",
"kind" : "enum member",
"protection" : "public",
"line" : 2845}
,
{
"name" : "GDK_Hangul_J_Pieub",
"kind" : "enum member",
"protection" : "public",
"line" : 2847}
,
{
"name" : "GDK_Hangul_J_PieubSios",
"kind" : "enum member",
"protection" : "public",
"line" : 2849}
,
{
"name" : "GDK_Hangul_J_Sios",
"kind" : "enum member",
"protection" : "public",
"line" : 2851}
,
{
"name" : "GDK_Hangul_J_SsangSios",
"kind" : "enum member",
"protection" : "public",
"line" : 2853}
,
{
"name" : "GDK_Hangul_J_Ieung",
"kind" : "enum member",
"protection" : "public",
"line" : 2855}
,
{
"name" : "GDK_Hangul_J_Jieuj",
"kind" : "enum member",
"protection" : "public",
"line" : 2857}
,
{
"name" : "GDK_Hangul_J_Cieuc",
"kind" : "enum member",
"protection" : "public",
"line" : 2859}
,
{
"name" : "GDK_Hangul_J_Khieuq",
"kind" : "enum member",
"protection" : "public",
"line" : 2861}
,
{
"name" : "GDK_Hangul_J_Tieut",
"kind" : "enum member",
"protection" : "public",
"line" : 2863}
,
{
"name" : "GDK_Hangul_J_Phieuf",
"kind" : "enum member",
"protection" : "public",
"line" : 2865}
,
{
"name" : "GDK_Hangul_J_Hieuh",
"kind" : "enum member",
"protection" : "public",
"line" : 2867}
,
{
"name" : "GDK_Hangul_RieulYeorinHieuh",
"kind" : "enum member",
"protection" : "public",
"line" : 2869}
,
{
"name" : "GDK_Hangul_SunkyeongeumMieum",
"kind" : "enum member",
"protection" : "public",
"line" : 2871}
,
{
"name" : "GDK_Hangul_SunkyeongeumPieub",
"kind" : "enum member",
"protection" : "public",
"line" : 2873}
,
{
"name" : "GDK_Hangul_PanSios",
"kind" : "enum member",
"protection" : "public",
"line" : 2875}
,
{
"name" : "GDK_Hangul_KkogjiDalrinIeung",
"kind" : "enum member",
"protection" : "public",
"line" : 2877}
,
{
"name" : "GDK_Hangul_SunkyeongeumPhieuf",
"kind" : "enum member",
"protection" : "public",
"line" : 2879}
,
{
"name" : "GDK_Hangul_YeorinHieuh",
"kind" : "enum member",
"protection" : "public",
"line" : 2881}
,
{
"name" : "GDK_Hangul_AraeA",
"kind" : "enum member",
"protection" : "public",
"line" : 2883}
,
{
"name" : "GDK_Hangul_AraeAE",
"kind" : "enum member",
"protection" : "public",
"line" : 2885}
,
{
"name" : "GDK_Hangul_J_PanSios",
"kind" : "enum member",
"protection" : "public",
"line" : 2887}
,
{
"name" : "GDK_Hangul_J_KkogjiDalrinIeung",
"kind" : "enum member",
"protection" : "public",
"line" : 2889}
,
{
"name" : "GDK_Hangul_J_YeorinHieuh",
"kind" : "enum member",
"protection" : "public",
"line" : 2891}
,
{
"name" : "GDK_Korean_Won",
"kind" : "enum member",
"protection" : "public",
"line" : 2893}
,
{
"name" : "GDK_Armenian_ligature_ew",
"kind" : "enum member",
"protection" : "public",
"line" : 2895}
,
{
"name" : "GDK_Armenian_full_stop",
"kind" : "enum member",
"protection" : "public",
"line" : 2897}
,
{
"name" : "GDK_Armenian_verjaket",
"kind" : "enum member",
"protection" : "public",
"line" : 2899}
,
{
"name" : "GDK_Armenian_separation_mark",
"kind" : "enum member",
"protection" : "public",
"line" : 2901}
,
{
"name" : "GDK_Armenian_but",
"kind" : "enum member",
"protection" : "public",
"line" : 2903}
,
{
"name" : "GDK_Armenian_hyphen",
"kind" : "enum member",
"protection" : "public",
"line" : 2905}
,
{
"name" : "GDK_Armenian_yentamna",
"kind" : "enum member",
"protection" : "public",
"line" : 2907}
,
{
"name" : "GDK_Armenian_exclam",
"kind" : "enum member",
"protection" : "public",
"line" : 2909}
,
{
"name" : "GDK_Armenian_amanak",
"kind" : "enum member",
"protection" : "public",
"line" : 2911}
,
{
"name" : "GDK_Armenian_accent",
"kind" : "enum member",
"protection" : "public",
"line" : 2913}
,
{
"name" : "GDK_Armenian_shesht",
"kind" : "enum member",
"protection" : "public",
"line" : 2915}
,
{
"name" : "GDK_Armenian_question",
"kind" : "enum member",
"protection" : "public",
"line" : 2917}
,
{
"name" : "GDK_Armenian_paruyk",
"kind" : "enum member",
"protection" : "public",
"line" : 2919}
,
{
"name" : "GDK_Armenian_AYB",
"kind" : "enum member",
"protection" : "public",
"line" : 2921}
,
{
"name" : "GDK_Armenian_ayb",
"kind" : "enum member",
"protection" : "public",
"line" : 2923}
,
{
"name" : "GDK_Armenian_BEN",
"kind" : "enum member",
"protection" : "public",
"line" : 2925}
,
{
"name" : "GDK_Armenian_ben",
"kind" : "enum member",
"protection" : "public",
"line" : 2927}
,
{
"name" : "GDK_Armenian_GIM",
"kind" : "enum member",
"protection" : "public",
"line" : 2929}
,
{
"name" : "GDK_Armenian_gim",
"kind" : "enum member",
"protection" : "public",
"line" : 2931}
,
{
"name" : "GDK_Armenian_DA",
"kind" : "enum member",
"protection" : "public",
"line" : 2933}
,
{
"name" : "GDK_Armenian_da",
"kind" : "enum member",
"protection" : "public",
"line" : 2935}
,
{
"name" : "GDK_Armenian_YECH",
"kind" : "enum member",
"protection" : "public",
"line" : 2937}
,
{
"name" : "GDK_Armenian_yech",
"kind" : "enum member",
"protection" : "public",
"line" : 2939}
,
{
"name" : "GDK_Armenian_ZA",
"kind" : "enum member",
"protection" : "public",
"line" : 2941}
,
{
"name" : "GDK_Armenian_za",
"kind" : "enum member",
"protection" : "public",
"line" : 2943}
,
{
"name" : "GDK_Armenian_E",
"kind" : "enum member",
"protection" : "public",
"line" : 2945}
,
{
"name" : "GDK_Armenian_e",
"kind" : "enum member",
"protection" : "public",
"line" : 2947}
,
{
"name" : "GDK_Armenian_AT",
"kind" : "enum member",
"protection" : "public",
"line" : 2949}
,
{
"name" : "GDK_Armenian_at",
"kind" : "enum member",
"protection" : "public",
"line" : 2951}
,
{
"name" : "GDK_Armenian_TO",
"kind" : "enum member",
"protection" : "public",
"line" : 2953}
,
{
"name" : "GDK_Armenian_to",
"kind" : "enum member",
"protection" : "public",
"line" : 2955}
,
{
"name" : "GDK_Armenian_ZHE",
"kind" : "enum member",
"protection" : "public",
"line" : 2957}
,
{
"name" : "GDK_Armenian_zhe",
"kind" : "enum member",
"protection" : "public",
"line" : 2959}
,
{
"name" : "GDK_Armenian_INI",
"kind" : "enum member",
"protection" : "public",
"line" : 2961}
,
{
"name" : "GDK_Armenian_ini",
"kind" : "enum member",
"protection" : "public",
"line" : 2963}
,
{
"name" : "GDK_Armenian_LYUN",
"kind" : "enum member",
"protection" : "public",
"line" : 2965}
,
{
"name" : "GDK_Armenian_lyun",
"kind" : "enum member",
"protection" : "public",
"line" : 2967}
,
{
"name" : "GDK_Armenian_KHE",
"kind" : "enum member",
"protection" : "public",
"line" : 2969}
,
{
"name" : "GDK_Armenian_khe",
"kind" : "enum member",
"protection" : "public",
"line" : 2971}
,
{
"name" : "GDK_Armenian_TSA",
"kind" : "enum member",
"protection" : "public",
"line" : 2973}
,
{
"name" : "GDK_Armenian_tsa",
"kind" : "enum member",
"protection" : "public",
"line" : 2975}
,
{
"name" : "GDK_Armenian_KEN",
"kind" : "enum member",
"protection" : "public",
"line" : 2977}
,
{
"name" : "GDK_Armenian_ken",
"kind" : "enum member",
"protection" : "public",
"line" : 2979}
,
{
"name" : "GDK_Armenian_HO",
"kind" : "enum member",
"protection" : "public",
"line" : 2981}
,
{
"name" : "GDK_Armenian_ho",
"kind" : "enum member",
"protection" : "public",
"line" : 2983}
,
{
"name" : "GDK_Armenian_DZA",
"kind" : "enum member",
"protection" : "public",
"line" : 2985}
,
{
"name" : "GDK_Armenian_dza",
"kind" : "enum member",
"protection" : "public",
"line" : 2987}
,
{
"name" : "GDK_Armenian_GHAT",
"kind" : "enum member",
"protection" : "public",
"line" : 2989}
,
{
"name" : "GDK_Armenian_ghat",
"kind" : "enum member",
"protection" : "public",
"line" : 2991}
,
{
"name" : "GDK_Armenian_TCHE",
"kind" : "enum member",
"protection" : "public",
"line" : 2993}
,
{
"name" : "GDK_Armenian_tche",
"kind" : "enum member",
"protection" : "public",
"line" : 2995}
,
{
"name" : "GDK_Armenian_MEN",
"kind" : "enum member",
"protection" : "public",
"line" : 2997}
,
{
"name" : "GDK_Armenian_men",
"kind" : "enum member",
"protection" : "public",
"line" : 2999}
,
{
"name" : "GDK_Armenian_HI",
"kind" : "enum member",
"protection" : "public",
"line" : 3001}
,
{
"name" : "GDK_Armenian_hi",
"kind" : "enum member",
"protection" : "public",
"line" : 3003}
,
{
"name" : "GDK_Armenian_NU",
"kind" : "enum member",
"protection" : "public",
"line" : 3005}
,
{
"name" : "GDK_Armenian_nu",
"kind" : "enum member",
"protection" : "public",
"line" : 3007}
,
{
"name" : "GDK_Armenian_SHA",
"kind" : "enum member",
"protection" : "public",
"line" : 3009}
,
{
"name" : "GDK_Armenian_sha",
"kind" : "enum member",
"protection" : "public",
"line" : 3011}
,
{
"name" : "GDK_Armenian_VO",
"kind" : "enum member",
"protection" : "public",
"line" : 3013}
,
{
"name" : "GDK_Armenian_vo",
"kind" : "enum member",
"protection" : "public",
"line" : 3015}
,
{
"name" : "GDK_Armenian_CHA",
"kind" : "enum member",
"protection" : "public",
"line" : 3017}
,
{
"name" : "GDK_Armenian_cha",
"kind" : "enum member",
"protection" : "public",
"line" : 3019}
,
{
"name" : "GDK_Armenian_PE",
"kind" : "enum member",
"protection" : "public",
"line" : 3021}
,
{
"name" : "GDK_Armenian_pe",
"kind" : "enum member",
"protection" : "public",
"line" : 3023}
,
{
"name" : "GDK_Armenian_JE",
"kind" : "enum member",
"protection" : "public",
"line" : 3025}
,
{
"name" : "GDK_Armenian_je",
"kind" : "enum member",
"protection" : "public",
"line" : 3027}
,
{
"name" : "GDK_Armenian_RA",
"kind" : "enum member",
"protection" : "public",
"line" : 3029}
,
{
"name" : "GDK_Armenian_ra",
"kind" : "enum member",
"protection" : "public",
"line" : 3031}
,
{
"name" : "GDK_Armenian_SE",
"kind" : "enum member",
"protection" : "public",
"line" : 3033}
,
{
"name" : "GDK_Armenian_se",
"kind" : "enum member",
"protection" : "public",
"line" : 3035}
,
{
"name" : "GDK_Armenian_VEV",
"kind" : "enum member",
"protection" : "public",
"line" : 3037}
,
{
"name" : "GDK_Armenian_vev",
"kind" : "enum member",
"protection" : "public",
"line" : 3039}
,
{
"name" : "GDK_Armenian_TYUN",
"kind" : "enum member",
"protection" : "public",
"line" : 3041}
,
{
"name" : "GDK_Armenian_tyun",
"kind" : "enum member",
"protection" : "public",
"line" : 3043}
,
{
"name" : "GDK_Armenian_RE",
"kind" : "enum member",
"protection" : "public",
"line" : 3045}
,
{
"name" : "GDK_Armenian_re",
"kind" : "enum member",
"protection" : "public",
"line" : 3047}
,
{
"name" : "GDK_Armenian_TSO",
"kind" : "enum member",
"protection" : "public",
"line" : 3049}
,
{
"name" : "GDK_Armenian_tso",
"kind" : "enum member",
"protection" : "public",
"line" : 3051}
,
{
"name" : "GDK_Armenian_VYUN",
"kind" : "enum member",
"protection" : "public",
"line" : 3053}
,
{
"name" : "GDK_Armenian_vyun",
"kind" : "enum member",
"protection" : "public",
"line" : 3055}
,
{
"name" : "GDK_Armenian_PYUR",
"kind" : "enum member",
"protection" : "public",
"line" : 3057}
,
{
"name" : "GDK_Armenian_pyur",
"kind" : "enum member",
"protection" : "public",
"line" : 3059}
,
{
"name" : "GDK_Armenian_KE",
"kind" : "enum member",
"protection" : "public",
"line" : 3061}
,
{
"name" : "GDK_Armenian_ke",
"kind" : "enum member",
"protection" : "public",
"line" : 3063}
,
{
"name" : "GDK_Armenian_O",
"kind" : "enum member",
"protection" : "public",
"line" : 3065}
,
{
"name" : "GDK_Armenian_o",
"kind" : "enum member",
"protection" : "public",
"line" : 3067}
,
{
"name" : "GDK_Armenian_FE",
"kind" : "enum member",
"protection" : "public",
"line" : 3069}
,
{
"name" : "GDK_Armenian_fe",
"kind" : "enum member",
"protection" : "public",
"line" : 3071}
,
{
"name" : "GDK_Armenian_apostrophe",
"kind" : "enum member",
"protection" : "public",
"line" : 3073}
,
{
"name" : "GDK_Georgian_an",
"kind" : "enum member",
"protection" : "public",
"line" : 3075}
,
{
"name" : "GDK_Georgian_ban",
"kind" : "enum member",
"protection" : "public",
"line" : 3077}
,
{
"name" : "GDK_Georgian_gan",
"kind" : "enum member",
"protection" : "public",
"line" : 3079}
,
{
"name" : "GDK_Georgian_don",
"kind" : "enum member",
"protection" : "public",
"line" : 3081}
,
{
"name" : "GDK_Georgian_en",
"kind" : "enum member",
"protection" : "public",
"line" : 3083}
,
{
"name" : "GDK_Georgian_vin",
"kind" : "enum member",
"protection" : "public",
"line" : 3085}
,
{
"name" : "GDK_Georgian_zen",
"kind" : "enum member",
"protection" : "public",
"line" : 3087}
,
{
"name" : "GDK_Georgian_tan",
"kind" : "enum member",
"protection" : "public",
"line" : 3089}
,
{
"name" : "GDK_Georgian_in",
"kind" : "enum member",
"protection" : "public",
"line" : 3091}
,
{
"name" : "GDK_Georgian_kan",
"kind" : "enum member",
"protection" : "public",
"line" : 3093}
,
{
"name" : "GDK_Georgian_las",
"kind" : "enum member",
"protection" : "public",
"line" : 3095}
,
{
"name" : "GDK_Georgian_man",
"kind" : "enum member",
"protection" : "public",
"line" : 3097}
,
{
"name" : "GDK_Georgian_nar",
"kind" : "enum member",
"protection" : "public",
"line" : 3099}
,
{
"name" : "GDK_Georgian_on",
"kind" : "enum member",
"protection" : "public",
"line" : 3101}
,
{
"name" : "GDK_Georgian_par",
"kind" : "enum member",
"protection" : "public",
"line" : 3103}
,
{
"name" : "GDK_Georgian_zhar",
"kind" : "enum member",
"protection" : "public",
"line" : 3105}
,
{
"name" : "GDK_Georgian_rae",
"kind" : "enum member",
"protection" : "public",
"line" : 3107}
,
{
"name" : "GDK_Georgian_san",
"kind" : "enum member",
"protection" : "public",
"line" : 3109}
,
{
"name" : "GDK_Georgian_tar",
"kind" : "enum member",
"protection" : "public",
"line" : 3111}
,
{
"name" : "GDK_Georgian_un",
"kind" : "enum member",
"protection" : "public",
"line" : 3113}
,
{
"name" : "GDK_Georgian_phar",
"kind" : "enum member",
"protection" : "public",
"line" : 3115}
,
{
"name" : "GDK_Georgian_khar",
"kind" : "enum member",
"protection" : "public",
"line" : 3117}
,
{
"name" : "GDK_Georgian_ghan",
"kind" : "enum member",
"protection" : "public",
"line" : 3119}
,
{
"name" : "GDK_Georgian_qar",
"kind" : "enum member",
"protection" : "public",
"line" : 3121}
,
{
"name" : "GDK_Georgian_shin",
"kind" : "enum member",
"protection" : "public",
"line" : 3123}
,
{
"name" : "GDK_Georgian_chin",
"kind" : "enum member",
"protection" : "public",
"line" : 3125}
,
{
"name" : "GDK_Georgian_can",
"kind" : "enum member",
"protection" : "public",
"line" : 3127}
,
{
"name" : "GDK_Georgian_jil",
"kind" : "enum member",
"protection" : "public",
"line" : 3129}
,
{
"name" : "GDK_Georgian_cil",
"kind" : "enum member",
"protection" : "public",
"line" : 3131}
,
{
"name" : "GDK_Georgian_char",
"kind" : "enum member",
"protection" : "public",
"line" : 3133}
,
{
"name" : "GDK_Georgian_xan",
"kind" : "enum member",
"protection" : "public",
"line" : 3135}
,
{
"name" : "GDK_Georgian_jhan",
"kind" : "enum member",
"protection" : "public",
"line" : 3137}
,
{
"name" : "GDK_Georgian_hae",
"kind" : "enum member",
"protection" : "public",
"line" : 3139}
,
{
"name" : "GDK_Georgian_he",
"kind" : "enum member",
"protection" : "public",
"line" : 3141}
,
{
"name" : "GDK_Georgian_hie",
"kind" : "enum member",
"protection" : "public",
"line" : 3143}
,
{
"name" : "GDK_Georgian_we",
"kind" : "enum member",
"protection" : "public",
"line" : 3145}
,
{
"name" : "GDK_Georgian_har",
"kind" : "enum member",
"protection" : "public",
"line" : 3147}
,
{
"name" : "GDK_Georgian_hoe",
"kind" : "enum member",
"protection" : "public",
"line" : 3149}
,
{
"name" : "GDK_Georgian_fi",
"kind" : "enum member",
"protection" : "public",
"line" : 3151}
,
{
"name" : "GDK_Xabovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 3153}
,
{
"name" : "GDK_Ibreve",
"kind" : "enum member",
"protection" : "public",
"line" : 3155}
,
{
"name" : "GDK_Zstroke",
"kind" : "enum member",
"protection" : "public",
"line" : 3157}
,
{
"name" : "GDK_Gcaron",
"kind" : "enum member",
"protection" : "public",
"line" : 3159}
,
{
"name" : "GDK_Ocaron",
"kind" : "enum member",
"protection" : "public",
"line" : 3161}
,
{
"name" : "GDK_Obarred",
"kind" : "enum member",
"protection" : "public",
"line" : 3163}
,
{
"name" : "GDK_xabovedot",
"kind" : "enum member",
"protection" : "public",
"line" : 3165}
,
{
"name" : "GDK_ibreve",
"kind" : "enum member",
"protection" : "public",
"line" : 3167}
,
{
"name" : "GDK_zstroke",
"kind" : "enum member",
"protection" : "public",
"line" : 3169}
,
{
"name" : "GDK_gcaron",
"kind" : "enum member",
"protection" : "public",
"line" : 3171}
,
{
"name" : "GDK_ocaron",
"kind" : "enum member",
"protection" : "public",
"line" : 3173}
,
{
"name" : "GDK_obarred",
"kind" : "enum member",
"protection" : "public",
"line" : 3175}
,
{
"name" : "GDK_SCHWA",
"kind" : "enum member",
"protection" : "public",
"line" : 3177}
,
{
"name" : "GDK_schwa",
"kind" : "enum member",
"protection" : "public",
"line" : 3179}
,
{
"name" : "GDK_Lbelowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 3181}
,
{
"name" : "GDK_lbelowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 3183}
,
{
"name" : "GDK_Abelowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 3185}
,
{
"name" : "GDK_abelowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 3187}
,
{
"name" : "GDK_Ahook",
"kind" : "enum member",
"protection" : "public",
"line" : 3189}
,
{
"name" : "GDK_ahook",
"kind" : "enum member",
"protection" : "public",
"line" : 3191}
,
{
"name" : "GDK_Acircumflexacute",
"kind" : "enum member",
"protection" : "public",
"line" : 3193}
,
{
"name" : "GDK_acircumflexacute",
"kind" : "enum member",
"protection" : "public",
"line" : 3195}
,
{
"name" : "GDK_Acircumflexgrave",
"kind" : "enum member",
"protection" : "public",
"line" : 3197}
,
{
"name" : "GDK_acircumflexgrave",
"kind" : "enum member",
"protection" : "public",
"line" : 3199}
,
{
"name" : "GDK_Acircumflexhook",
"kind" : "enum member",
"protection" : "public",
"line" : 3201}
,
{
"name" : "GDK_acircumflexhook",
"kind" : "enum member",
"protection" : "public",
"line" : 3203}
,
{
"name" : "GDK_Acircumflextilde",
"kind" : "enum member",
"protection" : "public",
"line" : 3205}
,
{
"name" : "GDK_acircumflextilde",
"kind" : "enum member",
"protection" : "public",
"line" : 3207}
,
{
"name" : "GDK_Acircumflexbelowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 3209}
,
{
"name" : "GDK_acircumflexbelowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 3211}
,
{
"name" : "GDK_Abreveacute",
"kind" : "enum member",
"protection" : "public",
"line" : 3213}
,
{
"name" : "GDK_abreveacute",
"kind" : "enum member",
"protection" : "public",
"line" : 3215}
,
{
"name" : "GDK_Abrevegrave",
"kind" : "enum member",
"protection" : "public",
"line" : 3217}
,
{
"name" : "GDK_abrevegrave",
"kind" : "enum member",
"protection" : "public",
"line" : 3219}
,
{
"name" : "GDK_Abrevehook",
"kind" : "enum member",
"protection" : "public",
"line" : 3221}
,
{
"name" : "GDK_abrevehook",
"kind" : "enum member",
"protection" : "public",
"line" : 3223}
,
{
"name" : "GDK_Abrevetilde",
"kind" : "enum member",
"protection" : "public",
"line" : 3225}
,
{
"name" : "GDK_abrevetilde",
"kind" : "enum member",
"protection" : "public",
"line" : 3227}
,
{
"name" : "GDK_Abrevebelowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 3229}
,
{
"name" : "GDK_abrevebelowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 3231}
,
{
"name" : "GDK_Ebelowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 3233}
,
{
"name" : "GDK_ebelowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 3235}
,
{
"name" : "GDK_Ehook",
"kind" : "enum member",
"protection" : "public",
"line" : 3237}
,
{
"name" : "GDK_ehook",
"kind" : "enum member",
"protection" : "public",
"line" : 3239}
,
{
"name" : "GDK_Etilde",
"kind" : "enum member",
"protection" : "public",
"line" : 3241}
,
{
"name" : "GDK_etilde",
"kind" : "enum member",
"protection" : "public",
"line" : 3243}
,
{
"name" : "GDK_Ecircumflexacute",
"kind" : "enum member",
"protection" : "public",
"line" : 3245}
,
{
"name" : "GDK_ecircumflexacute",
"kind" : "enum member",
"protection" : "public",
"line" : 3247}
,
{
"name" : "GDK_Ecircumflexgrave",
"kind" : "enum member",
"protection" : "public",
"line" : 3249}
,
{
"name" : "GDK_ecircumflexgrave",
"kind" : "enum member",
"protection" : "public",
"line" : 3251}
,
{
"name" : "GDK_Ecircumflexhook",
"kind" : "enum member",
"protection" : "public",
"line" : 3253}
,
{
"name" : "GDK_ecircumflexhook",
"kind" : "enum member",
"protection" : "public",
"line" : 3255}
,
{
"name" : "GDK_Ecircumflextilde",
"kind" : "enum member",
"protection" : "public",
"line" : 3257}
,
{
"name" : "GDK_ecircumflextilde",
"kind" : "enum member",
"protection" : "public",
"line" : 3259}
,
{
"name" : "GDK_Ecircumflexbelowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 3261}
,
{
"name" : "GDK_ecircumflexbelowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 3263}
,
{
"name" : "GDK_Ihook",
"kind" : "enum member",
"protection" : "public",
"line" : 3265}
,
{
"name" : "GDK_ihook",
"kind" : "enum member",
"protection" : "public",
"line" : 3267}
,
{
"name" : "GDK_Ibelowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 3269}
,
{
"name" : "GDK_ibelowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 3271}
,
{
"name" : "GDK_Obelowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 3273}
,
{
"name" : "GDK_obelowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 3275}
,
{
"name" : "GDK_Ohook",
"kind" : "enum member",
"protection" : "public",
"line" : 3277}
,
{
"name" : "GDK_ohook",
"kind" : "enum member",
"protection" : "public",
"line" : 3279}
,
{
"name" : "GDK_Ocircumflexacute",
"kind" : "enum member",
"protection" : "public",
"line" : 3281}
,
{
"name" : "GDK_ocircumflexacute",
"kind" : "enum member",
"protection" : "public",
"line" : 3283}
,
{
"name" : "GDK_Ocircumflexgrave",
"kind" : "enum member",
"protection" : "public",
"line" : 3285}
,
{
"name" : "GDK_ocircumflexgrave",
"kind" : "enum member",
"protection" : "public",
"line" : 3287}
,
{
"name" : "GDK_Ocircumflexhook",
"kind" : "enum member",
"protection" : "public",
"line" : 3289}
,
{
"name" : "GDK_ocircumflexhook",
"kind" : "enum member",
"protection" : "public",
"line" : 3291}
,
{
"name" : "GDK_Ocircumflextilde",
"kind" : "enum member",
"protection" : "public",
"line" : 3293}
,
{
"name" : "GDK_ocircumflextilde",
"kind" : "enum member",
"protection" : "public",
"line" : 3295}
,
{
"name" : "GDK_Ocircumflexbelowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 3297}
,
{
"name" : "GDK_ocircumflexbelowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 3299}
,
{
"name" : "GDK_Ohornacute",
"kind" : "enum member",
"protection" : "public",
"line" : 3301}
,
{
"name" : "GDK_ohornacute",
"kind" : "enum member",
"protection" : "public",
"line" : 3303}
,
{
"name" : "GDK_Ohorngrave",
"kind" : "enum member",
"protection" : "public",
"line" : 3305}
,
{
"name" : "GDK_ohorngrave",
"kind" : "enum member",
"protection" : "public",
"line" : 3307}
,
{
"name" : "GDK_Ohornhook",
"kind" : "enum member",
"protection" : "public",
"line" : 3309}
,
{
"name" : "GDK_ohornhook",
"kind" : "enum member",
"protection" : "public",
"line" : 3311}
,
{
"name" : "GDK_Ohorntilde",
"kind" : "enum member",
"protection" : "public",
"line" : 3313}
,
{
"name" : "GDK_ohorntilde",
"kind" : "enum member",
"protection" : "public",
"line" : 3315}
,
{
"name" : "GDK_Ohornbelowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 3317}
,
{
"name" : "GDK_ohornbelowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 3319}
,
{
"name" : "GDK_Ubelowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 3321}
,
{
"name" : "GDK_ubelowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 3323}
,
{
"name" : "GDK_Uhook",
"kind" : "enum member",
"protection" : "public",
"line" : 3325}
,
{
"name" : "GDK_uhook",
"kind" : "enum member",
"protection" : "public",
"line" : 3327}
,
{
"name" : "GDK_Uhornacute",
"kind" : "enum member",
"protection" : "public",
"line" : 3329}
,
{
"name" : "GDK_uhornacute",
"kind" : "enum member",
"protection" : "public",
"line" : 3331}
,
{
"name" : "GDK_Uhorngrave",
"kind" : "enum member",
"protection" : "public",
"line" : 3333}
,
{
"name" : "GDK_uhorngrave",
"kind" : "enum member",
"protection" : "public",
"line" : 3335}
,
{
"name" : "GDK_Uhornhook",
"kind" : "enum member",
"protection" : "public",
"line" : 3337}
,
{
"name" : "GDK_uhornhook",
"kind" : "enum member",
"protection" : "public",
"line" : 3339}
,
{
"name" : "GDK_Uhorntilde",
"kind" : "enum member",
"protection" : "public",
"line" : 3341}
,
{
"name" : "GDK_uhorntilde",
"kind" : "enum member",
"protection" : "public",
"line" : 3343}
,
{
"name" : "GDK_Uhornbelowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 3345}
,
{
"name" : "GDK_uhornbelowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 3347}
,
{
"name" : "GDK_Ybelowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 3349}
,
{
"name" : "GDK_ybelowdot",
"kind" : "enum member",
"protection" : "public",
"line" : 3351}
,
{
"name" : "GDK_Yhook",
"kind" : "enum member",
"protection" : "public",
"line" : 3353}
,
{
"name" : "GDK_yhook",
"kind" : "enum member",
"protection" : "public",
"line" : 3355}
,
{
"name" : "GDK_Ytilde",
"kind" : "enum member",
"protection" : "public",
"line" : 3357}
,
{
"name" : "GDK_ytilde",
"kind" : "enum member",
"protection" : "public",
"line" : 3359}
,
{
"name" : "GDK_Ohorn",
"kind" : "enum member",
"protection" : "public",
"line" : 3361}
,
{
"name" : "GDK_ohorn",
"kind" : "enum member",
"protection" : "public",
"line" : 3363}
,
{
"name" : "GDK_Uhorn",
"kind" : "enum member",
"protection" : "public",
"line" : 3365}
,
{
"name" : "GDK_uhorn",
"kind" : "enum member",
"protection" : "public",
"line" : 3367}
,
{
"name" : "GDK_EcuSign",
"kind" : "enum member",
"protection" : "public",
"line" : 3369}
,
{
"name" : "GDK_ColonSign",
"kind" : "enum member",
"protection" : "public",
"line" : 3371}
,
{
"name" : "GDK_CruzeiroSign",
"kind" : "enum member",
"protection" : "public",
"line" : 3373}
,
{
"name" : "GDK_FFrancSign",
"kind" : "enum member",
"protection" : "public",
"line" : 3375}
,
{
"name" : "GDK_LiraSign",
"kind" : "enum member",
"protection" : "public",
"line" : 3377}
,
{
"name" : "GDK_MillSign",
"kind" : "enum member",
"protection" : "public",
"line" : 3379}
,
{
"name" : "GDK_NairaSign",
"kind" : "enum member",
"protection" : "public",
"line" : 3381}
,
{
"name" : "GDK_PesetaSign",
"kind" : "enum member",
"protection" : "public",
"line" : 3383}
,
{
"name" : "GDK_RupeeSign",
"kind" : "enum member",
"protection" : "public",
"line" : 3385}
,
{
"name" : "GDK_WonSign",
"kind" : "enum member",
"protection" : "public",
"line" : 3387}
,
{
"name" : "GDK_NewSheqelSign",
"kind" : "enum member",
"protection" : "public",
"line" : 3389}
,
{
"name" : "GDK_DongSign",
"kind" : "enum member",
"protection" : "public",
"line" : 3391}
,
{
"name" : "GDK_EuroSign",
"kind" : "enum member",
"protection" : "public",
"line" : 3393}
,
{
"name" : "GDK_zerosuperior",
"kind" : "enum member",
"protection" : "public",
"line" : 3395}
,
{
"name" : "GDK_foursuperior",
"kind" : "enum member",
"protection" : "public",
"line" : 3397}
,
{
"name" : "GDK_fivesuperior",
"kind" : "enum member",
"protection" : "public",
"line" : 3399}
,
{
"name" : "GDK_sixsuperior",
"kind" : "enum member",
"protection" : "public",
"line" : 3401}
,
{
"name" : "GDK_sevensuperior",
"kind" : "enum member",
"protection" : "public",
"line" : 3403}
,
{
"name" : "GDK_eightsuperior",
"kind" : "enum member",
"protection" : "public",
"line" : 3405}
,
{
"name" : "GDK_ninesuperior",
"kind" : "enum member",
"protection" : "public",
"line" : 3407}
,
{
"name" : "GDK_zerosubscript",
"kind" : "enum member",
"protection" : "public",
"line" : 3409}
,
{
"name" : "GDK_onesubscript",
"kind" : "enum member",
"protection" : "public",
"line" : 3411}
,
{
"name" : "GDK_twosubscript",
"kind" : "enum member",
"protection" : "public",
"line" : 3413}
,
{
"name" : "GDK_threesubscript",
"kind" : "enum member",
"protection" : "public",
"line" : 3415}
,
{
"name" : "GDK_foursubscript",
"kind" : "enum member",
"protection" : "public",
"line" : 3417}
,
{
"name" : "GDK_fivesubscript",
"kind" : "enum member",
"protection" : "public",
"line" : 3419}
,
{
"name" : "GDK_sixsubscript",
"kind" : "enum member",
"protection" : "public",
"line" : 3421}
,
{
"name" : "GDK_sevensubscript",
"kind" : "enum member",
"protection" : "public",
"line" : 3423}
,
{
"name" : "GDK_eightsubscript",
"kind" : "enum member",
"protection" : "public",
"line" : 3425}
,
{
"name" : "GDK_ninesubscript",
"kind" : "enum member",
"protection" : "public",
"line" : 3427}
,
{
"name" : "GDK_partdifferential",
"kind" : "enum member",
"protection" : "public",
"line" : 3429}
,
{
"name" : "GDK_emptyset",
"kind" : "enum member",
"protection" : "public",
"line" : 3431}
,
{
"name" : "GDK_elementof",
"kind" : "enum member",
"protection" : "public",
"line" : 3433}
,
{
"name" : "GDK_notelementof",
"kind" : "enum member",
"protection" : "public",
"line" : 3435}
,
{
"name" : "GDK_containsas",
"kind" : "enum member",
"protection" : "public",
"line" : 3437}
,
{
"name" : "GDK_squareroot",
"kind" : "enum member",
"protection" : "public",
"line" : 3439}
,
{
"name" : "GDK_cuberoot",
"kind" : "enum member",
"protection" : "public",
"line" : 3441}
,
{
"name" : "GDK_fourthroot",
"kind" : "enum member",
"protection" : "public",
"line" : 3443}
,
{
"name" : "GDK_dintegral",
"kind" : "enum member",
"protection" : "public",
"line" : 3445}
,
{
"name" : "GDK_tintegral",
"kind" : "enum member",
"protection" : "public",
"line" : 3447}
,
{
"name" : "GDK_because",
"kind" : "enum member",
"protection" : "public",
"line" : 3449}
,
{
"name" : "GDK_approxeq",
"kind" : "enum member",
"protection" : "public",
"line" : 3451}
,
{
"name" : "GDK_notapproxeq",
"kind" : "enum member",
"protection" : "public",
"line" : 3453}
,
{
"name" : "GDK_notidentical",
"kind" : "enum member",
"protection" : "public",
"line" : 3455}
,
{
"name" : "GDK_stricteq",
"kind" : "enum member",
"protection" : "public",
"line" : 3457}
]
}
]
}
,
{
"name" : "gdk.Pixbuf",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/Pixbuf.d",
"members" : [
{
"name" : "Pixbuf",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n These functions allow to render pixbufs on drawables. Pixbufs are\n client-side images. For details on how to create and manipulate\n pixbufs, see the GdkPixbuf API documentation.\n \n",
"line" : 104,
"base" : "ObjectG",
"members" : [
{
"name" : "gdkPixbuf",
"kind" : "variable",
"protection" : "protected",
"type" : "GdkPixbuf*",
"comment" : " the main Gtk struct \n",
"line" : 108}
,
{
"name" : "getPixbufStruct",
"kind" : "function",
"protection" : "public",
"type" : "GdkPixbuf*()",
"line" : 111}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 118}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Pixbuf(GdkPixbuf* gdkPixbuf)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 126}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 144}
,
{
"name" : "getFromDrawable",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf(Drawable src, Colormap cmap, int srcX, int srcY, int destX, int destY, int width, int height)",
"comment" : "\n Transfers image data from a GdkDrawable and converts it to an RGB(A)\n representation inside a GdkPixbuf. In other words, copies\n image data from a server-side drawable to a client-side RGB(A) buffer.\n This allows you to efficiently read individual pixels on the client side.\n If the drawable src has no colormap (gdk_drawable_get_colormap()\n returns NULL), then a suitable colormap must be specified.\n Typically a GdkWindow or a pixmap created by passing a GdkWindow\n to gdk_pixmap_new() will already have a colormap associated with\n it. If the drawable has a colormap, the cmap argument will be\n ignored. If the drawable is a bitmap (1 bit per pixel pixmap),\n then a colormap is not required; pixels with a value of 1 are\n assumed to be white, and pixels with a value of 0 are assumed to be\n black. For taking screenshots, gdk_colormap_get_system() returns\n the correct colormap to use.\n If the specified destination pixbuf dest is NULL, then this\n function will create an RGB pixbuf with 8 bits per channel and no\n alpha, with the same size specified by the width and height\n arguments. In this case, the dest_x and dest_y arguments must be\n specified as 0. If the specified destination pixbuf is not NULL\n and it contains alpha information, then the filled pixels will be\n set to full opacity (alpha = 255).\n If the specified drawable is a pixmap, then the requested source\n rectangle must be completely contained within the pixmap, otherwise\n the function will return NULL. For pixmaps only (not for windows)\n passing -1 for width or height is allowed to mean the full width\n or height of the pixmap.\n If the specified drawable is a window, and the window is off the\n screen, then there is no image data in the obscured\/offscreen\n regions to be placed in the pixbuf. The contents of portions of the\n pixbuf corresponding to the offscreen region are undefined.\n If the window you're obtaining data from is partially obscured by\n other windows, then the contents of the pixbuf areas corresponding\n to the obscured regions are undefined.\n If the target drawable is not mapped (typically because it's\n iconified\/minimized or not on the current workspace), then NULL\n will be returned.\n If memory can't be allocated for the return value, NULL will be returned\n instead.\n (In short, there are several ways this function can fail, and if it fails\n  it returns NULL; so check the return value.)\n This function calls gdk_drawable_get_image() internally and\n converts the resulting image to a GdkPixbuf, so the\n documentation for gdk_drawable_get_image() may also be relevant.\n Params:\n \tsrc = Source drawable.\n  cmap = A colormap if src doesn't have one set.\n  srcX = Source X coordinate within drawable.\n  srcY = Source Y coordinate within drawable.\n  destX = Destination X coordinate in pixbuf, or 0 if dest is NULL.\n  destY = Destination Y coordinate in pixbuf, or 0 if dest is NULL.\n  width = Width in pixels of region to get.\n  height = Height in pixels of region to get.\n Returns:\n  The same pixbuf as dest if it was non-NULL, or a newly-created\n  pixbuf with a reference count of 1 if no destination pixbuf was specified, or NULL on error\n\t \n",
"line" : 207}
,
{
"name" : "setFromDrawable",
"kind" : "function",
"protection" : "public",
"type" : "void(Drawable src, int srcX, int srcY, int width, int height)",
"comment" : "\n SetFromDrawable is different from GetFrom Drawable as it doesn't create a new pixbuf\n\t \n",
"line" : 216}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Pixbuf(Drawable src, int srcX, int srcY, int width, int height)",
"comment" : "\n Creates a new Pixbuf from a drawable.\n this is a simplyfied GetFromDrawable\n\t \n",
"line" : 231}
,
{
"name" : "saveToBufferv",
"kind" : "function",
"protection" : "public",
"type" : "int(out char[] buffer, string type, string[] optionKeys, string[] optionValues)",
"comment" : "\n Saves pixbuf to a new buffer in format type, which is currently \"jpeg\",\n \"tiff\", \"png\", \"ico\" or \"bmp\". See gdk_pixbuf_save_to_buffer() for more details.\n Since 2.4\n Params:\n buffer =  location to receive a pointer to the new buffer.\n type =  name of file format.\n optionKeys =  name of options to set, NULL-terminated\n optionValues =  values for named options\n Returns: whether an error was set\n Throws: GException on failure.\n\t \n",
"line" : 255}
,
{
"name" : "renderThresholdAlpha",
"kind" : "function",
"protection" : "public",
"type" : "void(Bitmap bitmap, int srcX, int srcY, int destX, int destY, int width, int height, int alphaThreshold)",
"comment" : "\n Description\n\t \n\n Description\n\t \n\n Description\n\t \n\n Description\n\t \n\n Description\n\t \n\n Description\n\t \n\n Description\n\t \n\n Takes the opacity values in a rectangular portion of a pixbuf and thresholds\n them to produce a bi-level alpha mask that can be used as a clipping mask for\n a drawable.\n Params:\n bitmap = Bitmap where the bilevel mask will be painted to.\n srcX = Source X coordinate.\n srcY = source Y coordinate.\n destX = Destination X coordinate.\n destY = Destination Y coordinate.\n width = Width of region to threshold, or -1 to use pixbuf width\n height = Height of region to threshold, or -1 to use pixbuf height\n alphaThreshold = Opacity values below this will be painted as zero; all\n other values will be painted as one.\n\t \n",
"line" : 316}
,
{
"name" : "renderToDrawable",
"kind" : "function",
"protection" : "public",
"type" : "void(Drawable drawable, GC gc, int srcX, int srcY, int destX, int destY, int width, int height, GdkRgbDither dither, int xDither, int yDither)",
"comment" : "\n Warning\n gdk_pixbuf_render_to_drawable has been deprecated since version 2.4 and should not be used in newly-written code. This function is obsolete. Use gdk_draw_pixbuf() instead.\n Renders a rectangular portion of a pixbuf to a drawable while using the\n specified GC. This is done using GdkRGB, so the specified drawable must have\n the GdkRGB visual and colormap. Note that this function will ignore the\n opacity information for images with an alpha channel; the GC must already\n have the clipping mask set if you want transparent regions to show through.\n For an explanation of dither offsets, see the GdkRGB documentation. In\n brief, the dither offset is important when re-rendering partial regions of an\n image to a rendered version of the full image, or for when the offsets to a\n base position change, as in scrolling. The dither matrix has to be shifted\n for consistent visual results. If you do not have any of these cases, the\n dither offsets can be both zero.\n Params:\n drawable = Destination drawable.\n gc = GC used for rendering.\n srcX = Source X coordinate within pixbuf.\n srcY = Source Y coordinate within pixbuf.\n destX = Destination X coordinate within drawable.\n destY = Destination Y coordinate within drawable.\n width = Width of region to render, in pixels, or -1 to use pixbuf width\n height = Height of region to render, in pixels, or -1 to use pixbuf height\n dither = Dithering mode for GdkRGB.\n xDither = X offset for dither.\n yDither = Y offset for dither.\n\t \n",
"line" : 349}
,
{
"name" : "renderToDrawableAlpha",
"kind" : "function",
"protection" : "public",
"type" : "void(Drawable drawable, int srcX, int srcY, int destX, int destY, int width, int height, GdkPixbufAlphaMode alphaMode, int alphaThreshold, GdkRgbDither dither, int xDither, int yDither)",
"comment" : "\n Warning\n gdk_pixbuf_render_to_drawable_alpha has been deprecated since version 2.4 and should not be used in newly-written code. This function is obsolete. Use gdk_draw_pixbuf() instead.\n Renders a rectangular portion of a pixbuf to a drawable. The destination\n drawable must have a colormap. All windows have a colormap, however, pixmaps\n only have colormap by default if they were created with a non-NULL window argument.\n Otherwise a colormap must be set on them with gdk_drawable_set_colormap.\n On older X servers, rendering pixbufs with an alpha channel involves round trips\n to the X server, and may be somewhat slow.\n Params:\n drawable = Destination drawable.\n srcX = Source X coordinate within pixbuf.\n srcY = Source Y coordinates within pixbuf.\n destX = Destination X coordinate within drawable.\n destY = Destination Y coordinate within drawable.\n width = Width of region to render, in pixels, or -1 to use pixbuf width.\n height = Height of region to render, in pixels, or -1 to use pixbuf height.\n alphaMode = Ignored. Present for backwards compatibility.\n alphaThreshold = Ignored. Present for backwards compatibility\n dither = Dithering mode for GdkRGB.\n xDither = X offset for dither.\n yDither = Y offset for dither.\n\t \n",
"line" : 378}
,
{
"name" : "renderPixmapAndMask",
"kind" : "function",
"protection" : "public",
"type" : "void(out GdkPixmap* pixmapReturn, out Bitmap maskReturn, int alphaThreshold)",
"comment" : "\n Creates a pixmap and a mask bitmap which are returned in the pixmap_return\n and mask_return arguments, respectively, and renders a pixbuf and its\n corresponding thresholded alpha mask to them. This is merely a convenience\n function; applications that need to render pixbufs with dither offsets or to\n given drawables should use gdk_draw_pixbuf() and gdk_pixbuf_render_threshold_alpha().\n The pixmap that is created is created for the colormap returned\n by gdk_rgb_get_colormap(). You normally will want to instead use\n the actual colormap for a widget, and use\n gdk_pixbuf_render_pixmap_and_mask_for_colormap().\n If the pixbuf does not have an alpha channel, then *mask_return will be set\n to NULL.\n Params:\n pixmapReturn = Location to store a pointer to the created pixmap,\n  or NULL if the pixmap is not needed.\n maskReturn = Location to store a pointer to the created mask,\n  or NULL if the mask is not needed.\n alphaThreshold = Threshold value for opacity values.\n\t \n",
"line" : 403}
,
{
"name" : "renderPixmapAndMaskForColormap",
"kind" : "function",
"protection" : "public",
"type" : "void(Colormap colormap, out GdkPixmap* pixmapReturn, out Bitmap maskReturn, int alphaThreshold)",
"comment" : "\n Creates a pixmap and a mask bitmap which are returned in the pixmap_return\n and mask_return arguments, respectively, and renders a pixbuf and its\n corresponding tresholded alpha mask to them. This is merely a convenience\n function; applications that need to render pixbufs with dither offsets or to\n given drawables should use gdk_draw_pixbuf(), and gdk_pixbuf_render_threshold_alpha().\n The pixmap that is created uses the GdkColormap specified by colormap.\n This colormap must match the colormap of the window where the pixmap\n will eventually be used or an error will result.\n If the pixbuf does not have an alpha channel, then *mask_return will be set\n to NULL.\n Params:\n colormap = A GdkColormap\n pixmapReturn = Location to store a pointer to the created pixmap,\n  or NULL if the pixmap is not needed.\n maskReturn = Location to store a pointer to the created mask,\n  or NULL if the mask is not needed.\n alphaThreshold = Threshold value for opacity values.\n\t \n",
"line" : 432}
,
{
"name" : "getFromImage",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf(ImageGdk src, Colormap cmap, int srcX, int srcY, int destX, int destY, int width, int height)",
"comment" : "\n Same as gdk_pixbuf_get_from_drawable() but gets the pixbuf from\n an image.\n Params:\n dest = Destination pixbuf, or NULL if a new pixbuf should be created. [allow-none]\n src = Source GdkImage.\n cmap = A colormap, or NULL to use the one for src. [allow-none]\n srcX = Source X coordinate within drawable.\n srcY = Source Y coordinate within drawable.\n destX = Destination X coordinate in pixbuf, or 0 if dest is NULL.\n destY = Destination Y coordinate in pixbuf, or 0 if dest is NULL.\n width = Width in pixels of region to get.\n height = Height in pixels of region to get.\n Returns: dest, newly-created pixbuf if dest was NULL, NULL on error\n\t \n",
"line" : 457}
,
{
"name" : "getType",
"kind" : "function",
"protection" : "public",
"type" : "GType()",
"comment" : "\n\t \n",
"line" : 470}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Pixbuf(GdkColorspace colorspace, int hasAlpha, int bitsPerSample, int width, int height)",
"comment" : "\n Creates a new GdkPixbuf structure and allocates a buffer for it. The\n buffer has an optimal rowstride. Note that the buffer is not cleared;\n you will have to fill it completely yourself.\n Params:\n colorspace = Color space for image\n hasAlpha = Whether the image should have transparency information\n bitsPerSample = Number of bits per color sample\n width = Width of image in pixels, must be > 0\n height = Height of image in pixels, must be > 0\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 488}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Pixbuf(char* data, GdkColorspace colorspace, int hasAlpha, int bitsPerSample, int width, int height, int rowstride, extern (C) void function(char*, void*) destroyFn, void* destroyFnData)",
"comment" : "\n Creates a new GdkPixbuf out of in-memory image data. Currently only RGB\n images with 8 bits per sample are supported.\n Params:\n data = Image data in 8-bit\/sample packed format\n colorspace = Colorspace for the image data\n hasAlpha = Whether the data has an opacity channel\n bitsPerSample = Number of bits per sample\n width = Width of the image in pixels, must be > 0\n height = Height of the image in pixels, must be > 0\n rowstride = Distance in bytes between row starts\n destroyFn = Function used to free the data when the pixbuf's reference count\n drops to zero, or NULL if the data should not be freed. [scope async]\n destroyFnData = Closure data to pass to the destroy notification function\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 515}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Pixbuf(string[] data)",
"comment" : "\n Creates a new pixbuf by parsing XPM data in memory. This data is commonly\n the result of including an XPM file into a program's C source.\n Params:\n data = Pointer to inline XPM data.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 533}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Pixbuf(ubyte[] data, int copyPixels)",
"comment" : "\n Create a GdkPixbuf from a flat representation that is suitable for\n storing as inline data in a program. This is useful if you want to\n ship a program with images, but don't want to depend on any\n external files.\n gdk-pixbuf ships with a program called gdk-pixbuf-csource\n which allows for conversion of GdkPixbufs into such a inline representation.\n In almost all cases, you should pass the --raw flag to\n Params:\n data = Byte data containing a serialized GdkPixdata structure\n copyPixels = Whether to copy the pixel data, or use direct pointers\n  data for the resulting pixbuf\n Throws: GException on failure.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 559}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Pixbuf(Pixbuf srcPixbuf, int srcX, int srcY, int width, int height)",
"comment" : "\n Creates a new pixbuf which represents a sub-region of\n src_pixbuf. The new pixbuf shares its pixels with the\n original pixbuf, so writing to one affects both.\n The new pixbuf holds a reference to src_pixbuf, so\n src_pixbuf will not be finalized until the new pixbuf\n is finalized.\n Params:\n srcPixbuf = a GdkPixbuf\n srcX = X coord in src_pixbuf\n srcY = Y coord in src_pixbuf\n width = width of region in src_pixbuf\n height = height of region in src_pixbuf\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 593}
,
{
"name" : "copy",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf()",
"comment" : "\n Creates a new GdkPixbuf with a copy of the information in the specified\n pixbuf.\n Returns: A newly-created pixbuf with a reference count of 1, or NULL if not enough memory could be allocated. [transfer full]\n\t \n",
"line" : 609}
,
{
"name" : "getColorspace",
"kind" : "function",
"protection" : "public",
"type" : "GdkColorspace()",
"comment" : "\n Queries the color space of a pixbuf.\n Returns: Color space.\n\t \n",
"line" : 624}
,
{
"name" : "getNChannels",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Queries the number of channels of a pixbuf.\n Returns: Number of channels.\n\t \n",
"line" : 634}
,
{
"name" : "getHasAlpha",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Queries whether a pixbuf has an alpha channel (opacity information).\n Returns: TRUE if it has an alpha channel, FALSE otherwise.\n\t \n",
"line" : 644}
,
{
"name" : "getBitsPerSample",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Queries the number of bits per color sample in a pixbuf.\n Returns: Number of bits per color sample.\n\t \n",
"line" : 654}
,
{
"name" : "getPixels",
"kind" : "function",
"protection" : "public",
"type" : "char*()",
"comment" : "\n Queries a pointer to the pixel data of a pixbuf.\n Returns: A pointer to the pixbuf's pixel data. Please see ??? for information about how the pixel data is stored in memory.\n\t \n",
"line" : 664}
,
{
"name" : "getWidth",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Queries the width of a pixbuf.\n Returns: Width in pixels.\n\t \n",
"line" : 674}
,
{
"name" : "getHeight",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Queries the height of a pixbuf.\n Returns: Height in pixels.\n\t \n",
"line" : 684}
,
{
"name" : "getRowstride",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Queries the rowstride of a pixbuf, which is the number of bytes between the start of a row\n and the start of the next row.\n Returns: Distance between row starts.\n\t \n",
"line" : 695}
,
{
"name" : "getOption",
"kind" : "function",
"protection" : "public",
"type" : "string(string key)",
"comment" : "\n Looks up key in the list of options that may have been attached to the\n pixbuf when it was loaded, or that may have been attached by another\n function using gdk_pixbuf_set_option().\n For instance, the ANI loader provides \"Title\" and \"Artist\" options.\n The ICO, XBM, and XPM loaders provide \"x_hot\" and \"y_hot\" hot-spot\n options for cursor definitions. The PNG loader provides the tEXt ancillary\n chunk key\/value pairs as options. Since 2.12, the TIFF and JPEG loaders\n return an \"orientation\" option string that corresponds to the embedded\n TIFF\/Exif orientation tag (if present).\n Params:\n key = a nul-terminated string.\n Returns: the value associated with key. This is a nul-terminated string that should not be freed or NULL if key was not found.\n\t \n",
"line" : 715}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Pixbuf(string filename)",
"comment" : "\n Creates a new pixbuf by loading an image from a file. The file format is\n detected automatically. If NULL is returned, then error will be set.\n Possible errors are in the GDK_PIXBUF_ERROR and G_FILE_ERROR domains.\n Params:\n filename = Name of file to load, in the GLib file name encoding\n Throws: GException on failure.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 730}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Pixbuf(string filename, int width, int height)",
"comment" : "\n Creates a new pixbuf by loading an image from a file.\n The file format is detected automatically. If NULL is returned, then\n error will be set. Possible errors are in the GDK_PIXBUF_ERROR and\n G_FILE_ERROR domains.\n The image will be scaled to fit in the requested size, preserving\n the image's aspect ratio. Note that the returned pixbuf may be smaller\n than width x height, if the aspect ratio requires it. To load\n and image at the requested size, regardless of aspect ratio, use\n gdk_pixbuf_new_from_file_at_scale().\n Since 2.4\n Params:\n filename = Name of file to load, in the GLib file name encoding\n width = The width the image should have or -1 to not constrain the width\n height = The height the image should have or -1 to not constrain the height\n Throws: GException on failure.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 767}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Pixbuf(string filename, int width, int height, int preserveAspectRatio)",
"comment" : "\n Creates a new pixbuf by loading an image from a file. The file format is\n detected automatically. If NULL is returned, then error will be set.\n Possible errors are in the GDK_PIXBUF_ERROR and G_FILE_ERROR domains.\n The image will be scaled to fit in the requested size, optionally preserving\n the image's aspect ratio.\n When preserving the aspect ratio, a width of -1 will cause the image\n to be scaled to the exact given height, and a height of -1 will cause\n the image to be scaled to the exact given width. When not preserving\n aspect ratio, a width or height of -1 means to not scale the image\n at all in that dimension. Negative values for width and height are\n allowed since 2.8.\n Since 2.6\n Params:\n filename = Name of file to load, in the GLib file name encoding\n width = The width the image should have or -1 to not constrain the width\n height = The height the image should have or -1 to not constrain the height\n preserveAspectRatio = TRUE to preserve the image's aspect ratio\n Throws: GException on failure.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 807}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Pixbuf(InputStream stream, Cancellable cancellable)",
"comment" : "\n Creates a new pixbuf by loading an image from an input stream.\n The file format is detected automatically. If NULL is returned, then\n error will be set. The cancellable can be used to abort the operation\n from another thread. If the operation was cancelled, the error\n GIO_ERROR_CANCELLED will be returned. Other possible errors are in\n the GDK_PIXBUF_ERROR and G_IO_ERROR domains.\n The stream is not closed.\n Since 2.14\n Params:\n stream = a GInputStream to load the pixbuf from\n cancellable = optional GCancellable object, NULL to ignore\n Throws: GException on failure.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 841}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Pixbuf(InputStream stream, int width, int height, int preserveAspectRatio, Cancellable cancellable)",
"comment" : "\n Creates a new pixbuf by loading an image from an input stream.\n The file format is detected automatically. If NULL is returned, then\n error will be set. The cancellable can be used to abort the operation\n from another thread. If the operation was cancelled, the error\n GIO_ERROR_CANCELLED will be returned. Other possible errors are in\n the GDK_PIXBUF_ERROR and G_IO_ERROR domains.\n The image will be scaled to fit in the requested size, optionally\n preserving the image's aspect ratio. When preserving the aspect ratio,\n a width of -1 will cause the image to be scaled to the exact given\n height, and a height of -1 will cause the image to be scaled to the\n exact given width. When not preserving aspect ratio, a width or\n height of -1 means to not scale the image at all in that dimension.\n The stream is not closed.\n Since 2.14\n Params:\n stream = a GInputStream to load the pixbuf from\n width = The width the image should have or -1 to not constrain the width\n height = The height the image should have or -1 to not constrain the height\n preserveAspectRatio = TRUE to preserve the image's aspect ratio\n cancellable = optional GCancellable object, NULL to ignore\n Throws: GException on failure.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 884}
,
{
"name" : "savev",
"kind" : "function",
"protection" : "public",
"type" : "int(string filename, string type, string[] optionKeys, string[] optionValues)",
"comment" : "\n Saves pixbuf to a file in type, which is currently \"jpeg\", \"png\", \"tiff\", \"ico\" or \"bmp\".\n If error is set, FALSE will be returned.\n See gdk_pixbuf_save() for more details.\n Params:\n filename = name of file to save.\n type = name of file format.\n optionKeys = name of options to set, NULL-terminated\n optionValues = values for named options\n Returns: whether an error was set\n Throws: GException on failure.\n\t \n",
"line" : 915}
,
{
"name" : "saveToCallbackv",
"kind" : "function",
"protection" : "public",
"type" : "int(extern (C) int function(char*, ulong, GError**, void*) saveFunc, void* userData, string type, string[] optionKeys, string[] optionValues)",
"comment" : "\n Saves pixbuf to a callback in format type, which is currently \"jpeg\",\n \"png\", \"tiff\", \"ico\" or \"bmp\". If error is set, FALSE will be returned. See\n gdk_pixbuf_save_to_callback() for more details.\n Since 2.4\n Params:\n saveFunc = a function that is called to save each block of data that\n  the save routine generates. [scope call]\n userData = user data to pass to the save function.\n type = name of file format.\n optionKeys = name of options to set, NULL-terminated\n optionValues = values for named options\n Returns: whether an error was set\n Throws: GException on failure.\n\t \n",
"line" : 945}
,
{
"name" : "scaleSimple",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf(int destWidth, int destHeight, GdkInterpType interpType)",
"comment" : "\n Create a new GdkPixbuf containing a copy of src scaled to\n dest_width x dest_height. Leaves src unaffected. interp_type\n should be GDK_INTERP_NEAREST if you want maximum speed (but when\n scaling down GDK_INTERP_NEAREST is usually unusably ugly). The\n default interp_type should be GDK_INTERP_BILINEAR which offers\n reasonable quality and speed.\n You can scale a sub-portion of src by creating a sub-pixbuf\n pointing into src; see gdk_pixbuf_new_subpixbuf().\n For more complicated scaling\/compositing see gdk_pixbuf_scale()\n and gdk_pixbuf_composite().\n Params:\n destWidth = the width of destination image\n destHeight = the height of destination image\n interpType = the interpolation type for the transformation.\n Returns: the new GdkPixbuf, or NULL if not enough memory could be allocated for it. [transfer full]\n\t \n",
"line" : 977}
,
{
"name" : "scale",
"kind" : "function",
"protection" : "public",
"type" : "void(Pixbuf dest, int destX, int destY, int destWidth, int destHeight, double offsetX, double offsetY, double scaleX, double scaleY, GdkInterpType interpType)",
"comment" : "\n Creates a transformation of the source image src by scaling by\n scale_x and scale_y then translating by offset_x and offset_y,\n then renders the rectangle (dest_x, dest_y, dest_width,\n dest_height) of the resulting image onto the destination image\n replacing the previous contents.\n Try to use gdk_pixbuf_scale_simple() first, this function is\n the industrial-strength power tool you can fall back to if\n gdk_pixbuf_scale_simple() isn't powerful enough.\n If the source rectangle overlaps the destination rectangle on the\n same pixbuf, it will be overwritten during the scaling which\n results in rendering artifacts.\n Params:\n dest = the GdkPixbuf into which to render the results\n destX = the left coordinate for region to render\n destY = the top coordinate for region to render\n destWidth = the width of the region to render\n destHeight = the height of the region to render\n offsetX = the offset in the X direction (currently rounded to an integer)\n offsetY = the offset in the Y direction (currently rounded to an integer)\n scaleX = the scale factor in the X direction\n scaleY = the scale factor in the Y direction\n interpType = the interpolation type for the transformation.\n\t \n",
"line" : 1012}
,
{
"name" : "compositeColorSimple",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf(int destWidth, int destHeight, GdkInterpType interpType, int overallAlpha, int checkSize, uint color1, uint color2)",
"comment" : "\n Creates a new GdkPixbuf by scaling src to dest_width x\n dest_height and compositing the result with a checkboard of colors\n color1 and color2.\n Params:\n destWidth = the width of destination image\n destHeight = the height of destination image\n interpType = the interpolation type for the transformation.\n overallAlpha = overall alpha for source image (0..255)\n checkSize = the size of checks in the checkboard (must be a power of two)\n color1 = the color of check at upper left\n color2 = the color of the other check\n Returns: the new GdkPixbuf, or NULL if not enough memory could be allocated for it. [transfer full]\n\t \n",
"line" : 1032}
,
{
"name" : "composite",
"kind" : "function",
"protection" : "public",
"type" : "void(Pixbuf dest, int destX, int destY, int destWidth, int destHeight, double offsetX, double offsetY, double scaleX, double scaleY, GdkInterpType interpType, int overallAlpha)",
"comment" : "\n Creates a transformation of the source image src by scaling by\n scale_x and scale_y then translating by offset_x and offset_y.\n This gives an image in the coordinates of the destination pixbuf.\n The rectangle (dest_x, dest_y, dest_width, dest_height)\n is then composited onto the corresponding rectangle of the\n original destination image.\n When the destination rectangle contains parts not in the source\n image, the data at the edges of the source image is replicated\n to infinity.\n Figure  1.  Compositing of pixbufs\n Params:\n dest = the GdkPixbuf into which to render the results\n destX = the left coordinate for region to render\n destY = the top coordinate for region to render\n destWidth = the width of the region to render\n destHeight = the height of the region to render\n offsetX = the offset in the X direction (currently rounded to an integer)\n offsetY = the offset in the Y direction (currently rounded to an integer)\n scaleX = the scale factor in the X direction\n scaleY = the scale factor in the Y direction\n interpType = the interpolation type for the transformation.\n overallAlpha = overall alpha for source image (0..255)\n\t \n",
"line" : 1067}
,
{
"name" : "compositeColor",
"kind" : "function",
"protection" : "public",
"type" : "void(Pixbuf dest, int destX, int destY, int destWidth, int destHeight, double offsetX, double offsetY, double scaleX, double scaleY, GdkInterpType interpType, int overallAlpha, int checkX, int checkY, int checkSize, uint color1, uint color2)",
"comment" : "\n Creates a transformation of the source image src by scaling by\n scale_x and scale_y then translating by offset_x and offset_y,\n then composites the rectangle (dest_x ,dest_y, dest_width,\n dest_height) of the resulting image with a checkboard of the\n colors color1 and color2 and renders it onto the destination\n image.\n See gdk_pixbuf_composite_color_simple() for a simpler variant of this\n function suitable for many tasks.\n Params:\n dest = the GdkPixbuf into which to render the results\n destX = the left coordinate for region to render\n destY = the top coordinate for region to render\n destWidth = the width of the region to render\n destHeight = the height of the region to render\n offsetX = the offset in the X direction (currently rounded to an integer)\n offsetY = the offset in the Y direction (currently rounded to an integer)\n scaleX = the scale factor in the X direction\n scaleY = the scale factor in the Y direction\n interpType = the interpolation type for the transformation.\n overallAlpha = overall alpha for source image (0..255)\n checkX = the X offset for the checkboard (origin of checkboard is at -check_x, -check_y)\n checkY = the Y offset for the checkboard\n checkSize = the size of checks in the checkboard (must be a power of two)\n color1 = the color of check at upper left\n color2 = the color of the other check\n\t \n",
"line" : 1100}
,
{
"name" : "rotateSimple",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf(GdkPixbufRotation angle)",
"comment" : "\n Rotates a pixbuf by a multiple of 90 degrees, and returns the\n result in a new pixbuf.\n Since 2.6\n Params:\n angle = the angle to rotate by\n Returns: the new GdkPixbuf, or NULL if not enough memory could be allocated for it. [transfer full]\n\t \n",
"line" : 1114}
,
{
"name" : "flip",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf(int horizontal)",
"comment" : "\n Flips a pixbuf horizontally or vertically and returns the\n result in a new pixbuf.\n Since 2.6\n Params:\n horizontal = TRUE to flip horizontally, FALSE to flip vertically\n Returns: the new GdkPixbuf, or NULL if not enough memory could be allocated for it. [transfer full]\n\t \n",
"line" : 1133}
,
{
"name" : "addAlpha",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf(int substituteColor, char r, char g, char b)",
"comment" : "\n Takes an existing pixbuf and adds an alpha channel to it.\n If the existing pixbuf already had an alpha channel, the channel\n values are copied from the original; otherwise, the alpha channel\n is initialized to 255 (full opacity).\n If substitute_color is TRUE, then the color specified by (r, g, b) will be\n assigned zero opacity. That is, if you pass (255, 255, 255) for the\n substitute color, all white pixels will become fully transparent.\n Params:\n substituteColor = Whether to set a color to zero opacity. If this\n is FALSE, then the (r, g, b) arguments will be ignored.\n r = Red value to substitute.\n g = Green value to substitute.\n b = Blue value to substitute.\n Returns: A newly-created pixbuf with a reference count of 1. [transfer full]\n\t \n",
"line" : 1160}
,
{
"name" : "copyArea",
"kind" : "function",
"protection" : "public",
"type" : "void(int srcX, int srcY, int width, int height, Pixbuf destPixbuf, int destX, int destY)",
"comment" : "\n Copies a rectangular area from src_pixbuf to dest_pixbuf. Conversion of\n pixbuf formats is done automatically.\n If the source rectangle overlaps the destination rectangle on the\n same pixbuf, it will be overwritten during the copy operation.\n Therefore, you can not use this function to scroll a pixbuf.\n Params:\n srcX = Source X coordinate within src_pixbuf.\n srcY = Source Y coordinate within src_pixbuf.\n width = Width of the area to copy.\n height = Height of the area to copy.\n destPixbuf = Destination pixbuf.\n destX = X coordinate within dest_pixbuf.\n destY = Y coordinate within dest_pixbuf.\n\t \n",
"line" : 1186}
,
{
"name" : "saturateAndPixelate",
"kind" : "function",
"protection" : "public",
"type" : "void(Pixbuf dest, float saturation, int pixelate)",
"comment" : "\n Modifies saturation and optionally pixelates src, placing the result in\n dest. src and dest may be the same pixbuf with no ill effects. If\n saturation is 1.0 then saturation is not changed. If it's less than 1.0,\n saturation is reduced (the image turns toward grayscale); if greater than\n 1.0, saturation is increased (the image gets more vivid colors). If pixelate\n is TRUE, then pixels are faded in a checkerboard pattern to create a\n pixelated image. src and dest must have the same image format, size, and\n rowstride.\n Params:\n dest = place to write modified version of src\n saturation = saturation factor\n pixelate = whether to pixelate\n\t \n",
"line" : 1206}
,
{
"name" : "applyEmbeddedOrientation",
"kind" : "function",
"protection" : "public",
"type" : "Pixbuf()",
"comment" : "\n Takes an existing pixbuf and checks for the presence of an\n associated \"orientation\" option, which may be provided by the\n jpeg loader (which reads the exif orientation tag) or the\n tiff loader (which reads the tiff orientation tag, and\n compensates it for the partial transforms performed by\n libtiff). If an orientation option\/tag is present, the\n appropriate transform will be performed so that the pixbuf\n is oriented correctly.\n Since 2.12\n Returns: A newly-created pixbuf, or a reference to the input pixbuf (with an increased reference count). [transfer full]\n\t \n",
"line" : 1224}
,
{
"name" : "fill",
"kind" : "function",
"protection" : "public",
"type" : "void(uint pixel)",
"comment" : "\n Clears a pixbuf to the given RGBA value, converting the RGBA value into\n the pixbuf's pixel format. The alpha will be ignored if the pixbuf\n doesn't have an alpha channel.\n Params:\n pixel = RGBA pixel to clear to\n  (0xffffffff is opaque white, 0x00000000 transparent black)\n\t \n",
"line" : 1243}
]
}
]
}
,
{
"name" : "gdk.Pixmap",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/Pixmap.d",
"members" : [
{
"name" : "Pixmap",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n Pixmaps are offscreen drawables. They can be drawn upon with the\n standard drawing primitives, then copied to another drawable (such as\n a GdkWindow) with gdk_pixmap_draw(). The depth of a pixmap\n is the number of bits per pixels. Bitmaps are simply pixmaps\n with a depth of 1. (That is, they are monochrome bitmaps - each\n pixel can be either on or off).\n GTK 3 will remove GdkPixmap and GdkBitmap. You should use cairo\n surfaces instead. However, because a lot of functions still use these\n types, they are not deprecated.\n \n",
"line" : 92,
"base" : "Drawable",
"members" : [
{
"name" : "gdkPixmap",
"kind" : "variable",
"protection" : "protected",
"type" : "GdkPixmap*",
"comment" : " the main Gtk struct \n",
"line" : 96}
,
{
"name" : "getPixmapStruct",
"kind" : "function",
"protection" : "public",
"type" : "GdkPixmap*()",
"line" : 99}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 106}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Pixmap(GdkPixmap* gdkPixmap)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 114}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 132}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Pixmap(Drawable drawable, int width, int height, int depth)",
"comment" : "\n\t \n\n Create a new pixmap with a given size and depth.\n Please use gdk_window_create_similar_surface() instead of this\n function if you're not forced to use a GdkPixmap. It is intended\n as the replacement function for this function in GTK 3.\n Params:\n drawable = A GdkDrawable, used to determine default values\n for the new pixmap. Can be NULL if depth is specified,\n width = The width of the new pixmap in pixels.\n height = The height of the new pixmap in pixels.\n depth = The depth (number of bits per pixel) of the new pixmap.\n  If -1, and drawable is not NULL, the depth of the new\n  pixmap will be equal to that of drawable.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 156}
,
{
"name" : "createFromData",
"kind" : "function",
"protection" : "public",
"type" : "Pixmap(Drawable drawable, string data, int width, int height, int depth, Color fg, Color bg)",
"comment" : "\n Warning\n gdk_pixmap_create_from_data has been deprecated since version 2.22 and should not be used in newly-written code. If you must replicate the functionality of this\n function, create a pixmap using gdk_pixmap_new(), cairo_paint() it\n with the background color and then create a Cairo image surface as\n pointed out in the docs to gdk_bitmap_create_from_data() and use\n this surface with cairo_mask_surface() to paint the foreground color.\n Create a two-color pixmap from data in XBM data.\n Params:\n drawable = a GdkDrawable, used to determine default values\n for the new pixmap. Can be NULL, if the depth is given.\n data = a pointer to the data.\n width = the width of the new pixmap in pixels.\n height = the height of the new pixmap in pixels.\n depth = the depth (number of bits per pixel) of the new pixmap.\n fg = the foreground color.\n bg = the background color.\n Returns: the GdkPixmap\n\t \n",
"line" : 186}
,
{
"name" : "createFromXpm",
"kind" : "function",
"protection" : "public",
"type" : "Pixmap(Drawable drawable, out Bitmap mask, Color transparentColor, string filename)",
"comment" : "\n Warning\n gdk_pixmap_create_from_xpm has been deprecated since version 2.22 and should not be used in newly-written code. Use a GdkPixbuf instead. You can use\n gdk_pixbuf_new_from_file() to create it.\n If you must use a pixmap, use gdk_pixmap_new() to\n create it and Cairo to draw the pixbuf onto it.\n Create a pixmap from a XPM file.\n Params:\n drawable = a GdkDrawable, used to determine default values\n for the new pixmap.\n mask = (out) a pointer to a place to store a bitmap representing\n the transparency mask of the XPM file. Can be NULL,\n in which case transparency will be ignored.\n transparentColor = the color to be used for the pixels\n that are transparent in the input file. Can be NULL,\n in which case a default color will be used.\n filename = the filename of a file containing XPM data.\n Returns: the GdkPixmap. [transfer none]\n\t \n",
"line" : 216}
,
{
"name" : "colormapCreateFromXpm",
"kind" : "function",
"protection" : "public",
"type" : "Pixmap(Drawable drawable, Colormap colormap, out Bitmap mask, Color transparentColor, string filename)",
"comment" : "\n Warning\n gdk_pixmap_colormap_create_from_xpm has been deprecated since version 2.22 and should not be used in newly-written code. Use a GdkPixbuf instead. You can use\n gdk_pixbuf_new_from_file() to create it.\n If you must use a pixmap, use gdk_pixmap_new() to\n create it and Cairo to draw the pixbuf onto it.\n Create a pixmap from a XPM file using a particular colormap.\n Params:\n drawable = a GdkDrawable, used to determine default values\n for the new pixmap. Can be NULL if colormap is given.\n colormap = the GdkColormap that the new pixmap will be use.\n If omitted, the colormap for window will be used.\n mask = a pointer to a place to store a bitmap representing\n the transparency mask of the XPM file. Can be NULL,\n in which case transparency will be ignored.\n transparentColor = the color to be used for the pixels\n that are transparent in the input file. Can be NULL,\n in which case a default color will be used.\n filename = the filename of a file containing XPM data.\n Returns: the GdkPixmap. [transfer none]\n\t \n",
"line" : 252}
,
{
"name" : "createFromXpmD",
"kind" : "function",
"protection" : "public",
"type" : "Pixmap(Drawable drawable, out Bitmap mask, Color transparentColor, string[] data)",
"comment" : "\n Warning\n gdk_pixmap_create_from_xpm_d has been deprecated since version 2.22 and should not be used in newly-written code. Use a GdkPixbuf instead. You can use\n gdk_pixbuf_new_from_xpm_data() to create it.\n If you must use a pixmap, use gdk_pixmap_new() to\n create it and Cairo to draw the pixbuf onto it.\n Create a pixmap from data in XPM format.\n Params:\n drawable = a GdkDrawable, used to determine default values\n  for the new pixmap.\n mask = Pointer to a place to store a bitmap representing\n  the transparency mask of the XPM file. Can be NULL,\n  in which case transparency will be ignored. [out]\n transparentColor = This color will be used for the pixels\n  that are transparent in the input file. Can be NULL\n  in which case a default color will be used.\n data = Pointer to a string containing the XPM data.\n Returns: the GdkPixmap. [transfer none]\n\t \n",
"line" : 286}
,
{
"name" : "colormapCreateFromXpmD",
"kind" : "function",
"protection" : "public",
"type" : "Pixmap(Drawable drawable, Colormap colormap, out Bitmap mask, Color transparentColor, string[] data)",
"comment" : "\n Warning\n gdk_pixmap_colormap_create_from_xpm_d has been deprecated since version 2.22 and should not be used in newly-written code. Use a GdkPixbuf instead. You can use\n gdk_pixbuf_new_from_xpm_data() to create it.\n If you must use a pixmap, use gdk_pixmap_new() to\n create it and Cairo to draw the pixbuf onto it.\n Create a pixmap from data in XPM format using a particular\n colormap.\n Params:\n drawable = a GdkDrawable, used to determine default values\n  for the new pixmap. Can be NULL if colormap is given.\n colormap = the GdkColormap that the new pixmap will be use.\n  If omitted, the colormap for window will be used.\n mask = a pointer to a place to store a bitmap representing\n  the transparency mask of the XPM file. Can be NULL,\n  in which case transparency will be ignored.\n transparentColor = the color to be used for the pixels\n  that are transparent in the input file. Can be NULL,\n  in which case a default color will be used.\n data = Pointer to a string containing the XPM data.\n Returns: the GdkPixmap. [transfer none]\n\t \n",
"line" : 323}
]
}
]
}
,
{
"name" : "gdk.Rectangle",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/Rectangle.d",
"members" : [
{
"name" : "Rectangle",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GDK provides the GdkPoint, GdkRectangle, GdkRegion and GdkSpan data types\n for representing pixels and sets of pixels on the screen.\n GdkPoint is a simple structure containing an x and y coordinate of a point.\n GdkRectangle is a structure holding the position and size of a rectangle.\n The intersection of two rectangles can be computed with\n gdk_rectangle_intersect(). To find the union of two rectangles use\n gdk_rectangle_union().\n GdkRegion is an opaque data type holding a set of arbitrary pixels, and is\n usually used for clipping graphical operations (see gdk_gc_set_clip_region()).\n GdkSpan is a structure holding a spanline. A spanline is a horizontal line that\n is one pixel wide. It is mainly used when rasterizing other graphics primitives.\n It can be intersected to regions by using gdk_region_spans_intersect_foreach().\n \n",
"line" : 81,
"base" : "Object",
"members" : [
{
"name" : "gdkRectangle",
"kind" : "variable",
"protection" : "protected",
"type" : "GdkRectangle*",
"comment" : " the main Gtk struct \n",
"line" : 84}
,
{
"name" : "getRectangleStruct",
"kind" : "function",
"protection" : "public",
"type" : "GdkRectangle*()",
"line" : 87}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 94}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Rectangle(GdkRectangle* gdkRectangle)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 102}
,
{
"name" : "intersect",
"kind" : "function",
"protection" : "public",
"type" : "int(Rectangle src2, Rectangle dest)",
"comment" : "\n\t \n\n Calculates the intersection of two rectangles. It is allowed for\n dest to be the same as either src1 or src2. If the rectangles\n do not intersect, dest's width and height is set to 0 and its x\n and y values are undefined. If you are only interested in whether\n the rectangles intersect, but not in the intersecting area itself,\n pass NULL for dest.\n Params:\n src2 = a GdkRectangle\n dest = return location for the\n intersection of src1 and src2, or NULL. [out caller-allocates][allow-none caller-allocates]\n Returns: TRUE if the rectangles intersect.\n\t \n",
"line" : 128}
,
{
"name" : "unio",
"kind" : "function",
"protection" : "public",
"type" : "void(Rectangle src2, Rectangle dest)",
"comment" : "\n Calculates the union of two rectangles.\n The union of rectangles src1 and src2 is the smallest rectangle which\n includes both src1 and src2 within it.\n It is allowed for dest to be the same as either src1 or src2.\n Params:\n src2 = a GdkRectangle\n dest = return location for the union of src1 and src2\n\t \n",
"line" : 143}
]
}
]
}
,
{
"name" : "gdk.Region",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/Region.d",
"members" : [
{
"name" : "Region",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GDK provides the GdkPoint, GdkRectangle, GdkRegion and GdkSpan data types\n for representing pixels and sets of pixels on the screen.\n GdkPoint is a simple structure containing an x and y coordinate of a point.\n GdkRectangle is a structure holding the position and size of a rectangle.\n The intersection of two rectangles can be computed with\n gdk_rectangle_intersect(). To find the union of two rectangles use\n gdk_rectangle_union().\n GdkRegion is an opaque data type holding a set of arbitrary pixels, and is\n usually used for clipping graphical operations (see gdk_gc_set_clip_region()).\n GdkSpan is a structure holding a spanline. A spanline is a horizontal line that\n is one pixel wide. It is mainly used when rasterizing other graphics primitives.\n It can be intersected to regions by using gdk_region_spans_intersect_foreach().\n \n",
"line" : 83,
"base" : "Object",
"members" : [
{
"name" : "gdkRegion",
"kind" : "variable",
"protection" : "protected",
"type" : "GdkRegion*",
"comment" : " the main Gtk struct \n",
"line" : 86}
,
{
"name" : "getRegionStruct",
"kind" : "function",
"protection" : "public",
"type" : "GdkRegion*()",
"line" : 89}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 96}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Region(GdkRegion* gdkRegion)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 104}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Region()",
"comment" : "\n\t \n\n Creates a new empty GdkRegion.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 121}
,
{
"name" : "polygon",
"kind" : "function",
"protection" : "public",
"type" : "Region(GdkPoint[] points, GdkFillRule fillRule)",
"comment" : "\n Warning\n gdk_region_polygon has been deprecated since version 2.22 and should not be used in newly-written code. There is no replacement. For working with paths, please\n  use Cairo.\n Creates a new GdkRegion using the polygon defined by a\n number of points.\n Params:\n points = an array of GdkPoint structs\n fillRule = specifies which pixels are included in the region when the\n  polygon overlaps itself.\n Returns: a new GdkRegion based on the given polygon\n\t \n",
"line" : 144}
,
{
"name" : "copy",
"kind" : "function",
"protection" : "public",
"type" : "Region()",
"comment" : "\n Copies region, creating an identical new region.\n Returns: a new region identical to region\n\t \n",
"line" : 159}
,
{
"name" : "rectangle",
"kind" : "function",
"protection" : "public",
"type" : "Region(Rectangle rectangle)",
"comment" : "\n Creates a new region containing the area rectangle.\n Params:\n rectangle = a GdkRectangle\n Returns: a new region\n\t \n",
"line" : 176}
,
{
"name" : "destroy",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Destroys a GdkRegion.\n\t \n",
"line" : 190}
,
{
"name" : "getClipbox",
"kind" : "function",
"protection" : "public",
"type" : "void(Rectangle rectangle)",
"comment" : "\n Obtains the smallest rectangle which includes the entire GdkRegion.\n Params:\n rectangle = return location for the clipbox\n\t \n",
"line" : 201}
,
{
"name" : "getRectangles",
"kind" : "function",
"protection" : "public",
"type" : "void(out GdkRectangle[] rectangles)",
"comment" : "\n Obtains the area covered by the region as a list of rectangles.\n The array returned in rectangles must be freed with g_free().\n Params:\n rectangles = return location for an array of rectangles. [array length=n_rectangles][transfer container length=n_rectangles]\n\t \n",
"line" : 213}
,
{
"name" : "empty",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Finds out if the GdkRegion is empty.\n Returns: TRUE if region is empty.\n\t \n",
"line" : 228}
,
{
"name" : "equal",
"kind" : "function",
"protection" : "public",
"type" : "int(Region region2)",
"comment" : "\n Finds out if the two regions are the same.\n Params:\n region2 = a GdkRegion\n Returns: TRUE if region1 and region2 are equal.\n\t \n",
"line" : 240}
,
{
"name" : "rectEqual",
"kind" : "function",
"protection" : "public",
"type" : "int(Rectangle rectangle)",
"comment" : "\n Warning\n gdk_region_rect_equal has been deprecated since version 2.22 and should not be used in newly-written code. Use gdk_region_new_rect() and gdk_region_equal() to\n  achieve the same effect.\n Finds out if a regions is the same as a rectangle.\n Since 2.18\n Params:\n rectangle = a GdkRectangle\n Returns: TRUE if region and rectangle are equal.\n\t \n",
"line" : 256}
,
{
"name" : "pointIn",
"kind" : "function",
"protection" : "public",
"type" : "int(int x, int y)",
"comment" : "\n Finds out if a point is in a region.\n Params:\n x = the x coordinate of a point\n y = the y coordinate of a point\n Returns: TRUE if the point is in region.\n\t \n",
"line" : 269}
,
{
"name" : "rectIn",
"kind" : "function",
"protection" : "public",
"type" : "GdkOverlapType(Rectangle rectangle)",
"comment" : "\n Tests whether a rectangle is within a region.\n Params:\n rectangle = a GdkRectangle.\n Returns: GDK_OVERLAP_RECTANGLE_IN, GDK_OVERLAP_RECTANGLE_OUT, or GDK_OVERLAP_RECTANGLE_PART, depending on whether the rectangle is inside, outside, or partly inside the GdkRegion, respectively.\n\t \n",
"line" : 281}
,
{
"name" : "offset",
"kind" : "function",
"protection" : "public",
"type" : "void(int dx, int dy)",
"comment" : "\n Moves a region the specified distance.\n Params:\n dx = the distance to move the region horizontally\n dy = the distance to move the region vertically\n\t \n",
"line" : 293}
,
{
"name" : "shrink",
"kind" : "function",
"protection" : "public",
"type" : "void(int dx, int dy)",
"comment" : "\n Warning\n gdk_region_shrink has been deprecated since version 2.22 and should not be used in newly-written code. There is no replacement for this function.\n Resizes a region by the specified amount.\n Positive values shrink the region. Negative values expand it.\n Params:\n dx = the number of pixels to shrink the region horizontally\n dy = the number of pixels to shrink the region vertically\n\t \n",
"line" : 308}
,
{
"name" : "unionWithRect",
"kind" : "function",
"protection" : "public",
"type" : "void(Rectangle rect)",
"comment" : "\n Sets the area of region to the union of the areas of region and\n rect. The resulting area is the set of pixels contained in\n either region or rect.\n Params:\n rect = a GdkRectangle.\n\t \n",
"line" : 321}
,
{
"name" : "intersect",
"kind" : "function",
"protection" : "public",
"type" : "void(Region source2)",
"comment" : "\n Sets the area of source1 to the intersection of the areas of source1\n and source2. The resulting area is the set of pixels contained in\n both source1 and source2.\n Params:\n source2 = another GdkRegion\n\t \n",
"line" : 334}
,
{
"name" : "unio",
"kind" : "function",
"protection" : "public",
"type" : "void(Region source2)",
"comment" : "\n Sets the area of source1 to the union of the areas of source1 and\n source2. The resulting area is the set of pixels contained in\n either source1 or source2.\n Params:\n source2 = a GdkRegion\n\t \n",
"line" : 347}
,
{
"name" : "subtract",
"kind" : "function",
"protection" : "public",
"type" : "void(Region source2)",
"comment" : "\n Subtracts the area of source2 from the area source1. The resulting\n area is the set of pixels contained in source1 but not in source2.\n Params:\n source2 = another GdkRegion\n\t \n",
"line" : 359}
,
{
"name" : "xor",
"kind" : "function",
"protection" : "public",
"type" : "void(Region source2)",
"comment" : "\n Sets the area of source1 to the exclusive-OR of the areas of source1\n and source2. The resulting area is the set of pixels contained in one\n or the other of the two sources but not in both.\n Params:\n source2 = another GdkRegion\n\t \n",
"line" : 372}
,
{
"name" : "spansIntersectForeach",
"kind" : "function",
"protection" : "public",
"type" : "void(GdkSpan[] spans, int sorted, extern (C) void function(GdkSpan*, void*) funct, void* data)",
"comment" : "\n Warning\n gdk_region_spans_intersect_foreach has been deprecated since version 2.22 and should not be used in newly-written code. There is no replacement.\n Calls a function on each span in the intersection of region and spans.\n Params:\n spans = an array of GdkSpans\n sorted = TRUE if spans is sorted wrt. the y coordinate\n data = data to pass to function\n\t \n",
"line" : 387}
]
}
]
}
,
{
"name" : "gdk.RgbCmap",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/RgbCmap.d",
"members" : [
{
"name" : "RgbCmap",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GdkRGB is a low-level module which renders RGB, grayscale, and indexed\n colormap images to a GdkDrawable. It does this as efficiently as\n possible, handling issues such as colormaps, visuals, dithering,\n temporary buffers, and so on. Most code should use the higher-level\n GdkPixbuf features in place of this module; for example,\n gdk_draw_pixbuf() uses GdkRGB in its implementation.\n GdkRGB allocates a color cube to use when rendering images. You can\n set the threshold for installing colormaps with\n gdk_rgb_set_min_colors(). The default is 5x5x5 (125). If a colorcube\n of this size or larger can be allocated in the default colormap, then\n that's done. Otherwise, GdkRGB creates its own private colormap.\n Setting it to 0 means that it always tries to use the default\n colormap, and setting it to 216 means that it always creates a private\n one if it cannot allocate the 6x6x6 colormap in the default. If you\n always want a private colormap (to avoid consuming too many colormap\n entries for other apps, say), you can use\n gdk_rgb_set_install(TRUE).\n Setting the value greater than 216 exercises a bug in older versions\n of GdkRGB. Note, however, that setting it to 0 doesn't let you get\n away with ignoring the colormap and visual - a colormap is always\n created in grayscale and direct color modes, and the visual is changed\n in cases where a \"better\" visual than the default is available.\n If GDK is built with the Sun mediaLib library, the GdkRGB functions are\n accelerated using mediaLib, which provides hardware acceleration on Intel,\n AMD, and Sparc chipsets. If desired, mediaLib support can be turned off\n by setting the GDK_DISABLE_MEDIALIB environment variable.\n $(DDOC_COMMENT example)\n \n",
"line" : 94,
"base" : "Object",
"members" : [
{
"name" : "gdkRgbCmap",
"kind" : "variable",
"protection" : "protected",
"type" : "GdkRgbCmap*",
"comment" : " the main Gtk struct \n",
"line" : 97}
,
{
"name" : "getRgbCmapStruct",
"kind" : "function",
"protection" : "public",
"type" : "GdkRgbCmap*()",
"line" : 100}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 107}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RgbCmap(GdkRgbCmap* gdkRgbCmap)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 115}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "RgbCmap(uint[] colors)",
"comment" : "\n\t \n\n Warning\n gdk_rgb_cmap_new is deprecated and should not be used in newly-written code.\n Creates a new GdkRgbCmap structure. The cmap maps color indexes to\n RGB colors. If n_colors is less than 256, then images containing\n color values greater than or equal to n_colors will produce undefined\n results, including possibly segfaults.\n Params:\n colors = The colors, represented as 0xRRGGBB integer values.\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 139}
,
{
"name" : "free",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Warning\n gdk_rgb_cmap_free is deprecated and should not be used in newly-written code.\n Frees the memory associated with a GdkRgbCmap created by gdk_rgb_cmap_new().\n\t \n",
"line" : 155}
]
}
]
}
,
{
"name" : "gdk.RGB",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/RGB.d",
"members" : [
{
"name" : "RGB",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n GdkRGB is a low-level module which renders RGB, grayscale, and indexed\n colormap images to a GdkDrawable. It does this as efficiently as\n possible, handling issues such as colormaps, visuals, dithering,\n temporary buffers, and so on. Most code should use the higher-level\n GdkPixbuf features in place of this module; for example,\n gdk_draw_pixbuf() uses GdkRGB in its implementation.\n GdkRGB allocates a color cube to use when rendering images. You can\n set the threshold for installing colormaps with\n gdk_rgb_set_min_colors(). The default is 5x5x5 (125). If a colorcube\n of this size or larger can be allocated in the default colormap, then\n that's done. Otherwise, GdkRGB creates its own private colormap.\n Setting it to 0 means that it always tries to use the default\n colormap, and setting it to 216 means that it always creates a private\n one if it cannot allocate the 6x6x6 colormap in the default. If you\n always want a private colormap (to avoid consuming too many colormap\n entries for other apps, say), you can use\n gdk_rgb_set_install(TRUE).\n Setting the value greater than 216 exercises a bug in older versions\n of GdkRGB. Note, however, that setting it to 0 doesn't let you get\n away with ignoring the colormap and visual - a colormap is always\n created in grayscale and direct color modes, and the visual is changed\n in cases where a \"better\" visual than the default is available.\n If GDK is built with the Sun mediaLib library, the GdkRGB functions are\n accelerated using mediaLib, which provides hardware acceleration on Intel,\n AMD, and Sparc chipsets. If desired, mediaLib support can be turned off\n by setting the GDK_DISABLE_MEDIALIB environment variable.\n $(DDOC_COMMENT example)\n \n",
"line" : 113,
"base" : "Object",
"members" : [
{
"name" : "rgbInit",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n\t \n\n Warning\n gdk_rgb_init is deprecated and should not be used in newly-written code.\n This function no longer does anything at all. It's completely useless\n (and harmless).\n\t \n",
"line" : 124}
,
{
"name" : "drawRgbImage",
"kind" : "function",
"protection" : "public",
"type" : "void(Drawable drawable, GC gc, int x, int y, int width, int height, GdkRgbDither dith, char* rgbBuf, int rowstride)",
"comment" : "\n Warning\n gdk_draw_rgb_image is deprecated and should not be used in newly-written code.\n Draws an RGB image in the drawable. This is the core GdkRGB\n function, and likely the only one you will need to use.\n The rowstride parameter allows for lines to be aligned more flexibly.\n For example, lines may be allocated to begin on 32-bit boundaries,\n even if the width of the rectangle is odd. Rowstride is also useful\n when drawing a subrectangle of a larger image in memory. Finally, to\n replicate the same line a number of times, the trick of setting\n rowstride to 0 is allowed.\n In general, for 0 <= i < width and 0 <= j < height,\n the pixel (x + i, y + j) is colored with red value rgb_buf[j *\n rowstride + i * 3], green value rgb_buf[j * rowstride + i * 3 +\n 1], and blue value rgb_buf[j * rowstride + i * 3 + 2].\n Params:\n drawable = The GdkDrawable to draw in (usually a GdkWindow).\n gc = The graphics context (all GDK drawing operations require one; its\n contents are ignored).\n x = The x coordinate of the top-left corner in the drawable.\n y = The y coordinate of the top-left corner in the drawable.\n width = The width of the rectangle to be drawn.\n height = The height of the rectangle to be drawn.\n dith = A GdkRgbDither value, selecting the desired dither mode.\n rgbBuf = The pixel data, represented as packed 24-bit data.\n rowstride = The number of bytes from the start of one row in rgb_buf to the\n start of the next.\n\t \n",
"line" : 158}
,
{
"name" : "drawRgbImageDithalign",
"kind" : "function",
"protection" : "public",
"type" : "void(Drawable drawable, GC gc, int x, int y, int width, int height, GdkRgbDither dith, char* rgbBuf, int rowstride, int xdith, int ydith)",
"comment" : "\n Warning\n gdk_draw_rgb_image_dithalign is deprecated and should not be used in newly-written code.\n Draws an RGB image in the drawable, with an adjustment for dither alignment.\n This function is useful when drawing dithered images into a window\n that may be scrolled. Pixel (x, y) will be drawn dithered as if its\n actual location is (x + xdith, y + ydith). Thus, if you draw an\n image into a window using zero dither alignment, then scroll up one\n pixel, subsequent draws to the window should have ydith = 1.\n Setting the dither alignment correctly allows updating of small parts\n of the screen while avoiding visible \"seams\" between the different\n dither textures.\n Params:\n drawable = The GdkDrawable to draw in (usually a GdkWindow).\n gc = The graphics context.\n x = The x coordinate of the top-left corner in the drawable.\n y = The y coordinate of the top-left corner in the drawable.\n width = The width of the rectangle to be drawn.\n height = The height of the rectangle to be drawn.\n dith = A GdkRgbDither value, selecting the desired dither mode.\n rgbBuf = The pixel data, represented as packed 24-bit data.\n rowstride = The number of bytes from the start of one row in rgb_buf to the\n start of the next.\n xdith = An x offset for dither alignment.\n ydith = A y offset for dither alignment.\n\t \n",
"line" : 190}
,
{
"name" : "drawIndexedImage",
"kind" : "function",
"protection" : "public",
"type" : "void(Drawable drawable, GC gc, int x, int y, int width, int height, GdkRgbDither dith, char* buf, int rowstride, RgbCmap cmap)",
"comment" : "\n Warning\n gdk_draw_indexed_image is deprecated and should not be used in newly-written code.\n Draws an indexed image in the drawable, using a GdkRgbCmap to assign\n actual colors to the color indices.\n Params:\n drawable = The GdkDrawable to draw in (usually a GdkWindow).\n gc = The graphics context.\n x = The x coordinate of the top-left corner in the drawable.\n y = The y coordinate of the top-left corner in the drawable.\n width = The width of the rectangle to be drawn.\n height = The height of the rectangle to be drawn.\n dith = A GdkRgbDither value, selecting the desired dither mode.\n buf = The pixel data, represented as 8-bit color indices.\n rowstride = The number of bytes from the start of one row in buf to the\n start of the next.\n cmap = The GdkRgbCmap used to assign colors to the color indices.\n\t \n",
"line" : 214}
,
{
"name" : "drawGrayImage",
"kind" : "function",
"protection" : "public",
"type" : "void(Drawable drawable, GC gc, int x, int y, int width, int height, GdkRgbDither dith, char* buf, int rowstride)",
"comment" : "\n Warning\n gdk_draw_gray_image is deprecated and should not be used in newly-written code.\n Draws a grayscale image in the drawable.\n Params:\n drawable = The GdkDrawable to draw in (usually a GdkWindow).\n gc = The graphics context.\n x = The x coordinate of the top-left corner in the drawable.\n y = The y coordinate of the top-left corner in the drawable.\n width = The width of the rectangle to be drawn.\n height = The height of the rectangle to be drawn.\n dith = A GdkRgbDither value, selecting the desired dither mode.\n buf = The pixel data, represented as 8-bit gray values.\n rowstride = The number of bytes from the start of one row in buf to the\n start of the next.\n\t \n",
"line" : 236}
,
{
"name" : "drawRgb32_Image",
"kind" : "function",
"protection" : "public",
"type" : "void(Drawable drawable, GC gc, int x, int y, int width, int height, GdkRgbDither dith, char* buf, int rowstride)",
"comment" : "\n Warning\n gdk_draw_rgb_32_image is deprecated and should not be used in newly-written code.\n Draws a padded RGB image in the drawable. The image is stored as one\n pixel per 32-bit word. It is laid out as a red byte, a green byte, a\n blue byte, and a padding byte.\n It's unlikely that this function will give significant performance\n gains in practice. In my experience, the performance gain from having\n pixels aligned to 32-bit boundaries is cancelled out by the increased\n memory bandwidth.\n Params:\n drawable = The GdkDrawable to draw in (usually a GdkWindow).\n gc = The graphics context.\n x = The x coordinate of the top-left corner in the drawable.\n y = The y coordinate of the top-left corner in the drawable.\n width = The width of the rectangle to be drawn.\n height = The height of the rectangle to be drawn.\n dith = A GdkRgbDither value, selecting the desired dither mode.\n buf = The pixel data, represented as padded 32-bit data.\n rowstride = The number of bytes from the start of one row in buf to the\n start of the next.\n\t \n",
"line" : 264}
,
{
"name" : "drawRgb32_ImageDithalign",
"kind" : "function",
"protection" : "public",
"type" : "void(Drawable drawable, GC gc, int x, int y, int width, int height, GdkRgbDither dith, char* buf, int rowstride, int xdith, int ydith)",
"comment" : "\n Warning\n gdk_draw_rgb_32_image_dithalign has been deprecated since version 2.22 and should not be used in newly-written code. Cairo handles colors automatically.\n Like gdk_draw_rgb_32_image(), but allows you to specify the dither\n offsets. See gdk_draw_rgb_image_dithalign() for more details.\n Params:\n drawable = a GdkDrawable\n gc = a GdkGC\n x = X coordinate on drawable where image should go\n y = Y coordinate on drawable where image should go\n width = width of area of image to draw\n height = height of area of image to draw\n dith = dithering mode\n buf = RGB image data\n rowstride = rowstride of RGB image data\n xdith = X dither offset\n ydith = Y dither offset\n\t \n",
"line" : 288}
,
{
"name" : "rgbGcSetForeground",
"kind" : "function",
"protection" : "public",
"type" : "void(GC gc, uint rgb)",
"comment" : "\n Warning\n gdk_rgb_gc_set_foreground is deprecated and should not be used in newly-written code.\n Sets the foreground color in gc to the specified color (or the\n closest approximation, in the case of limited visuals).\n Params:\n gc = The GdkGC to modify.\n rgb = The color, represented as a 0xRRGGBB integer value.\n\t \n",
"line" : 303}
,
{
"name" : "rgbGcSetBackground",
"kind" : "function",
"protection" : "public",
"type" : "void(GC gc, uint rgb)",
"comment" : "\n Warning\n gdk_rgb_gc_set_background is deprecated and should not be used in newly-written code.\n Sets the background color in gc to the specified color (or the\n closest approximation, in the case of limited visuals).\n Params:\n gc = The GdkGC to modify.\n rgb = The color, represented as a 0xRRGGBB integer value.\n\t \n",
"line" : 318}
,
{
"name" : "rgbXpixelFromRgb",
"kind" : "function",
"protection" : "public",
"type" : "ulong(uint rgb)",
"comment" : "\n Warning\n gdk_rgb_xpixel_from_rgb is deprecated and should not be used in newly-written code.\n Finds the X pixel closest in color to the rgb color specified. This\n value may be used to set the pixel field of\n a GdkColor struct.\n Params:\n rgb = The color, represented as a 0xRRGGBB integer value.\n Returns: The X pixel value.\n\t \n",
"line" : 334}
,
{
"name" : "rgbFindColor",
"kind" : "function",
"protection" : "public",
"type" : "void(Colormap colormap, Color color)",
"comment" : "\n Warning\n gdk_rgb_find_color has been deprecated since version 2.22 and should not be used in newly-written code. Cairo handles colors automatically.\n colormap should be the colormap for the graphics context and\n drawable you're using to draw. If you're drawing to a GtkWidget,\n call gtk_widget_get_colormap().\n color should have its red, green, and blue fields initialized;\n gdk_rgb_find_color() will fill in the pixel field with the best\n matching pixel from a color cube. The color is then ready to be\n used for drawing, e.g. you can call gdk_gc_set_foreground() which\n expects pixel to be initialized.\n In many cases, you can avoid this whole issue by calling\n gdk_gc_set_rgb_fg_color() or gdk_gc_set_rgb_bg_color(), which\n do not expect pixel to be initialized in advance. If you use those\n functions, there's no need for gdk_rgb_find_color().\n Params:\n colormap = a GdkColormap\n color = a GdkColor\n\t \n",
"line" : 359}
,
{
"name" : "rgbSetInstall",
"kind" : "function",
"protection" : "public",
"type" : "void(int install)",
"comment" : "\n Warning\n gdk_rgb_set_install is deprecated and should not be used in newly-written code.\n If install is TRUE, directs GdkRGB to always install a new \"private\"\n colormap rather than trying to find a best fit with the colors already\n allocated. Ordinarily, GdkRGB will install a colormap only if a\n sufficient cube cannot be allocated.\n A private colormap has more colors, leading to better quality display,\n but also leads to the dreaded \"colormap flashing\" effect.\n Params:\n install = TRUE to set install mode.\n\t \n",
"line" : 377}
,
{
"name" : "rgbSetMinColors",
"kind" : "function",
"protection" : "public",
"type" : "void(int minColors)",
"comment" : "\n Warning\n gdk_rgb_set_min_colors is deprecated and should not be used in newly-written code.\n Sets the minimum number of colors for the color cube. Generally,\n GdkRGB tries to allocate the largest color cube it can. If it can't\n allocate a color cube at least as large as min_colors, it installs a\n private colormap.\n Params:\n minColors = The minimum number of colors accepted.\n\t \n",
"line" : 393}
,
{
"name" : "rgbGetVisual",
"kind" : "function",
"protection" : "public",
"type" : "Visual()",
"comment" : "\n Warning\n gdk_rgb_get_visual has been deprecated since version 2.22 and should not be used in newly-written code. Use gdk_visual_get_system_visual (gdk_screen_get_default()) instead.\n Gets a \"preferred visual\" chosen by GdkRGB for rendering image data\n on the default screen. In previous versions of GDK, this was the\n only visual GdkRGB could use for rendering. In current versions,\n it's simply the visual GdkRGB would have chosen as the optimal one\n in those previous versions. GdkRGB can now render to drawables with\n any visual.\n Returns: The GdkVisual chosen by GdkRGB. [transfer none]\n\t \n",
"line" : 410}
,
{
"name" : "rgbGetColormap",
"kind" : "function",
"protection" : "public",
"type" : "Colormap()",
"comment" : "\n Warning\n gdk_rgb_get_colormap has been deprecated since version 2.22 and should not be used in newly-written code. Use gdk_screen_get_system_colormap (gdk_screen_get_default()) instead.\n Get the preferred colormap for rendering image data. Not a\n very useful function; historically, GDK could only render RGB image\n data to one colormap and visual, but in the current version it can\n render to any colormap and visual. So there's no need to call this\n function.\n Returns: the preferred colormap. [transfer none]\n\t \n",
"line" : 431}
,
{
"name" : "rgbDitherable",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Warning\n gdk_rgb_ditherable is deprecated and should not be used in newly-written code.\n Determines whether the preferred visual is ditherable. This function may be\n useful for presenting a user interface choice to the user about which\n dither mode is desired; if the display is not ditherable, it may make\n sense to gray out or hide the corresponding UI widget.\n Returns: TRUE if the preferred visual is ditherable.\n\t \n",
"line" : 451}
,
{
"name" : "rgbColormapDitherable",
"kind" : "function",
"protection" : "public",
"type" : "int(Colormap cmap)",
"comment" : "\n Warning\n gdk_rgb_colormap_ditherable is deprecated and should not be used in newly-written code.\n Determines whether the visual associated with cmap is ditherable. This\n function may be useful for presenting a user interface choice to the user\n about which dither mode is desired; if the display is not ditherable, it may\n make sense to gray out or hide the corresponding UI widget.\n Params:\n cmap = a GdkColormap\n Returns: TRUE if the visual associated with cmap is ditherable.\n\t \n",
"line" : 468}
,
{
"name" : "rgbSetVerbose",
"kind" : "function",
"protection" : "public",
"type" : "void(int verbose)",
"comment" : "\n Warning\n gdk_rgb_set_verbose is deprecated and should not be used in newly-written code.\n Sets the \"verbose\" flag. This is generally only useful for debugging.\n Params:\n verbose = TRUE if verbose messages are desired.\n\t \n",
"line" : 481}
]
}
]
}
,
{
"name" : "gdk.Screen",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/Screen.d",
"members" : [
{
"name" : "Screen",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n  GdkScreen objects are the GDK representation of a physical screen. It is used\n  throughout GDK and GTK+ to specify which screen the top level windows\n  are to be displayed on.\n  It is also used to query the screen specification and default settings such as\n  the default colormap (gdk_screen_get_default_colormap()),\n  the screen width (gdk_screen_get_width()), etc.\n Note that a screen may consist of multiple monitors which are merged to\n form a large screen area.\n \n",
"line" : 113,
"base" : "ObjectG",
"members" : [
{
"name" : "gdkScreen",
"kind" : "variable",
"protection" : "protected",
"type" : "GdkScreen*",
"comment" : " the main Gtk struct \n",
"line" : 117}
,
{
"name" : "getScreenStruct",
"kind" : "function",
"protection" : "public",
"type" : "GdkScreen*()",
"line" : 120}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 127}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Screen(GdkScreen* gdkScreen)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 135}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 153}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[const(char)[]]",
"comment" : "\n\t \n",
"line" : 161}
,
{
"name" : "onCompositedChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Screen)[]",
"line" : 163}
,
{
"name" : "addOnCompositedChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Screen) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::composited-changed signal is emitted when the composited\n status of the screen changes\n Since 2.10\n\t \n",
"line" : 169}
,
{
"name" : "callBackCompositedChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GdkScreen* screenStruct, Screen screen)",
"line" : 184}
,
{
"name" : "onMonitorsChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Screen)[]",
"line" : 192}
,
{
"name" : "addOnMonitorsChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Screen) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::monitors-changed signal is emitted when the number, size\n or position of the monitors attached to the screen change.\n Only for X11 and OS X for now. A future implementation for Win32\n may be a possibility.\n Since 2.14\n\t \n",
"line" : 200}
,
{
"name" : "callBackMonitorsChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GdkScreen* screenStruct, Screen screen)",
"line" : 215}
,
{
"name" : "onSizeChangedListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(Screen)[]",
"line" : 223}
,
{
"name" : "addOnSizeChanged",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(Screen) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::size-changed signal is emitted when the pixel width or\n height of a screen changes.\n Since 2.2\n\t \n",
"line" : 229}
,
{
"name" : "callBackSizeChanged",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GdkScreen* screenStruct, Screen screen)",
"line" : 244}
,
{
"name" : "getDefault",
"kind" : "function",
"protection" : "public",
"type" : "Screen()",
"comment" : "\n Gets the default screen for the default display. (See\n gdk_display_get_default()).\n Since 2.2\n Returns: a GdkScreen, or NULL if there is no default display. [transfer none]\n\t \n",
"line" : 259}
,
{
"name" : "getDefaultColormap",
"kind" : "function",
"protection" : "public",
"type" : "Colormap()",
"comment" : "\n Gets the default colormap for screen.\n Since 2.2\n Returns: the default GdkColormap. [transfer none]\n\t \n",
"line" : 275}
,
{
"name" : "setDefaultColormap",
"kind" : "function",
"protection" : "public",
"type" : "void(Colormap colormap)",
"comment" : "\n Sets the default colormap for screen.\n Since 2.2\n Params:\n colormap = a GdkColormap\n\t \n",
"line" : 292}
,
{
"name" : "getSystemColormap",
"kind" : "function",
"protection" : "public",
"type" : "Colormap()",
"comment" : "\n Gets the system's default colormap for screen\n Since 2.2\n Returns: the default colormap for screen. [transfer none]\n\t \n",
"line" : 303}
,
{
"name" : "getSystemVisual",
"kind" : "function",
"protection" : "public",
"type" : "Visual()",
"comment" : "\n Get the system's default visual for screen.\n This is the visual for the root window of the display.\n The return value should not be freed.\n Since 2.2\n Returns: the system visual. [transfer none]\n\t \n",
"line" : 321}
,
{
"name" : "getRgbColormap",
"kind" : "function",
"protection" : "public",
"type" : "Colormap()",
"comment" : "\n Warning\n gdk_screen_get_rgb_colormap has been deprecated since version 2.22 and should not be used in newly-written code. Use gdk_screen_get_system_colormap()\n Gets the preferred colormap for rendering image data on screen.\n Not a very useful function; historically, GDK could only render RGB\n image data to one colormap and visual, but in the current version\n it can render to any colormap and visual. So there's no need to\n call this function.\n Since 2.2\n Returns: the preferred colormap. [transfer none]\n\t \n",
"line" : 343}
,
{
"name" : "getRgbVisual",
"kind" : "function",
"protection" : "public",
"type" : "Visual()",
"comment" : "\n Warning\n gdk_screen_get_rgb_visual has been deprecated since version 2.22 and should not be used in newly-written code. Use gdk_screen_get_system_visual()\n Gets a \"preferred visual\" chosen by GdkRGB for rendering image data\n on screen. In previous versions of\n GDK, this was the only visual GdkRGB could use for rendering. In\n current versions, it's simply the visual GdkRGB would have chosen as\n the optimal one in those previous versions. GdkRGB can now render to\n drawables with any visual.\n Since 2.2\n Returns: The GdkVisual chosen by GdkRGB. [transfer none]\n\t \n",
"line" : 366}
,
{
"name" : "getRgbaColormap",
"kind" : "function",
"protection" : "public",
"type" : "Colormap()",
"comment" : "\n Gets a colormap to use for creating windows or pixmaps with an\n alpha channel. The windowing system on which GTK+ is running\n may not support this capability, in which case NULL will\n be returned. Even if a non-NULL value is returned, its\n possible that the window's alpha channel won't be honored\n when displaying the window on the screen: in particular, for\n X an appropriate windowing manager and compositing manager\n must be running to provide appropriate display.\n This functionality is not implemented in the Windows backend.\n For setting an overall opacity for a top-level window, see\n gdk_window_set_opacity().\n Since 2.8\n Returns: a colormap to use for windows with an alpha channel or NULL if the capability is not available. [transfer none]\n\t \n",
"line" : 392}
,
{
"name" : "getRgbaVisual",
"kind" : "function",
"protection" : "public",
"type" : "Visual()",
"comment" : "\n Gets a visual to use for creating windows or pixmaps with an\n alpha channel. See the docs for gdk_screen_get_rgba_colormap()\n for caveats.\n Since 2.8\n Returns: a visual to use for windows with an alpha channel or NULL if the capability is not available. [transfer none]\n\t \n",
"line" : 410}
,
{
"name" : "isComposited",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns whether windows with an RGBA visual can reasonably\n be expected to have their alpha channel drawn correctly on\n the screen.\n On X11 this function returns whether a compositing manager is\n compositing screen.\n Since 2.10\n Returns: Whether windows with RGBA visuals can reasonably be expected to have their alpha channels drawn correctly on the screen.\n\t \n",
"line" : 430}
,
{
"name" : "getRootWindow",
"kind" : "function",
"protection" : "public",
"type" : "Window()",
"comment" : "\n Gets the root window of screen.\n Since 2.2\n Returns: the root window. [transfer none]\n\t \n",
"line" : 441}
,
{
"name" : "getDisplay",
"kind" : "function",
"protection" : "public",
"type" : "Display()",
"comment" : "\n Gets the display to which the screen belongs.\n Since 2.2\n Returns: the display to which screen belongs\n\t \n",
"line" : 457}
,
{
"name" : "getNumber",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the index of screen among the screens in the display\n to which it belongs. (See gdk_screen_get_display())\n Since 2.2\n Returns: the index\n\t \n",
"line" : 474}
,
{
"name" : "getWidth",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the width of screen in pixels\n Since 2.2\n Returns: the width of screen in pixels.\n\t \n",
"line" : 485}
,
{
"name" : "getHeight",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the height of screen in pixels\n Since 2.2\n Returns: the height of screen in pixels.\n\t \n",
"line" : 496}
,
{
"name" : "getWidthMm",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the width of screen in millimeters.\n Note that on some X servers this value will not be correct.\n Since 2.2\n Returns: the width of screen in millimeters.\n\t \n",
"line" : 508}
,
{
"name" : "getHeightMm",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the height of screen in millimeters.\n Note that on some X servers this value will not be correct.\n Since 2.2\n Returns: the heigth of screen in millimeters.\n\t \n",
"line" : 520}
,
{
"name" : "listVisuals",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Lists the available visuals for the specified screen.\n A visual describes a hardware image data format.\n For example, a visual might support 24-bit color, or 8-bit color,\n and might expect pixels to be in a certain format.\n Call g_list_free() on the return value when you're finished with it.\n Since 2.2\n Returns: a list of visuals; the list must be freed, but not its contents. [transfer container][element-type GdkVisual]\n\t \n",
"line" : 535}
,
{
"name" : "getToplevelWindows",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Obtains a list of all toplevel windows known to GDK on the screen screen.\n A toplevel window is a child of the root window (see\n gdk_get_default_root_window()).\n The returned list should be freed with g_list_free(), but\n its elements need not be freed.\n Since 2.2\n Returns: list of toplevel windows, free with g_list_free(). [transfer container][element-type GdkWindow]\n\t \n",
"line" : 555}
,
{
"name" : "makeDisplayName",
"kind" : "function",
"protection" : "public",
"type" : "string()",
"comment" : "\n Determines the name to pass to gdk_display_open() to get\n a GdkDisplay with this screen as the default screen.\n Since 2.2\n Returns: a newly allocated string, free with g_free()\n\t \n",
"line" : 572}
,
{
"name" : "getNMonitors",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the number of monitors which screen consists of.\n Since 2.2\n Returns: number of monitors which screen consists of\n\t \n",
"line" : 583}
,
{
"name" : "getPrimaryMonitor",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the primary monitor for screen. The primary monitor\n is considered the monitor where the 'main desktop' lives.\n While normal application windows typically allow the window\n manager to place the windows, specialized desktop applications\n such as panels should place themselves on the primary monitor.\n If no primary monitor is configured by the user, the return value\n will be 0, defaulting to the first monitor.\n Since 2.20\n Returns: An integer index for the primary monitor, or 0 if none is configured.\n\t \n",
"line" : 600}
,
{
"name" : "getMonitorGeometry",
"kind" : "function",
"protection" : "public",
"type" : "void(int monitorNum, Rectangle dest)",
"comment" : "\n Retrieves the GdkRectangle representing the size and position of\n the individual monitor within the entire screen area.\n Note that the size of the entire screen area can be retrieved via\n gdk_screen_get_width() and gdk_screen_get_height().\n Since 2.2\n Params:\n monitorNum = the monitor number, between 0 and gdk_screen_get_n_monitors (screen)\n dest = a GdkRectangle to be filled with the monitor geometry\n\t \n",
"line" : 616}
,
{
"name" : "getMonitorAtPoint",
"kind" : "function",
"protection" : "public",
"type" : "int(int x, int y)",
"comment" : "\n Returns the monitor number in which the point (x,y) is located.\n Since 2.2\n Params:\n x = the x coordinate in the virtual screen.\n y = the y coordinate in the virtual screen.\n Returns: the monitor number in which the point (x,y) lies, or a monitor close to (x,y) if the point is not in any monitor.\n\t \n",
"line" : 630}
,
{
"name" : "getMonitorAtWindow",
"kind" : "function",
"protection" : "public",
"type" : "int(Window window)",
"comment" : "\n Returns the number of the monitor in which the largest area of the\n bounding rectangle of window resides.\n Since 2.2\n Params:\n window = a GdkWindow\n Returns: the monitor number in which most of window is located, or if window does not intersect any monitors, a monitor, close to window.\n\t \n",
"line" : 644}
,
{
"name" : "getMonitorHeightMm",
"kind" : "function",
"protection" : "public",
"type" : "int(int monitorNum)",
"comment" : "\n Gets the height in millimeters of the specified monitor.\n Since 2.14\n Params:\n monitorNum = number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)\n Returns: the height of the monitor, or -1 if not available\n\t \n",
"line" : 657}
,
{
"name" : "getMonitorWidthMm",
"kind" : "function",
"protection" : "public",
"type" : "int(int monitorNum)",
"comment" : "\n Gets the width in millimeters of the specified monitor, if available.\n Since 2.14\n Params:\n monitorNum = number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)\n Returns: the width of the monitor, or -1 if not available\n\t \n",
"line" : 670}
,
{
"name" : "getMonitorPlugName",
"kind" : "function",
"protection" : "public",
"type" : "string(int monitorNum)",
"comment" : "\n Returns the output name of the specified monitor.\n Usually something like VGA, DVI, or TV, not the actual\n product name of the display device.\n Since 2.14\n Params:\n monitorNum = number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)\n Returns: a newly-allocated string containing the name of the monitor, or NULL if the name cannot be determined\n\t \n",
"line" : 685}
,
{
"name" : "broadcastClientMessage",
"kind" : "function",
"protection" : "public",
"type" : "void(Event event)",
"comment" : "\n On X11, sends an X ClientMessage event to all toplevel windows on\n screen.\n Toplevel windows are determined by checking for the WM_STATE property,\n as described in the Inter-Client Communication Conventions Manual (ICCCM).\n If no windows are found with the WM_STATE property set, the message is\n sent to all children of the root window.\n On Windows, broadcasts a message registered with the name\n GDK_WIN32_CLIENT_MESSAGE to all top-level windows. The amount of\n data is limited to one long, i.e. four bytes.\n Since 2.2\n Params:\n event = the GdkEvent.\n\t \n",
"line" : 705}
,
{
"name" : "getSetting",
"kind" : "function",
"protection" : "public",
"type" : "int(string name, Value value)",
"comment" : "\n Retrieves a desktop-wide setting such as double-click time\n for the GdkScreen screen.\n FIXME needs a list of valid settings here, or a link to\n more information.\n Since 2.2\n Params:\n name = the name of the setting\n value = location to store the value of the setting\n Returns: TRUE if the setting existed and a value was stored in value, FALSE otherwise.\n\t \n",
"line" : 722}
,
{
"name" : "getFontOptions",
"kind" : "function",
"protection" : "public",
"type" : "FontOption()",
"comment" : "\n Gets any options previously set with gdk_screen_set_font_options().\n Since 2.10\n Returns: the current font options, or NULL if no default font options have been set.\n\t \n",
"line" : 733}
,
{
"name" : "setFontOptions",
"kind" : "function",
"protection" : "public",
"type" : "void(FontOption options)",
"comment" : "\n Sets the default font options for the screen. These\n options will be set on any PangoContext's newly created\n with gdk_pango_context_get_for_screen(). Changing the\n default set of font options does not affect contexts that\n have already been created.\n Since 2.10\n Params:\n options = a cairo_font_options_t, or NULL to unset any\n  previously set default font options. [allow-none]\n\t \n",
"line" : 755}
,
{
"name" : "getResolution",
"kind" : "function",
"protection" : "public",
"type" : "double()",
"comment" : "\n Gets the resolution for font handling on the screen; see\n gdk_screen_set_resolution() for full details.\n Since 2.10\n Returns: the current resolution, or -1 if no resolution has been set.\n\t \n",
"line" : 767}
,
{
"name" : "setResolution",
"kind" : "function",
"protection" : "public",
"type" : "void(double dpi)",
"comment" : "\n Sets the resolution for font handling on the screen. This is a\n scale factor between points specified in a PangoFontDescription\n and cairo units. The default value is 96, meaning that a 10 point\n font will be 13 units high. (10 * 96. \/ 72. = 13.3).\n Since 2.10\n Params:\n dpi = the resolution in \"dots per inch\". (Physical inches aren't actually\n  involved; the terminology is conventional.)\n\t \n",
"line" : 783}
,
{
"name" : "getActiveWindow",
"kind" : "function",
"protection" : "public",
"type" : "Window()",
"comment" : "\n Returns the screen's currently active window.\n On X11, this is done by inspecting the _NET_ACTIVE_WINDOW property\n on the root window, as described in the Extended Window\n Manager Hints. If there is no currently currently active\n window, or the window manager does not support the\n _NET_ACTIVE_WINDOW hint, this function returns NULL.\n On other platforms, this function may return NULL, depending on whether\n it is implementable on that platform.\n The returned window should be unrefed using g_object_unref() when\n no longer needed.\n Since 2.10\n Returns: the currently active window, or NULL.\n\t \n",
"line" : 803}
,
{
"name" : "getWindowStack",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Returns a GList of GdkWindows representing the current\n window stack.\n On X11, this is done by inspecting the _NET_CLIENT_LIST_STACKING\n property on the root window, as described in the Extended Window\n Manager Hints. If the window manager does not support the\n _NET_CLIENT_LIST_STACKING hint, this function returns NULL.\n On other platforms, this function may return NULL, depending on whether\n it is implementable on that platform.\n The returned list is newly allocated and owns references to the\n windows it contains, so it should be freed using g_list_free() and\n its windows unrefed using g_object_unref() when no longer needed.\n Since 2.10\n Returns: a list of GdkWindows for the current window stack, or NULL. [transfer full][element-type GdkWindow]\n\t \n",
"line" : 829}
,
{
"name" : "gdkSpawnOnScreen",
"kind" : "function",
"protection" : "public",
"type" : "int(string workingDirectory, string[] argv, string[] envp, GSpawnFlags flags, extern (C) void function(void* cbData) childSetup, void* userData, out int childPid)",
"comment" : "\n Like g_spawn_async(), except the child process is spawned in such\n an environment that on calling gdk_display_open() it would be\n returned a GdkDisplay with screen as the default screen.\n This is useful for applications which wish to launch an application\n on a specific screen.\n Since 2.4\n Params:\n workingDirectory = child's current working directory, or NULL to\n  inherit parent's\n argv = child's argument vector\n envp = child's environment, or NULL to inherit parent's\n flags = flags from GSpawnFlags\n childSetup = function to run in the child just before exec()\n userData = user data for child_setup\n childPid = return location for child process ID, or NULL\n Returns: TRUE on success, FALSE if error is set\n Throws: GException on failure.\n\t \n",
"line" : 859}
,
{
"name" : "gdkSpawnOnScreenWithPipes",
"kind" : "function",
"protection" : "public",
"type" : "int(string workingDirectory, string[] argv, string[] envp, GSpawnFlags flags, extern (C) void function(void* cbData) childSetup, void* userData, out int childPid, out int standardInput, out int standardOutput, out int standardError)",
"comment" : "\n Like g_spawn_async_with_pipes(), except the child process is\n spawned in such an environment that on calling gdk_display_open()\n it would be returned a GdkDisplay with screen as the default\n screen.\n This is useful for applications which wish to launch an application\n on a specific screen.\n Since 2.4\n Params:\n workingDirectory = child's current working directory, or NULL to\n  inherit parent's\n argv = child's argument vector\n envp = child's environment, or NULL to inherit parent's\n flags = flags from GSpawnFlags\n childSetup = function to run in the child just before exec()\n userData = user data for child_setup\n childPid = return location for child process ID, or NULL\n standardInput = return location for file descriptor to write to\n  child's stdin, or NULL\n standardOutput = return location for file descriptor to read child's\n  stdout, or NULL\n standardError = return location for file descriptor to read child's\n  stderr, or NULL\n Returns: TRUE on success, FALSE if an error was set\n\t \n",
"line" : 899}
,
{
"name" : "gdkSpawnCommandLineOnScreen",
"kind" : "function",
"protection" : "public",
"type" : "int(string commandLine)",
"comment" : "\n Like g_spawn_command_line_async(), except the child process is\n spawned in such an environment that on calling gdk_display_open()\n it would be returned a GdkDisplay with screen as the default\n screen.\n This is useful for applications which wish to launch an application\n on a specific screen.\n Since 2.4\n Params:\n commandLine = a command line\n Returns: TRUE on success, FALSE if error is set.\n Throws: GException on failure.\n\t \n",
"line" : 927}
]
}
]
}
,
{
"name" : "gdk.Selection",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/Selection.d",
"members" : [
{
"name" : "Selection",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The X selection mechanism provides a way to transfer\n arbitrary chunks of data between programs.\n A selection is a essentially\n a named clipboard, identified by a string interned\n as a GdkAtom. By claiming ownership of a selection,\n an application indicates that it will be responsible\n for supplying its contents. The most common\n selections are PRIMARY and\n CLIPBOARD.\n The contents of a selection can be represented in\n a number of formats, called targets.\n Each target is identified by an atom. A list of\n all possible targets supported by the selection owner\n can be retrieved by requesting the special target\n TARGETS. When a selection is\n retrieved, the data is accompanied by a type\n (an atom), and a format (an integer, representing\n the number of bits per item).\n See Properties and Atoms\n for more information.\n The functions in this section only contain the lowlevel\n parts of the selection protocol. A considerably more\n complicated implementation is needed on top of this.\n GTK+ contains such an implementation in the functions\n in gtkselection.h and programmers\n should use those functions instead of the ones presented\n here. If you plan to implement selection handling\n directly on top of the functions here, you should refer\n to the X Inter-client Communication Conventions Manual\n (ICCCM).\n \n",
"line" : 103,
"base" : "Object",
"members" : [
{
"name" : "ownerSet",
"kind" : "function",
"protection" : "public",
"type" : "int(Window owner, void* selection, uint time, int sendEvent)",
"comment" : "\n\t \n\n Sets the owner of the given selection.\n Params:\n owner = a GdkWindow or NULL to indicate that the\n  the owner for the given should be unset.\n selection = an atom identifying a selection.\n time = timestamp to use when setting the selection.\n  If this is older than the timestamp given last\n  time the owner was set for the given selection, the\n  request will be ignored.\n sendEvent = if TRUE, and the new owner is different\n  from the current owner, the current owner\n  will be sent a SelectionClear event.\n Returns: TRUE if the selection owner was successfully changed to owner, otherwise FALSE.\n\t \n",
"line" : 123}
,
{
"name" : "ownerSetForDisplay",
"kind" : "function",
"protection" : "public",
"type" : "int(Display display, Window owner, void* selection, uint time, int sendEvent)",
"comment" : "\n Sets the GdkWindow owner as the current owner of the selection selection.\n Since 2.2\n Params:\n display = the GdkDisplay.\n owner = a GdkWindow or NULL to indicate that the owner for\n  the given should be unset.\n selection = an atom identifying a selection.\n time = timestamp to use when setting the selection.\n  If this is older than the timestamp given last time the owner was\n  set for the given selection, the request will be ignored.\n sendEvent = if TRUE, and the new owner is different from the current\n  owner, the current owner will be sent a SelectionClear event.\n Returns: TRUE if the selection owner was successfully changed to owner, otherwise FALSE.\n\t \n",
"line" : 144}
,
{
"name" : "ownerGet",
"kind" : "function",
"protection" : "public",
"type" : "Window(void* selection)",
"comment" : "\n Determines the owner of the given selection.\n Params:\n selection = an atom indentifying a selection.\n Returns: if there is a selection owner for this window, and it is a window known to the current process, the GdkWindow that owns the selection, otherwise NULL. Note that the return value may be owned by a different process if a foreign window was previously created for that window, but a new foreign window will never be created by this call.\n\t \n",
"line" : 156}
,
{
"name" : "ownerGetForDisplay",
"kind" : "function",
"protection" : "public",
"type" : "Window(Display display, void* selection)",
"comment" : "\n Determine the owner of the given selection.\n Note that the return value may be owned by a different\n process if a foreign window was previously created for that\n window, but a new foreign window will never be created by this call.\n Since 2.2\n Params:\n display = a GdkDisplay.\n selection = an atom indentifying a selection.\n Returns: if there is a selection owner for this window, and it is a window known to the current process, the GdkWindow that owns the selection, otherwise NULL.\n\t \n",
"line" : 178}
,
{
"name" : "convert",
"kind" : "function",
"protection" : "public",
"type" : "void(Window requestor, void* selection, void* target, uint time)",
"comment" : "\n Retrieves the contents of a selection in a given\n form.\n Params:\n requestor = a GdkWindow.\n selection = an atom identifying the selection to get the\n  contents of.\n target = the form in which to retrieve the selection.\n time = the timestamp to use when retrieving the\n  selection. The selection owner may refuse the\n  request if it did not own the selection at\n  the time indicated by the timestamp.\n\t \n",
"line" : 202}
,
{
"name" : "propertyGet",
"kind" : "function",
"protection" : "public",
"type" : "int(Window requestor, char** data, void** propType, int* propFormat)",
"comment" : "\n Retrieves selection data that was stored by the selection\n data in response to a call to gdk_selection_convert(). This function\n will not be used by applications, who should use the GtkClipboard\n API instead.\n Params:\n requestor = the window on which the data is stored\n data = location to store a pointer to the retrieved data.\n  If the retrieval failed, NULL we be stored here, otherwise, it\n  will be non-NULL and the returned data should be freed with g_free()\n  when you are finished using it. The length of the\n  allocated memory is one more than the length\n  of the returned data, and the final byte will always\n  be zero, to ensure nul-termination of strings.\n propType = location to store the type of the property.\n propFormat = location to store the format of the property.\n Returns: the length of the retrieved data.\n\t \n",
"line" : 226}
,
{
"name" : "sendNotify",
"kind" : "function",
"protection" : "public",
"type" : "void(void* requestor, void* selection, void* target, void* property, uint time)",
"comment" : "\n Sends a response to SelectionRequest event.\n Params:\n requestor = window to which to deliver response.\n selection = selection that was requested.\n target = target that was selected.\n property = property in which the selection owner stored the\n  data, or GDK_NONE to indicate that the request\n  was rejected.\n time = timestamp.\n\t \n",
"line" : 243}
,
{
"name" : "sendNotifyForDisplay",
"kind" : "function",
"protection" : "public",
"type" : "void(Display display, void* requestor, void* selection, void* target, void* property, uint time)",
"comment" : "\n Send a response to SelectionRequest event.\n Since 2.2\n Params:\n display = the GdkDisplay where requestor is realized\n requestor = window to which to deliver response.\n selection = selection that was requested.\n target = target that was selected.\n property = property in which the selection owner stored the data,\n  or GDK_NONE to indicate that the request was rejected.\n time = timestamp.\n\t \n",
"line" : 261}
]
}
]
}
,
{
"name" : "gdk.Testing",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/Testing.d",
"members" : [
{
"name" : "Testing",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n The functions in this section are intended to be used in test programs.\n They allow to simulate some user input.\n \n",
"line" : 72,
"base" : "Object",
"members" : [
{
"name" : "renderSync",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window)",
"comment" : "\n\t \n\n This function retrives a pixel from window to force the windowing\n system to carry out any pending rendering commands.\n This function is intended to be used to syncronize with rendering\n pipelines, to benchmark windowing system rendering operations.\n Since 2.14\n Params:\n window = a mapped GdkWindow\n\t \n",
"line" : 86}
,
{
"name" : "simulateButton",
"kind" : "function",
"protection" : "public",
"type" : "int(Window window, int x, int y, uint button, GdkModifierType modifiers, GdkEventType buttonPressrelease)",
"comment" : "\n This function is intended to be used in Gtk+ test programs.\n It will warp the mouse pointer to the given (x,y) corrdinates\n within window and simulate a button press or release event.\n Because the mouse pointer needs to be warped to the target\n location, use of this function outside of test programs that\n run in their own virtual windowing system (e.g. Xvfb) is not\n recommended.\n Also, gtk_test_simulate_button() is a fairly low level function,\n for most testing purposes, gtk_test_widget_click() is the right\n function to call which will generate a button press event followed\n by its accompanying button release event.\n Since 2.14\n Params:\n window = Gdk window to simulate a button event for.\n x = x coordinate within window for the button event.\n y = y coordinate within window for the button event.\n button = Number of the pointer button for the event, usually 1, 2 or 3.\n modifiers = Keyboard modifiers the event is setup with.\n buttonPressrelease = either GDK_BUTTON_PRESS or GDK_BUTTON_RELEASE\n Returns: wether all actions neccessary for a button event simulation were carried out successfully.\n\t \n",
"line" : 114}
,
{
"name" : "simulateKey",
"kind" : "function",
"protection" : "public",
"type" : "int(Window window, int x, int y, uint keyval, GdkModifierType modifiers, GdkEventType keyPressrelease)",
"comment" : "\n This function is intended to be used in Gtk+ test programs.\n If (x,y) are > (-1,-1), it will warp the mouse pointer to\n the given (x,y) corrdinates within window and simulate a\n key press or release event.\n When the mouse pointer is warped to the target location, use\n of this function outside of test programs that run in their\n own virtual windowing system (e.g. Xvfb) is not recommended.\n If (x,y) are passed as (-1,-1), the mouse pointer will not\n be warped and window origin will be used as mouse pointer\n location for the event.\n Also, gtk_test_simulate_key() is a fairly low level function,\n for most testing purposes, gtk_test_widget_send_key() is the\n right function to call which will generate a key press event\n followed by its accompanying key release event.\n Since 2.14\n Params:\n window = Gdk window to simulate a key event for.\n x = x coordinate within window for the key event.\n y = y coordinate within window for the key event.\n keyval = A Gdk keyboard value.\n modifiers = Keyboard modifiers the event is setup with.\n keyPressrelease = either GDK_KEY_PRESS or GDK_KEY_RELEASE\n Returns: wether all actions neccessary for a key event simulation were carried out successfully.\n\t \n",
"line" : 145}
]
}
]
}
,
{
"name" : "gdk.Threads",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/Threads.d",
"members" : [
{
"name" : "gdkThreadsInit",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n \n\n Initializes GDK so that it can be used from multiple threads\n in conjunction with gdk_threads_enter() and gdk_threads_leave().\n g_thread_init() must be called previous to this function.\n This call must be made before any use of the main loop from\n GTK+; to be safe, call it before gtk_init().\n \n",
"line" : 72}
,
{
"name" : "gdkThreadsEnter",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n This macro marks the beginning of a critical section in which GDK and\n GTK+ functions can be called safely and without causing race\n conditions. Only one thread at a time can be in such a critial\n section.\n \n",
"line" : 84}
,
{
"name" : "gdkThreadsLeave",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Leaves a critical region begun with gdk_threads_enter().\n \n",
"line" : 93}
,
{
"name" : "gdkThreadsSetLockFunctions",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) void function() enterFn, extern (C) void function() leaveFn)",
"comment" : "\n Allows the application to replace the standard method that\n GDK uses to protect its data structures. Normally, GDK\n creates a single GMutex that is locked by gdk_threads_enter(),\n and released by gdk_threads_leave(); using this function an\n application provides, instead, a function enter_fn that is\n called by gdk_threads_enter() and a function leave_fn that is\n called by gdk_threads_leave().\n The functions must provide at least same locking functionality\n as the default implementation, but can also do extra application\n specific processing.\n As an example, consider an application that has its own recursive\n lock that when held, holds the GTK+ lock as well. When GTK+ unlocks\n the GTK+ lock when entering a recursive main loop, the application\n must temporarily release its lock as well.\n Most threaded GTK+ apps won't need to use this method.\n This method must be called before gdk_threads_init(), and cannot\n be called multiple times.\n Since 2.4\n Params:\n enterFn = function called to guard GDK\n leaveFn = function called to release the guard\n \n",
"line" : 122}
,
{
"name" : "gdkThreadsAddIdle",
"kind" : "function",
"protection" : "public",
"type" : "uint(extern (C) int function(void*) funct, void* data)",
"comment" : "\n A wrapper for the common usage of gdk_threads_add_idle_full()\n assigning the default priority, G_PRIORITY_DEFAULT_IDLE.\n See gdk_threads_add_idle_full().\n Since 2.12\n Params:\n data = data to pass to function\n Returns: the ID (greater than 0) of the event source.\n \n",
"line" : 137}
,
{
"name" : "gdkThreadsAddIdleFull",
"kind" : "function",
"protection" : "public",
"type" : "uint(int priority, extern (C) int function(void*) funct, void* data, extern (C) void function(void* cbData) notify)",
"comment" : "\n Adds a function to be called whenever there are no higher priority\n events pending. If the function returns FALSE it is automatically\n removed from the list of event sources and will not be called again.\n This variant of g_idle_add_full() calls function with the GDK lock\n held. It can be thought of a MT-safe version for GTK+ widgets for the\n following use case, where you have to worry about idle_callback()\n running in thread A and accessing self after it has been finalized\n Since 2.12\n Params:\n priority = the priority of the idle source. Typically this will be in the\n  range btweeen G_PRIORITY_DEFAULT_IDLE and G_PRIORITY_HIGH_IDLE\n data = data to pass to function\n notify = function to call when the idle is removed, or NULL. [allow-none]\n Returns: the ID (greater than 0) of the event source.\n \n",
"line" : 159}
,
{
"name" : "gdkThreadsAddTimeout",
"kind" : "function",
"protection" : "public",
"type" : "uint(uint interval, extern (C) int function(void*) funct, void* data)",
"comment" : "\n A wrapper for the common usage of gdk_threads_add_timeout_full()\n assigning the default priority, G_PRIORITY_DEFAULT.\n See gdk_threads_add_timeout_full().\n Since 2.12\n Params:\n interval = the time between calls to the function, in milliseconds\n  (1\/1000ths of a second)\n data = data to pass to function\n Returns: the ID (greater than 0) of the event source.\n \n",
"line" : 176}
,
{
"name" : "gdkThreadsAddTimeoutFull",
"kind" : "function",
"protection" : "public",
"type" : "uint(int priority, uint interval, extern (C) int function(void*) funct, void* data, extern (C) void function(void* cbData) notify)",
"comment" : "\n Sets a function to be called at regular intervals holding the GDK lock,\n with the given priority. The function is called repeatedly until it\n returns FALSE, at which point the timeout is automatically destroyed\n and the function will not be called again. The notify function is\n called when the timeout is destroyed. The first call to the\n function will be at the end of the first interval.\n Note that timeout functions may be delayed, due to the processing of other\n event sources. Thus they should not be relied on for precise timing.\n After each call to the timeout function, the time of the next\n timeout is recalculated based on the current time and the given interval\n (it does not try to 'catch up' time lost in delays).\n This variant of g_timeout_add_full() can be thought of a MT-safe version\n Since 2.12\n Params:\n priority = the priority of the timeout source. Typically this will be in the\n  range between G_PRIORITY_DEFAULT_IDLE and G_PRIORITY_HIGH_IDLE.\n interval = the time between calls to the function, in milliseconds\n  (1\/1000ths of a second)\n data = data to pass to function\n notify = function to call when the timeout is removed, or NULL. [allow-none]\n Returns: the ID (greater than 0) of the event source.\n \n",
"line" : 205}
,
{
"name" : "gdkThreadsAddTimeoutSeconds",
"kind" : "function",
"protection" : "public",
"type" : "uint(uint interval, extern (C) int function(void*) funct, void* data)",
"comment" : "\n A wrapper for the common usage of gdk_threads_add_timeout_seconds_full()\n assigning the default priority, G_PRIORITY_DEFAULT.\n For details, see gdk_threads_add_timeout_full().\n Since 2.14\n Params:\n interval = the time between calls to the function, in seconds\n data = data to pass to function\n Returns: the ID (greater than 0) of the event source.\n \n",
"line" : 221}
,
{
"name" : "gdkThreadsAddTimeoutSecondsFull",
"kind" : "function",
"protection" : "public",
"type" : "uint(int priority, uint interval, extern (C) int function(void*) funct, void* data, extern (C) void function(void* cbData) notify)",
"comment" : "\n A variant of gdk_threads_add_timout_full() with second-granularity.\n See g_timeout_add_seconds_full() for a discussion of why it is\n a good idea to use this function if you don't need finer granularity.\n Since 2.14\n Params:\n priority = the priority of the timeout source. Typically this will be in the\n  range between G_PRIORITY_DEFAULT_IDLE and G_PRIORITY_HIGH_IDLE.\n interval = the time between calls to the function, in seconds\n data = data to pass to function\n notify = function to call when the timeout is removed, or NULL. [allow-none]\n Returns: the ID (greater than 0) of the event source.\n \n",
"line" : 240}
]
}
,
{
"name" : "gdk.Visual",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/Visual.d",
"members" : [
{
"name" : "Visual",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GdkVisual describes a particular video hardware display format. It includes\n information about the number of bits used for each color, the way the bits are\n translated into an RGB value for display, and the way the bits are stored in\n memory. For example, a piece of display hardware might support 24-bit color,\n 16-bit color, or 8-bit color; meaning 24\/16\/8-bit pixel sizes. For a given\n pixel size, pixels can be in different formats; for example the \"red\" element\n of an RGB pixel may be in the top 8 bits of the pixel, or may be in the lower\n 4 bits.\n Usually you can avoid thinking about visuals in GTK+. Visuals are useful to\n interpret the contents of a GdkImage, but you should avoid GdkImage precisely\n because its contents depend on the display hardware; use GdkPixbuf instead, for\n all but the most low-level purposes. Also, anytime you provide a GdkColormap,\n the visual is implied as part of the colormap (gdk_colormap_get_visual()), so\n you won't have to provide a visual in addition.\n There are several standard visuals. The visual returned\n by gdk_visual_get_system() is the system's default\n visual. gdk_rgb_get_visual() return the visual most\n suited to displaying full-color image data. If you\n use the calls in GdkRGB, you should create your windows\n using this visual (and the colormap returned by\n gdk_rgb_get_colormap()).\n A number of functions are provided for determining\n the \"best\" available visual. For the purposes of\n making this determination, higher bit depths are\n considered better, and for visuals of the same\n bit depth, GDK_VISUAL_PSEUDO_COLOR is preferred at\n 8bpp, otherwise, the visual types are ranked in the\n order of (highest to lowest) GDK_VISUAL_DIRECT_COLOR,\n GDK_VISUAL_TRUE_COLOR, GDK_VISUAL_PSEUDO_COLOR,\n GDK_VISUAL_STATIC_COLOR, GDK_VISUAL_GRAYSCALE,\n then GDK_VISUAL_STATIC_GRAY.\n \n",
"line" : 106,
"base" : "Object",
"members" : [
{
"name" : "gdkVisual",
"kind" : "variable",
"protection" : "protected",
"type" : "GdkVisual*",
"comment" : " the main Gtk struct \n",
"line" : 109}
,
{
"name" : "getVisualStruct",
"kind" : "function",
"protection" : "public",
"type" : "GdkVisual*()",
"line" : 112}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 119}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Visual(GdkVisual* gdkVisual)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 127}
,
{
"name" : "gdkQueryDepths",
"kind" : "function",
"protection" : "public",
"type" : "void(out int[] depths)",
"comment" : "\n This function returns the available bit depths for the default\n screen. It's equivalent to listing the visuals\n (gdk_list_visuals()) and then looking at the depth field in each\n visual, removing duplicates.\n The array returned by this function should not be freed.\n Params:\n depths =  return location for available depths\n\t \n",
"line" : 146}
,
{
"name" : "gdkQueryVisualTypes",
"kind" : "function",
"protection" : "public",
"type" : "void(out GdkVisualType[] visualTypes)",
"comment" : "\n\t \n\n This function returns the available visual types for the default\n screen. It's equivalent to listing the visuals\n (gdk_list_visuals()) and then looking at the type field in each\n visual, removing duplicates.\n The array returned by this function should not be freed.\n Params:\n visualTypes = return location for the available visual types\n\t \n",
"line" : 169}
,
{
"name" : "gdkListVisuals",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Lists the available visuals for the default screen.\n (See gdk_screen_list_visuals())\n A visual describes a hardware image data format.\n For example, a visual might support 24-bit color, or 8-bit color,\n and might expect pixels to be in a certain format.\n Call g_list_free() on the return value when you're finished with it.\n Returns: a list of visuals; the list must be freed, but not its contents. [transfer container][element-type GdkVisual]\n\t \n",
"line" : 189}
,
{
"name" : "getBestDepth",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Get the best available depth for the default GDK screen. \"Best\"\n means \"largest,\" i.e. 32 preferred over 24 preferred over 8 bits\n per pixel.\n Returns: best available depth\n\t \n",
"line" : 206}
,
{
"name" : "getBestType",
"kind" : "function",
"protection" : "public",
"type" : "GdkVisualType()",
"comment" : "\n Return the best available visual type for the default GDK screen.\n Returns: best visual type\n\t \n",
"line" : 216}
,
{
"name" : "getSystem",
"kind" : "function",
"protection" : "public",
"type" : "Visual()",
"comment" : "\n Get the system's default visual for the default GDK screen.\n This is the visual for the root window of the display.\n The return value should not be freed.\n Returns: system visual. [transfer none]\n\t \n",
"line" : 228}
,
{
"name" : "getBest",
"kind" : "function",
"protection" : "public",
"type" : "Visual()",
"comment" : "\n Get the visual with the most available colors for the default\n GDK screen. The return value should not be freed.\n Returns: best visual. [transfer none]\n\t \n",
"line" : 244}
,
{
"name" : "getBestWithDepth",
"kind" : "function",
"protection" : "public",
"type" : "Visual(int depth)",
"comment" : "\n Get the best visual with depth depth for the default GDK screen.\n Color visuals and visuals with mutable colormaps are preferred\n over grayscale or fixed-colormap visuals. The return value should not\n be freed. NULL may be returned if no visual supports depth.\n Params:\n depth = a bit depth\n Returns: best visual for the given depth. [transfer none]\n\t \n",
"line" : 264}
,
{
"name" : "getBestWithType",
"kind" : "function",
"protection" : "public",
"type" : "Visual(GdkVisualType visualType)",
"comment" : "\n Get the best visual of the given visual_type for the default GDK screen.\n Visuals with higher color depths are considered better. The return value\n should not be freed. NULL may be returned if no visual has type\n visual_type.\n Params:\n visualType = a visual type\n Returns: best visual of the given type. [transfer none]\n\t \n",
"line" : 284}
,
{
"name" : "getBestWithBoth",
"kind" : "function",
"protection" : "public",
"type" : "Visual(int depth, GdkVisualType visualType)",
"comment" : "\n Combines gdk_visual_get_best_with_depth() and gdk_visual_get_best_with_type().\n Params:\n depth = a bit depth\n visualType = a visual type\n Returns: best visual with both depth and visual_type, or NULL if none. [transfer none]\n\t \n",
"line" : 302}
,
{
"name" : "getScreen",
"kind" : "function",
"protection" : "public",
"type" : "Screen()",
"comment" : "\n Gets the screen to which this visual belongs\n Since 2.2\n Returns: the screen to which this visual belongs. [transfer none]\n\t \n",
"line" : 318}
,
{
"name" : "getBitsPerRgb",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the number of significant bits per red, green and blue value.\n Since 2.22\n Returns: The number of significant bits per color value for visual.\n\t \n",
"line" : 334}
,
{
"name" : "getBluePixelDetails",
"kind" : "function",
"protection" : "public",
"type" : "void(out uint mask, out int shift, out int precision)",
"comment" : "\n Obtains values that are needed to calculate blue pixel values in TrueColor\n and DirectColor. The \"mask\" is the significant bits within the pixel.\n The \"shift\" is the number of bits left we must shift a primary for it\n to be in position (according to the \"mask\"). Finally, \"precision\" refers\n to how much precision the pixel value contains for a particular primary.\n Since 2.22\n Params:\n mask = A pointer to a guint32 to be filled in, or NULL. [out][allow-none]\n shift = A pointer to a gint to be filled in, or NULL. [out][allow-none]\n precision = A pointer to a gint to be filled in, or NULL. [out][allow-none]\n\t \n",
"line" : 352}
,
{
"name" : "getByteOrder",
"kind" : "function",
"protection" : "public",
"type" : "GdkByteOrder()",
"comment" : "\n Returns the byte order of this visual.\n Since 2.22\n Returns: A GdkByteOrder stating the byte order of visual.\n\t \n",
"line" : 363}
,
{
"name" : "getColormapSize",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the size of a colormap for this visual.\n Since 2.22\n Returns: The size of a colormap that is suitable for visual.\n\t \n",
"line" : 374}
,
{
"name" : "getDepth",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Returns the bit depth of this visual.\n Since 2.22\n Returns: The bit depth of this visual.\n\t \n",
"line" : 385}
,
{
"name" : "getGreenPixelDetails",
"kind" : "function",
"protection" : "public",
"type" : "void(out uint mask, out int shift, out int precision)",
"comment" : "\n Obtains values that are needed to calculate green pixel values in TrueColor\n and DirectColor. The \"mask\" is the significant bits within the pixel.\n The \"shift\" is the number of bits left we must shift a primary for it\n to be in position (according to the \"mask\"). Finally, \"precision\" refers\n to how much precision the pixel value contains for a particular primary.\n Since 2.22\n Params:\n mask = A pointer to a guint32 to be filled in, or NULL. [out][allow-none]\n shift = A pointer to a gint to be filled in, or NULL. [out][allow-none]\n precision = A pointer to a gint to be filled in, or NULL. [out][allow-none]\n\t \n",
"line" : 403}
,
{
"name" : "getRedPixelDetails",
"kind" : "function",
"protection" : "public",
"type" : "void(out uint mask, out int shift, out int precision)",
"comment" : "\n Obtains values that are needed to calculate red pixel values in TrueColor\n and DirectColor. The \"mask\" is the significant bits within the pixel.\n The \"shift\" is the number of bits left we must shift a primary for it\n to be in position (according to the \"mask\"). Finally, \"precision\" refers\n to how much precision the pixel value contains for a particular primary.\n Since 2.22\n Params:\n mask = A pointer to a guint32 to be filled in, or NULL. [out][allow-none]\n shift = A pointer to a gint to be filled in, or NULL. [out][allow-none]\n precision = A pointer to a gint to be filled in, or NULL. [out][allow-none]\n\t \n",
"line" : 421}
,
{
"name" : "getVisualType",
"kind" : "function",
"protection" : "public",
"type" : "GdkVisualType()",
"comment" : "\n Returns the type of visual this is (PseudoColor, TrueColor, etc).\n Since 2.22\n Returns: A GdkVisualType stating the type of visual.\n\t \n",
"line" : 432}
]
}
]
}
,
{
"name" : "gdk.Window",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/Window.d",
"members" : [
{
"name" : "Window",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n A GdkWindow is a rectangular region on the screen. It's a low-level object,\n used to implement high-level objects such as GtkWidget and GtkWindow on the\n GTK+ level. A GtkWindow is a toplevel window, the thing a user might think of\n as a \"window\" with a titlebar and so on; a GtkWindow may contain many GdkWindow.\n For example, each GtkButton has a GdkWindow associated with it.\n Composited Windows\n Normally, the windowing system takes care of rendering the contents of a child\n window onto its parent window. This mechanism can be intercepted by calling\n gdk_window_set_composited() on the child window. For a\n composited window it is the responsibility of the\n application to render the window contents at the right spot.\n $(DDOC_COMMENT example)\n In the example Example  7, “Composited windows”, a button is\n placed inside of an event box inside of a window. The event box is\n set as composited and therefore is no longer automatically drawn to\n the screen.\n When the contents of the event box change, an expose event is\n generated on its parent window (which, in this case, belongs to\n the toplevel GtkWindow). The expose handler for this widget is\n responsible for merging the changes back on the screen in the way\n that it wishes.\n In our case, we merge the contents with a 50% transparency. We\n also set the background colour of the window to red. The effect is\n that the background shows through the button.\n <hr>\n Offscreen Windows\n Offscreen windows are more general than composited windows, since they\n allow not only to modify the rendering of the child window onto its parent,\n but also to apply coordinate transformations.\n To integrate an offscreen window into a window hierarchy, one has to call\n gdk_offscreen_window_set_embedder() and handle a number of signals. The\n \"pick-embedded-child\" signal on the embedder window is used to\n select an offscreen child at given coordinates, and the \"to-embedder\"\n and \"from-embedder\" signals on the offscreen window are used to\n translate coordinates between the embedder and the offscreen window.\n For rendering an offscreen window onto its embedder, the contents of the\n offscreen window are available as a pixmap, via\n gdk_offscreen_window_get_pixmap().\n \n",
"line" : 139,
"base" : "Drawable",
"members" : [
{
"name" : "gdkWindow",
"kind" : "variable",
"protection" : "protected",
"type" : "GdkWindow*",
"comment" : " the main Gtk struct \n",
"line" : 143}
,
{
"name" : "getWindowStruct",
"kind" : "function",
"protection" : "public",
"type" : "GdkWindow*()",
"line" : 146}
,
{
"name" : "getStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void*()",
"comment" : " the main Gtk struct as a void* \n",
"line" : 153}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Window(GdkWindow* gdkWindow)",
"comment" : "\n Sets our main struct and passes it to the parent class\n\t \n",
"line" : 161}
,
{
"name" : "setStruct",
"kind" : "function",
"protection" : "protected",
"type" : "void(GObject* obj)",
"line" : 179}
,
{
"name" : "connectedSignals",
"kind" : "variable",
"protection" : "public",
"type" : "int[const(char)[]]",
"comment" : "\n\t \n",
"line" : 187}
,
{
"name" : "onFromEmbedderListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(double, double, void*, void*, Window)[]",
"line" : 189}
,
{
"name" : "addOnFromEmbedder",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(double, double, void*, void*, Window) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::from-embedder signal is emitted to translate coordinates\n in the embedder of an offscreen window to the offscreen window.\n See also \"to-embedder\".\n Since 2.18\n\t \n",
"line" : 196}
,
{
"name" : "callBackFromEmbedder",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GdkWindow* windowStruct, double embedder_x, double embedder_y, void* offscreen_x, void* offscreen_y, Window window)",
"line" : 211}
,
{
"name" : "onPickEmbeddedChildListeners",
"kind" : "variable",
"protection" : "public",
"type" : "Window delegate(double, double, Window)[]",
"line" : 219}
,
{
"name" : "addOnPickEmbeddedChild",
"kind" : "function",
"protection" : "public",
"type" : "void(Window delegate(double, double, Window) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::pick-embedded-child signal is emitted to find an embedded\n child at the given position.\n Since 2.18\n\t \n",
"line" : 225}
,
{
"name" : "callBackPickEmbeddedChild",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GdkWindow* windowStruct, double x, double y, Window window)",
"line" : 240}
,
{
"name" : "onToEmbedderListeners",
"kind" : "variable",
"protection" : "public",
"type" : "void delegate(double, double, void*, void*, Window)[]",
"line" : 248}
,
{
"name" : "addOnToEmbedder",
"kind" : "function",
"protection" : "public",
"type" : "void(void delegate(double, double, void*, void*, Window) dlg, GConnectFlags connectFlags = cast(GConnectFlags)0)",
"comment" : "\n The ::to-embedder signal is emitted to translate coordinates\n in an offscreen window to its embedder.\n See also \"from-embedder\".\n Since 2.18\n\t \n",
"line" : 255}
,
{
"name" : "callBackToEmbedder",
"kind" : "function",
"protection" : "public",
"type" : "extern (C) void(GdkWindow* windowStruct, double offscreen_x, double offscreen_y, void* embedder_x, void* embedder_y, Window window)",
"line" : 270}
,
{
"name" : "this",
"kind" : "constructor",
"protection" : "public",
"type" : "Window(Window parent, GdkWindowAttr* attributes, int attributesMask)",
"comment" : "\n Creates a new GdkWindow using the attributes from\n attributes. See GdkWindowAttr and GdkWindowAttributesType for\n more details. Note: to use this on displays other than the default\n display, parent must be specified.\n Params:\n parent = a GdkWindow, or NULL to create the window as a child of\n  the default root window for the default display. [allow-none]\n attributes = attributes of the new window\n attributesMask = mask indicating which fields in attributes are valid\n Throws: ConstructionException GTK+ fails to create the object.\n\t \n",
"line" : 291}
,
{
"name" : "destroy",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Destroys the window system resources associated with window and decrements window's\n reference count. The window system resources for all children of window are also\n destroyed, but the children's reference counts are not decremented.\n Note that a window will not be destroyed automatically when its reference count\n reaches zero. You must call this function yourself before that happens.\n\t \n",
"line" : 309}
,
{
"name" : "getWindowType",
"kind" : "function",
"protection" : "public",
"type" : "GdkWindowType()",
"comment" : "\n Gets the type of the window. See GdkWindowType.\n Returns: type of window\n\t \n",
"line" : 319}
,
{
"name" : "atPointer",
"kind" : "function",
"protection" : "public",
"type" : "Window(out int winX, out int winY)",
"comment" : "\n Obtains the window underneath the mouse pointer, returning the\n location of that window in win_x, win_y. Returns NULL if the\n window under the mouse pointer is not known to GDK (if the window\n belongs to another application and a GdkWindow hasn't been created\n for it with gdk_window_foreign_new())\n NOTE: For multihead-aware widgets or applications use\n gdk_display_get_window_at_pointer() instead.\n Params:\n winX = return location for origin of the window under the pointer. [out][allow-none]\n winY = return location for origin of the window under the pointer. [out][allow-none]\n Returns: window under the mouse pointer. [transfer none]\n\t \n",
"line" : 338}
,
{
"name" : "show",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Like gdk_window_show_unraised(), but also raises the window to the\n top of the window stack (moves the window to the front of the\n Z-order).\n This function maps a window so it's visible onscreen. Its opposite\n is gdk_window_hide().\n When implementing a GtkWidget, you should call this function on the widget's\n GdkWindow as part of the \"map\" method.\n\t \n",
"line" : 358}
,
{
"name" : "showUnraised",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Shows a GdkWindow onscreen, but does not modify its stacking\n order. In contrast, gdk_window_show() will raise the window\n to the top of the window stack.\n On the X11 platform, in Xlib terms, this function calls\n XMapWindow() (it also updates some internal GDK state, which means\n that you can't really use XMapWindow() directly on a GDK window).\n\t \n",
"line" : 372}
,
{
"name" : "hide",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n For toplevel windows, withdraws them, so they will no longer be\n known to the window manager; for all windows, unmaps them, so\n they won't be displayed. Normally done automatically as\n part of gtk_widget_hide().\n\t \n",
"line" : 384}
,
{
"name" : "isDestroyed",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Check to see if a window is destroyed..\n Since 2.18\n Returns: TRUE if the window is destroyed\n\t \n",
"line" : 395}
,
{
"name" : "isVisible",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Checks whether the window has been mapped (with gdk_window_show() or\n gdk_window_show_unraised()).\n Returns: TRUE if the window is mapped\n\t \n",
"line" : 406}
,
{
"name" : "isViewable",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Check if the window and all ancestors of the window are\n mapped. (This is not necessarily \"viewable\" in the X sense, since\n we only check as far as we have GDK window parents, not to the root\n window.)\n Returns: TRUE if the window is viewable\n\t \n",
"line" : 419}
,
{
"name" : "isShaped",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether or not the window is shaped.\n Since 2.22\n Returns: TRUE if window is shaped\n\t \n",
"line" : 430}
,
{
"name" : "isInputOnly",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether or not the window is an input only window.\n Since 2.22\n Returns: TRUE if window is input only\n\t \n",
"line" : 441}
,
{
"name" : "getState",
"kind" : "function",
"protection" : "public",
"type" : "GdkWindowState()",
"comment" : "\n Gets the bitwise OR of the currently active window state flags,\n from the GdkWindowState enumeration.\n Returns: window state bitfield\n\t \n",
"line" : 452}
,
{
"name" : "withdraw",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Withdraws a window (unmaps it and asks the window manager to forget about it).\n This function is not really useful as gdk_window_hide() automatically\n withdraws toplevel windows before hiding them.\n\t \n",
"line" : 463}
,
{
"name" : "iconify",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Asks to iconify (minimize) window. The window manager may choose\n to ignore the request, but normally will honor it. Using\n gtk_window_iconify() is preferred, if you have a GtkWindow widget.\n This function only makes sense when window is a toplevel window.\n\t \n",
"line" : 475}
,
{
"name" : "deiconify",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Attempt to deiconify (unminimize) window. On X11 the window manager may\n choose to ignore the request to deiconify. When using GTK+,\n use gtk_window_deiconify() instead of the GdkWindow variant. Or better yet,\n you probably want to use gtk_window_present(), which raises the window, focuses it,\n unminimizes it, and puts it on the current desktop.\n\t \n",
"line" : 488}
,
{
"name" : "stick",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n \"Pins\" a window such that it's on all workspaces and does not scroll\n with viewports, for window managers that have scrollable viewports.\n (When using GtkWindow, gtk_window_stick() may be more useful.)\n On the X11 platform, this function depends on window manager\n support, so may have no effect with many window managers. However,\n GDK will do the best it can to convince the window manager to stick\n the window. For window managers that don't support this operation,\n there's nothing you can do to force it to happen.\n\t \n",
"line" : 504}
,
{
"name" : "unstick",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Reverse operation for gdk_window_stick(); see gdk_window_stick(),\n and gtk_window_unstick().\n\t \n",
"line" : 514}
,
{
"name" : "maximize",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Maximizes the window. If the window was already maximized, then\n this function does nothing.\n On X11, asks the window manager to maximize window, if the window\n manager supports this operation. Not all window managers support\n this, and some deliberately ignore it or don't have a concept of\n \"maximized\"; so you can't rely on the maximization actually\n happening. But it will happen with most standard window managers,\n and GDK makes a best effort to get it to happen.\n On Windows, reliably maximizes the window.\n\t \n",
"line" : 531}
,
{
"name" : "unmaximize",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Unmaximizes the window. If the window wasn't maximized, then this\n function does nothing.\n On X11, asks the window manager to unmaximize window, if the\n window manager supports this operation. Not all window managers\n support this, and some deliberately ignore it or don't have a\n concept of \"maximized\"; so you can't rely on the unmaximization\n actually happening. But it will happen with most standard window\n managers, and GDK makes a best effort to get it to happen.\n On Windows, reliably unmaximizes the window.\n\t \n",
"line" : 548}
,
{
"name" : "fullscreen",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Moves the window into fullscreen mode. This means the\n window covers the entire screen and is above any panels\n or task bars.\n If the window was already fullscreen, then this function does nothing.\n On X11, asks the window manager to put window in a fullscreen\n state, if the window manager supports this operation. Not all\n window managers support this, and some deliberately ignore it or\n don't have a concept of \"fullscreen\"; so you can't rely on the\n fullscreenification actually happening. But it will happen with\n most standard window managers, and GDK makes a best effort to get\n it to happen.\n Since 2.2\n\t \n",
"line" : 568}
,
{
"name" : "unfullscreen",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Moves the window out of fullscreen mode. If the window was not\n fullscreen, does nothing.\n On X11, asks the window manager to move window out of the fullscreen\n state, if the window manager supports this operation. Not all\n window managers support this, and some deliberately ignore it or\n don't have a concept of \"fullscreen\"; so you can't rely on the\n unfullscreenification actually happening. But it will happen with\n most standard window managers, and GDK makes a best effort to get\n it to happen.\n Since 2.2\n\t \n",
"line" : 586}
,
{
"name" : "setKeepAbove",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n Set if window must be kept above other windows. If the\n window was already above, then this function does nothing.\n On X11, asks the window manager to keep window above, if the window\n manager supports this operation. Not all window managers support\n this, and some deliberately ignore it or don't have a concept of\n \"keep above\"; so you can't rely on the window being kept above.\n But it will happen with most standard window managers,\n and GDK makes a best effort to get it to happen.\n Since 2.4\n Params:\n setting = whether to keep window above other windows\n\t \n",
"line" : 605}
,
{
"name" : "setKeepBelow",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n Set if window must be kept below other windows. If the\n window was already below, then this function does nothing.\n On X11, asks the window manager to keep window below, if the window\n manager supports this operation. Not all window managers support\n this, and some deliberately ignore it or don't have a concept of\n \"keep below\"; so you can't rely on the window being kept below.\n But it will happen with most standard window managers,\n and GDK makes a best effort to get it to happen.\n Since 2.4\n Params:\n setting = whether to keep window below other windows\n\t \n",
"line" : 624}
,
{
"name" : "setOpacity",
"kind" : "function",
"protection" : "public",
"type" : "void(double opacity)",
"comment" : "\n Request the windowing system to make window partially transparent,\n with opacity 0 being fully transparent and 1 fully opaque. (Values\n of the opacity parameter are clamped to the [0,1] range.)\n On X11, this works only on X screens with a compositing manager\n running.\n For setting up per-pixel alpha, see gdk_screen_get_rgba_colormap().\n For making non-toplevel windows translucent, see\n gdk_window_set_composited().\n Since 2.12\n Params:\n opacity = opacity\n\t \n",
"line" : 643}
,
{
"name" : "setComposited",
"kind" : "function",
"protection" : "public",
"type" : "void(int composited)",
"comment" : "\n Sets a GdkWindow as composited, or unsets it. Composited\n windows do not automatically have their contents drawn to\n the screen. Drawing is redirected to an offscreen buffer\n and an expose event is emitted on the parent of the composited\n window. It is the responsibility of the parent's expose handler\n to manually merge the off-screen content onto the screen in\n whatever way it sees fit. See Example  7, “Composited windows”\n for an example.\n It only makes sense for child windows to be composited; see\n gdk_window_set_opacity() if you need translucent toplevel\n windows.\n An additional effect of this call is that the area of this\n window is no longer clipped from regions marked for\n invalidation on its parent. Draws done on the parent\n window are also no longer clipped by the child.\n This call is only supported on some systems (currently,\n only X11 with new enough Xcomposite and Xdamage extensions).\n You must call gdk_display_supports_composite() to check if\n setting a window as composited is supported before\n attempting to do so.\n Since 2.12\n Params:\n composited = TRUE to set the window as composited\n\t \n",
"line" : 674}
,
{
"name" : "getComposited",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether window is composited.\n See gdk_window_set_composited().\n Since 2.22\n Returns: TRUE if the window is composited.\n\t \n",
"line" : 686}
,
{
"name" : "move",
"kind" : "function",
"protection" : "public",
"type" : "void(int x, int y)",
"comment" : "\n Repositions a window relative to its parent window.\n For toplevel windows, window managers may ignore or modify the move;\n you should probably use gtk_window_move() on a GtkWindow widget\n anyway, instead of using GDK functions. For child windows,\n the move will reliably succeed.\n If you're also planning to resize the window, use gdk_window_move_resize()\n to both move and resize simultaneously, for a nicer visual effect.\n Params:\n x = X coordinate relative to window's parent\n y = Y coordinate relative to window's parent\n\t \n",
"line" : 704}
,
{
"name" : "resize",
"kind" : "function",
"protection" : "public",
"type" : "void(int width, int height)",
"comment" : "\n Resizes window; for toplevel windows, asks the window manager to resize\n the window. The window manager may not allow the resize. When using GTK+,\n use gtk_window_resize() instead of this low-level GDK function.\n Windows may not be resized below 1x1.\n If you're also planning to move the window, use gdk_window_move_resize()\n to both move and resize simultaneously, for a nicer visual effect.\n Params:\n width = new width of the window\n height = new height of the window\n\t \n",
"line" : 721}
,
{
"name" : "moveResize",
"kind" : "function",
"protection" : "public",
"type" : "void(int x, int y, int width, int height)",
"comment" : "\n Equivalent to calling gdk_window_move() and gdk_window_resize(),\n except that both operations are performed at once, avoiding strange\n visual effects. (i.e. the user may be able to see the window first\n move, then resize, if you don't use gdk_window_move_resize().)\n Params:\n x = new X position relative to window's parent\n y = new Y position relative to window's parent\n width = new width\n height = new height\n\t \n",
"line" : 738}
,
{
"name" : "scroll",
"kind" : "function",
"protection" : "public",
"type" : "void(int dx, int dy)",
"comment" : "\n Scroll the contents of its window, both pixels and children, by\n the given amount. Portions of the window that the scroll operation\n brings in from offscreen areas are invalidated.\n Params:\n dx = Amount to scroll in the X direction\n dy = Amount to scroll in the Y direction\n\t \n",
"line" : 752}
,
{
"name" : "moveRegion",
"kind" : "function",
"protection" : "public",
"type" : "void(Region region, int dx, int dy)",
"comment" : "\n Move the part of window indicated by region by dy pixels in the Y\n direction and dx pixels in the X direction. The portions of region\n that not covered by the new position of region are invalidated.\n Child windows are not moved.\n Since 2.8\n Params:\n region = The GdkRegion to move\n dx = Amount to move in the X direction\n dy = Amount to move in the Y direction\n\t \n",
"line" : 769}
,
{
"name" : "flush",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Flush all outstanding cached operations on a window, leaving the\n window in a state which reflects all that has been drawn before.\n Gdk uses multiple kinds of caching to get better performance and\n nicer drawing. For instance, during exposes all paints to a window\n using double buffered rendering are keep on a pixmap until the last\n window has been exposed. It also delays window moves\/scrolls until\n as long as possible until next update to avoid tearing when moving\n windows.\n Normally this should be completely invisible to applications, as\n we automatically flush the windows when required, but this might\n be needed if you for instance mix direct native drawing with\n gdk drawing. For Gtk widgets that don't use double buffering this\n will be called automatically before sending the expose event.\n Since 2.18\n\t \n",
"line" : 791}
,
{
"name" : "hasNative",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Checks whether the window has a native window or not. Note that\n you can use gdk_window_ensure_native() if a native window is needed.\n Since 2.22\n Returns: TRUE if the window has a native window, FALSE otherwise.\n\t \n",
"line" : 803}
,
{
"name" : "ensureNative",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Tries to ensure that there is a window-system native window for this\n GdkWindow. This may fail in some situations, returning FALSE.\n Offscreen window and children of them can never have native windows.\n Some backends may not support native child windows.\n Since 2.18\n Returns: TRUE if the window has a native window, FALSE otherwise\n\t \n",
"line" : 817}
,
{
"name" : "reparent",
"kind" : "function",
"protection" : "public",
"type" : "void(Window newParent, int x, int y)",
"comment" : "\n Reparents window into the given new_parent. The window being\n reparented will be unmapped as a side effect.\n Params:\n newParent = new parent to move window into\n x = X location inside the new parent\n y = Y location inside the new parent\n\t \n",
"line" : 831}
,
{
"name" : "clear",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Clears an entire window to the background color or background pixmap.\n\t \n",
"line" : 840}
,
{
"name" : "clearArea",
"kind" : "function",
"protection" : "public",
"type" : "void(int x, int y, int width, int height)",
"comment" : "\n Clears an area of window to the background color or background pixmap.\n Params:\n x = x coordinate of rectangle to clear\n y = y coordinate of rectangle to clear\n width = width of rectangle to clear\n height = height of rectangle to clear\n\t \n",
"line" : 854}
,
{
"name" : "clearAreaE",
"kind" : "function",
"protection" : "public",
"type" : "void(int x, int y, int width, int height)",
"comment" : "\n Like gdk_window_clear_area(), but also generates an expose event for\n the cleared area.\n This function has a stupid name because it dates back to the mists\n time, pre-GDK-1.0.\n Params:\n x = x coordinate of rectangle to clear\n y = y coordinate of rectangle to clear\n width = width of rectangle to clear\n height = height of rectangle to clear\n\t \n",
"line" : 871}
,
{
"name" : "raise",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Raises window to the top of the Z-order (stacking order), so that\n other windows with the same parent window appear below window.\n This is true whether or not the windows are visible.\n If window is a toplevel, the window manager may choose to deny the\n request to move the window in the Z-order, gdk_window_raise() only\n requests the restack, does not guarantee it.\n\t \n",
"line" : 885}
,
{
"name" : "lower",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Lowers window to the bottom of the Z-order (stacking order), so that\n other windows with the same parent window appear above window.\n This is true whether or not the other windows are visible.\n If window is a toplevel, the window manager may choose to deny the\n request to move the window in the Z-order, gdk_window_lower() only\n requests the restack, does not guarantee it.\n Note that gdk_window_show() raises the window again, so don't call this\n function before gdk_window_show(). (Try gdk_window_show_unraised().)\n\t \n",
"line" : 901}
,
{
"name" : "restack",
"kind" : "function",
"protection" : "public",
"type" : "void(Window sibling, int above)",
"comment" : "\n Changes the position of window in the Z-order (stacking order), so that\n it is above sibling (if above is TRUE) or below sibling (if above is\n FALSE).\n If sibling is NULL, then this either raises (if above is TRUE) or\n lowers the window.\n If window is a toplevel, the window manager may choose to deny the\n request to move the window in the Z-order, gdk_window_restack() only\n requests the restack, does not guarantee it.\n Since 2.18\n Params:\n sibling = a GdkWindow that is a sibling of window, or NULL. [allow-none]\n above = a boolean\n\t \n",
"line" : 921}
,
{
"name" : "focus",
"kind" : "function",
"protection" : "public",
"type" : "void(uint timestamp)",
"comment" : "\n Sets keyboard focus to window. In most cases, gtk_window_present()\n should be used on a GtkWindow, rather than calling this function.\n Params:\n timestamp = timestamp of the event triggering the window focus\n\t \n",
"line" : 933}
,
{
"name" : "registerDnd",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Registers a window as a potential drop destination.\n\t \n",
"line" : 942}
,
{
"name" : "beginResizeDrag",
"kind" : "function",
"protection" : "public",
"type" : "void(GdkWindowEdge edge, int button, int rootX, int rootY, uint timestamp)",
"comment" : "\n Begins a window resize operation (for a toplevel window).\n You might use this function to implement a \"window resize grip,\" for\n example; in fact GtkStatusbar uses it. The function works best\n with window managers that support the Extended Window Manager Hints, but has a\n fallback implementation for other window managers.\n Params:\n edge = the edge or corner from which the drag is started\n button = the button being used to drag\n rootX = root window X coordinate of mouse click that began the drag\n rootY = root window Y coordinate of mouse click that began the drag\n timestamp = timestamp of mouse click that began the drag (use gdk_event_get_time())\n\t \n",
"line" : 961}
,
{
"name" : "beginMoveDrag",
"kind" : "function",
"protection" : "public",
"type" : "void(int button, int rootX, int rootY, uint timestamp)",
"comment" : "\n Begins a window move operation (for a toplevel window). You might\n use this function to implement a \"window move grip,\" for\n example. The function works best with window managers that support\n the Extended\n Window Manager Hints, but has a fallback implementation for\n other window managers.\n Params:\n button = the button being used to drag\n rootX = root window X coordinate of mouse click that began the drag\n rootY = root window Y coordinate of mouse click that began the drag\n timestamp = timestamp of mouse click that began the drag\n\t \n",
"line" : 980}
,
{
"name" : "constrainSize",
"kind" : "function",
"protection" : "public",
"type" : "void(GdkGeometry* geometry, uint flags, int width, int height, out int newWidth, out int newHeight)",
"comment" : "\n Constrains a desired width and height according to a\n set of geometry hints (such as minimum and maximum size).\n Params:\n geometry = a GdkGeometry structure\n flags = a mask indicating what portions of geometry are set\n width = desired width of window\n height = desired height of the window\n newWidth = location to store resulting width\n newHeight = location to store resulting height\n\t \n",
"line" : 997}
,
{
"name" : "beep",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Emits a short beep associated to window in the appropriate\n display, if supported. Otherwise, emits a short beep on\n the display just as gdk_display_beep().\n Since 2.12\n\t \n",
"line" : 1009}
,
{
"name" : "beginPaintRect",
"kind" : "function",
"protection" : "public",
"type" : "void(Rectangle rectangle)",
"comment" : "\n A convenience wrapper around gdk_window_begin_paint_region() which\n creates a rectangular region for you. See\n gdk_window_begin_paint_region() for details.\n Params:\n rectangle = rectangle you intend to draw to\n\t \n",
"line" : 1022}
,
{
"name" : "beginPaintRegion",
"kind" : "function",
"protection" : "public",
"type" : "void(Region region)",
"comment" : "\n Indicates that you are beginning the process of redrawing region.\n A backing store (offscreen buffer) large enough to contain region\n will be created. The backing store will be initialized with the\n background color or background pixmap for window. Then, all\n drawing operations performed on window will be diverted to the\n backing store. When you call gdk_window_end_paint(), the backing\n store will be copied to window, making it visible onscreen. Only\n the part of window contained in region will be modified; that is,\n drawing operations are clipped to region.\n The net result of all this is to remove flicker, because the user\n sees the finished product appear all at once when you call\n gdk_window_end_paint(). If you draw to window directly without\n calling gdk_window_begin_paint_region(), the user may see flicker\n as individual drawing operations are performed in sequence. The\n clipping and background-initializing features of\n gdk_window_begin_paint_region() are conveniences for the\n programmer, so you can avoid doing that work yourself.\n When using GTK+, the widget system automatically places calls to\n gdk_window_begin_paint_region() and gdk_window_end_paint() around\n emissions of the expose_event signal. That is, if you're writing an\n expose event handler, you can assume that the exposed area in\n GdkEventExpose has already been cleared to the window background,\n is already set as the clip region, and already has a backing store.\n Therefore in most cases, application code need not call\n gdk_window_begin_paint_region(). (You can disable the automatic\n calls around expose events on a widget-by-widget basis by calling\n gtk_widget_set_double_buffered().)\n If you call this function multiple times before calling the\n matching gdk_window_end_paint(), the backing stores are pushed onto\n a stack. gdk_window_end_paint() copies the topmost backing store\n onscreen, subtracts the topmost region from all other regions in\n the stack, and pops the stack. All drawing operations affect only\n the topmost backing store in the stack. One matching call to\n gdk_window_end_paint() is required for each call to\n gdk_window_begin_paint_region().\n Params:\n region = region you intend to draw to\n\t \n",
"line" : 1067}
,
{
"name" : "endPaint",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Indicates that the backing store created by the most recent call to\n gdk_window_begin_paint_region() should be copied onscreen and\n deleted, leaving the next-most-recent backing store or no backing\n store at all as the active paint region. See\n gdk_window_begin_paint_region() for full details. It is an error to\n call this function without a matching\n gdk_window_begin_paint_region() first.\n\t \n",
"line" : 1082}
,
{
"name" : "invalidateRect",
"kind" : "function",
"protection" : "public",
"type" : "void(Rectangle rect, int invalidateChildren)",
"comment" : "\n A convenience wrapper around gdk_window_invalidate_region() which\n invalidates a rectangular region. See\n gdk_window_invalidate_region() for details.\n Params:\n rect = rectangle to invalidate or NULL to invalidate the whole\n  window. [allow-none]\n invalidateChildren = whether to also invalidate child windows\n\t \n",
"line" : 1097}
,
{
"name" : "invalidateRegion",
"kind" : "function",
"protection" : "public",
"type" : "void(Region region, int invalidateChildren)",
"comment" : "\n Adds region to the update area for window. The update area is the\n region that needs to be redrawn, or \"dirty region.\" The call\n gdk_window_process_updates() sends one or more expose events to the\n window, which together cover the entire update area. An\n application would normally redraw the contents of window in\n response to those expose events.\n GDK will call gdk_window_process_all_updates() on your behalf\n whenever your program returns to the main loop and becomes idle, so\n normally there's no need to do that manually, you just need to\n invalidate regions that you know should be redrawn.\n The invalidate_children parameter controls whether the region of\n each child window that intersects region will also be invalidated.\n If FALSE, then the update area for child windows will remain\n unaffected. See gdk_window_invalidate_maybe_recurse if you need\n fine grained control over which children are invalidated.\n Params:\n region = a GdkRegion\n invalidateChildren = TRUE to also invalidate child windows\n\t \n",
"line" : 1123}
,
{
"name" : "getUpdateArea",
"kind" : "function",
"protection" : "public",
"type" : "Region()",
"comment" : "\n Transfers ownership of the update area from window to the caller\n of the function. That is, after calling this function, window will\n no longer have an invalid\/dirty region; the update area is removed\n from window and handed to you. If a window has no update area,\n gdk_window_get_update_area() returns NULL. You are responsible for\n calling gdk_region_destroy() on the returned region if it's non-NULL.\n Returns: the update area for window\n\t \n",
"line" : 1138}
,
{
"name" : "freezeUpdates",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Temporarily freezes a window such that it won't receive expose\n events. The window will begin receiving expose events again when\n gdk_window_thaw_updates() is called. If gdk_window_freeze_updates()\n has been called more than once, gdk_window_thaw_updates() must be called\n an equal number of times to begin processing exposes.\n\t \n",
"line" : 1156}
,
{
"name" : "thawUpdates",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Thaws a window frozen with gdk_window_freeze_updates().\n\t \n",
"line" : 1165}
,
{
"name" : "processAllUpdates",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Calls gdk_window_process_updates() for all windows (see GdkWindow)\n in the application.\n\t \n",
"line" : 1175}
,
{
"name" : "processUpdates",
"kind" : "function",
"protection" : "public",
"type" : "void(int updateChildren)",
"comment" : "\n Sends one or more expose events to window. The areas in each\n expose event will cover the entire update area for the window (see\n gdk_window_invalidate_region() for details). Normally GDK calls\n gdk_window_process_all_updates() on your behalf, so there's no\n need to call this function unless you want to force expose events\n to be delivered immediately and synchronously (vs. the usual\n case, where GDK delivers them in an idle handler). Occasionally\n this is useful to produce nicer scrolling behavior, for example.\n Params:\n updateChildren = whether to also process updates for child windows\n\t \n",
"line" : 1193}
,
{
"name" : "setDebugUpdates",
"kind" : "function",
"protection" : "public",
"type" : "void(int setting)",
"comment" : "\n With update debugging enabled, calls to\n gdk_window_invalidate_region() clear the invalidated region of the\n screen to a noticeable color, and GDK pauses for a short time\n before sending exposes to windows during\n gdk_window_process_updates(). The net effect is that you can see\n the invalid region for each window and watch redraws as they\n occur. This allows you to diagnose inefficiencies in your application.\n In essence, because the GDK rendering model prevents all flicker,\n if you are redrawing the same region 400 times you may never\n notice, aside from noticing a speed problem. Enabling update\n debugging causes GTK to flicker slowly and noticeably, so you can\n see exactly what's being redrawn when, in what order.\n The --gtk-debug=updates command line option passed to GTK+ programs\n enables this debug option at application startup time. That's\n usually more useful than calling gdk_window_set_debug_updates()\n yourself, though you might want to use this function to enable\n updates sometime after application startup time.\n Params:\n setting = TRUE to turn on update debugging\n\t \n",
"line" : 1220}
,
{
"name" : "getInternalPaintInfo",
"kind" : "function",
"protection" : "public",
"type" : "void(out Drawable realDrawable, out int xOffset, out int yOffset)",
"comment" : "\n If you bypass the GDK layer and use windowing system primitives to\n draw directly onto a GdkWindow, then you need to deal with two\n details: there may be an offset between GDK coordinates and windowing\n system coordinates, and GDK may have redirected drawing to a offscreen\n pixmap as the result of a gdk_window_begin_paint_region() calls.\n This function allows retrieving the information you need to compensate\n for these effects.\n This function exposes details of the GDK implementation, and is thus\n likely to change in future releases of GDK.\n Params:\n realDrawable = location to store the drawable to which drawing should be\n  done. [out]\n xOffset = location to store the X offset between coordinates in window,\n  and the underlying window system primitive coordinates for\n  *real_drawable. [out]\n yOffset = location to store the Y offset between coordinates in window,\n  and the underlying window system primitive coordinates for\n  *real_drawable. [out]\n\t \n",
"line" : 1246}
,
{
"name" : "enableSynchronizedConfigure",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Indicates that the application will cooperate with the window\n system in synchronizing the window repaint with the window\n manager during resizing operations. After an application calls\n this function, it must call gdk_window_configure_finished() every\n time it has finished all processing associated with a set of\n Configure events. Toplevel GTK+ windows automatically use this\n protocol.\n On X, calling this function makes window participate in the\n _NET_WM_SYNC_REQUEST window manager protocol.\n Since 2.6\n\t \n",
"line" : 1268}
,
{
"name" : "configureFinished",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Signal to the window system that the application has finished\n handling Configure events it has received. Window Managers can\n use this to better synchronize the frame repaint with the\n application. GTK+ applications will automatically call this\n function when appropriate.\n This function can only be called if gdk_window_enable_synchronized_configure()\n was called previously.\n Since 2.6\n\t \n",
"line" : 1284}
,
{
"name" : "setUserData",
"kind" : "function",
"protection" : "public",
"type" : "void(void* userData)",
"comment" : "\n For most purposes this function is deprecated in favor of\n g_object_set_data(). However, for historical reasons GTK+ stores\n the GtkWidget that owns a GdkWindow as user data on the\n GdkWindow. So, custom widget implementations should use\n this function for that. If GTK+ receives an event for a GdkWindow,\n and the user data for the window is non-NULL, GTK+ will assume the\n user data is a GtkWidget, and forward the event to that widget.\n Params:\n userData = user data\n\t \n",
"line" : 1301}
,
{
"name" : "setOverrideRedirect",
"kind" : "function",
"protection" : "public",
"type" : "void(int overrideRedirect)",
"comment" : "\n An override redirect window is not under the control of the window manager.\n This means it won't have a titlebar, won't be minimizable, etc. - it will\n be entirely under the control of the application. The window manager\n can't see the override redirect window at all.\n Override redirect should only be used for short-lived temporary\n windows, such as popup menus. GtkMenu uses an override redirect\n window in its implementation, for example.\n Params:\n overrideRedirect = TRUE if window should be override redirect\n\t \n",
"line" : 1318}
,
{
"name" : "setAcceptFocus",
"kind" : "function",
"protection" : "public",
"type" : "void(int acceptFocus)",
"comment" : "\n Setting accept_focus to FALSE hints the desktop environment that the\n window doesn't want to receive input focus.\n On X, it is the responsibility of the window manager to interpret this\n hint. ICCCM-compliant window manager usually respect it.\n Since 2.4\n Params:\n acceptFocus = TRUE if the window should receive input focus\n\t \n",
"line" : 1333}
,
{
"name" : "getAcceptFocus",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether or not the desktop environment shuld be hinted that\n the window does not want to receive input focus.\n Since 2.22\n Returns: whether or not the window should receive input focus.\n\t \n",
"line" : 1345}
,
{
"name" : "setFocusOnMap",
"kind" : "function",
"protection" : "public",
"type" : "void(int focusOnMap)",
"comment" : "\n Setting focus_on_map to FALSE hints the desktop environment that the\n window doesn't want to receive input focus when it is mapped.\n focus_on_map should be turned off for windows that aren't triggered\n interactively (such as popups from network activity).\n On X, it is the responsibility of the window manager to interpret\n this hint. Window managers following the freedesktop.org window\n manager extension specification should respect it.\n Since 2.6\n Params:\n focusOnMap = TRUE if the window should receive input focus when mapped\n\t \n",
"line" : 1363}
,
{
"name" : "getFocusOnMap",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether or not the desktop environment should be hinted that the\n window does not want to receive input focus when it is mapped.\n Since 2.22\n Returns: whether or not the window wants to receive input focus when it is mapped.\n\t \n",
"line" : 1375}
,
{
"name" : "addFilter",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) GdkFilterReturn function(void*, GdkEvent*, void*) funct, void* data)",
"comment" : "\n Adds an event filter to window, allowing you to intercept events\n before they reach GDK. This is a low-level operation and makes it\n easy to break GDK and\/or GTK+, so you have to know what you're\n doing. Pass NULL for window to get all events for all windows,\n instead of events for a specific window.\n See gdk_display_add_client_message_filter() if you are interested\n in X ClientMessage events.\n Params:\n data = data to pass to filter callback\n\t \n",
"line" : 1392}
,
{
"name" : "removeFilter",
"kind" : "function",
"protection" : "public",
"type" : "void(extern (C) GdkFilterReturn function(void*, GdkEvent*, void*) funct, void* data)",
"comment" : "\n Remove a filter previously added with gdk_window_add_filter().\n Params:\n data = user data for previously-added filter function\n\t \n",
"line" : 1403}
,
{
"name" : "shapeCombineMask",
"kind" : "function",
"protection" : "public",
"type" : "void(Bitmap mask, int x, int y)",
"comment" : "\n Applies a shape mask to window. Pixels in window corresponding to\n set bits in the mask will be visible; pixels in window\n corresponding to unset bits in the mask will be transparent. This\n gives a non-rectangular window.\n If mask is NULL, the shape mask will be unset, and the x\/y\n parameters are not used.\n On the X11 platform, this uses an X server extension which is\n widely available on most common platforms, but not available on\n very old X servers, and occasionally the implementation will be\n buggy. On servers without the shape extension, this function\n will do nothing.\n This function works on both toplevel and child windows.\n Params:\n mask = shape mask\n x = X position of shape mask with respect to window\n y = Y position of shape mask with respect to window\n\t \n",
"line" : 1427}
,
{
"name" : "shapeCombineRegion",
"kind" : "function",
"protection" : "public",
"type" : "void(Region shapeRegion, int offsetX, int offsetY)",
"comment" : "\n Makes pixels in window outside shape_region be transparent,\n so that the window may be nonrectangular. See also\n gdk_window_shape_combine_mask() to use a bitmap as the mask.\n If shape_region is NULL, the shape will be unset, so the whole\n window will be opaque again. offset_x and offset_y are ignored\n if shape_region is NULL.\n On the X11 platform, this uses an X server extension which is\n widely available on most common platforms, but not available on\n very old X servers, and occasionally the implementation will be\n buggy. On servers without the shape extension, this function\n will do nothing.\n This function works on both toplevel and child windows.\n Params:\n shapeRegion = region of window to be non-transparent\n offsetX = X position of shape_region in window coordinates\n offsetY = Y position of shape_region in window coordinates\n\t \n",
"line" : 1451}
,
{
"name" : "setChildShapes",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Sets the shape mask of window to the union of shape masks\n for all children of window, ignoring the shape mask of window\n itself. Contrast with gdk_window_merge_child_shapes() which includes\n the shape mask of window in the masks to be merged.\n\t \n",
"line" : 1463}
,
{
"name" : "mergeChildShapes",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Merges the shape masks for any child windows into the\n shape mask for window. i.e. the union of all masks\n for window and its children will become the new mask\n for window. See gdk_window_shape_combine_mask().\n This function is distinct from gdk_window_set_child_shapes()\n because it includes window's shape mask in the set of shapes to\n be merged.\n\t \n",
"line" : 1478}
,
{
"name" : "inputShapeCombineMask",
"kind" : "function",
"protection" : "public",
"type" : "void(Bitmap mask, int x, int y)",
"comment" : "\n Like gdk_window_shape_combine_mask(), but the shape applies\n only to event handling. Mouse events which happen while\n the pointer position corresponds to an unset bit in the\n mask will be passed on the window below window.\n An input shape is typically used with RGBA windows.\n The alpha channel of the window defines which pixels are\n invisible and allows for nicely antialiased borders,\n and the input shape controls where the window is\n \"clickable\".\n On the X11 platform, this requires version 1.1 of the\n shape extension.\n On the Win32 platform, this functionality is not present and the\n function does nothing.\n Since 2.10\n Params:\n mask = shape mask, or NULL. [allow-none]\n x = X position of shape mask with respect to window\n y = Y position of shape mask with respect to window\n\t \n",
"line" : 1504}
,
{
"name" : "inputShapeCombineRegion",
"kind" : "function",
"protection" : "public",
"type" : "void(Region shapeRegion, int offsetX, int offsetY)",
"comment" : "\n Like gdk_window_shape_combine_region(), but the shape applies\n only to event handling. Mouse events which happen while\n the pointer position corresponds to an unset bit in the\n mask will be passed on the window below window.\n An input shape is typically used with RGBA windows.\n The alpha channel of the window defines which pixels are\n invisible and allows for nicely antialiased borders,\n and the input shape controls where the window is\n \"clickable\".\n On the X11 platform, this requires version 1.1 of the\n shape extension.\n On the Win32 platform, this functionality is not present and the\n function does nothing.\n Since 2.10\n Params:\n shapeRegion = region of window to be non-transparent\n offsetX = X position of shape_region in window coordinates\n offsetY = Y position of shape_region in window coordinates\n\t \n",
"line" : 1530}
,
{
"name" : "setChildInputShapes",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Sets the input shape mask of window to the union of input shape masks\n for all children of window, ignoring the input shape mask of window\n itself. Contrast with gdk_window_merge_child_input_shapes() which includes\n the input shape mask of window in the masks to be merged.\n Since 2.10\n\t \n",
"line" : 1543}
,
{
"name" : "mergeChildInputShapes",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Merges the input shape masks for any child windows into the\n input shape mask for window. i.e. the union of all input masks\n for window and its children will become the new input mask\n for window. See gdk_window_input_shape_combine_mask().\n This function is distinct from gdk_window_set_child_input_shapes()\n because it includes window's input shape mask in the set of\n shapes to be merged.\n Since 2.10\n\t \n",
"line" : 1559}
,
{
"name" : "setStaticGravities",
"kind" : "function",
"protection" : "public",
"type" : "int(int useStatic)",
"comment" : "\n Set the bit gravity of the given window to static, and flag it so\n all children get static subwindow gravity. This is used if you are\n implementing scary features that involve deep knowledge of the\n windowing system. Don't worry about it unless you have to.\n Params:\n useStatic = TRUE to turn on static gravity\n Returns: TRUE if the server supports static gravity\n\t \n",
"line" : 1574}
,
{
"name" : "setHints",
"kind" : "function",
"protection" : "public",
"type" : "void(int x, int y, int minWidth, int minHeight, int maxWidth, int maxHeight, int flags)",
"comment" : "\n Warning\n gdk_window_set_hints is deprecated and should not be used in newly-written code.\n This function is broken and useless and you should ignore it.\n If using GTK+, use functions such as gtk_window_resize(), gtk_window_set_size_request(),\n gtk_window_move(), gtk_window_parse_geometry(), and gtk_window_set_geometry_hints(),\n depending on what you're trying to do.\n If using GDK directly, use gdk_window_set_geometry_hints().\n Params:\n x = ignored field, does not matter\n y = ignored field, does not matter\n minWidth = minimum width hint\n minHeight = minimum height hint\n maxWidth = max width hint\n maxHeight = max height hint\n flags = logical OR of GDK_HINT_POS, GDK_HINT_MIN_SIZE, and\/or GDK_HINT_MAX_SIZE\n\t \n",
"line" : 1597}
,
{
"name" : "setTitle",
"kind" : "function",
"protection" : "public",
"type" : "void(string title)",
"comment" : "\n Sets the title of a toplevel window, to be displayed in the titlebar.\n If you haven't explicitly set the icon name for the window\n (using gdk_window_set_icon_name()), the icon name will be set to\n title as well. title must be in UTF-8 encoding (as with all\n user-readable strings in GDK\/GTK+). title may not be NULL.\n Params:\n title = title of window\n\t \n",
"line" : 1612}
,
{
"name" : "setBackground",
"kind" : "function",
"protection" : "public",
"type" : "void(Color color)",
"comment" : "\n Sets the background color of window. (However, when using GTK+,\n set the background of a widget with gtk_widget_modify_bg() - if\n you're an application - or gtk_style_set_background() - if you're\n implementing a custom widget.)\n The color must be allocated; gdk_rgb_find_color() is the best way\n to allocate a color.\n See also gdk_window_set_background_pixmap().\n Params:\n color = an allocated GdkColor\n\t \n",
"line" : 1629}
,
{
"name" : "setBackPixmap",
"kind" : "function",
"protection" : "public",
"type" : "void(Pixmap pixmap, int parentRelative)",
"comment" : "\n Sets the background pixmap of window. May also be used to set a\n background of \"None\" on window, by setting a background pixmap\n of NULL.\n A background pixmap will be tiled, positioning the first tile at\n the origin of window, or if parent_relative is TRUE, the tiling\n will be done based on the origin of the parent window (useful to\n align tiles in a parent with tiles in a child).\n A background pixmap of NULL means that the window will have no\n background. A window with no background will never have its\n background filled by the windowing system, instead the window will\n contain whatever pixels were already in the corresponding area of\n the display.\n The windowing system will normally fill a window with its background\n when the window is obscured then exposed, and when you call\n gdk_window_clear().\n Params:\n pixmap = a GdkPixmap, or NULL. [allow-none]\n parentRelative = whether the tiling origin is at the origin of\n  window's parent\n\t \n",
"line" : 1656}
,
{
"name" : "getBackgroundPattern",
"kind" : "function",
"protection" : "public",
"type" : "Pattern()",
"comment" : "\n Gets the pattern used to clear the background on window. If window\n does not have its own background and reuses the parent's, NULL is\n returned and you'll have to query it yourself.\n Since 2.22\n Returns: The pattern to use for the background or NULL to use the parent's background.\n\t \n",
"line" : 1669}
,
{
"name" : "setCursor",
"kind" : "function",
"protection" : "public",
"type" : "void(Cursor cursor)",
"comment" : "\n Sets the mouse pointer for a GdkWindow. Use gdk_cursor_new_for_display()\n or gdk_cursor_new_from_pixmap() to create the cursor. To make the cursor\n invisible, use GDK_BLANK_CURSOR. Passing NULL for the cursor argument\n to gdk_window_set_cursor() means that window will use the cursor of its\n parent window. Most windows should use this default.\n Params:\n cursor = a cursor. [allow-none]\n\t \n",
"line" : 1689}
,
{
"name" : "getCursor",
"kind" : "function",
"protection" : "public",
"type" : "Cursor()",
"comment" : "\n Retrieves a GdkCursor pointer for the cursor currently set on the\n specified GdkWindow, or NULL. If the return value is NULL then\n there is no custom cursor set on the specified window, and it is\n using the cursor for its parent window.\n Since 2.18\n Returns: a GdkCursor, or NULL. The returned object is owned by the GdkWindow and should not be unreferenced directly. Use gdk_window_set_cursor() to unset the cursor of the window\n\t \n",
"line" : 1703}
,
{
"name" : "getUserData",
"kind" : "function",
"protection" : "public",
"type" : "void(void** data)",
"comment" : "\n Retrieves the user data for window, which is normally the widget\n that window belongs to. See gdk_window_set_user_data().\n Params:\n data = return location for user data\n\t \n",
"line" : 1720}
,
{
"name" : "getGeometry",
"kind" : "function",
"protection" : "public",
"type" : "void(out int x, out int y, out int width, out int height, out int depth)",
"comment" : "\n Any of the return location arguments to this function may be NULL,\n if you aren't interested in getting the value of that field.\n The X and Y coordinates returned are relative to the parent window\n of window, which for toplevels usually means relative to the\n window decorations (titlebar, etc.) rather than relative to the\n root window (screen-size background window).\n On the X11 platform, the geometry is obtained from the X server,\n so reflects the latest position of window; this may be out-of-sync\n with the position of window delivered in the most-recently-processed\n GdkEventConfigure. gdk_window_get_position() in contrast gets the\n position from the most recent configure event.\n Note\n If window is not a toplevel, it is much better\n to call gdk_window_get_position() and gdk_drawable_get_size() instead,\n because it avoids the roundtrip to the X server and because\n gdk_drawable_get_size() supports the full 32-bit coordinate space,\n whereas gdk_window_get_geometry() is restricted to the 16-bit\n coordinates of X11.\n Params:\n x = return location for X coordinate of window (relative to its parent)\n y = return location for Y coordinate of window (relative to its parent)\n width = return location for width of window\n height = return location for height of window\n depth = return location for bit depth of window\n\t \n",
"line" : 1752}
,
{
"name" : "setGeometryHints",
"kind" : "function",
"protection" : "public",
"type" : "void(GdkGeometry* geometry, GdkWindowHints geomMask)",
"comment" : "\n Sets the geometry hints for window. Hints flagged in geom_mask\n are set, hints not flagged in geom_mask are unset.\n To unset all hints, use a geom_mask of 0 and a geometry of NULL.\n This function provides hints to the windowing system about\n acceptable sizes for a toplevel window. The purpose of\n this is to constrain user resizing, but the windowing system\n will typically (but is not required to) also constrain the\n current size of the window to the provided values and\n constrain programatic resizing via gdk_window_resize() or\n gdk_window_move_resize().\n Note that on X11, this effect has no effect on windows\n of type GDK_WINDOW_TEMP or windows where override redirect\n has been turned on via gdk_window_set_override_redirect()\n since these windows are not resizable by the user.\n Since you can't count on the windowing system doing the\n constraints for programmatic resizes, you should generally\n call gdk_window_constrain_size() yourself to determine\n appropriate sizes.\n Params:\n geometry = geometry hints\n geomMask = bitmask indicating fields of geometry to pay attention to\n\t \n",
"line" : 1781}
,
{
"name" : "setIconList",
"kind" : "function",
"protection" : "public",
"type" : "void(ListG pixbufs)",
"comment" : "\n Sets a list of icons for the window. One of these will be used\n to represent the window when it has been iconified. The icon is\n usually shown in an icon box or some sort of task bar. Which icon\n size is shown depends on the window manager. The window manager\n can scale the icon but setting several size icons can give better\n image quality since the window manager may only need to scale the\n icon by a small amount or not at all.\n Params:\n pixbufs = A list of pixbufs, of different sizes. [transfer none][element-type GdkPixbuf]\n\t \n",
"line" : 1798}
,
{
"name" : "setModalHint",
"kind" : "function",
"protection" : "public",
"type" : "void(int modal)",
"comment" : "\n The application can use this hint to tell the window manager\n that a certain window has modal behaviour. The window manager\n can use this information to handle modal windows in a special\n way.\n You should only use this on windows for which you have\n previously called gdk_window_set_transient_for()\n Params:\n modal = TRUE if the window is modal, FALSE otherwise.\n\t \n",
"line" : 1814}
,
{
"name" : "getModalHint",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Determines whether or not the window manager is hinted that window\n has modal behaviour.\n Since 2.22\n Returns: whether or not the window has the modal hint set.\n\t \n",
"line" : 1826}
,
{
"name" : "setTypeHint",
"kind" : "function",
"protection" : "public",
"type" : "void(GdkWindowTypeHint hint)",
"comment" : "\n The application can use this call to provide a hint to the window\n manager about the functionality of a window. The window manager\n can use this information when determining the decoration and behaviour\n of the window.\n The hint must be set before the window is mapped.\n Params:\n hint = A hint of the function this window will have\n\t \n",
"line" : 1841}
,
{
"name" : "getTypeHint",
"kind" : "function",
"protection" : "public",
"type" : "GdkWindowTypeHint()",
"comment" : "\n This function returns the type hint set for a window.\n Since 2.10\n Returns: The type hint set for window\n\t \n",
"line" : 1852}
,
{
"name" : "setSkipTaskbarHint",
"kind" : "function",
"protection" : "public",
"type" : "void(int skipsTaskbar)",
"comment" : "\n Toggles whether a window should appear in a task list or window\n list. If a window's semantic type as specified with\n gdk_window_set_type_hint() already fully describes the window, this\n function should not be called in addition,\n instead you should allow the window to be treated according to\n standard policy for its semantic type.\n Since 2.2\n Params:\n skipsTaskbar = TRUE to skip the taskbar\n\t \n",
"line" : 1869}
,
{
"name" : "setSkipPagerHint",
"kind" : "function",
"protection" : "public",
"type" : "void(int skipsPager)",
"comment" : "\n Toggles whether a window should appear in a pager (workspace\n switcher, or other desktop utility program that displays a small\n thumbnail representation of the windows on the desktop). If a\n window's semantic type as specified with gdk_window_set_type_hint()\n already fully describes the window, this function should\n not be called in addition, instead you should\n allow the window to be treated according to standard policy for\n its semantic type.\n Since 2.2\n Params:\n skipsPager = TRUE to skip the pager\n\t \n",
"line" : 1888}
,
{
"name" : "setUrgencyHint",
"kind" : "function",
"protection" : "public",
"type" : "void(int urgent)",
"comment" : "\n Toggles whether a window needs the user's\n urgent attention.\n Since 2.8\n Params:\n urgent = TRUE if the window is urgent\n\t \n",
"line" : 1901}
,
{
"name" : "getPosition",
"kind" : "function",
"protection" : "public",
"type" : "void(out int x, out int y)",
"comment" : "\n Obtains the position of the window as reported in the\n most-recently-processed GdkEventConfigure. Contrast with\n gdk_window_get_geometry() which queries the X server for the\n current window position, regardless of which events have been\n received or processed.\n The position coordinates are relative to the window's parent window.\n Params:\n x = X coordinate of window\n y = Y coordinate of window\n\t \n",
"line" : 1918}
,
{
"name" : "getRootOrigin",
"kind" : "function",
"protection" : "public",
"type" : "void(out int x, out int y)",
"comment" : "\n Obtains the top-left corner of the window manager frame in root\n window coordinates.\n Params:\n x = return location for X position of window frame\n y = return location for Y position of window frame\n\t \n",
"line" : 1931}
,
{
"name" : "getFrameExtents",
"kind" : "function",
"protection" : "public",
"type" : "void(Rectangle rect)",
"comment" : "\n Obtains the bounding box of the window, including window manager\n titlebar\/borders if any. The frame position is given in root window\n coordinates. To get the position of the window itself (rather than\n the frame) in root window coordinates, use gdk_window_get_origin().\n Params:\n rect = rectangle to fill with bounding box of the window frame\n\t \n",
"line" : 1945}
,
{
"name" : "getOrigin",
"kind" : "function",
"protection" : "public",
"type" : "int(out int x, out int y)",
"comment" : "\n Obtains the position of a window in root window coordinates.\n (Compare with gdk_window_get_position() and\n gdk_window_get_geometry() which return the position of a window\n relative to its parent window.)\n Params:\n x = return location for X coordinate\n y = return location for Y coordinate\n Returns: not meaningful, ignore\n\t \n",
"line" : 1961}
,
{
"name" : "getDeskrelativeOrigin",
"kind" : "function",
"protection" : "public",
"type" : "int(out int x, out int y)",
"comment" : "\n Warning\n gdk_window_get_deskrelative_origin is deprecated and should not be used in newly-written code.\n This gets the origin of a GdkWindow relative to\n an Enlightenment-window-manager desktop. As long as you don't\n assume that the user's desktop\/workspace covers the entire\n root window (i.e. you don't assume that the desktop begins\n at root window coordinate 0,0) this function is not necessary.\n It's deprecated for that reason.\n Params:\n x = return location for X coordinate\n y = return location for Y coordinate\n Returns: not meaningful\n\t \n",
"line" : 1981}
,
{
"name" : "getRootCoords",
"kind" : "function",
"protection" : "public",
"type" : "void(int x, int y, out int rootX, out int rootY)",
"comment" : "\n Obtains the position of a window position in root\n window coordinates. This is similar to\n gdk_window_get_origin() but allows you go pass\n in any position in the window, not just the origin.\n Since 2.18\n Params:\n x = X coordinate in window\n y = Y coordinate in window\n rootX = return location for X coordinate\n rootY = return location for Y coordinate\n\t \n",
"line" : 1999}
,
{
"name" : "coordsFromParent",
"kind" : "function",
"protection" : "public",
"type" : "void(double parentX, double parentY, out double x, out double y)",
"comment" : "\n Transforms window coordinates from a parent window to a child\n window, where the parent window is the normal parent as returned by\n gdk_window_get_parent() for normal windows, and the window's\n embedder as returned by gdk_offscreen_window_get_embedder() for\n offscreen windows.\n For normal windows, calling this function is equivalent to subtracting\n the return values of gdk_window_get_position() from the parent coordinates.\n For offscreen windows however (which can be arbitrarily transformed),\n this function calls the GdkWindow::from-embedder: signal to translate\n the coordinates.\n You should always use this function when writing generic code that\n walks down a window hierarchy.\n See also: gdk_window_coords_to_parent()\n Since 2.22\n Params:\n parentX = X coordinate in parent's coordinate system\n parentY = Y coordinate in parent's coordinate system\n x = return location for X coordinate in child's coordinate system. [out][allow-none]\n y = return location for Y coordinate in child's coordinate system. [out][allow-none]\n\t \n",
"line" : 2026}
,
{
"name" : "coordsToParent",
"kind" : "function",
"protection" : "public",
"type" : "void(double x, double y, out double parentX, out double parentY)",
"comment" : "\n Transforms window coordinates from a child window to its parent\n window, where the parent window is the normal parent as returned by\n gdk_window_get_parent() for normal windows, and the window's\n embedder as returned by gdk_offscreen_window_get_embedder() for\n offscreen windows.\n For normal windows, calling this function is equivalent to adding\n the return values of gdk_window_get_position() to the child coordinates.\n For offscreen windows however (which can be arbitrarily transformed),\n this function calls the GdkWindow::to-embedder: signal to translate\n the coordinates.\n You should always use this function when writing generic code that\n walks up a window hierarchy.\n See also: gdk_window_coords_from_parent()\n Since 2.22\n Params:\n x = X coordinate in child's coordinate system\n y = Y coordinate in child's coordinate system\n parentX = return location for X coordinate\n in parent's coordinate system, or NULL. [out][allow-none]\n parentY = return location for Y coordinate\n in parent's coordinate system, or NULL. [out][allow-none]\n\t \n",
"line" : 2055}
,
{
"name" : "getPointer",
"kind" : "function",
"protection" : "public",
"type" : "Window(out int x, out int y, out GdkModifierType mask)",
"comment" : "\n Obtains the current pointer position and modifier state.\n The position is given in coordinates relative to the upper left\n corner of window.\n Params:\n x = return location for X coordinate of pointer or NULL to not\n  return the X coordinate. [out][allow-none]\n y = return location for Y coordinate of pointer or NULL to not\n  return the Y coordinate. [out][allow-none]\n mask = return location for modifier mask or NULL to not return the\n  modifier mask. [out][allow-none]\n Returns: the window containing the pointer (as with gdk_window_at_pointer()), or NULL if the window containing the pointer isn't known to GDK. [transfer none]\n\t \n",
"line" : 2074}
,
{
"name" : "getParent",
"kind" : "function",
"protection" : "public",
"type" : "Window()",
"comment" : "\n Obtains the parent of window, as known to GDK. Does not query the\n X server; thus this returns the parent as passed to gdk_window_new(),\n not the actual parent. This should never matter unless you're using\n Xlib calls mixed with GDK calls on the X11 platform. It may also\n matter for toplevel windows, because the window manager may choose\n to reparent them.\n Note that you should use gdk_window_get_effective_parent() when\n writing generic code that walks up a window hierarchy, because\n gdk_window_get_parent() will most likely not do what you expect if\n there are offscreen windows in the hierarchy.\n Returns: parent of window\n\t \n",
"line" : 2098}
,
{
"name" : "getEffectiveParent",
"kind" : "function",
"protection" : "public",
"type" : "Window()",
"comment" : "\n Obtains the parent of window, as known to GDK. Works like\n gdk_window_get_parent() for normal windows, but returns the\n window's embedder for offscreen windows.\n See also: gdk_offscreen_window_get_embedder()\n Since 2.22\n Returns: effective parent of window\n\t \n",
"line" : 2117}
,
{
"name" : "getToplevel",
"kind" : "function",
"protection" : "public",
"type" : "Window()",
"comment" : "\n Gets the toplevel window that's an ancestor of window.\n Any window type but GDK_WINDOW_CHILD is considered a\n toplevel window, as is a GDK_WINDOW_CHILD window that\n has a root window as parent.\n Note that you should use gdk_window_get_effective_toplevel() when\n you want to get to a window's toplevel as seen on screen, because\n gdk_window_get_toplevel() will most likely not do what you expect\n if there are offscreen windows in the hierarchy.\n Returns: the toplevel window containing window\n\t \n",
"line" : 2139}
,
{
"name" : "getEffectiveToplevel",
"kind" : "function",
"protection" : "public",
"type" : "Window()",
"comment" : "\n Gets the toplevel window that's an ancestor of window.\n Works like gdk_window_get_toplevel(), but treats an offscreen window's\n embedder as its parent, using gdk_window_get_effective_parent().\n See also: gdk_offscreen_window_get_embedder()\n Since 2.22\n Returns: the effective toplevel window containing window\n\t \n",
"line" : 2158}
,
{
"name" : "getChildren",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Gets the list of children of window known to GDK.\n This function only returns children created via GDK,\n so for example it's useless when used with the root window;\n it only returns windows an application created itself.\n The returned list must be freed, but the elements in the\n list need not be.\n Returns: list of child windows inside window. [transfer container][element-type GdkWindow]\n\t \n",
"line" : 2178}
,
{
"name" : "peekChildren",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Like gdk_window_get_children(), but does not copy the list of\n children, so the list does not need to be freed.\n Returns: a reference to the list of child windows in window. [transfer none][element-type GdkWindow]\n\t \n",
"line" : 2194}
,
{
"name" : "getEvents",
"kind" : "function",
"protection" : "public",
"type" : "GdkEventMask()",
"comment" : "\n Gets the event mask for window. See gdk_window_set_events().\n Returns: event mask for window\n\t \n",
"line" : 2209}
,
{
"name" : "setEvents",
"kind" : "function",
"protection" : "public",
"type" : "void(GdkEventMask eventMask)",
"comment" : "\n The event mask for a window determines which events will be reported\n for that window. For example, an event mask including GDK_BUTTON_PRESS_MASK\n means the window should report button press events. The event mask\n is the bitwise OR of values from the GdkEventMask enumeration.\n Params:\n eventMask = event mask for window\n\t \n",
"line" : 2223}
,
{
"name" : "setIcon",
"kind" : "function",
"protection" : "public",
"type" : "void(Window iconWindow, Pixmap pixmap, Bitmap mask)",
"comment" : "\n Sets the icon of window as a pixmap or window. If using GTK+, investigate\n gtk_window_set_default_icon_list() first, and then gtk_window_set_icon_list()\n and gtk_window_set_icon(). If those don't meet your needs, look at\n gdk_window_set_icon_list(). Only if all those are too high-level do you\n want to fall back to gdk_window_set_icon().\n Params:\n iconWindow = a GdkWindow to use for the icon, or NULL to unset\n pixmap = a GdkPixmap to use as the icon, or NULL to unset\n mask = a 1-bit pixmap (GdkBitmap) to use as mask for pixmap, or NULL to have none\n\t \n",
"line" : 2240}
,
{
"name" : "setIconName",
"kind" : "function",
"protection" : "public",
"type" : "void(string name)",
"comment" : "\n Windows may have a name used while minimized, distinct from the\n name they display in their titlebar. Most of the time this is a bad\n idea from a user interface standpoint. But you can set such a name\n with this function, if you like.\n After calling this with a non-NULL name, calls to gdk_window_set_title()\n will not update the icon title.\n Using NULL for name unsets the icon title; further calls to\n gdk_window_set_title() will again update the icon title as well.\n Params:\n name = name of window while iconified (minimized)\n\t \n",
"line" : 2258}
,
{
"name" : "setTransientFor",
"kind" : "function",
"protection" : "public",
"type" : "void(Window parent)",
"comment" : "\n Indicates to the window manager that window is a transient dialog\n associated with the application window parent. This allows the\n window manager to do things like center window on parent and\n keep window above parent.\n See gtk_window_set_transient_for() if you're using GtkWindow or\n GtkDialog.\n Params:\n parent = another toplevel GdkWindow\n\t \n",
"line" : 2274}
,
{
"name" : "setRole",
"kind" : "function",
"protection" : "public",
"type" : "void(string role)",
"comment" : "\n When using GTK+, typically you should use gtk_window_set_role() instead\n of this low-level function.\n The window manager and session manager use a window's role to\n distinguish it from other kinds of window in the same application.\n When an application is restarted after being saved in a previous\n session, all windows with the same title and role are treated as\n interchangeable. So if you have two windows with the same title\n that should be distinguished for session management purposes, you\n should set the role on those windows. It doesn't matter what string\n you use for the role, as long as you have a different role for each\n non-interchangeable kind of window.\n Params:\n role = a string indicating its role\n\t \n",
"line" : 2295}
,
{
"name" : "setStartupId",
"kind" : "function",
"protection" : "public",
"type" : "void(string startupId)",
"comment" : "\n When using GTK+, typically you should use gtk_window_set_startup_id()\n instead of this low-level function.\n Since 2.12\n Params:\n startupId = a string with startup-notification identifier\n\t \n",
"line" : 2308}
,
{
"name" : "setGroup",
"kind" : "function",
"protection" : "public",
"type" : "void(Window leader)",
"comment" : "\n Sets the group leader window for window. By default,\n GDK sets the group leader for all toplevel windows\n to a global window implicitly created by GDK. With this function\n you can override this default.\n The group leader window allows the window manager to distinguish\n all windows that belong to a single application. It may for example\n allow users to minimize\/unminimize all windows belonging to an\n application at once. You should only set a non-default group window\n if your application pretends to be multiple applications.\n Params:\n leader = group leader window, or NULL to restore the default group leader window\n\t \n",
"line" : 2327}
,
{
"name" : "getGroup",
"kind" : "function",
"protection" : "public",
"type" : "Window()",
"comment" : "\n Returns the group leader window for window. See gdk_window_set_group().\n Since 2.4\n Returns: the group leader window for window\n\t \n",
"line" : 2338}
,
{
"name" : "setDecorations",
"kind" : "function",
"protection" : "public",
"type" : "void(GdkWMDecoration decorations)",
"comment" : "\n \"Decorations\" are the features the window manager adds to a toplevel GdkWindow.\n This function sets the traditional Motif window manager hints that tell the\n window manager which decorations you would like your window to have.\n Usually you should use gtk_window_set_decorated() on a GtkWindow instead of\n using the GDK function directly.\n The decorations argument is the logical OR of the fields in\n the GdkWMDecoration enumeration. If GDK_DECOR_ALL is included in the\n mask, the other bits indicate which decorations should be turned off.\n If GDK_DECOR_ALL is not included, then the other bits indicate\n which decorations should be turned on.\n Most window managers honor a decorations hint of 0 to disable all decorations,\n but very few honor all possible combinations of bits.\n Params:\n decorations = decoration hint mask\n\t \n",
"line" : 2365}
,
{
"name" : "getDecorations",
"kind" : "function",
"protection" : "public",
"type" : "int(out GdkWMDecoration decorations)",
"comment" : "\n Returns the decorations set on the GdkWindow with gdk_window_set_decorations\n Params:\n decorations = The window decorations will be written here\n Returns: TRUE if the window has decorations set, FALSE otherwise.\n\t \n",
"line" : 2377}
,
{
"name" : "setFunctions",
"kind" : "function",
"protection" : "public",
"type" : "void(GdkWMFunction functions)",
"comment" : "\n Sets hints about the window management functions to make available\n via buttons on the window frame.\n On the X backend, this function sets the traditional Motif window\n manager hint for this purpose. However, few window managers do\n anything reliable or interesting with this hint. Many ignore it\n entirely.\n The functions argument is the logical OR of values from the\n GdkWMFunction enumeration. If the bitmask includes GDK_FUNC_ALL,\n then the other bits indicate which functions to disable; if\n it doesn't include GDK_FUNC_ALL, it indicates which functions to\n enable.\n Params:\n functions = bitmask of operations to allow on window\n\t \n",
"line" : 2398}
,
{
"name" : "getToplevels",
"kind" : "function",
"protection" : "public",
"type" : "ListG()",
"comment" : "\n Warning\n gdk_window_get_toplevels has been deprecated since version 2.16 and should not be used in newly-written code. Use gdk_screen_get_toplevel_windows() instead.\n Obtains a list of all toplevel windows known to GDK on the default\n screen (see gdk_screen_get_toplevel_windows()).\n A toplevel window is a child of the root window (see\n gdk_get_default_root_window()).\n The returned list should be freed with g_list_free(), but\n its elements need not be freed.\n Returns: list of toplevel windows, free with g_list_free()\n\t \n",
"line" : 2415}
,
{
"name" : "getDefaultRootWindow",
"kind" : "function",
"protection" : "public",
"type" : "Window()",
"comment" : "\n Obtains the root window (parent all other windows are inside)\n for the default display and screen.\n Returns: the default root window\n\t \n",
"line" : 2431}
,
{
"name" : "setPointerHooks",
"kind" : "function",
"protection" : "public",
"type" : "GdkPointerHooks*(GdkPointerHooks* newHooks)",
"comment" : "\n This function allows for hooking into the operation\n of getting the current location of the pointer. This\n is only useful for such low-level tools as an\n event recorder. Applications should never have any\n reason to use this facility.\n This function is not multihead safe. For multihead operation,\n see gdk_display_set_pointer_hooks().\n Params:\n newHooks = a table of pointers to functions for getting\n  quantities related to the current pointer position,\n  or NULL to restore the default table.\n Returns: the previous pointer hook table\n\t \n",
"line" : 2456}
,
{
"name" : "offscreenWindowGetPixmap",
"kind" : "function",
"protection" : "public",
"type" : "Pixmap()",
"comment" : "\n Gets the offscreen pixmap that an offscreen window renders into.\n If you need to keep this around over window resizes, you need to\n add a reference to it.\n Since 2.18\n Returns: The offscreen pixmap, or NULL if not offscreen\n\t \n",
"line" : 2469}
,
{
"name" : "offscreenWindowSetEmbedder",
"kind" : "function",
"protection" : "public",
"type" : "void(Window embedder)",
"comment" : "\n Sets window to be embedded in embedder.\n To fully embed an offscreen window, in addition to calling this\n function, it is also necessary to handle the \"pick-embedded-child\"\n signal on the embedder and the \"to-embedder\" and\n \"from-embedder\" signals on window.\n Since 2.18\n Params:\n embedder = the GdkWindow that window gets embedded in\n\t \n",
"line" : 2490}
,
{
"name" : "offscreenWindowGetEmbedder",
"kind" : "function",
"protection" : "public",
"type" : "Window()",
"comment" : "\n Gets the window that window is embedded in.\n Since 2.18\n Returns: the embedding GdkWindow, or NULL if window is not an embedded offscreen window\n\t \n",
"line" : 2501}
,
{
"name" : "geometryChanged",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n This function informs GDK that the geometry of an embedded\n offscreen window has changed. This is necessary for GDK to keep\n track of which offscreen window the pointer is in.\n Since 2.18\n\t \n",
"line" : 2518}
,
{
"name" : "redirectToDrawable",
"kind" : "function",
"protection" : "public",
"type" : "void(Drawable drawable, int srcX, int srcY, int destX, int destY, int width, int height)",
"comment" : "\n Redirects drawing into window so that drawing to the\n window in the rectangle specified by src_x, src_y,\n width and height is also drawn into drawable at\n dest_x, dest_y.\n Only drawing between gdk_window_begin_paint_region() or\n gdk_window_begin_paint_rect() and gdk_window_end_paint() is\n redirected.\n Redirection is active until gdk_window_remove_redirection()\n is called.\n Since 2.14\n Params:\n drawable = a GdkDrawable\n srcX = x position in window\n srcY = y position in window\n destX = x position in drawable\n destY = y position in drawable\n width = width of redirection, or -1 to use the width of window\n height = height of redirection or -1 to use the height of window\n\t \n",
"line" : 2544}
,
{
"name" : "removeRedirection",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Removes any active redirection started by\n gdk_window_redirect_to_drawable().\n Since 2.14\n\t \n",
"line" : 2555}
]
}
]
}
,
{
"name" : "gdk.X11",
"kind" : "module",
"file" : "\/home\/anthony\/apps\/gtkd\/src\/gdk\/X11.d",
"members" : [
{
"name" : "X11",
"kind" : "class",
"protection" : "public",
"comment" : "\n Description\n \n",
"line" : 128,
"base" : "Object",
"members" : [
{
"name" : "gdkWindowForeignNew",
"kind" : "function",
"protection" : "public",
"type" : "Window(void* anid)",
"comment" : "\n\t \n\n Wraps a native window for the default display in a GdkWindow.\n This may fail if the window has been destroyed.\n For example in the X backend, a native window handle is an Xlib\n XID.\n Params:\n anid = a native window handle.\n Returns: the newly-created GdkWindow wrapper for the native window or NULL if the window has been destroyed.\n\t \n",
"line" : 142}
,
{
"name" : "gdkXidTableLookup",
"kind" : "function",
"protection" : "public",
"type" : "void*(uint xid)",
"comment" : "\n Returns the Gdk object associated with the given X id for the default\n display.\n Params:\n xid = an X id.\n Returns: the associated Gdk object, which may be a GdkPixmap, a GdkWindow or a GdkFont or NULL if no object is associated with the X id.\n\t \n",
"line" : 160}
,
{
"name" : "gdkWindowLookup",
"kind" : "function",
"protection" : "public",
"type" : "Window(void* anid)",
"comment" : "\n Looks up the GdkWindow that wraps the given native window handle.\n For example in the X backend, a native window handle is an Xlib\n XID.\n Params:\n anid = a native window handle.\n Returns: the GdkWindow wrapper for the native window, or NULL if there is none.\n\t \n",
"line" : 174}
,
{
"name" : "gdkPixmapLookup",
"kind" : "function",
"protection" : "public",
"type" : "Pixmap(void* anid)",
"comment" : "\n Looks up the GdkPixmap that wraps the given native pixmap handle.\n For example in the X backend, a native pixmap handle is an Xlib\n XID.\n Params:\n anid = a native pixmap handle.\n Returns: the GdkPixmap wrapper for the native pixmap, or NULL if there is none.\n\t \n",
"line" : 193}
,
{
"name" : "getServerTime",
"kind" : "function",
"protection" : "public",
"type" : "uint(Window window)",
"comment" : "\n Routine to get the current X server time stamp.\n Params:\n window = a GdkWindow, used for communication with the server.\n  The window must have GDK_PROPERTY_CHANGE_MASK in its\n  events mask or a hang will result.\n Returns: the time stamp.\n\t \n",
"line" : 212}
,
{
"name" : "screenGetMonitorOutput",
"kind" : "function",
"protection" : "public",
"type" : "uint(GdkScreen* screen, int monitorNum)",
"comment" : "\n Gets the XID of the specified output\/monitor.\n If the X server does not support version 1.2 of the RANDR\n extension, 0 is returned.\n Since 2.14\n Params:\n screen = a GdkScreen\n monitorNum = number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)\n Returns: the XID of the monitor\n\t \n",
"line" : 228}
,
{
"name" : "windowSetUserTime",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window, uint timestamp)",
"comment" : "\n The application can use this call to update the _NET_WM_USER_TIME\n property on a toplevel window. This property stores an Xserver\n time which represents the time of the last user input event\n received for this window. This property may be used by the window\n manager to alter the focus, stacking, and\/or placement behavior of\n windows when they are mapped depending on whether the new window\n was created by a user action or is a \"pop-up\" window activated by a\n timer or some other event.\n Note that this property is automatically updated by GDK, so this\n function should only be used by applications which handle input\n events bypassing GDK.\n Since 2.6\n Params:\n window = A toplevel GdkWindow\n timestamp = An XServer timestamp to which the property should be set\n\t \n",
"line" : 251}
,
{
"name" : "windowMoveToCurrentDesktop",
"kind" : "function",
"protection" : "public",
"type" : "void(Window window)",
"comment" : "\n Moves the window to the correct workspace when running under a\n window manager that supports multiple workspaces, as described\n in the Extended\n Window Manager Hints. Will not do anything if the\n window is already on all workspaces.\n Since 2.8\n Params:\n window = a GdkWindow\n\t \n",
"line" : 267}
,
{
"name" : "displayGetStartupNotificationId",
"kind" : "function",
"protection" : "public",
"type" : "string(Display display)",
"comment" : "\n Gets the startup notification ID for a display.\n Since 2.12\n Params:\n display = a GdkDisplay\n Returns: the startup notification ID for display\n\t \n",
"line" : 280}
,
{
"name" : "drawableGetXid",
"kind" : "function",
"protection" : "public",
"type" : "uint(Drawable drawable)",
"comment" : "\n Returns the X resource (window or pixmap) belonging to a GdkDrawable.\n Params:\n drawable = a GdkDrawable.\n Returns: the ID of drawable's X resource.\n\t \n",
"line" : 292}
,
{
"name" : "fontGetName",
"kind" : "function",
"protection" : "public",
"type" : "string(Font font)",
"comment" : "\n Warning\n gdk_x11_font_get_name is deprecated and should not be used in newly-written code.\n Return the X Logical Font Description (for font->type == GDK_FONT_FONT)\n or comma separated list of XLFDs (for font->type == GDK_FONT_FONTSET)\n that was used to load the font. If the same font was loaded\n via multiple names, which name is returned is undefined.\n Params:\n font = a GdkFont.\n Returns: the name of the font. This string is owned by GDK and must not be modified or freed.\n\t \n",
"line" : 309}
,
{
"name" : "fontGetXfont",
"kind" : "function",
"protection" : "public",
"type" : "void*(Font font)",
"comment" : "\n Warning\n gdk_x11_font_get_xfont is deprecated and should not be used in newly-written code.\n Returns the X font belonging to a GdkFont.\n Params:\n font = a GdkFont.\n Returns: an Xlib XFontStruct* or an XFontSet.\n\t \n",
"line" : 323}
,
{
"name" : "getDefaultScreen",
"kind" : "function",
"protection" : "public",
"type" : "int()",
"comment" : "\n Gets the default GTK+ screen number.\n Returns: returns the screen number specified by the --display command line option or the DISPLAY environment variable when gdk_init() calls XOpenDisplay().\n\t \n",
"line" : 333}
,
{
"name" : "grabServer",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Call gdk_x11_display_grab() on the default display.\n To ungrab the server again, use gdk_x11_ungrab_server().\n gdk_x11_grab_server()\/gdk_x11_ungrab_server() calls can be nested.\n\t \n",
"line" : 344}
,
{
"name" : "ungrabServer",
"kind" : "function",
"protection" : "public",
"type" : "void()",
"comment" : "\n Ungrab the default display after it has been grabbed with\n gdk_x11_grab_server().\n\t \n",
"line" : 354}
]
}
]
}
]
